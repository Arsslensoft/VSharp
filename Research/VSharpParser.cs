// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "E:\Projects\VSharp\Research\\VSharpParser.jay"
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using VSC.AST;
using VSC.Base;
using VSC.Context;
using VSC.TypeSystem;
using VSC.TypeSystem.Implementation;
namespace VSC
{
	/// <summary>
	///   V# Parser
	/// </summary>
	public class VSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | DefaultValue,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
	    TypeContainer current_container;
		TypeDeclaration current_type;
		SymbolKind type_parameter_symbol_kind = SymbolKind.TypeDefinition;
		FieldDeclaration current_field;
	/*	PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		*/
	
		// for method type parameter
		bool is_inheritance_impl = false;
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		//BlockVariable current_variable;

	//	Delegate   current_delegate;
		
		//AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
	//	public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		//public Undo undo;

		bool? interactive_async;
		
		//Stack<Linq.QueryBlock> linq_clause_blocks;


		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		//LocationsBag lbag;
	//	List<Tuple<Modifiers, Location>> mod_locations;
	//	Location parameterModifierLocation, savedLocation, savedEventAssignLocation;
	//	Location savedAttrParenOpenLocation, savedAttrParenCloseLocation, savedOperatorLocation;
	//	Stack<List<Location>> locationListStack = new Stack<List<Location>> (); // used for type parameters
		Stack<Location> opt_intoStack = new Stack<Location> ();

		bool HadAttributeParens;
		List<Location> attributeArgumentCommas = new List<Location> ();
		List<Location> parameterListCommas = new List<Location> ();
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 7;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_import_directives",
    "outer_declaration : opt_import_directives namespace_or_type_declarations opt_attributes",
    "outer_declaration : opt_import_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "import_directives : import_directive",
    "import_directives : import_directives import_directive",
    "import_directive : import_package",
    "import_package : USING namespace_or_type_expr SEMICOLON",
    "import_package : USING IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
    "import_package : USING error",
    "opt_static :",
    "opt_static : STATIC",
    "$$2 :",
    "$$3 :",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_import_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon_error",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name",
    "opt_semicolon_error :",
    "opt_semicolon_error : SEMICOLON",
    "opt_semicolon_error : error",
    "namespace_name : IDENTIFIER",
    "namespace_name : namespace_name DOT IDENTIFIER",
    "namespace_name : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "opt_import_directives :",
    "opt_import_directives : import_directives",
    "opt_namespace_or_type_declarations :",
    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
    "namespace_or_type_declarations : namespace_or_type_declaration",
    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
    "namespace_or_type_declaration : type_declaration",
    "namespace_or_type_declaration : namespace_declaration",
    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$4 :",
    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
    "$$5 :",
    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : IDENTIFIER error",
    "attribute_section_cont : error",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$6 :",
    "attribute : attribute_name $$6 opt_attribute_arguments",
    "attribute_name : namespace_or_type_expr",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "positional_or_named_argument : error",
    "$$7 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
    "named_argument_expr : expression_or_error",
    "named_argument_expr : declaration_expression",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : primary_constructor_body",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : attributes_without_members",
    "class_member_declaration : incomplete_member",
    "class_member_declaration : error",
    "$$8 :",
    "primary_constructor_body : OPEN_BRACE $$8 opt_statement_list block_end",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "$$13 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$9 type_declaration_name $$10 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$11 OPEN_BRACE $$12 opt_class_member_declarations CLOSE_BRACE $$13 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$14 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$14 constant_initializer opt_constant_declarators SEMICOLON",
    "constant_declaration : opt_attributes opt_modifiers CONST type error",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$15 :",
    "constant_initializer : ASSIGN $$15 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$16 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$16 opt_field_initializer opt_field_declarators SEMICOLON",
    "opt_field_initializer :",
    "$$17 :",
    "opt_field_initializer : ASSIGN $$17 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$18 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$19 :",
    "method_declaration : method_header $$19 method_body_expression_block",
    "$$20 :",
    "$$21 :",
    "$$22 :",
    "method_header : opt_attributes opt_modifiers member_type $$20 method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
    "method_body_expression_block : method_body",
    "method_body_expression_block : expression_block",
    "method_body : block",
    "method_body : SEMICOLON",
    "$$23 :",
    "expression_block : ARROW $$23 expression SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : attribute_sections error",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$24 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$24 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "arglist_modifier : ARGLIST",
    "$$25 :",
    "$$26 :",
    "$$27 :",
    "$$28 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$25 OPEN_BRACE $$26 accessor_declarations $$27 CLOSE_BRACE $$28 opt_property_initializer",
    "$$29 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$29 expression_block",
    "opt_property_initializer :",
    "$$30 :",
    "opt_property_initializer : ASSIGN $$30 property_initializer SEMICOLON",
    "property_initializer : expression",
    "property_initializer : array_initializer",
    "$$31 :",
    "$$32 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$31 opt_formal_parameter_list CLOSE_BRACKET $$32 indexer_body",
    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
    "indexer_body : expression_block",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$33 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$33 accessor_body",
    "$$34 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$34 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$35 :",
    "$$36 :",
    "$$37 :",
    "$$38 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$35 type_declaration_name $$36 opt_class_base opt_type_parameter_constraints_clauses $$37 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$38 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$39 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$39 method_body_expression_block",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$40 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "overloadable_operator : IS",
    "$$41 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
    "$$42 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$43 :",
    "$$44 :",
    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$43 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$44 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$45 :",
    "constructor_initializer : COLON BASE OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
    "$$46 :",
    "constructor_initializer : COLON THIS OPEN_PARENS $$46 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "constructor_initializer : error",
    "$$47 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$47 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
    "$$48 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$48 opt_event_initializer opt_event_declarators SEMICOLON",
    "$$49 :",
    "$$50 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$49 event_accessor_declarations $$50 CLOSE_BRACE",
    "event_declaration : opt_attributes opt_modifiers EVENT type error",
    "opt_event_initializer :",
    "$$51 :",
    "opt_event_initializer : ASSIGN $$51 event_variable_initializer",
    "opt_event_declarators :",
    "opt_event_declarators : event_declarators",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_declarator : COMMA IDENTIFIER",
    "$$52 :",
    "event_declarator : COMMA IDENTIFIER ASSIGN $$52 event_variable_initializer",
    "$$53 :",
    "event_variable_initializer : $$53 variable_initializer",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$54 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$54 event_accessor_block",
    "$$55 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$55 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "attributes_without_members : attribute_sections CLOSE_BRACE",
    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
    "$$56 :",
    "$$57 :",
    "$$58 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$56 OPEN_BRACE $$57 opt_enum_member_declarations $$58 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$59 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$59 ASSIGN constant_expression",
    "enum_member_declaration : opt_attributes IDENTIFIER error",
    "enum_member_declaration : attributes_without_members",
    "$$60 :",
    "$$61 :",
    "$$62 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$60 opt_formal_parameter_list CLOSE_PARENS $$61 opt_type_parameter_constraints_clauses $$62 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_expr : member_name",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
    "member_name : simple_name_expr",
    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
    "member_name : namespace_or_type_expr DOT IDENTIFIER generic_dimension",
    "simple_name_expr : IDENTIFIER opt_type_argument_list",
    "simple_name_expr : IDENTIFIER generic_dimension",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$63 :",
    "type_declaration_name : IDENTIFIER $$63 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : void_invalid",
    "simple_type : type_expression",
    "simple_type : void_invalid",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_expr opt_nullable",
    "type_expression : namespace_or_type_expr pointer_stars",
    "type_expression : builtin_type_expression",
    "void_invalid : VOID",
    "builtin_type_expression : builtin_types opt_nullable",
    "builtin_type_expression : builtin_types pointer_stars",
    "builtin_type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : type_name_expression",
    "primary_expression : literal",
    "primary_expression : array_creation_expression",
    "primary_expression : parenthesized_expression",
    "primary_expression : default_value_expression",
    "primary_expression : invocation_expression",
    "primary_expression : element_access",
    "primary_expression : this_access",
    "primary_expression : base_access",
    "primary_expression : post_increment_expression",
    "primary_expression : post_decrement_expression",
    "primary_expression : object_or_delegate_creation_expression",
    "primary_expression : anonymous_type_expression",
    "primary_expression : typeof_expression",
    "primary_expression : sizeof_expression",
    "primary_expression : checked_expression",
    "primary_expression : unchecked_expression",
    "primary_expression : pointer_member_access",
    "primary_expression : anonymous_method_expression",
    "primary_expression : undocumented_expressions",
    "primary_expression : interpolated_string",
    "type_name_expression : simple_name_expr",
    "type_name_expression : IDENTIFIER GENERATE_COMPLETION",
    "type_name_expression : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "interpolated_string : INTERPOLATED_STRING interpolations INTERPOLATED_STRING_END",
    "interpolated_string : INTERPOLATED_STRING_END",
    "interpolations : interpolation",
    "interpolations : interpolations INTERPOLATED_STRING interpolation",
    "interpolation : expression",
    "interpolation : expression COMMA expression",
    "$$64 :",
    "interpolation : expression COLON $$64 LITERAL",
    "$$65 :",
    "interpolation : expression COMMA expression COLON $$65 LITERAL",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
    "member_access : BASE DOT identifier_inside_body opt_type_argument_list",
    "member_access : AWAIT DOT identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
    "member_access : primary_expression DOT GENERATE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
    "member_access : builtin_types DOT GENERATE_COMPLETION",
    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "invocation_expression : primary_expression open_parens_any argument_list error",
    "invocation_expression : primary_expression open_parens_any error",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : AWAIT ASSIGN initializer_value",
    "member_initializer : GENERATE_COMPLETION",
    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET ASSIGN initializer_value",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA error",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : REF declaration_expression",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : OUT declaration_expression",
    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
    "declaration_expression : variable_type identifier_inside_body",
    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
    "element_access : primary_expression OPEN_BRACKET_EXPR error",
    "expression_list : expression_or_error",
    "expression_list : expression_list COMMA expression_or_error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "base_access : BASE OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$66 :",
    "new_expr_type : $$66 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_expression : NEW OPEN_BRACE GENERATE_COMPLETION",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameters : COMPLETE_COMPLETION",
    "anonymous_type_parameters : anonymous_type_parameter COMPLETE_COMPLETION",
    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
    "anonymous_type_parameter : identifier_inside_body",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : error",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "sizeof_expression : SIZEOF open_parens_any type error",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "checked_expression : CHECKED error",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED error",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$67 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$67 block",
    "$$68 :",
    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$68 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$69 :",
    "anonymous_method_signature : OPEN_PARENS $$69 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : AWAIT prefixed_unary_expression",
    "unary_expression : BANG error",
    "unary_expression : TILDE error",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
    "unary_expression : AWAIT error",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "prefixed_unary_expression : PLUS error",
    "prefixed_unary_expression : MINUS error",
    "prefixed_unary_expression : OP_INC error",
    "prefixed_unary_expression : OP_DEC error",
    "prefixed_unary_expression : STAR error",
    "prefixed_unary_expression : BITWISE_AND error",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR error",
    "multiplicative_expression : multiplicative_expression DIV error",
    "multiplicative_expression : multiplicative_expression PERCENT error",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression PLUS error",
    "additive_expression : additive_expression MINUS error",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS pattern_type_expr opt_identifier",
    "additive_expression : additive_expression IS pattern_expr",
    "additive_expression : additive_expression AS error",
    "additive_expression : additive_expression IS error",
    "additive_expression : AWAIT IS type",
    "additive_expression : AWAIT AS type",
    "pattern_type_expr : variable_type",
    "pattern_expr : literal",
    "pattern_expr : PLUS prefixed_unary_expression",
    "pattern_expr : MINUS prefixed_unary_expression",
    "pattern_expr : sizeof_expression",
    "pattern_expr : default_value_expression",
    "pattern_expr : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "pattern_expr : STAR",
    "pattern_expr : pattern_expr_invocation",
    "pattern_expr : pattern_property",
    "pattern_expr_invocation : type_name_expression OPEN_PARENS opt_pattern_list CLOSE_PARENS",
    "pattern_property : type_name_expression OPEN_BRACE pattern_property_list CLOSE_BRACE",
    "pattern_property_list : pattern_property_entry",
    "pattern_property_list : pattern_property_list COMMA pattern_property_entry",
    "pattern_property_entry : identifier_inside_body IS pattern",
    "pattern : pattern_expr",
    "pattern : pattern_type_expr opt_identifier",
    "opt_pattern_list :",
    "opt_pattern_list : pattern_list",
    "pattern_list : pattern_argument",
    "pattern_list : pattern_list COMMA pattern_argument",
    "pattern_argument : pattern",
    "pattern_argument : IDENTIFIER COLON pattern",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT error",
    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "relational_expression : relational_expression OP_LT error",
    "relational_expression : relational_expression OP_GT error",
    "relational_expression : relational_expression OP_LE error",
    "relational_expression : relational_expression OP_GE error",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "equality_expression : equality_expression OP_EQ error",
    "equality_expression : equality_expression OP_NE error",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "and_expression : and_expression BITWISE_AND error",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET error",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND error",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR error",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "conditional_expression : null_coalescing_expression INTERR expression error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON CLOSE_BRACE",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "lambda_parameter : AWAIT",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$70 :",
    "lambda_expression_body : $$70 expression",
    "lambda_expression_body : block",
    "lambda_expression_body : error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$71 :",
    "lambda_expression : IDENTIFIER ARROW $$71 lambda_expression_body",
    "$$72 :",
    "lambda_expression : AWAIT ARROW $$72 lambda_expression_body",
    "$$73 :",
    "lambda_expression : ASYNC identifier_inside_body ARROW $$73 lambda_expression_body",
    "$$74 :",
    "$$75 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$74 opt_lambda_parameter_list CLOSE_PARENS ARROW $$75 lambda_expression_body",
    "$$76 :",
    "$$77 :",
    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$76 opt_lambda_parameter_list CLOSE_PARENS ARROW $$77 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : ARGLIST",
    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
    "constant_expression : expression",
    "boolean_expression : expression",
    "opt_primary_parameters :",
    "opt_primary_parameters : primary_parameters",
    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "opt_primary_parameters_with_class_base :",
    "opt_primary_parameters_with_class_base : class_base",
    "opt_primary_parameters_with_class_base : primary_parameters",
    "opt_primary_parameters_with_class_base : primary_parameters class_base",
    "$$78 :",
    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$78 opt_argument_list CLOSE_PARENS",
    "$$79 :",
    "$$80 :",
    "$$81 :",
    "$$82 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$79 type_declaration_name $$80 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$81 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$82 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "modifier : VOLATILE",
    "modifier : UNSAFE",
    "modifier : ASYNC",
    "opt_class_base :",
    "opt_class_base : class_base",
    "class_base : COLON type_list",
    "class_base : COLON type_list error",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "$$83 :",
    "block : OPEN_BRACE $$83 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$84 :",
    "block_prepared : OPEN_BRACE $$84 opt_statement_list CLOSE_BRACE",
    "block_prepared : CLOSE_BRACE",
    "$$85 :",
    "block_prepared_strict : OPEN_BRACE $$85 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : IDENTIFIER error",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$86 :",
    "labeled_statement : identifier_inside_body COLON $$86 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : type_name_expression opt_nullable",
    "variable_type_simple : type_name_expression pointer_stars",
    "variable_type_simple : builtin_type_expression",
    "variable_type_simple : void_invalid",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "identifier_inside_body : AWAIT",
    "$$87 :",
    "block_variable_declaration : variable_type identifier_inside_body $$87 opt_local_variable_initializer opt_variable_declarators semicolon_or_handle_error_close_brace",
    "$$88 :",
    "block_variable_declaration : CONST variable_type identifier_inside_body $$88 const_variable_initializer opt_const_declarators SEMICOLON",
    "semicolon_or_handle_error_close_brace : SEMICOLON",
    "semicolon_or_handle_error_close_brace : CLOSE_BRACE",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "expression_statement : statement_expression CLOSE_BRACE",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "if_statement : IF open_parens_any boolean_expression error",
    "$$89 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$89 opt_switch_sections CLOSE_BRACE",
    "switch_statement : SWITCH open_parens_any expression error",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "switch_section : switch_labels statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : CASE constant_expression error",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "do_statement : DO embedded_statement error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
    "$$90 :",
    "for_statement : FOR open_parens_any $$90 for_statement_cont",
    "$$91 :",
    "for_statement_cont : opt_for_initializer SEMICOLON $$91 for_statement_condition",
    "for_statement_cont : opt_for_initializer CLOSE_PARENS",
    "$$92 :",
    "for_statement_condition : opt_for_condition SEMICOLON $$92 for_statement_end",
    "for_statement_condition : boolean_expression CLOSE_PARENS",
    "for_statement_end : opt_for_iterator CLOSE_PARENS embedded_statement",
    "for_statement_end : error",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$93 :",
    "for_initializer : variable_type identifier_inside_body $$93 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type error",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "$$94 :",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$94 embedded_statement",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "foreach_statement : FOREACH open_parens_any type error",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "continue_statement : CONTINUE error",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "return_statement : RETURN expression error",
    "return_statement : RETURN error",
    "throw_statement : THROW opt_expression SEMICOLON",
    "throw_statement : THROW expression error",
    "throw_statement : THROW error",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body RETURN expression error",
    "yield_statement : identifier_inside_body BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "catch_clause : CATCH opt_catch_filter block",
    "$$95 :",
    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$95 opt_catch_filter_or_error",
    "catch_clause : CATCH open_parens_any error",
    "opt_catch_filter_or_error : opt_catch_filter block_prepared",
    "opt_catch_filter_or_error : error",
    "opt_catch_filter :",
    "$$96 :",
    "opt_catch_filter : WHEN $$96 open_parens_any expression CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$97 :",
    "unsafe_statement : UNSAFE $$97 block",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
    "lock_statement : LOCK open_parens_any expression error",
    "$$98 :",
    "$$99 :",
    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$98 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$99 embedded_statement",
    "$$100 :",
    "$$101 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$100 using_initialization CLOSE_PARENS $$101 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_statement : USING open_parens_any expression error",
    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
    "using_initialization : error",
    "using_or_fixed_variable_initializer :",
    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER import_directives opt_COMPLETE_COMPLETION",
    "$$102 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$102 interactive_statement_list opt_COMPLETE_COMPLETION",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
    "interactive_compilation_unit : opt_import_directives",
    "interactive_compilation_unit : opt_import_directives namespace_or_type_declarations",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : VOID opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT THIS",
    "$$103 :",
    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$103 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$104 :",
    "opt_doc_method_sig : OPEN_PARENS $$104 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT",
    "INTERR_OPERATOR","WHEN","INTERPOLATED_STRING",
    "INTERPOLATED_STRING_END","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 383 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 386 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
#line 393 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			VSharpAttributes attrs = (VSharpAttributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
			"Assembly and module attributes must precede all other elements except import clauses");

		current_namespace.UnattachedAttributes = attrs;
		}
	  }
  break;
case 7:
#line 403 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_namespace.UnattachedAttributes = (VSharpAttributes) yyVals[1+yyTop];
	  }
  break;
case 8:
#line 407 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
		Error_SyntaxError (yyToken);
	  }
  break;
case 13:
#line 427 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 14:
#line 435 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Import uc = new ImportPackage ((TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddImport (uc);
	  }
  break;
case 15:
#line 440 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
		 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
	}

		var un = new ImportPackageAlias (new AliasIdentifier (lt.Value, lt.Location), (TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddImport (un);		
	  }
  break;
case 16:
#line 451 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }
  break;
case 19:
#line 469 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		VSharpAttributes attrs = (VSharpAttributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
		bool valid_global_attrs = true;
		if ((current_namespace.DeclarationFound || current_namespace != file.RootNamespace)) {
				valid_global_attrs = false;
			} else {
		foreach (var a in attrs.Attrs) {
		    if (a.ExplicitTarget == "assembly")
				continue;
						
				valid_global_attrs = false;
					break;
			}
		}
		
		if (!valid_global_attrs)
			report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
	}
		
		file.AddAttributes (attrs);
		
		var ns = NamespaceContainer.CreateContainers (current_namespace,name,  GetLocation (yyVals[-1+yyTop]));
		current_namespace = ns;
		current_container = ns.DefaultType;
	  }
  break;
case 20:
#line 497 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 21:
#line 502 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	    current_namespace = current_namespace.Parent;
		current_container =current_namespace.DefaultType; 
	  }
  break;
case 22:
#line 507 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

	var name = (MemberName) yyVals[0+yyTop];		
	NamespaceContainer.CreateContainers (current_namespace,name,  GetLocation (yyVals[-1+yyTop]));

	  }
  break;
case 25:
#line 520 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 26:
#line 528 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 27:
#line 533 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 28:
#line 538 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }
  break;
case 39:
#line 572 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

	if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
			report.Error (1527, ds.Location, 
		"Package elements cannot be explicitly declared as private, protected or protected internal");
		}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
		/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.Attributes != null) {
				ds.ConvertGlobalAttributes (ds, file);
			}
		}
	current_namespace.DeclarationFound = true;
	  }
  break;
case 40:
#line 592 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 41:
#line 595 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_namespace.UnattachedAttributes = (VSharpAttributes) yyVals[-1+yyTop];
	report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
	lexer.putback ('}');
	  }
  break;
case 49:
#line 628 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var sect = (List<VSC.AST.VSharpAttribute>) yyVals[0+yyTop];
		yyVal = new VSharpAttributes (sect);
	  }
  break;
case 50:
#line 633 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		VSharpAttributes attrs = yyVals[-1+yyTop] as VSharpAttributes;
		var sect = (List<VSC.AST.VSharpAttribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new VSharpAttributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }
  break;
case 51:
#line 646 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 52:
#line 650 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 53:
#line 658 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }
  break;
case 54:
#line 665 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<VSC.AST.VSharpAttribute> (0);
		else
		yyVal = yyVals[-2+yyTop];
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }
  break;
case 55:
#line 675 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-2+yyTop];	
	  }
  break;
case 56:
#line 679 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<VSC.AST.VSharpAttribute> () {
			new VSC.AST.VSharpAttribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }
  break;
case 57:
#line 690 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }
  break;
case 58:
#line 700 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	
	  }
  break;
case 59:
#line 705 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = "event"; }
  break;
case 60:
#line 706 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = "return";}
  break;
case 61:
#line 711 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new List<VSC.AST.VSharpAttribute> (4) { (VSC.AST.VSharpAttribute) yyVals[0+yyTop] };
	  }
  break;
case 62:
#line 715 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	var attrs = (List<VSC.AST.VSharpAttribute>) yyVals[-2+yyTop];
	if (attrs != null) 
		attrs.Add ((VSC.AST.VSharpAttribute) yyVals[0+yyTop]);


		yyVal = attrs;
	  }
  break;
case 63:
#line 727 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 64:
#line 731 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		
		var tne = (TypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) 
			report.Error (404, tne.Location, "Attributes cannot be generic");
		
		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];

		yyVal = new VSC.AST.VSharpAttribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	
	  }
  break;
case 66:
#line 750 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; HadAttributeParens = false;	  }
  break;
case 67:
#line 752 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		HadAttributeParens = true;
	  }
  break;
case 68:
#line 760 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 69:
#line 762 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }
  break;
case 70:
#line 768 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments a = new Arguments (4);
	a.Add ((Argument) yyVals[0+yyTop]);  
	yyVal = new Arguments [] { null, a };
	  }
  break;
case 71:
#line 774 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
	if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
		o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
	args.Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 72:
#line 789 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 73:
#line 802 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 75:
#line 807 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 76:
#line 815 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 77:
#line 819 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[-1+yyTop]);	  
	  }
  break;
case 78:
#line 828 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {

	/* Avoid boxing in common case (no modifier)*/
	var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }
  break;
case 81:
#line 844 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 82:
#line 846 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 83:
#line 850 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 86:
#line 862 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 87:
#line 867 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 101:
#line 888 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
		GetSymbolName (yyToken));
	    yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 102:
#line 898 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_local_parameters = current_type.PrimaryConstructorParameters;
	if (current_local_parameters == null) {
			report.Error (9010, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 103:
#line 909 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_local_parameters = null;
		var t = current_type as ClassOrStructDeclaration;
	if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (8041, b.StartLocation, "Primary constructor already has a body");
			} else {
			t.PrimaryConstructorBlock = b;
			}
		}
	  }
  break;
case 104:
#line 928 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 105:
#line 932 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new StructDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], GetLocation(yyVals[-2+yyTop])));
	
	  }
  break;
case 106:
#line 941 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

	if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

	if (doc_support)
			current_type.DocComment = Lexer.consume_doc_comment ();

		
		lexer.parsing_modifiers = true;
	  }
  break;
case 107:
#line 958 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 108:
#line 963 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 109:
#line 969 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = pop_current_class ();
	  }
  break;
case 110:
#line 973 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 111:
#line 982 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new ConstantDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }
  break;
case 112:
#line 995 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
		Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.ConstantValue = (IConstantValue) yyVals[-2+yyTop];
		current_field = null;
	  }
  break;
case 113:
#line 1007 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new ConstantDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-4+yyTop]));
	  }
  break;
case 116:
#line 1021 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
	  }
  break;
case 117:
#line 1025 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		
	  }
  break;
case 118:
#line 1032 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  var lt = (LocatedToken) yyVals[-1+yyTop];
	  	current_field = new ConstantDeclaration (current_field as ConstantDeclaration, new MemberName (lt.Value, lt.Location));
		current_field.ConstantValue = (IConstantValue) yyVals[0+yyTop];
		current_type.AddMember (current_field);
	  }
  break;
case 119:
#line 1042 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 120:
#line 1046 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 121:
#line 1051 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 124:
#line 1066 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FieldDeclaration (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-3+yyTop]);
		current_type.AddMember (current_field);
		yyVal = current_field;
	  }
  break;
case 125:
#line 1081 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
	
		yyVal = current_field;
		current_field = null;
	  }
  break;
case 127:
#line 1096 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	 	start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 128:
#line 1102 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		current_field.ConstantValue = (IConstantValue) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }
  break;
case 131:
#line 1117 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 132:
#line 1120 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 133:
#line 1126 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		 var lt = (LocatedToken) yyVals[0+yyTop];
	  	current_field = new FieldDeclaration (current_field, new MemberName (lt.Value, lt.Location));
		current_type.AddMember (current_field);
	  }
  break;
case 134:
#line 1132 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 135:
#line 1136 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		 var lt = (LocatedToken) yyVals[-3+yyTop];
	  	current_field = new FieldDeclaration (current_field, new MemberName (lt.Value, lt.Location));
		current_field.ConstantValue = (IConstantValue) yyVals[-1+yyTop];
		current_type.AddMember (current_field);
	  }
  break;
case 138:
#line 1149 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	/*  	$$ = null;*/
	  }
  break;
case 139:
#line 1158 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	is_inheritance_impl = false;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }
  break;
case 140:
#line 1166 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	MethodDeclaration method = (MethodDeclaration) yyVals[-2+yyTop];
	method.Block = (ToplevelBlock) yyVals[0+yyTop];
	async_block = false;
		
		if (method.Block == null) 
		method.ParameterInfo.CheckParameters ();
		 else {
		if (current_container is InterfaceDeclaration) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
				method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 141:
#line 1191 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.Method;
	  }
  break;
case 142:
#line 1195 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
			valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 143:
#line 1199 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-5+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-2+yyTop];
		Modifiers mods = (Modifiers) yyVals[-7+yyTop];
		is_inheritance_impl = ((mods & Modifiers.OVERRIDE) != 0 ) || name.ExplicitInterface != null;
		var method = new MethodDeclaration (current_type, (FullNamedExpression) yyVals[-6+yyTop], mods,
				     name, current_local_parameters, (VSharpAttributes) yyVals[-8+yyTop]);

		current_type.AddMember (method);


		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

	
		yyVal = method;
		is_inheritance_impl = false;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 144:
#line 1220 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null) {
		var method = (MethodDeclaration) yyVals[-2+yyTop];
			method.SetConstraints ((List<TypeParameterConstraints>) yyVals[-1+yyTop]);
		}

		yyVal = yyVals[-2+yyTop];
		
	  }
  break;
case 145:
#line 1235 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		MemberName name = (MemberName) yyVals[-3+yyTop];
			Modifiers mods = (Modifiers) yyVals[-4+yyTop];
		is_inheritance_impl = ((mods & Modifiers.OVERRIDE) != 0 ) || name.ExplicitInterface != null;


		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name (mods));

		var method = new MethodDeclaration (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-7+yyTop]);

	current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
				is_inheritance_impl = false;
	  }
  break;
case 146:
#line 1261 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

	MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = new MethodDeclaration(current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (VSharpAttributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
				is_inheritance_impl = false;
	  }
  break;
case 150:
#line 1286 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* savedLocation = GetLocation ($1); $$ = null;*/
	 }
  break;
case 151:
#line 1292 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	++lexer.parsing_block;
	start_block (GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 152:
#line 1297 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	lexer.parsing_block = 0;*/
		/*current_block.AddStatement (new ContextualReturn ((Expression) $3));*/
		/*var b = end_block (GetLocation ($4));*/
		/*b.IsCompilerGenerated = true;*/
		/*$$ = b;*/
	 }
  break;
case 153:
#line 1307 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters;}
  break;
case 155:
#line 1313 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	 	yyVal = new ParametersCompiled (pars_list.ToArray ());	
	  }
  break;
case 156:
#line 1318 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);
	
		yyVal = new ParametersCompiled (pars_list.ToArray ()); 

	  }
  break;
case 157:
#line 1326 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }
  break;
case 158:
#line 1333 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

	var pars_list = (List<Parameter>) yyVals[-4+yyTop];
	yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 159:
#line 1341 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 160:
#line 1345 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 161:
#line 1353 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		default_parameter_used = p.IsOptional;
		yyVal = parameters_bucket;
	  }
  break;
case 162:
#line 1361 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.IsSelf)
				report.Error (1100, p.Location, "The parameter modifier `self' can only be used on the first parameter");
			else if (!p.IsOptional && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.IsOptional;
			pars.Add (p);
			
		}
		
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 163:
#line 1384 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 164:
#line 1392 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (ParameterModifier) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 165:
#line 1398 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	 	Location l = GetLocation (yyVals[0+yyTop]);
	yyVal = new Parameter (null, null, ParameterModifier.None, (VSharpAttributes) yyVals[-1+yyTop], l);
	  }
  break;
case 166:
#line 1407 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], l);
	  }
  break;
case 167:
#line 1417 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 168:
#line 1421 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;

		ParameterModifier mod = (ParameterModifier) yyVals[-5+yyTop];
		if (mod != ParameterModifier.None) {
			switch (mod) {
			case ParameterModifier.Ref:
			case ParameterModifier.Out:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
				Parameter.GetModifierSignature (mod));
				break;
				
			case ParameterModifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
				Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
		mod = ParameterModifier.None;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (VSharpAttributes) yyVals[-6+yyTop], lt.Location);
	
	if (yyVals[0+yyTop] != null)
		((Parameter) yyVal).DefaultValue = (IConstantValue) yyVals[0+yyTop];
	  }
  break;
case 169:
#line 1456 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = ParameterModifier.None; 
	}
  break;
case 171:
#line 1463 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 172:
#line 1467 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		ParameterModifier p2 = (ParameterModifier)yyVals[0+yyTop];
  		ParameterModifier mod = (ParameterModifier)yyVals[-1+yyTop] | p2;
  		if (((ParameterModifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~ParameterModifier.This) {
  				case ParameterModifier.Ref:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case ParameterModifier.Out:
				report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 				break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 173:
#line 1491 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));

	  	yyVal = ParameterModifier.Ref;
	  }
  break;
case 174:
#line 1498 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	 		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));

	 	yyVal = ParameterModifier.Out;
	  }
  break;
case 175:
#line 1505 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	 		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));


		yyVal = ParameterModifier.This;
	  }
  break;
case 176:
#line 1516 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 177:
#line 1521 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (ParameterModifier) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 178:
#line 1528 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], GetLocation(yyVals[-2+yyTop]));
	  }
  break;
case 179:
#line 1536 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ParameterModifier.Params;
	  }
  break;
case 180:
#line 1540 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		ParameterModifier mod = (ParameterModifier)yyVals[0+yyTop];
		if ((mod & ParameterModifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	mod |=  ParameterModifier.Params;
	  }
  break;
case 181:
#line 1550 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), ParameterModifier.Params);
	  }
  break;
case 182:
#line 1557 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)*/
	/*  		report.Error (1669, GetLocation ($1), "__arglist is not valid in this context");*/
	  }
  break;
case 183:
#line 1568 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
	/*	if (doc_support)*/
	/*		tmpComment = Lexer.consume_doc_comment ();*/
	  }
  break;
case 184:
#line 1574 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var type = (FullNamedExpression) $3;*/
	/*	current_property = new Property (current_type, type, (Modifiers) $2,*/
	/*		(MemberName) $4, (Attributes) $1);*/
			
	/*	if (type.Type != null && type.Type.Kind == MemberKind.Void)*/
	/*		report.Error (547, GetLocation ($3), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					*/
			
	/*	current_type.AddMember (current_property);*/
	/*	lbag.AddMember (current_property, GetModifierLocations (), GetLocation ($6));*/
		
		lexer.PropertyParsing = true;
	  }
  break;
case 185:
#line 1588 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.PropertyParsing = false;
		
	/*	if (doc_support)*/
		/*	current_property.DocComment = ConsumeStoredComment ();				*/
	  }
  break;
case 186:
#line 1595 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	lbag.AppendToMember (current_property, GetLocation ($10));*/
		lexer.parsing_modifiers = true;
	  }
  break;
case 187:
#line 1600 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_property = null;*/
	  }
  break;
case 188:
#line 1607 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
	/*	if (doc_support)*/
	/*		tmpComment = Lexer.consume_doc_comment ();*/
	/*	current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;*/
	  }
  break;
case 189:
#line 1614 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var type = (FullNamedExpression) $3;*/
	/*	var property = new Property (current_type, type, (Modifiers) $2,*/
	/*		(MemberName) $4, (Attributes) $1);*/

	/*	property.Get = new Property.GetMethod (property, Modifiers.COMPILER_GENERATED, null, property.Location);*/
	/*	property.Get.Block = (ToplevelBlock) $6;*/

	/*	if (current_container.Kind == MemberKind.Interface) {*/
	/*		report.Error (531, property.Get.Block.StartLocation,*/
	/*			"`{0}': interface members cannot have a definition", property.GetSignatureForError ());*/
		/*}*/

		/*if (type.Type != null && type.Type.Kind == MemberKind.Void)*/
		/*	report.Error (547, GetLocation ($3), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());*/

	/*	current_type.AddMember (property);*/

		/*current_local_parameters = null;*/
	  }
  break;
case 191:
#line 1639 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		/*current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;*/
		/*start_block (GetLocation ($1));*/
	  }
  break;
case 192:
#line 1645 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		/*((Property)current_property).Initializer = (Expression) $3;*/
	/*	lbag.AppendToMember (current_property, GetLocation ($1), GetLocation ($4));*/
	/*	end_block (GetLocation ($4));*/
	/*	current_local_parameters = null;*/
	  }
  break;
case 195:
#line 1662 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /* 	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;*/
	  }
  break;
case 196:
#line 1666 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/
	/*	var type = (FullNamedExpression) $3;*/
	/*	Indexer indexer = new Indexer (current_type, type, (MemberName) $4, (Modifiers) $2, (ParametersCompiled) $7, (Attributes) $1);*/
			
	/*	current_property = indexer;*/

  	/*	current_type.AddIndexer (indexer);*/
	/*	lbag.AddMember (current_property, GetModifierLocations (), GetLocation ($5), GetLocation ($8));*/
  	/*	*/
	/*	if (type.Type != null && type.Type.Kind == MemberKind.Void)*/
	/*		report.Error (620, GetLocation ($3), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		*/

	/*	if (indexer.ParameterInfo.IsEmpty) {*/
	/*		report.Error (1551, GetLocation ($5), "Indexers must have at least one parameter");*/
	/*	}*/

		/*if (doc_support) {*/
	/*		tmpComment = Lexer.consume_doc_comment ();*/
	/*		Lexer.doc_state = XmlCommentState.Allowed;*/
	/*	}*/

	/*	lexer.PropertyParsing = true;*/
	/*	current_local_parameters = (ParametersCompiled) $7;*/
	  }
  break;
case 197:
#line 1692 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
 	/*	lexer.PropertyParsing = false;*/
	/*	current_local_parameters = null;*/

		/*if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)*/
		/*	((Indexer) current_property).ParameterInfo.CheckParameters (current_property);*/
	  
	/*	if (doc_support)*/
	/*		current_property.DocComment = ConsumeStoredComment ();*/
	/*		*/
	/*	current_property = null;		*/
	  }
  break;
case 198:
#line 1708 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	lbag.AppendToMember (current_property, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 199:
#line 1712 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_property.Get = new Indexer.GetIndexerMethod (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);*/
		/*current_property.Get.Block = (ToplevelBlock) $1;*/
	  }
  break;
case 204:
#line 1724 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	if (yyToken == Token.CLOSE_BRACE) {*/
	  /*		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());*/
		/*} else {*/
		/*	if (yyToken == Token.SEMICOLON)*/
		/*		report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");*/
		/*	else*/
	/*			report.Error (1014, GetLocation ($1), "A get or set accessor expected");*/
	/*	}*/
	  }
  break;
case 205:
#line 1738 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($2 != ModifierNone && lang_version == LanguageVersion.ISO_1) {*/
	/*		FeatureIsNotAvailable (GetLocation ($2), "access modifiers on properties");*/
/*		}*/
	  
	/*	if (current_property.Get != null) {*/
	/*		report.Error (1007, GetLocation ($3), "Property accessor already defined");*/
	/*	}*/
		
	/*	if (current_property is Indexer) {*/
	/*		current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) $2, ((Indexer)current_property).ParameterInfo.Clone (),*/
	/*			(Attributes) $1, GetLocation ($3));*/
	/*	} else {*/
	/*		current_property.Get = new Property.GetMethod (current_property,*/
	/*			(Modifiers) $2, (Attributes) $1, GetLocation ($3));*/
	/*	}	*/
	  
	/*	current_local_parameters = current_property.Get.ParameterInfo;	  */
	/*	lexer.PropertyParsing = false;*/
	  }
  break;
case 206:
#line 1759 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	/*if ($5 != null) {*/
	  	/*	current_property.Get.Block = (ToplevelBlock) $5;			*/
	  	
		/*	if (current_container.Kind == MemberKind.Interface) {*/
		/*		report.Error (531, current_property.Get.Block.StartLocation,*/
			/*		"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());*/
			/*}*/
		/*	lbag.AddMember (current_property.Get, GetModifierLocations ());*/
		/*} else {*/
		/*	lbag.AddMember (current_property.Get, GetModifierLocations (), savedLocation);*/
		/*}*/
	  
		/*current_local_parameters = null;*/
		/*lexer.PropertyParsing = true;*/

		/*if (doc_support)*/
		/*	if (Lexer.doc_state == XmlCommentState.Error)*/
			/*	Lexer.doc_state = XmlCommentState.NotAllowed;*/
	  }
  break;
case 207:
#line 1783 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($2 != ModifierNone && lang_version == LanguageVersion.ISO_1) {*/
	/*		FeatureIsNotAvailable (GetLocation ($2), "access modifiers on properties");*/
	/*	}*/
		
	/*	if (current_property.Set != null) {*/
	/*		report.Error (1007, GetLocation ($3), "Property accessor already defined");*/
		/*}*/
	  
	/*	if (current_property is Indexer) {*/
	/*		current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) $2,*/
	/*			ParametersCompiled.MergeGenerated (compiler,*/
	/*			((Indexer)current_property).ParameterInfo, true, new Parameter (*/
	/*				current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation ($3)),*/
	/*				null),*/
	/*			(Attributes) $1, GetLocation ($3));*/
	/*	} else {*/
	/*		current_property.Set = new Property.SetMethod (current_property, (Modifiers) $2, */
	/*			ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation ($3)),*/
		/*		(Attributes) $1, GetLocation ($3));*/
		/*}*/
		
	/*	current_local_parameters = current_property.Set.ParameterInfo;	*/
	/*	lexer.PropertyParsing = false;*/
	  }
  break;
case 208:
#line 1809 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if ($5 != null) {		*/
		/*	current_property.Set.Block = (ToplevelBlock) $5;*/
		
		/*	if (current_container.Kind == MemberKind.Interface) {*/
		/*		report.Error (531, current_property.Set.Block.StartLocation,*/
		/*			"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());*/
		/*	}*/
		/*	lbag.AddMember (current_property.Set, GetModifierLocations ());*/
		/*} else {*/
		/*	lbag.AddMember (current_property.Set, GetModifierLocations (), savedLocation);*/
		/*}*/
		
	/*	current_local_parameters = null;*/
		lexer.PropertyParsing = true;

	/*	if (doc_support*/
	/*		&& Lexer.doc_state == XmlCommentState.Error)*/
	/*		Lexer.doc_state = XmlCommentState.NotAllowed;*/
	  }
  break;
case 210:
#line 1834 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	savedLocation = GetLocation ($1);*/
	/*  	$$ = null;*/
	  }
  break;
case 211:
#line 1839 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
/*	  	$$ = null;*/
	  }
  break;
case 212:
#line 1850 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 213:
#line 1854 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;
		push_current_container (new InterfaceDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], GetLocation(yyVals[-2+yyTop])));
	  }
  break;
case 214:
#line 1860 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 215:
#line 1874 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;	  
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 216:
#line 1880 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 217:
#line 1884 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 220:
#line 1896 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 221:
#line 1901 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 222:
#line 1909 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 223:
#line 1913 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 228:
#line 1921 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 229:
#line 1925 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 230:
#line 1929 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 231:
#line 1936 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 232:
#line 1939 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	OperatorDeclaration decl = (OperatorDeclaration) $3;*/
	/*	if (decl != null) {*/
	/*		Operator op = new Operator (*/
	/*			current_type, decl.optype, decl.ret_type, (Modifiers) $2, */
	/*			current_local_parameters,*/
	/*			(ToplevelBlock) $5, (Attributes) $1, decl.location);*/
				
	/*		if (op.Block == null)*/
	/*			op.ParameterInfo.CheckParameters (op);*/

	/*		if (doc_support) {*/
	/*			op.DocComment = tmpComment;*/
	/*			Lexer.doc_state = XmlCommentState.Allowed;*/
	/*		}*/

	/*		// Note again, checking is done in semantic analysis*/
	/*		current_type.AddOperator (op);*/

	/*		lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));*/
	/*		if ($5 == null) { // Semicolon*/
	/*			lbag.AddLocation (op, savedLocation); */
	/*		}*/
	/*	}*/
		
	/*	current_local_parameters = null;*/
	  }
  break;
case 234:
#line 1971 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		report.Error (590, GetLocation ($1), "User-defined operators cannot return void");*/
	/*	$$ = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation ($1));*/
	  }
  break;
case 235:
#line 1979 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.DefaultValue;*/
	/*	if ((Operator.OpType) $3 == Operator.OpType.Is)*/
	/*		valid_param_mod |= ParameterModifierType.Out;*/
	  }
  break;
case 236:
#line 1985 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/

	/*	Location loc = GetLocation ($2);*/
	/*	Operator.OpType op = (Operator.OpType) $3;*/
	/*	current_local_parameters = (ParametersCompiled)$6;*/
		
	/*	int p_count = current_local_parameters.Count;*/
	/*	if (p_count == 1) {*/
	/*		if (op == Operator.OpType.Addition)*/
	/*			op = Operator.OpType.UnaryPlus;*/
	/*		else if (op == Operator.OpType.Subtraction)*/
	/*			op = Operator.OpType.UnaryNegation;*/
	/*	}*/
		
	/*	if (IsUnaryOperator (op)) {*/
	/*		if (p_count == 2) {*/
	/*			report.Error (1020, loc, "Overloadable binary operator expected");*/
	/*		} else if (p_count != 1) {*/
	/*			report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",*/
	/*				Operator.GetName (op));*/
	/*		}*/
/*		} else if (op == Operator.OpType.Is) {*/
	/*		// TODO: Special checks for is operator*/
	/*	} else {*/
	/*		if (p_count == 1) {*/
	/*			report.Error (1019, loc, "Overloadable unary operator expected");*/
	/*		} else if (p_count != 2) {*/
	/*			report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",*/
	/*				Operator.GetName (op));*/
	/*		}*/
	/*	}*/
		
	/*	if (doc_support) {*/
	/*		tmpComment = Lexer.consume_doc_comment ();*/
	/*		Lexer.doc_state = XmlCommentState.NotAllowed;*/
	/*	}*/

	/*	$$ = new OperatorDeclaration (op, (FullNamedExpression) $1, loc);*/
	/*	lbag.AddLocation ($$, GetLocation ($2), savedOperatorLocation, GetLocation ($4), GetLocation ($7));*/
	  }
  break;
case 238:
#line 2031 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.LogicalNot; savedOperatorLocation = GetLocation ($1);*/
	 }
  break;
case 239:
#line 2033 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.OnesComplement; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 240:
#line 2035 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.Increment; savedOperatorLocation = GetLocation ($1); */
		}
  break;
case 241:
#line 2037 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.Decrement; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 242:
#line 2039 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.True; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 243:
#line 2041 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.False; savedOperatorLocation = GetLocation ($1); */
		}
  break;
case 244:
#line 2044 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.Addition; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 245:
#line 2046 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.Subtraction; savedOperatorLocation = GetLocation ($1); */
		}
  break;
case 246:
#line 2049 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.Multiply; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 247:
#line 2051 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /* $$ = Operator.OpType.Division; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 248:
#line 2053 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.Modulus; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 249:
#line 2055 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.BitwiseAnd; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 250:
#line 2057 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.BitwiseOr; savedOperatorLocation = GetLocation ($1); */
		}
  break;
case 251:
#line 2059 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.ExclusiveOr; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 252:
#line 2061 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.LeftShift; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 253:
#line 2063 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.RightShift; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 254:
#line 2065 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.Equality; savedOperatorLocation = GetLocation ($1); */
		}
  break;
case 255:
#line 2067 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.Inequality; savedOperatorLocation = GetLocation ($1); */
		}
  break;
case 256:
#line 2069 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.GreaterThan; savedOperatorLocation = GetLocation ($1); */
		}
  break;
case 257:
#line 2071 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = Operator.OpType.LessThan; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 258:
#line 2073 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.GreaterThanOrEqual; savedOperatorLocation = GetLocation ($1);*/
		 }
  break;
case 259:
#line 2075 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = Operator.OpType.LessThanOrEqual; savedOperatorLocation = GetLocation ($1); */
		}
  break;
case 260:
#line 2078 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (lang_version != LanguageVersion.Experimental)*/
	/*		FeatureIsNotAvailable (GetLocation ($1), "is user operator");*/
	/*	savedOperatorLocation = GetLocation ($1);*/
/*		$$ = Operator.OpType.Is;*/
	  }
  break;
case 261:
#line 2088 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.DefaultValue;*/
	  }
  break;
case 262:
#line 2092 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/

	/*	Location loc = GetLocation ($2);*/
	/*	current_local_parameters = (ParametersCompiled)$6;  */

	/*	if (current_local_parameters.Count != 1) {*/
	/*		report.Error (1535, loc, "Overloaded unary operator `implicit' takes one parameter");*/
	/*	}*/

		/*if (doc_support) {*/
		/*	tmpComment = Lexer.consume_doc_comment ();*/
		/*	Lexer.doc_state = XmlCommentState.NotAllowed;*/
		/*}*/

	/*	$$ = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) $3, loc);*/
/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2), GetLocation ($4), GetLocation ($7));*/
	  }
  break;
case 263:
#line 2111 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*valid_param_mod = ParameterModifierType.DefaultValue;*/
	  }
  break;
case 264:
#line 2115 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/
		
	/*	Location loc = GetLocation ($2);*/
	/*	current_local_parameters = (ParametersCompiled)$6;  */

		/*if (current_local_parameters.Count != 1) {*/
	/*		report.Error (1535, loc, "Overloaded unary operator `explicit' takes one parameter");*/
	/*	}*/

	/*	if (doc_support) {*/
	/*		tmpComment = Lexer.consume_doc_comment ();*/
	/*		Lexer.doc_state = XmlCommentState.NotAllowed;*/
	/*	}*/

	/*	$$ = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) $3, loc);*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2), GetLocation ($4), GetLocation ($7));*/
	  }
  break;
case 265:
#line 2134 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	Error_SyntaxError (yyToken);*/
	/*	current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;*/
	/*	$$ = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation ($1));*/
	  }
  break;
case 266:
#line 2140 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	Error_SyntaxError (yyToken);*/
		/*current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;*/
	  /*	$$ = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation ($1));*/
	  }
  break;
case 267:
#line 2150 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*	Constructor c = (Constructor) $1;*/
	/*	c.Block = (ToplevelBlock) $2;*/
		
	/*	if (doc_support)*/
	/*		c.DocComment = ConsumeStoredComment ();*/

	/*	current_local_parameters = null;*/
	/*	if (doc_support)*/
	/*		Lexer.doc_state = XmlCommentState.Allowed;*/
	  }
  break;
case 268:
#line 2167 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (doc_support) {*/
	/*		tmpComment = Lexer.consume_doc_comment ();*/
	/*		Lexer.doc_state = XmlCommentState.Allowed;*/
	/*	}*/
		
		/*valid_param_mod = ParameterModifierType.All;*/
	  }
  break;
case 269:
#line 2176 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/
	/*	current_local_parameters = (ParametersCompiled) $6;*/
		
	/*	var lt = (LocatedToken) $3;*/
	/*	var mods = (Modifiers) $2;*/
	/*	var c = new Constructor (current_type, lt.Value, mods, (Attributes) $1, current_local_parameters, lt.Location);*/

	/*	if (lt.Value != current_container.MemberName.Name) {*/
	/*		report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");*/
	/*	} else if ((mods & Modifiers.STATIC) != 0) {*/
		/*	if (!current_local_parameters.IsEmpty) {*/
			/*	report.Error (132, c.Location, "`{0}': The static constructor must be parameterless",*/
			/*		c.GetSignatureForError ());*/
		/*	}*/

	/*		if ((mods & Modifiers.AccessibilityMask) != 0){*/
	/*			report.Error (515, c.Location,*/
	/*				"`{0}': static constructor cannot have an access modifier",*/
	/*				c.GetSignatureForError ());*/
		/*	}*/
		/*} else {*/
		/*	if (current_type.Kind == MemberKind.Struct && current_local_parameters.IsEmpty) {*/
		/*		if (lang_version < LanguageVersion.V_6)*/
			/*		FeatureIsNotAvailable (GetLocation ($3), "struct parameterless instance constructor");*/

		/*		if ((mods & Modifiers.PUBLIC) == 0) {*/
		/*			report.Error (8075, c.Location, "`{0}': Structs parameterless instance constructor must be public", c.GetSignatureForError ());*/
		/*		}*/
		/*	}*/
		/*}*/

	/*	current_type.AddConstructor (c);*/
		/*lbag.AddMember (c, GetModifierLocations (), GetLocation ($5), GetLocation ($7));*/
	/*	$$ = c;*/

	/*	//*/
	/*	// start block here, so possible anonymous methods inside*/
	/*	// constructor initializer can get correct parent block*/
		/*//*/
	/*  	start_block (lexer.Location);*/
	  }
  break;
case 270:
#line 2219 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if ($9 != null) {*/
		/*	var c = (Constructor) $8;*/
		/*	c.Initializer = (ConstructorInitializer) $9;*/
			
			/*if (c.IsStatic) {*/
			/*	report.Error (514, c.Location,*/
			/*		"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",*/
				/*	c.GetSignatureForError ());*/
		/*	}*/
	/*	}*/

	/*	$$ = $8;*/
	  }
  break;
case 272:
#line 2237 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* current_block = null; $$ = null; */
	}
  break;
case 275:
#line 2248 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 276:
#line 2252 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
	/*	$$ = new ConstructorBaseInitializer ((Arguments) $5, GetLocation ($2));*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($3), GetLocation ($6));*/
	  }
  break;
case 277:
#line 2258 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 278:
#line 2262 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
	/*	$$ = new ConstructorThisInitializer ((Arguments) $5, GetLocation ($2));*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($3), GetLocation ($6));*/
	  }
  break;
case 279:
#line 2268 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Error_SyntaxError (yyToken);	  */
	/*	$$ = new ConstructorThisInitializer (null, GetLocation ($2));*/
	/*	lbag.AddLocation ($$, GetLocation ($1));*/
	  }
  break;
case 280:
#line 2274 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Error_SyntaxError (yyToken);*/
	/*	$$ = null;*/
	  }
  break;
case 281:
#line 2282 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (doc_support) {*/
	/*		tmpComment = Lexer.consume_doc_comment ();*/
	/*		Lexer.doc_state = XmlCommentState.NotAllowed;*/
/*		}*/
		
	/*	current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;*/
	  }
  break;
case 282:
#line 2291 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $5;*/
	/*	if (lt.Value != current_container.MemberName.Name){*/
	/*		report.Error (574, lt.Location, "Name of destructor must match name of class");*/
	/*	} else if (current_container.Kind != MemberKind.Class){*/
	/*		report.Error (575, lt.Location, "Only class types can contain destructor");*/
	/*	}*/
		
		/*Destructor d = new Destructor (current_type, (Modifiers) $2,*/
		/*	ParametersCompiled.EmptyReadOnlyParameters, (Attributes) $1, lt.Location);*/
		/*d.Identifier = lt.Value;*/
	/*	if (doc_support)*/
		/*	d.DocComment = ConsumeStoredComment ();*/
		  
	/*	d.Block = (ToplevelBlock) $8;*/
	/*	current_type.AddMember (d);*/
	/*	lbag.AddMember (d, GetModifierLocations (), GetLocation ($3), GetLocation ($6), GetLocation ($7));*/

	/*	current_local_parameters = null;*/
	  }
  break;
case 283:
#line 2317 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_event_field = new EventField (current_type, (FullNamedExpression) $4, (Modifiers) $2, (MemberName) $5, (Attributes) $1);*/
	/*	current_type.AddMember (current_event_field);*/
		
	/*	if (current_event_field.MemberName.ExplicitInterface != null) {*/
	/*		report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",*/
	/*		current_event_field.GetSignatureForError ());*/
	/*	}*/
		
	/*	$$ = current_event_field;*/
	  }
  break;
case 284:
#line 2331 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (doc_support) {*/
	/*		current_event_field.DocComment = Lexer.consume_doc_comment ();*/
		/*	Lexer.doc_state = XmlCommentState.Allowed;*/
	/*	}*/
	/*	if (current_event_field.Initializer != null) {*/
	/*		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation ($3), savedEventAssignLocation, GetLocation ($9));*/
	/*	} else {*/
	/*		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation ($3), GetLocation ($9));*/
		/*}*/
	/*	current_event_field = null;*/
	  }
  break;
case 285:
#line 2347 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_event = new EventProperty (current_type, (FullNamedExpression) $4, (Modifiers) $2, (MemberName) $5, (Attributes) $1);*/
	/*	current_type.AddMember (current_event);*/
	/*	lbag.AddMember (current_event, GetModifierLocations (), GetLocation ($3), GetLocation ($6));*/
		
	/*	lexer.EventParsing = true;*/
	  }
  break;
case 286:
#line 2355 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (current_container.Kind == MemberKind.Interface)*/
	/*		report.Error (69, GetLocation ($6), "Event in interface cannot have add or remove accessors");*/
	  
	/*	lexer.EventParsing = false;*/
	  }
  break;
case 287:
#line 2362 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (doc_support) {*/
	/*		current_event.DocComment = Lexer.consume_doc_comment ();*/
	/*		Lexer.doc_state = XmlCommentState.Allowed;*/
	/*	}*/
		
	/*	lbag.AppendToMember (current_event, GetLocation ($9));*/
	/*  	current_event = null;	*/
	/*	current_local_parameters = null;*/
	  }
  break;
case 288:
#line 2375 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

/*		current_type.AddMember (new EventField (current_type, (FullNamedExpression) $4, (Modifiers) $2, MemberName.Null, (Attributes) $1));*/
	  }
  break;
case 290:
#line 2385 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 291:
#line 2389 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
	 /* 	savedEventAssignLocation = GetLocation ($1);*/
	/*	current_event_field.Initializer = (Expression) $3;*/
	  }
  break;
case 294:
#line 2403 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_event_field.AddDeclarator ((FieldDeclarator) $1);*/
	  }
  break;
case 295:
#line 2407 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_event_field.AddDeclarator ((FieldDeclarator) $2);*/
	  }
  break;
case 296:
#line 2414 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $2;*/
	  /*	$$ = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);*/
	  /*	lbag.AddLocation ($$, GetLocation ($1));*/
	  }
  break;
case 297:
#line 2420 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 298:
#line 2424 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	/*	var lt = (LocatedToken) $2;	  */
	/*  	$$ = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) $5);*/
	/*  	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 299:
#line 2433 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (current_container.Kind == MemberKind.Interface) {*/
	/*		report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",*/
	/*			current_event_field.GetSignatureForError ());*/
	/*	}*/
		
	  /*	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {*/
		/*	report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",*/
		/*		current_event_field.GetSignatureForError ());*/
	  	/*}		*/
	  }
  break;
case 300:
#line 2445 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $2;*/
	  }
  break;
case 303:
#line 2454 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",*/
	/*		current_event.GetSignatureForError ());*/
	  }
  break;
case 304:
#line 2459 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",*/
	/*		current_event.GetSignatureForError ());*/
	  }
  break;
case 305:
#line 2464 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*	report.Error (1055, GetLocation ($1), "An add or remove accessor expected");*/
	/*	$$ = null;*/
	  }
  break;
case 306:
#line 2472 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /* 	if ($2 != ModifierNone) {*/
	/*		report.Error (1609, GetLocation ($2), "Modifiers cannot be placed on event accessor declarations");*/
	 /* 	}*/
	  	
	 /* 	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) $1, GetLocation ($3));*/
	/*	current_local_parameters = current_event.Add.ParameterInfo;*/
		
	/*	lbag.AddMember (current_event.Add, GetModifierLocations ());*/
		lexer.EventParsing = false;		
	  }
  break;
case 307:
#line 2484 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.EventParsing = true;
	  
	/*  	current_event.Add.Block = (ToplevelBlock) $5;*/
		
	/*	if (current_container.Kind == MemberKind.Interface) {*/
	/*		report.Error (531, current_event.Add.Block.StartLocation,*/
	/*			"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());*/
	/*	}*/
		
	/*	current_local_parameters = null;*/
	  }
  break;
case 308:
#line 2500 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	if ($2 != ModifierNone) {*/
	/*		report.Error (1609, GetLocation ($2), "Modifiers cannot be placed on event accessor declarations");*/
	/*}*/
	  	
	 /* 	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) $1, GetLocation ($3));*/
	/*	current_local_parameters = current_event.Remove.ParameterInfo;*/

	/*	lbag.AddMember (current_event.Remove, GetModifierLocations ());*/
	/*	lexer.EventParsing = false;		*/
	  }
  break;
case 309:
#line 2512 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.EventParsing = true;
	  
	/*  	current_event.Remove.Block = (ToplevelBlock) $5;*/
		
	/*	if (current_container.Kind == MemberKind.Interface) {*/
	/*		report.Error (531, current_event.Remove.Block.StartLocation,*/
	/*			"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());*/
	/*	}*/
		
	/*	current_local_parameters = null;*/
	  }
  break;
case 310:
#line 2528 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*report.Error (73, lexer.Location, "An add or remove accessor must have a body");*/
	/*	$$ = null;*/
	  }
  break;
case 312:
#line 2537 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_type.UnattachedAttributes = (Attributes) $1;*/
		/*report.Error (1519, GetLocation ($1), "An attribute is missing member declaration");*/
		/*lexer.putback ('}');*/
	  }
  break;
case 313:
#line 2548 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*report.Error (1519, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");*/
 
		/*lexer.putback ('}');*/

	/*  	lexer.parsing_generic_declaration = false;*/
	/*	FullNamedExpression type = (FullNamedExpression) $3;*/
	/*	current_field = new Field (current_type, type, (Modifiers) $2, MemberName.Null, (Attributes) $1);*/
	/*	current_type.AddField (current_field);*/
	/*	lbag.AddMember (current_field, GetModifierLocations ());*/
	/*	$$ = current_field;*/
	  }
  break;
case 314:
#line 2568 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (doc_support)*/
	/*		enumTypeComment = Lexer.consume_doc_comment ();*/
	  }
  break;
case 315:
#line 2573 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (doc_support)*/
	/*		Lexer.doc_state = XmlCommentState.Allowed;*/

	/*	MemberName name = (MemberName) $4;*/
	/*	if (name.IsGeneric) {*/
	/*		report.Error (1675, name.Location, "Enums cannot have type parameters");*/
	/*	}*/
		
	/*	push_current_container (new Enum (current_container, (FullNamedExpression) $5, (Modifiers) $2, name, (Attributes) $1), null);*/
	/*	if ($5 != null) {*/
	/*		lbag.AddMember (current_container, GetModifierLocations (), GetLocation ($3), savedLocation, GetLocation ($7));*/
	/*	} else {*/
	/*		lbag.AddMember (current_container, GetModifierLocations (), GetLocation ($3), GetLocation ($7));*/
	/*	}*/
	  }
  break;
case 316:
#line 2590 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
	  
	  	/*// here will be evaluated after CLOSE_BLACE is consumed.*/
		/*if (doc_support)*/
		/*	Lexer.doc_state = XmlCommentState.Allowed;*/
	  }
  break;
case 317:
#line 2598 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*lbag.AppendToMember (current_container, GetLocation ($11));*/
		/*if ($12 != null) {*/
		/*	lbag.AppendToMember (current_container, GetLocation ($12));*/
		/*}*/
		/*if (doc_support)*/
		/*	current_container.DocComment = enumTypeComment;*/
			
		--lexer.parsing_declaration;

/*		//	if (doc_support)*/
/*	//			em.DocComment = ev.DocComment;*/

	/*	$$ = pop_current_class ();*/
	  }
  break;
case 319:
#line 2618 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	savedLocation = GetLocation ($1);*/
	/*	$$ = $2;*/
	 }
  break;
case 320:
#line 2623 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/* 	Error_TypeExpected (GetLocation ($1));*/
	/*	$$ = null;*/
	 }
  break;
case 323:
#line 2633 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*lbag.AppendToMember (current_container, GetLocation ($2));*/
	  }
  break;
case 325:
#line 2641 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	lbag.AppendToMember (current_container, GetLocation ($2));*/
/*	  	$$ = $3;*/
  }
  break;
case 326:
#line 2649 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;*/
	  /*	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) $1);*/
	  /*	((Enum) current_type).AddEnumMember (em);*/

		/*if (doc_support) {*/
		/*	em.DocComment = Lexer.consume_doc_comment ();*/
	/*		Lexer.doc_state = XmlCommentState.Allowed;*/
	/*	}*/

	/*	$$ = em;*/
	  }
  break;
case 327:
#line 2662 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
		/*if (doc_support) {*/
		/*	tmpComment = Lexer.consume_doc_comment ();*/
		/*	Lexer.doc_state = XmlCommentState.NotAllowed;*/
	/*	}*/
	  }
  break;
case 328:
#line 2670 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		--lexer.parsing_block;
		
		/*var lt = (LocatedToken) $2;*/
	  	/*var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) $1);*/
	  	/*em.Initializer = new ConstInitializer (em, (Expression) $5, GetLocation ($4));*/
	  	/*((Enum) current_type).AddEnumMember (em);*/
		
	/*	if (doc_support)*/
	/*		em.DocComment = ConsumeStoredComment ();*/

	/*	$$ = em;*/
	  }
  break;
case 329:
#line 2684 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Error_SyntaxError (yyToken);*/
	  
	/*	var lt = (LocatedToken) $2;*/
	  /*	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) $1);*/
	  /*	((Enum) current_type).AddEnumMember (em);*/

		/*if (doc_support) {*/
		/*	em.DocComment = Lexer.consume_doc_comment ();*/
		/*	Lexer.doc_state = XmlCommentState.Allowed;*/
		/*}*/

		/*$$ = em;*/
	  }
  break;
case 331:
#line 2707 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;*/
	  }
  break;
case 332:
#line 2711 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/

	/*	ParametersCompiled p = (ParametersCompiled) $8;*/

	/*	Delegate del = new Delegate (current_container, (FullNamedExpression) $4, (Modifiers) $2, (MemberName) $5, p, (Attributes) $1);*/

		/*p.CheckParameters (del);*/

		/*current_container.AddTypeContainer (del);*/

		/*current_delegate = del;*/
		lexer.ConstraintsParsing = true;
	  }
  break;
case 333:
#line 2726 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 334:
#line 2730 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (doc_support) {*/
		/*	current_delegate.DocComment = Lexer.consume_doc_comment ();*/
		/*	Lexer.doc_state = XmlCommentState.Allowed;*/
		/*}*/
	  
	/*	if ($11 != null)*/
		/*	current_delegate.SetConstraints ((List<Constraints>) $11);*/
	/*	lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation ($3), GetLocation ($6), GetLocation ($9), GetLocation ($13));*/

		/*$$ = current_delegate;*/

		/*current_delegate = null;*/
	  }
  break;
case 336:
#line 2749 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  			yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 338:
#line 2757 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new QualifiedAlias(lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 339:
#line 2763 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  	    var lt1 = (LocatedToken) yyVals[-2+yyTop];
    	var lt2 = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 341:
#line 2773 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	
	  }
  break;
case 342:
#line 2779 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 343:
#line 2787 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 344:
#line 2792 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 346:
#line 2804 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
			yyVal = yyVals[-1+yyTop];
	  }
  break;
case 347:
#line 2808 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 348:
#line 2816 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	
	  }
  break;
case 349:
#line 2823 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 350:
#line 2835 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 351:
#line 2839 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 352:
#line 2848 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	MemberName mn = (MemberName)yyVals[0+yyTop];
	 	if (mn.TypeParameters != null)
	 		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
				mn.GetSignatureForError ()));
	  }
  break;
case 354:
#line 2859 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (TypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }
  break;
case 355:
#line 2868 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDeclaration.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 356:
#line 2873 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDeclaration.DefaultIndexerName, null, (TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 357:
#line 2881 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	  }
  break;
case 358:
#line 2886 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
	  }
  break;
case 359:
#line 2893 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((TypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	
	  }
  break;
case 361:
#line 2903 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 362:
#line 2910 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var tparams = new TypeParameters ();
		tparams.Add ((UnresolvedTypeParameterSpec)yyVals[0+yyTop]);
		yyVal = tparams;
	  }
  break;
case 363:
#line 2916 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((UnresolvedTypeParameterSpec)yyVals[0+yyTop]);
		yyVal = tparams;
		
	  }
  break;
case 364:
#line 2926 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];
		if(type_parameter_symbol_kind == SymbolKind.Method && is_inheritance_impl)
		   yyVal = new MethodTypeParameterWithInheritedConstraints(0, lt.Value);
		else
			yyVal = new UnresolvedTypeParameterSpec (type_parameter_symbol_kind,0,lt.Value);
  	  }
  break;
case 365:
#line 2934 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new UnresolvedTypeParameterSpec (type_parameter_symbol_kind, 0);
  	  }
  break;
case 367:
#line 2950 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation ($1));*/
	  }
  break;
case 368:
#line 2957 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 374:
#line 2978 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
	yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 376:
#line 2987 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 377:
#line 2994 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) 
			yyVal = new ComposedType ((TypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		 else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarTypeExpression (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }
  break;
case 378:
#line 3006 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType ((TypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 380:
#line 3014 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error(1547, GetLocation (yyVals[0+yyTop]), "Keyword `void' cannot be used in this context");
		yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 381:
#line 3022 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 382:
#line 3027 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 383:
#line 3031 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType (new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 384:
#line 3038 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 385:
#line 3044 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
	
		yyVal = types;
	  }
  break;
case 386:
#line 3054 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is ComposedType)
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedType)yyVals[0+yyTop]).GetSignatureForError ());
	
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 387:
#line 3067 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 388:
#line 3068 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 389:
#line 3069 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Boolean, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 390:
#line 3070 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Single, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 391:
#line 3071 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Double, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 393:
#line 3076 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.SByte, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 394:
#line 3077 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Byte, GetLocation (yyVals[0+yyTop]));	}
  break;
case 395:
#line 3078 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int16, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 396:
#line 3079 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt16, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 397:
#line 3080 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int32, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 398:
#line 3081 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt32, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 399:
#line 3082 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int64, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 400:
#line 3083 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt64, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 401:
#line 3084 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Char, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 424:
#line 3118 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $1;*/
	   /*    $$ = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);*/
	  }
  break;
case 428:
#line 3128 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/* $$ = new NullLiteral (GetLocation ($1));*/
	 }
  break;
case 429:
#line 3134 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*$$ = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation ($1)); */
	}
  break;
case 430:
#line 3137 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*$$ = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation ($1)); */
	}
  break;
case 431:
#line 3144 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new InterpolatedString ((StringLiteral) $1, (List<Expression>) $2, (StringLiteral) $3);*/
	  }
  break;
case 432:
#line 3148 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new InterpolatedString ((StringLiteral) $1, null, null);*/
	  }
  break;
case 433:
#line 3155 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var list = new List<Expression> ();*/
		/*list.Add ((InterpolatedStringInsert) $1);*/
		/*$$ = list;*/
	  }
  break;
case 434:
#line 3161 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var list = (List<Expression>) $1;*/
		/*list.Add ((StringLiteral) $2);*/
		/*list.Add ((InterpolatedStringInsert) $3);*/
		/*$$ = list;*/
	  }
  break;
case 435:
#line 3171 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new InterpolatedStringInsert ((Expression) $1);*/
	  }
  break;
case 436:
#line 3175 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new InterpolatedStringInsert ((Expression) $1) {*/
		/*	Alignment = (Expression)$3*/
		/*};*/
	  }
  break;
case 437:
#line 3181 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 438:
#line 3185 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = false;

		/*$$ = new InterpolatedStringInsert ((Expression) $1) {*/
		/*	Format = (string)$4*/
		/*};*/
	  }
  break;
case 439:
#line 3193 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 440:
#line 3197 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = false;

		/*$$ = new InterpolatedStringInsert ((Expression) $1) {*/
		/*	Alignment = (Expression)$3,*/
		/*	Format = (string) $6*/
		/*};*/
	  }
  break;
case 445:
#line 3230 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new ParenthesizedExpression ((Expression) $2, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 446:
#line 3235 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new ParenthesizedExpression ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 447:
#line 3242 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $3;*/
	/*	$$ = new MemberAccess ((Expression) $1, lt.Value, (TypeArguments) $4, lt.Location);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 448:
#line 3248 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $3;*/
		/*$$ = new MemberAccess ((Expression) $1, lt.Value, (int) $4, lt.Location);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 449:
#line 3254 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (lang_version < LanguageVersion.V_6)*/
		/*	FeatureIsNotAvailable (GetLocation ($2), "null propagating operator");*/

		/*var lt = (LocatedToken) $4;*/
		/*$$ = new ConditionalMemberAccess ((Expression) $1, lt.Value, (TypeArguments) $5, lt.Location);*/
		/*lbag.AddLocation ($$, GetLocation ($2), GetLocation ($3));*/
	  }
  break;
case 450:
#line 3263 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $3;*/
	/*	$$ = new MemberAccess ((Expression) $1, lt.Value, (TypeArguments) $4, lt.Location);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 451:
#line 3269 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $3;*/
		/*$$ = new MemberAccess (new BaseThis (GetLocation ($1)), lt.Value, (TypeArguments) $4, lt.Location);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 452:
#line 3275 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $3;*/
		/*$$ = new MemberAccess (new SimpleName ("await", ((LocatedToken) $1).Location), lt.Value, (TypeArguments) $4, lt.Location);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 453:
#line 3281 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt1 = (LocatedToken) $1;*/
		/*var lt2 = (LocatedToken) $2;*/

		/*$$ = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) $3, lt1.Location);*/
		/*lbag.AddLocation ($$, savedLocation, GetLocation ($2));*/
	  }
  break;
case 454:
#line 3289 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt1 = (LocatedToken) $1;*/
		/*var lt2 = (LocatedToken) $2;*/

	/*	$$ = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) $3, lt1.Location);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 455:
#line 3296 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new CompletionMemberAccess ((Expression) $1, null,GetLocation ($3));*/
	  }
  break;
case 456:
#line 3299 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $3;*/
	/*	$$ = new CompletionMemberAccess ((Expression) $1, lt.Value, lt.Location);*/
	  }
  break;
case 457:
#line 3304 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompletionMemberAccess ((Expression) $1, null, lexer.Location);*/
	  }
  break;
case 458:
#line 3307 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $3;*/
	/*	$$ = new CompletionMemberAccess ((Expression) $1, lt.Value, lt.Location);*/
 	  }
  break;
case 459:
#line 3315 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Invocation ((Expression) $1, (Arguments) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 460:
#line 3320 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Invocation ((Expression) $1, (Arguments) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 461:
#line 3327 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Invocation ((Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 462:
#line 3336 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*$$ = null; */
	
	}
  break;
case 464:
#line 3345 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	if ($2 == null) {*/
	/*  		$$ = new CollectionOrObjectInitializers (GetLocation ($1));*/
	/*  	} else {*/
	/*  		$$ = new CollectionOrObjectInitializers ((List<Expression>) $2, GetLocation ($1));*/
	/*  	}*/
 /*		lbag.AddLocation ($$, GetLocation ($3));*/
	  }
  break;
case 465:
#line 3354 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	$$ = new CollectionOrObjectInitializers ((List<Expression>) $2, GetLocation ($1));*/
	  	/*lbag.AddLocation ($$, GetLocation ($3), GetLocation ($4));*/
	  }
  break;
case 466:
#line 3361 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/* $$ = null; */
	}
  break;
case 467:
#line 3365 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $1;*/
	}
  break;
case 468:
#line 3372 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var a = new List<Expression> ();*/
	/*  	a.Add ((Expression) $1);*/
	 /* 	$$ = a;*/
	  }
  break;
case 469:
#line 3378 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	/*var a = (List<Expression>)$1;*/
	  	/*a.Add ((Expression) $3);*/
		/*lbag.AddLocation (a, GetLocation ($2));*/
	  /*	$$ = a;*/
	  }
  break;
case 470:
#line 3384 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	/*Error_SyntaxError (yyToken);*/
		/*$$ = $1;*/
	  }
  break;
case 471:
#line 3392 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	var lt = (LocatedToken) $1;*/
	  /*	$$ = new ElementInitializer (lt.Value, (Expression)$3, lt.Location);*/
	 /* 	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 472:
#line 3398 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	var lt = (LocatedToken) Error_AwaitAsIdentifier ($1);*/
	  /*	$$ = new ElementInitializer (lt.Value, (Expression)$3, lt.Location);*/
	  /*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 473:
#line 3404 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompletionElementInitializer (null, GetLocation ($1));*/
	  }
  break;
case 474:
#line 3407 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	CompletionSimpleName csn = $1 as CompletionSimpleName;*/
	/*	if (csn == null)*/
	/*		$$ = new CollectionElementInitializer ((Expression)$1);*/
		/*else*/
	/*		$$ = new CompletionElementInitializer (csn.Prefix, csn.Location);*/
	  }
  break;
case 475:
#line 3415 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($2 == null)*/
	/*		$$ = new CollectionElementInitializer (GetLocation ($1));*/
	/*	else {*/
	/*  		$$ = new CollectionElementInitializer ((List<Expression>)$2, GetLocation ($1));*/
	/*		lbag.AddLocation ($$, GetLocation ($2));*/
	/*	}*/
	/*	lbag.AddLocation ($$, GetLocation ($3));*/
	  }
  break;
case 476:
#line 3425 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (lang_version < LanguageVersion.V_6)*/
	/*		FeatureIsNotAvailable (GetLocation ($1), "dictionary initializer");*/

	/*	$$ = new DictionaryElementInitializer ((List<Expression>)$2, (Expression) $5, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($3), GetLocation ($4));*/
	  }
  break;
case 477:
#line 3433 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	report.Error (1920, GetLocation ($1), "An element initializer cannot be empty");*/
	/*	$$ = new CollectionElementInitializer (GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 480:
#line 3446 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /*$$ = null; */
	 
	 }
  break;
case 482:
#line 3455 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*	Arguments list = new Arguments (4);*/
	/*	list.Add ((Argument) $1);*/
	/*	$$ = list;*/
	  }
  break;
case 483:
#line 3461 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*Arguments list = (Arguments) $1;*/
		/*if (list [list.Count - 1] is NamedArgument)*/
		/*	Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);*/
		
		/*list.Add ((Argument) $3);*/
		/*lbag.AddLocation (list, GetLocation ($2));*/
		/*$$ = list;*/
	  }
  break;
case 484:
#line 3471 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*Arguments list = (Arguments) $1;*/
	/*	NamedArgument a = (NamedArgument) $3;*/
	/*	for (int i = 0; i < list.Count; ++i) {*/
	/*		NamedArgument na = list [i] as NamedArgument;*/
	/*		if (na != null && na.Name == a.Name)*/
		/*		report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",*/
	/*				na.Name);*/
		/*}*/
		
	/*	list.Add (a);*/
	/*	lbag.AddLocation (list, GetLocation ($2));*/
	/*	$$ = list;*/
	  }
  break;
case 485:
#line 3486 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	if (lexer.putback_char == -1)*/
	 /* 		lexer.putback (')'); // TODO: Wrong but what can I do*/
	/*	Error_SyntaxError (yyToken);*/
	/*	$$ = $1;*/
	  }
  break;
case 486:
#line 3493 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	report.Error (839, GetLocation ($1), "An argument is missing");*/
	/*  	$$ = null;*/
	  }
  break;
case 487:
#line 3501 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Argument ((Expression) $1);*/
	  }
  break;
case 491:
#line 3514 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*	$$ = new Argument ((Expression) $2, Argument.AType.Ref);*/
	/*	lbag.AddLocation ($$, GetLocation ($1));*/
	  }
  break;
case 492:
#line 3519 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Argument ((Expression) $2, Argument.AType.Ref);*/
	  }
  break;
case 493:
#line 3523 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		/*$$ = new Argument ((Expression) $2, Argument.AType.Out);*/
		/*lbag.AddLocation ($$, GetLocation ($1));*/
	  }
  break;
case 494:
#line 3528 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Argument ((Expression) $2, Argument.AType.Out);*/
	  }
  break;
case 495:
#line 3532 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Argument (new Arglist ((Arguments) $3, GetLocation ($1)));*/
	/*	lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 496:
#line 3537 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Argument (new Arglist (GetLocation ($1)));*/
		/*lbag.AddLocation ($$, GetLocation ($2), GetLocation ($3));*/
	  }
  break;
case 497:
#line 3545 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new ParenthesizedExpression ((Expression) $2, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 498:
#line 3562 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (lang_version != LanguageVersion.Experimental)*/
	/*		FeatureIsNotAvailable (GetLocation ($1), "declaration expression");*/

	/*	var lt = (LocatedToken) $2;*/
	/*	var lv = new LocalVariable (current_block, lt.Value, lt.Location);*/
	/*	current_block.AddLocalName (lv);*/
	/*	$$ = new DeclarationExpression ((FullNamedExpression) $1, lv);*/
	  }
  break;
case 499:
#line 3572 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (lang_version != LanguageVersion.Experimental)*/
	/*		FeatureIsNotAvailable (GetLocation ($1), "declaration expression");*/

	/*	var lt = (LocatedToken) $2;*/
	/*	var lv = new LocalVariable (current_block, lt.Value, lt.Location);*/
	/*	current_block.AddLocalName (lv);*/
	/*	$$ = new DeclarationExpression ((FullNamedExpression) $1, lv) {*/
	/*		Initializer = (Expression) $4*/
	/*	};*/
	  }
  break;
case 501:
#line 3591 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new ElementAccess ((Expression) $1, (Arguments) $3, GetLocation ($2));*/
	/*	lbag.AddLocation ($$, GetLocation ($4));*/
	  }
  break;
case 502:
#line 3596 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (lang_version < LanguageVersion.V_6)*/
	/*		FeatureIsNotAvailable (GetLocation ($2), "null propagating operator");*/

		/*$$ = new ElementAccess ((Expression) $1, (Arguments) $4, GetLocation ($3)) {*/
		/*	ConditionalAccess = true*/
		/*};*/

		/*lbag.AddLocation ($$, GetLocation ($2), GetLocation ($5));*/
	  }
  break;
case 503:
#line 3607 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Error_SyntaxError (yyToken);*/
	/*	$$ = new ElementAccess ((Expression) $1, (Arguments) $3, GetLocation ($2));*/
	  }
  break;
case 504:
#line 3612 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Error_SyntaxError (yyToken);*/
	/*	$$ = new ElementAccess ((Expression) $1, null, GetLocation ($2));*/
	  }
  break;
case 505:
#line 3620 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		var list = new List<Expression> (4);*/
/*		list.Add ((Expression) $1);*/
/*		$$ = list;*/
	  }
  break;
case 506:
#line 3626 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var list = (List<Expression>) $1;*/
	/*	list.Add ((Expression) $3);*/
	/*	lbag.AddLocation (list, GetLocation ($2));*/
	/*	$$ = list;*/
	  }
  break;
case 507:
#line 3636 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*Arguments args = new Arguments (4);*/
		/*args.Add ((Argument) $1);*/
		/*$$ = args;*/
	  }
  break;
case 508:
#line 3642 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Arguments args = (Arguments) $1;*/
	/*	if (args [args.Count - 1] is NamedArgument && !($3 is NamedArgument))*/
	/*		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);*/
	  
		/*args.Add ((Argument) $3);*/
		/*lbag.AddLocation (args, GetLocation ($2));*/
		/*$$ = args;	  */
	  }
  break;
case 509:
#line 3655 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	$$ = new Argument ((Expression) $1);*/
	  }
  break;
case 511:
#line 3663 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new This (GetLocation ($1));*/
	  }
  break;
case 512:
#line 3670 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	$$ = new ElementAccess (new BaseThis (GetLocation ($1)), (Arguments) $3, GetLocation ($2));*/
	/*	lbag.AddLocation ($$, GetLocation ($4));*/
	  }
  break;
case 513:
#line 3675 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
	/*	$$ = new ElementAccess (null, null, GetLocation ($2));*/
	  }
  break;
case 514:
#line 3683 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) $1, GetLocation ($2));*/
	  }
  break;
case 515:
#line 3690 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) $1, GetLocation ($2));*/
	  }
  break;
case 516:
#line 3697 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($6 != null) {*/
		/*	if (lang_version <= LanguageVersion.ISO_2)*/
		/*		FeatureIsNotAvailable (GetLocation ($1), "object initializers");*/
				
		/*	$$ = new NewInitialize ((FullNamedExpression) $2, (Arguments) $4, (CollectionOrObjectInitializers) $6, GetLocation ($1));*/
	/*	} else {*/
	/*		$$ = new New ((FullNamedExpression) $2, (Arguments) $4, GetLocation ($1));*/
	/*	}*/
		
		/*lbag.AddLocation ($$, GetLocation ($3), GetLocation ($5));*/
	  }
  break;
case 517:
#line 3710 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (lang_version <= LanguageVersion.ISO_2)*/
		/*	FeatureIsNotAvailable (GetLocation ($1), "collection initializers");*/
	  
		/*$$ = new NewInitialize ((FullNamedExpression) $2, null, (CollectionOrObjectInitializers) $3, GetLocation ($1));*/
	  }
  break;
case 518:
#line 3722 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new ArrayCreation ((FullNamedExpression) $2, (List<Expression>) $4,*/
	/*			new ComposedTypeSpecifier (((List<Expression>) $4).Count, GetLocation ($3)) {*/
	 /* 				Next = (ComposedTypeSpecifier) $6*/
		/*	  	}, (ArrayInitializer) $7, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($3), GetLocation ($5));*/
	  }
  break;
case 519:
#line 3730 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	if ($4 == null)*/
	  	/*	report.Error (1586, GetLocation ($1), "Array creation must have array size or array initializer");*/

		/*$$ = new ArrayCreation ((FullNamedExpression) $2, (ComposedTypeSpecifier) $3, (ArrayInitializer) $4, GetLocation ($1));*/
	  }
  break;
case 520:
#line 3737 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (lang_version <= LanguageVersion.ISO_2)*/
		/*	FeatureIsNotAvailable (GetLocation ($1), "implicitly typed arrays");*/
	  
		/*$$ = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) $2, (ArrayInitializer) $3, GetLocation ($1));*/
	  }
  break;
case 521:
#line 3744 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*report.Error (178, GetLocation ($6), "Invalid rank specifier, expecting `,' or `]'");*/
	/*	$$ = new ArrayCreation ((FullNamedExpression) $2, null, GetLocation ($1));*/
	  }
  break;
case 522:
#line 3749 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
	/*	$$ = new New ((FullNamedExpression) $2, null, GetLocation ($1));*/
	  }
  break;
case 523:
#line 3757 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 524:
#line 3761 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_type;
	/*	$$ = $2;*/
	  }
  break;
case 525:
#line 3769 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (lang_version <= LanguageVersion.ISO_2)*/
	  	/*	FeatureIsNotAvailable (GetLocation ($1), "anonymous types");*/

	/*	$$ = new NewAnonymousType ((List<AnonymousTypeParameter>) $3, current_container, GetLocation ($1));*/
		
		/* TODO: lbag comma location*/
		/*lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 526:
#line 3779 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new EmptyCompletion ();*/
	  }
  break;
case 529:
#line 3790 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /*$$ = null; */
	 }
  break;
case 531:
#line 3798 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var a = new List<AnonymousTypeParameter> (4);*/
	/*  	a.Add ((AnonymousTypeParameter) $1);*/
	/*  	$$ = a;*/
	  }
  break;
case 532:
#line 3804 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	var a = (List<AnonymousTypeParameter>) $1;*/
	  /*	a.Add ((AnonymousTypeParameter) $3);*/
	  /*	lbag.AddLocation (a, GetLocation ($2));*/

	  /*	$$ = a;*/
	  }
  break;
case 533:
#line 3812 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new EmptyCompletion ();*/
	  }
  break;
case 534:
#line 3816 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	$$ = $1;*/
	  }
  break;
case 535:
#line 3823 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken)$1;*/
	  /*	$$ = new AnonymousTypeParameter ((Expression)$3, lt.Value, lt.Location);*/
	  	/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 536:
#line 3829 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken)$1;*/
	  /*	$$ = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),*/
	  	/*	lt.Value, lt.Location);*/
	  }
  break;
case 537:
#line 3835 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	MemberAccess ma = (MemberAccess) $1;*/
	  	/*$$ = new AnonymousTypeParameter (ma, ma.Name, ma.Location);*/
	  }
  break;
case 538:
#line 3840 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*report.Error (746, lexer.Location,*/
		/*	"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");*/
		/*$$ = null;*/
	  }
  break;
case 542:
#line 3855 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 543:
#line 3863 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		
	  }
  break;
case 544:
#line 3868 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 545:
#line 3875 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = 2;
	  }
  break;
case 546:
#line 3879 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 547:
#line 3886 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = null;*/
	  }
  break;
case 548:
#line 3890 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $1;*/
	  }
  break;
case 549:
#line 3897 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var ai = new ArrayInitializer (0, GetLocation ($1));*/
		/*ai.VariableDeclaration = current_variable;*/
		/*lbag.AddLocation (ai, GetLocation ($2));*/
	/*	$$ = ai;*/
	  }
  break;
case 550:
#line 3904 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var ai = new ArrayInitializer ((List<Expression>) $2, GetLocation ($1));*/
		/*ai.VariableDeclaration = current_variable;*/
		/*if ($3 != null) {*/
		/*	lbag.AddLocation (ai, GetLocation ($3), GetLocation ($4));*/
		/*} else {*/
		/*	lbag.AddLocation (ai, GetLocation ($4));*/
	/*	}*/
	/*	$$ = ai;*/
	  }
  break;
case 551:
#line 3918 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var list = new List<Expression> (4);*/
	/*	list.Add ((Expression) $1);*/
	/*	$$ = list;*/
	  }
  break;
case 552:
#line 3924 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var list = (List<Expression>) $1;*/
	/*	list.Add ((Expression) $3);*/
	/*	lbag.AddLocation (list, GetLocation ($2));*/
	/*	$$ = list;*/
	  }
  break;
case 553:
#line 3934 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new TypeOf ((FullNamedExpression) $3, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 555:
#line 3943 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 /*	$$ = null;*/
	 }
  break;
case 556:
#line 3951 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (lang_version < LanguageVersion.ISO_2)*/
		/*	FeatureIsNotAvailable (GetLocation ($1), "generics");*/

		/*$$ = $1;*/
	  }
  break;
case 557:
#line 3961 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $1;*/
		/*if (lang_version == LanguageVersion.ISO_1)*/
		/*	FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");*/
		/*savedLocation = GetLocation ($2);*/
		/*$$ = lt;		*/
	  }
  break;
case 558:
#line 3972 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		/*$$ = new SizeOf ((Expression) $3, GetLocation ($1));*/
		/*lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 559:
#line 3977 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new SizeOf ((Expression) $3, GetLocation ($1));*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 560:
#line 3987 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new CheckedExpr ((Expression) $3, GetLocation ($1));*/
		/*lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 561:
#line 3992 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new CheckedExpr (null, GetLocation ($1));*/
	  }
  break;
case 562:
#line 4001 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new UnCheckedExpr ((Expression) $3, GetLocation ($1));*/
		/*lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 563:
#line 4006 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new UnCheckedExpr (null, GetLocation ($1));*/
	  }
  break;
case 564:
#line 4015 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $3;*/
	/*	$$ = new MemberAccess (new Indirection ((Expression) $1, GetLocation ($2)), lt.Value, (TypeArguments) $4, lt.Location);*/
	  }
  break;
case 565:
#line 4023 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_anonymous (false, (ParametersCompiled) $2, false, GetLocation ($1));*/
	  }
  break;
case 566:
#line 4027 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $4);*/
		/*if ((ParametersCompiled) $2 != ParametersCompiled.Undefined) {*/
		/*	lbag.AddLocation ($$, GetLocation ($1), PopLocation (), PopLocation ());*/
		/*} else {*/
		/*	lbag.AddLocation ($$, GetLocation ($1));*/
	/*	}*/
	  }
  break;
case 567:
#line 4036 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_anonymous (false, (ParametersCompiled) $3, true, GetLocation ($1));*/
	  }
  break;
case 568:
#line 4040 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $5);*/
		
	/*	if ((ParametersCompiled) $3 != ParametersCompiled.Undefined) {*/
	/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2), PopLocation (), PopLocation ());*/
	/*	} else {*/
	/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2));*/
	/*	}*/
	  }
  break;
case 569:
#line 4053 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = ParametersCompiled.Undefined;*/
	  }
  break;
case 571:
#line 4061 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 572:
#line 4065 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/
	 /* 	$$ = $3;*/
	  /*	PushLocation (GetLocation ($3));*/
	 /* 	PushLocation (GetLocation ($1));*/
	
	  }
  break;
case 573:
#line 4076 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (lang_version < LanguageVersion.ISO_2)*/
		/*	FeatureIsNotAvailable (GetLocation ($1), "default value expression");*/

		/*$$ = new DefaultValueExpression ((Expression) $3, GetLocation ($1));*/
		/*lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 575:
#line 4088 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Unary (Unary.Operator.LogicalNot, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 576:
#line 4092 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Unary (Unary.Operator.OnesComplement, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 577:
#line 4096 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Cast ((FullNamedExpression) $2, (Expression) $4, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($3));*/
	  }
  break;
case 578:
#line 4101 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (!async_block) {*/
		/*	 if (current_anonymous_method is LambdaExpression) {*/
		/*		report.Error (4034, GetLocation ($1),*/
		/*			"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");*/
		/*	} else if (current_anonymous_method != null) {*/
		/*		report.Error (4035, GetLocation ($1),*/
		/*			"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");*/
		/*	} else if (interactive_async != null) {*/
		/*		current_block.Explicit.RegisterAsyncAwait ();*/
		/*		interactive_async = true;*/
		/*	} else {*/
	/*			report.Error (4033, GetLocation ($1),*/
	/*				"The `await' operator can only be used when its containing method is marked with the `async' modifier");*/
	/*		}*/
	/*	} else {*/
	/*		current_block.Explicit.RegisterAsyncAwait ();*/
	/*	}*/
		
	/*	$$ = new Await ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 579:
#line 4123 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Unary (Unary.Operator.LogicalNot, null, GetLocation ($1));*/
	  }
  break;
case 580:
#line 4129 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Unary (Unary.Operator.OnesComplement, null, GetLocation ($1));*/
	  }
  break;
case 581:
#line 4135 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Cast ((FullNamedExpression) $2, null, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($3));*/
	  }
  break;
case 582:
#line 4142 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Await (null, GetLocation ($1));*/
	  }
  break;
case 584:
#line 4156 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	 /* 	$$ = new Unary (Unary.Operator.UnaryPlus, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 585:
#line 4160 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*	$$ = new Unary (Unary.Operator.UnaryNegation, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 586:
#line 4164 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 587:
#line 4168 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 588:
#line 4172 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Indirection ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 589:
#line 4176 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Unary (Unary.Operator.AddressOf, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 590:
#line 4180 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		Error_SyntaxError (yyToken);

	 /* 	$$ = new Unary (Unary.Operator.UnaryPlus, null, GetLocation ($1));*/
	  }
  break;
case 591:
#line 4186 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		Error_SyntaxError (yyToken);

	/*	$$ = new Unary (Unary.Operator.UnaryNegation, null, GetLocation ($1));*/
	  }
  break;
case 592:
#line 4192 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation ($1));*/
	  }
  break;
case 593:
#line 4198 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation ($1));*/
	  }
  break;
case 594:
#line 4204 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new Indirection (null, GetLocation ($1));*/
	  }
  break;
case 595:
#line 4210 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Unary (Unary.Operator.AddressOf, null, GetLocation ($1));*/
	  }
  break;
case 597:
#line 4220 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Binary (Binary.Operator.Multiply, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 598:
#line 4225 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.Division, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 599:
#line 4230 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.Modulus, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 600:
#line 4235 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.Multiply, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 601:
#line 4242 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.Division, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 602:
#line 4249 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.Modulus, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 604:
#line 4260 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.Addition, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 605:
#line 4265 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.Subtraction, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 606:
#line 4270 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.Addition, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 607:
#line 4277 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new Binary (Binary.Operator.Subtraction, (Expression) $1, null);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 608:
#line 4284 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new As ((Expression) $1, (Expression) $3, GetLocation ($2));*/
	  }
  break;
case 609:
#line 4288 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var is_expr = new Is ((Expression) $1, (Expression) $3, GetLocation ($2));*/
		/*if ($4 != null) {*/
		/*	if (lang_version != LanguageVersion.Experimental)*/
			/*	FeatureIsNotAvailable (GetLocation ($4), "type pattern matching");*/

		/*	var lt = (LocatedToken) $4;*/
		/*	is_expr.Variable = new LocalVariable (current_block, lt.Value, lt.Location);*/
		/*	current_block.AddLocalName (is_expr.Variable);*/
		/*}*/

		/*$$ = is_expr;*/
	  }
  break;
case 610:
#line 4302 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var is_expr = new Is ((Expression) $1, (Expression) $3, GetLocation ($2));*/
		/*if (lang_version != LanguageVersion.Experimental)*/
		/*	FeatureIsNotAvailable (GetLocation ($2), "pattern matching");*/

		/*$$ = is_expr;*/
	  }
  break;
case 611:
#line 4310 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new As ((Expression) $1, null, GetLocation ($2));*/
	  }
  break;
case 612:
#line 4316 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new Is ((Expression) $1, null, GetLocation ($2));*/
	  }
  break;
case 613:
#line 4322 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $1;*/
		/*$$ = new Is (new SimpleName (lt.Value, lt.Location), (Expression) $3, GetLocation ($2));*/
	  }
  break;
case 614:
#line 4327 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $1;*/
		/*$$ = new As (new SimpleName (lt.Value, lt.Location), (Expression) $3, GetLocation ($2));*/
	  }
  break;
case 617:
#line 4340 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Unary (Unary.Operator.UnaryPlus, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 618:
#line 4344 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Unary (Unary.Operator.UnaryNegation, (Expression) $2, GetLocation ($1));*/
	  }
  break;
case 621:
#line 4350 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Cast ((FullNamedExpression) $2, (Expression) $4, GetLocation ($1));*/
		/*lbag.AddLocation ($$, GetLocation ($3));*/
	  }
  break;
case 622:
#line 4355 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new WildcardPattern (GetLocation ($1));*/
	  }
  break;
case 625:
#line 4364 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new RecursivePattern ((ATypeNameExpression) $1, (Arguments) $3, GetLocation ($2));*/
	  }
  break;
case 626:
#line 4371 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new PropertyPattern ((ATypeNameExpression) $1, (List<PropertyPatternMember>) $3, GetLocation ($2));*/
	  }
  break;
case 627:
#line 4378 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var list = new List<PropertyPatternMember> ();*/
		/*list.Add ((PropertyPatternMember) $1);*/
		/*$$ = list;*/
	  }
  break;
case 628:
#line 4384 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var list = (List<PropertyPatternMember>) $1;*/
		/*list.Add ((PropertyPatternMember) $3);*/
		/*$$ = list;*/
	  }
  break;
case 629:
#line 4393 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $1;*/
	/*	$$ = new PropertyPatternMember (lt.Value, (Expression) $3, lt.Location);*/
	  }
  break;
case 631:
#line 4402 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	if ($2 != null) {*/
		/*	var lt = (LocatedToken) $2;*/
		/*	var variable = new LocalVariable (current_block, lt.Value, lt.Location);*/
		/*	current_block.AddLocalName (variable);*/
		/*}*/
	  }
  break;
case 632:
#line 4413 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Arguments (0);*/
	  }
  break;
case 634:
#line 4421 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Arguments args = new Arguments (4);*/
	/*	args.Add ((Argument) $1);*/
	/*	$$ = args;*/
	  }
  break;
case 635:
#line 4427 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Arguments args = (Arguments) $1;*/
	/*	if (args [args.Count - 1] is NamedArgument && !($3 is NamedArgument))*/
	/*		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);*/

	/*	args.Add ((Argument) $3);*/
	/*	$$ = args;*/
	  }
  break;
case 636:
#line 4439 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Argument ((Expression) $1);*/
	  }
  break;
case 637:
#line 4443 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		/*$$ = new NamedArgument (lt.Value, lt.Location, (Expression) $3);*/
	  }
  break;
case 639:
#line 4452 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*$$ = new Binary (Binary.Operator.LeftShift, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 640:
#line 4457 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.RightShift, (Expression) $1, (Expression) $3);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 641:
#line 4462 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.LeftShift, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 642:
#line 4469 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.RightShift, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 644:
#line 4480 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.LessThan, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 645:
#line 4485 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.GreaterThan, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 646:
#line 4490 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.LessThanOrEqual, (Expression) $1, (Expression) $3);*/
/*		lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 647:
#line 4495 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 648:
#line 4500 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/* $$ = new Binary (Binary.Operator.LessThan, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 649:
#line 4507 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new Binary (Binary.Operator.GreaterThan, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 650:
#line 4514 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/*$$ = new Binary (Binary.Operator.LessThanOrEqual, (Expression) $1, null);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 651:
#line 4521 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 653:
#line 4532 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Binary (Binary.Operator.Equality, (Expression) $1, (Expression) $3);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 654:
#line 4537 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.Inequality, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 655:
#line 4542 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.Equality, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 656:
#line 4549 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.Inequality, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 658:
#line 4560 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = new Binary (Binary.Operator.BitwiseAnd, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 659:
#line 4565 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.BitwiseAnd, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 661:
#line 4576 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.ExclusiveOr, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 662:
#line 4581 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.ExclusiveOr, (Expression) $1, null);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 664:
#line 4592 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.BitwiseOr, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 665:
#line 4597 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.BitwiseOr, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 667:
#line 4608 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.LogicalAnd, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 668:
#line 4613 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.LogicalAnd, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 670:
#line 4624 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Binary (Binary.Operator.LogicalOr, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 671:
#line 4629 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Binary (Binary.Operator.LogicalOr, (Expression) $1, null);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 673:
#line 4640 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (lang_version < LanguageVersion.ISO_2)*/
	/*		FeatureIsNotAvailable (GetLocation ($2), "null coalescing operator");*/
			
	/*	$$ = new Nullable.NullCoalescingOperator ((Expression) $1, (Expression) $3);*/
/*		lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 675:
#line 4652 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Conditional (new BooleanExpression ((Expression) $1), (Expression) $3, (Expression) $5, GetLocation ($2));*/
	/*	lbag.AddLocation ($$, GetLocation ($4));*/
	  }
  break;
case 676:
#line 4657 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		/* $$ = new Conditional (new BooleanExpression ((Expression) $1), (Expression) $3, null, GetLocation ($2));*/
	  }
  break;
case 677:
#line 4663 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	$$ = new Conditional (new BooleanExpression ((Expression) $1), (Expression) $3, null, GetLocation ($2));*/
	/*	lbag.AddLocation ($$, GetLocation ($4));*/
	  }
  break;
case 678:
#line 4670 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (Token.CLOSE_BRACE);

/*		$$ = new Conditional (new BooleanExpression ((Expression) $1), (Expression) $3, null, GetLocation ($2));*/
/*		lbag.AddLocation ($$, GetLocation ($4));*/
		lexer.putback ('}');
	  }
  break;
case 679:
#line 4681 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new SimpleAssign ((Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 680:
#line 4686 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.Multiply, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 681:
#line 4691 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.Division, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 682:
#line 4696 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.Modulus, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 683:
#line 4701 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.Addition, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 684:
#line 4706 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.Subtraction, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 685:
#line 4711 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.LeftShift, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 686:
#line 4716 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.RightShift, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 687:
#line 4721 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 688:
#line 4726 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 689:
#line 4731 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) $1, (Expression) $3);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 690:
#line 4739 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/* var pars = new List<Parameter> (4);*/
	/*	pars.Add ((Parameter) $1);*/
	/*	parameterListCommas.Clear ();*/
	/*	$$ = pars;*/
	  }
  break;
case 691:
#line 4746 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var pars = (List<Parameter>) $1;*/
	/*	Parameter p = (Parameter)$3;*/
	/*	if (pars[0].GetType () != p.GetType ()) {*/
	/*		report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");*/
	/*	}*/
		
	/*	pars.Add (p);*/
		/*parameterListCommas.Add (GetLocation ($2));*/

		/*$$ = pars;*/
	  }
  break;
case 692:
#line 4762 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $3;*/

	/*	$$ = new Parameter ((FullNamedExpression) $2, lt.Value, (Parameter.Modifier) $1, null, lt.Location);*/
	  }
  break;
case 693:
#line 4768 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;*/

	/*	$$ = new Parameter ((FullNamedExpression) $1, lt.Value, Parameter.Modifier.NONE, null, lt.Location);*/
	  }
  break;
case 694:
#line 4774 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var lt = (LocatedToken) $1;*/
	/*	$$ = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
	  }
  break;
case 695:
#line 4779 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var lt = (LocatedToken) Error_AwaitAsIdentifier ($1);*/
	/*	$$ = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
	  }
  break;
case 696:
#line 4786 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = ParametersCompiled.EmptyReadOnlyParameters; */
	}
  break;
case 697:
#line 4788 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*	var pars_list = (List<Parameter>) $1;*/
	/*	$$ = new ParametersCompiled (pars_list.ToArray ());*/
	/*	lbag.AddLocation ($$, parameterListCommas);*/
	  }
  break;
case 698:
#line 4796 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_block (Location.Null);*/
	  }
  break;
case 699:
#line 4800 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Block b = end_block (Location.Null);*/
	/*	b.IsCompilerGenerated = true;*/
	/*	b.AddStatement (new ContextualReturn ((Expression) $2));*/
	/*	$$ = b;*/
	  }
  break;
case 701:
#line 4808 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
	/*	Block b = end_block (Location.Null);*/
	/*	b.IsCompilerGenerated = true;*/

	/*	Error_SyntaxError (yyToken);*/
/*		$$ = null;*/
	  }
  break;
case 703:
#line 4822 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Error_SyntaxError (yyToken);*/
	/*	$$ = null;*/
	  }
  break;
case 704:
#line 4830 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;	*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
		/*start_anonymous (true, new ParametersCompiled (p), false, lt.Location);*/
	  }
  break;
case 705:
#line 4836 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $4);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 706:
#line 4841 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) Error_AwaitAsIdentifier ($1);*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
/*		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);*/
	  }
  break;
case 707:
#line 4847 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $4);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 708:
#line 4852 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		var lt = (LocatedToken) $2;*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
/*		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);*/
	  }
  break;
case 709:
#line 4858 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $5);*/
/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 710:
#line 4863 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 711:
#line 4867 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	valid_param_mod = 0;*/
	/*	start_anonymous (true, (ParametersCompiled) $3, false, GetLocation ($1));*/
	  }
  break;
case 712:
#line 4872 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $7);*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($4), GetLocation ($5));*/
	  }
  break;
case 713:
#line 4877 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  */
	  }
  break;
case 714:
#line 4881 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	valid_param_mod = 0;*/
	/*	start_anonymous (true, (ParametersCompiled) $4, true, GetLocation ($1));*/
	  }
  break;
case 715:
#line 4886 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $8);*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2), GetLocation ($5), GetLocation ($6));*/
	  }
  break;
case 720:
#line 4901 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new ArglistAccess (GetLocation ($1));*/
	  }
  break;
case 721:
#line 4908 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new RefValueExpr ((Expression) $3, (FullNamedExpression) $5, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4), GetLocation ($6));*/
	  }
  break;
case 722:
#line 4913 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new RefTypeExpr ((Expression) $3, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 723:
#line 4918 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new MakeRefExpr ((Expression) $3, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($2), GetLocation ($4));	  */
	  }
  break;
case 725:
#line 4930 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new BooleanExpression ((Expression) $1);*/
	  }
  break;
case 726:
#line 4937 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	$$ = null;*/
	  }
  break;
case 728:
#line 4945 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $2;*/

		/* Cannot use opt_formal_parameter_list because it can be shared instance for empty parameters*/
	  /*	lbag.AppendToMember (current_container, GetLocation ($1), GetLocation ($3));*/

	/*	if (lang_version != LanguageVersion.Experimental)*/
/*			FeatureIsNotAvailable (GetLocation ($1), "primary constructor");*/
	  }
  break;
case 729:
#line 4958 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 730:
#line 4962 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = null;
	  }
  break;
case 731:
#line 4966 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 732:
#line 4970 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 733:
#line 4974 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 734:
#line 4979 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }
  break;
case 735:
#line 4995 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 736:
#line 4999 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;

		ClassDeclaration c = new ClassDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop],GetLocation(yyVals[-2+yyTop]) );		
		push_current_container (c);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }
  break;
case 737:
#line 5008 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

	if (yyVals[-1+yyTop] != null)
		current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 738:
#line 5026 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 739:
#line 5032 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = pop_current_class ();
	  }
  break;
case 740:
#line 5039 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 741:
#line 5041 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[0+yyTop];  }
  break;
case 742:
#line 5046 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }
  break;
case 743:
#line 5051 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 745:
#line 5059 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
			"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
		((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }
  break;
case 746:
#line 5078 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.NEW;	
		/*if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation ($1), "Keyword `new' is not allowed on namespace elements");*/
	  }
  break;
case 747:
#line 5084 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {	yyVal = Modifiers.PUBLIC;  }
  break;
case 748:
#line 5086 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.PROTECTED;
	
	  }
  break;
case 749:
#line 5091 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.INTERNAL;

	  }
  break;
case 750:
#line 5096 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.PRIVATE;
	  }
  break;
case 751:
#line 5100 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.ABSTRACT;
	  }
  break;
case 752:
#line 5104 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.SEALED;
	  }
  break;
case 753:
#line 5108 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.STATIC;
	  }
  break;
case 754:
#line 5112 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = Modifiers.READONLY;
	  }
  break;
case 755:
#line 5116 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.VIRTUAL;
	  }
  break;
case 756:
#line 5120 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.OVERRIDE;
	  }
  break;
case 757:
#line 5124 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.EXTERN;
	  }
  break;
case 758:
#line 5128 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = Modifiers.VOLATILE;*/
	  }
  break;
case 759:
#line 5132 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = Modifiers.UNSAFE;*/
	/*	if (!settings.Unsafe)*/
	/*		Error_UnsafeCodeNotAllowed (GetLocation ($1));*/
	  }
  break;
case 760:
#line 5138 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = Modifiers.ASYNC;*/
	  }
  break;
case 763:
#line 5150 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_type.SetBaseTypes ((List<FullNamedExpression>) $2);*/
	/*	lbag.AppendToMember (current_type, GetLocation ($1));*/
	 }
  break;
case 764:
#line 5155 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	current_type.SetBaseTypes ((List<FullNamedExpression>) $2);*/
	  }
  break;
case 766:
#line 5165 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 767:
#line 5172 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = new List<TypeParameterConstraints> (1);
		constraints.Add ((TypeParameterConstraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 768:
#line 5178 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = (List<TypeParameterConstraints>) yyVals[-1+yyTop];
		TypeParameterConstraints new_constraint = (TypeParameterConstraints)yyVals[0+yyTop];

		foreach (TypeParameterConstraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
				"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
		}
	}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 769:
#line 5197 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new TypeParameterConstraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	
	  }
  break;
case 770:
#line 5203 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new TypeParameterConstraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 771:
#line 5213 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 772:
#line 5219 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
	var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
		} else {
		 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);

		yyVal = constraints;
	  }
  break;
case 773:
#line 5246 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is ComposedType)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedType)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 774:
#line 5253 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 775:
#line 5257 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 776:
#line 5261 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 777:
#line 5281 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	/*	start_block (GetLocation ($1));*/
	  }
  break;
case 778:
#line 5286 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $4;*/
	  }
  break;
case 779:
#line 5293 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	--lexer.parsing_block;
	/*	$$ = end_block (GetLocation ($1));*/
	  }
  break;
case 780:
#line 5298 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	--lexer.parsing_block;
	/*	$$ = end_block (lexer.Location);*/
	  }
  break;
case 781:
#line 5307 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
/*		current_block.StartLocation = GetLocation ($1);*/
	  }
  break;
case 782:
#line 5312 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	/*	$$ = end_block (GetLocation ($4));*/
	  }
  break;
case 783:
#line 5316 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		report.Error (1525, GetLocation ($1), "Unexpected symbol '}', expected '{'");*/
	/*	lexer.putback ('}');*/
	/*	$$ = end_block (GetLocation ($1));*/
	  }
  break;
case 784:
#line 5325 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	/*	current_block.StartLocation = GetLocation ($1);*/
	  }
  break;
case 785:
#line 5330 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	/*	$$ = end_block (GetLocation ($4));*/
	  }
  break;
case 790:
#line 5348 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		current_block.AddStatement ((Statement) $1);*/
	  }
  break;
case 791:
#line 5352 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		current_block.AddStatement ((Statement) $1);*/
	  }
  break;
case 793:
#line 5358 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	var lt =(LocatedToken) $1;
		var sn = new SimpleName (lt.Value, lt.Location);
		current_block.AddStatement(new StatementErrorExpression (sn));
		$$ = null;*/
	}
  break;
case 794:
#line 5367 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 797:
#line 5386 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_block.AddStatement ((Statement) $1);*/
	  }
  break;
case 798:
#line 5390 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_block.AddStatement ((Statement) $1);*/
	  }
  break;
case 827:
#line 5431 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 828:
#line 5436 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 829:
#line 5441 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new EmptyStatement (GetLocation ($1));*/
	  }
  break;
case 830:
#line 5449 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
	/*	$$ = new EmptyStatement (lexer.Location);*/
	  }
  break;
case 831:
#line 5457 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation ($2));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);*/
	  }
  break;
case 834:
#line 5470 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($1 is VarExpr)
			$1 = new SimpleName ("var", ((VarExpr) $1).Location);
	  
		$$ = new ComposedCast ((FullNamedExpression) $1, (ComposedTypeSpecifier) $2);*/
	  }
  break;
case 835:
#line 5486 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*
		// Ok, the above "primary_expression" is there to get rid of
		// both reduce/reduce and shift/reduces in the grammar, it should
		// really just be "type_name".  If you use type_name, a reduce/reduce
		// creeps up.  If you use namespace_or_type_name (which is all we need
		// really) two shift/reduces appear.
		// 

		// So the super-trick is that primary_expression
		// can only be either a SimpleName or a MemberAccess. 
		// The MemberAccess case arises when you have a fully qualified type-name like :
		// Foo.Bar.Blah i;
		// SimpleName is when you have
		// Blah i;
		
		var expr = (ATypeNameExpression) $1;
		if ($2 == null) {
			if (expr.Name == "var" && expr is SimpleName)
				$$ = new VarExpr (expr.Location);
			else
				$$ = $1;
		} else {
			$$ = new ComposedCast (expr, (ComposedTypeSpecifier) $2);
		}*/
	  }
  break;
case 836:
#line 5513 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var expr = (ATypeNameExpression) $1;*/
	/*	$$ = new ComposedCast (expr, (ComposedTypeSpecifier) $2);*/
	  }
  break;
case 840:
#line 5524 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	 	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 841:
#line 5532 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 843:
#line 5540 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /* 	$$ = Error_AwaitAsIdentifier ($1);*/
	  }
  break;
case 844:
#line 5547 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) $1, li);*/
	  }
  break;
case 845:
#line 5554 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = current_variable;
		current_variable = null;
		if ($4 != null)
			lbag.AddLocation ($$, PopLocation (), GetLocation ($6));
		else
			lbag.AddLocation ($$, GetLocation ($6));*/
	  }
  break;
case 846:
#line 5563 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $3;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) $2, li);*/
	  }
  break;
case 847:
#line 5570 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (current_variable.Initializer != null) {
			lbag.AddLocation (current_variable, GetLocation ($1), savedLocation, GetLocation ($7));
		} else {
			lbag.AddLocation (current_variable, GetLocation ($1), GetLocation ($7));
		}
		$$ = current_variable;;
		current_variable = null;*/
	  }
  break;
case 849:
#line 5583 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* Redundant, but wont regress*/
		report.Error (1525, lexer.Location, "Unexpected symbol }");
		lexer.putback ('}');
		/*$$ = $1;*/
	  }
  break;
case 851:
#line 5594 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_variable.Initializer = (Expression) $2;
		PushLocation (GetLocation ($1));
		$$ = current_variable;*/
	  }
  break;
case 852:
#line 5600 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }
  break;
case 856:
#line 5618 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}*/
	  }
  break;
case 859:
#line 5633 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation ($1));*/
	  }
  break;
case 860:
#line 5642 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) $4);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 861:
#line 5654 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (145, lexer.Location, "A const field requires a value to be provided");*/
	  }
  break;
case 862:
#line 5658 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	savedLocation = GetLocation ($1);
		current_variable.Initializer = (Expression) $2;*/
	  }
  break;
case 867:
#line 5676 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) $4);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 869:
#line 5689 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new StackAlloc ((Expression) $2, (Expression) $4, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($3), GetLocation ($5));*/
	  }
  break;
case 870:
#line 5694 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (1575, GetLocation ($1), "A stackalloc expression requires [] after type");*/
	/*	$$ = new StackAlloc ((Expression) $2, null, GetLocation ($1));		*/
	  }
  break;
case 871:
#line 5702 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $1;*/
	/*	lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 872:
#line 5706 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 873:
#line 5708 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $1;*/
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }
  break;
case 874:
#line 5716 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 875:
#line 5717 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 876:
#line 5726 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*ExpressionStatement s = $1 as ExpressionStatement;
		if (s == null) {
			var expr = $1 as Expression;
			$$ = new StatementErrorExpression (expr);
		} else {
			$$ = new StatementExpression (s);
		}*/
	  }
  break;
case 877:
#line 5739 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
	/*	$$ = new StatementExpression (new OptionalAssign (expr, lexer.Location));*/
	  }
  break;
case 878:
#line 5744 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		/*$$ = new EmptyStatement (GetLocation ($1));*/
	  }
  break;
case 881:
#line 5758 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
/*  if ($5 is EmptyStatement)
			Warning_EmptyStatement (GetLocation ($5));
		
		$$ = new If ((BooleanExpression) $3, (Statement) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 882:
#line 5767 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = new If ((BooleanExpression) $3, (Statement) $5, (Statement) $7, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4), GetLocation ($6));
		
		if ($5 is EmptyStatement)
			Warning_EmptyStatement (GetLocation ($5));
		if ($7 is EmptyStatement)
			Warning_EmptyStatement (GetLocation ($7));*/
	  }
  break;
case 883:
#line 5777 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
	/*	$$ = new If ((BooleanExpression) $3, null, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 884:
#line 5787 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_block (GetLocation ($5));*/
	  }
  break;
case 885:
#line 5791 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Switch ((Expression) $3, (ExplicitBlock) current_block.Explicit, GetLocation ($1));	
		end_block (GetLocation ($8));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4), GetLocation ($5), GetLocation ($8));*/
	  }
  break;
case 886:
#line 5797 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
	/*	$$ = new Switch ((Expression) $3, null, GetLocation ($1));	
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 887:
#line 5807 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); */
	  }
  break;
case 891:
#line 5817 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 893:
#line 5828 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*	  	var label = (SwitchLabel) $1;*/
/*	  	label.SectionStart = true;*/
/*		current_block.AddStatement (label);*/
	  }
  break;
case 894:
#line 5834 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_block.AddStatement ((Statement) $2);*/
	  }
  break;
case 895:
#line 5841 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/* 	$$ = new SwitchLabel ((Expression) $2, GetLocation ($1));*/
	 /*	lbag.AddLocation ($$, GetLocation ($3));*/
	 }
  break;
case 896:
#line 5846 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new SwitchLabel ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 897:
#line 5863 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new SwitchLabel (null, GetLocation ($1));*/
	  }
  break;
case 902:
#line 5877 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($5 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($5));
	  
		$$ = new While ((BooleanExpression) $3, (Statement) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 903:
#line 5885 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
	/*	$$ = new While ((BooleanExpression) $3, null, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 904:
#line 5895 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Do ((Statement) $2, (BooleanExpression) $5, GetLocation ($1), GetLocation ($3));*/
	/*	lbag.AddStatement ($$, GetLocation ($3), GetLocation ($4), GetLocation ($6), GetLocation ($7));*/
	  }
  break;
case 905:
#line 5900 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new Do ((Statement) $2, null, GetLocation ($1), Location.Null);*/
	  }
  break;
case 906:
#line 5905 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
	/*	$$ = new Do ((Statement) $2, (BooleanExpression) $5, GetLocation ($1), GetLocation ($3));
		lbag.AddStatement ($$, GetLocation ($3), GetLocation ($4));*/
	  }
  break;
case 907:
#line 5915 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation ($1));
		current_block.AddStatement (f);
		lbag.AddStatement (f, current_block.StartLocation);
		$$ = f;*/
	  }
  break;
case 908:
#line 5924 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $4;*/
	  }
  break;
case 909:
#line 5932 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*For f =  (For) $0;
		f.Initializer = (Statement) $1;
		lbag.AddLocation (f, GetLocation ($2));
		$$ = f;*/
	  }
  break;
case 910:
#line 5939 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $4;*/
	  }
  break;
case 911:
#line 5942 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (1525, GetLocation ($2), "Unexpected symbol ')', expected ';'");
		For f =  (For) $0;
		f.Initializer = (Statement) $1;
		lbag.AddLocation (f, GetLocation ($2));
		$$ = end_block (GetLocation ($2));*/
	}
  break;
case 912:
#line 5953 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	For f =  (For) $0;
		f.Condition = (BooleanExpression) $1;
		lbag.AddLocation (f, GetLocation ($2));
		$$ = f;*/
	  }
  break;
case 913:
#line 5960 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $4;*/
	  }
  break;
case 914:
#line 5964 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*report.Error (1525, GetLocation ($2), "Unexpected symbol ')', expected ';'");
		For f =  (For) $0;
		f.Condition = (BooleanExpression) $1;
		lbag.AddLocation (f, GetLocation ($2));
		$$ = end_block (GetLocation ($2));*/
	}
  break;
case 915:
#line 5976 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	For f =  (For) $0;
		f.Iterator = (Statement) $1;
		
		if ($3 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($3));
	  
		f.Statement = (Statement) $3;
		lbag.AddLocation (f, GetLocation ($2));

		$$ = end_block (GetLocation ($2));*/
	  }
  break;
case 916:
#line 5989 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = end_block (current_block.StartLocation);*/
	  }
  break;
case 917:
#line 5996 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = new EmptyStatement (lexer.Location); */
	}
  break;
case 919:
#line 6003 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $2;
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) $1, li);*/
	  }
  break;
case 920:
#line 6010 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = current_variable;
		if ($4 != null)
			lbag.AddLocation (current_variable, PopLocation ());

		current_variable = null;*/
	  }
  break;
case 922:
#line 6021 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = null;*/
	 }
  break;
case 924:
#line 6027 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = new EmptyStatement (lexer.Location); */
	}
  break;
case 928:
#line 6039 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /* 	var sl = $1 as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) $1, (Statement) $3);
			lbag.AddStatement (sl, GetLocation ($2));
	  	} else {
	  		sl.Add ((Statement) $3);
	  		lbag.AddLocation (sl, GetLocation ($2));
	  		
	  	}
	  		
		$$ = sl;*/
	  }
  break;
case 929:
#line 6056 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (230, GetLocation ($1), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) $3, null, null, null, null, GetLocation ($1));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation ($2));
		$$ = end_block (GetLocation ($4));*/
	  }
  break;
case 930:
#line 6069 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	
	/*	start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) $4;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) $3, li, null, null, null, GetLocation ($1));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation ($2));
		$$ = end_block (GetLocation ($5));*/
	  }
  break;
case 931:
#line 6086 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) $4;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		$$ = li;*/
	  }
  break;
case 932:
#line 6096 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($9 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($9));
		
		Foreach f = new Foreach ((Expression) $3, (LocalVariable) $8, (Expression) $6, (Statement) $9, current_block, GetLocation ($1));
		lbag.AddStatement (f, GetLocation ($2), GetLocation ($5), GetLocation ($7));
		end_block (GetLocation ($7));
		
		$$ = f;*/
	  }
  break;
case 933:
#line 6107 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		var lt = $4 as LocatedToken;
		var li = lt != null ? new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location) : null;
		
		Foreach f = new Foreach ((Expression) $3, li, null, null, null, GetLocation ($1));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation ($2));
		$$ = end_block (GetLocation ($5));*/
	  }
  break;
case 934:
#line 6120 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Foreach f = new Foreach ((Expression) $3, null, null, null, null, GetLocation ($1));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation ($2));
		$$ = f;*/
	  }
  break;
case 941:
#line 6140 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Break (GetLocation ($1));*/
	/*	lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 942:
#line 6148 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Continue (GetLocation ($1));*/
/*		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 943:
#line 6153 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
/*		$$ = new Continue (GetLocation ($1));*/
	  }
  break;
case 944:
#line 6161 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;
		$$ = new Goto (lt.Value, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($3));*/
	  }
  break;
case 945:
#line 6167 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new GotoCase ((Expression) $3, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 946:
#line 6172 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new GotoDefault (GetLocation ($1));*/
/*		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($3));*/
	  }
  break;
case 947:
#line 6180 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = new Return ((Expression) $2, GetLocation ($1));*/
/*		lbag.AddStatement ($$, GetLocation ($3));*/
	  }
  break;
case 948:
#line 6185 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new Return ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 949:
#line 6190 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
/*		$$ = new Return (null, GetLocation ($1));*/
	  }
  break;
case 950:
#line 6198 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Throw ((Expression) $2, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($3));*/
	  }
  break;
case 951:
#line 6203 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new Throw ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 952:
#line 6208 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new Throw (null, GetLocation ($1));*/
	  }
  break;
case 953:
#line 6216 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if ($3 == null) {
			report.Error (1627, GetLocation ($4), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		$$ = new Yield ((Expression) $3, lt.Location);
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 954:
#line 6232 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	var lt = (LocatedToken) $1;
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if ($3 == null) {
			report.Error (1627, GetLocation ($4), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		$$ = new Yield ((Expression) $3, lt.Location);
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 955:
#line 6250 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		$$ = new YieldBreak (lt.Location);
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($3));*/
	  }
  break;
case 958:
#line 6272 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new TryCatch ((Block) $2, (List<Catch>) $3, GetLocation ($1), false);*/
	  }
  break;
case 959:
#line 6276 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new TryFinally ((Statement) $2, (ExplicitBlock) $4, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($3));*/
	  }
  break;
case 960:
#line 6281 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = new TryFinally (new TryCatch ((Block) $2, (List<Catch>) $3, GetLocation ($1), true), (ExplicitBlock) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($4));*/
	  }
  break;
case 961:
#line 6286 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (1524, yyToken);
/*		$$ = new TryCatch ((Block) $2, null, GetLocation ($1), false);*/
	  }
  break;
case 962:
#line 6294 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var l = new List<Catch> (2);

		l.Add ((Catch) $1);
		$$ = l;*/
	  }
  break;
case 963:
#line 6301 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var l = (List<Catch>) $1;
		
		Catch c = (Catch) $2;
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		$$ = l;*/
	  }
  break;
case 966:
#line 6322 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var c = new Catch ((ExplicitBlock) $3, GetLocation ($1));
	  	c.Filter = (CatchFilterExpression) $2;
	  	$$ = c;*/
	  }
  break;
case 967:
#line 6328 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		start_block (GetLocation ($2));
		var c = new Catch ((ExplicitBlock) current_block, GetLocation ($1));
		c.TypeExpression = (FullNamedExpression) $3;

		if ($4 != null) {
			var lt = (LocatedToken) $4;
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation ($2), GetLocation ($5));
		$$ = c;*/
	/*	lexer.parsing_catch_when = true;*/
	  }
  break;
case 968:
#line 6344 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	((Catch) $6).Filter = (CatchFilterExpression) $7;*/
	/*	$$ = $6;*/
	  }
  break;
case 969:
#line 6349 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		/*$$ = new Catch (null, GetLocation ($1));*/
	  }
  break;
case 970:
#line 6363 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $1;*/
	  }
  break;
case 971:
#line 6367 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*end_block (Location.Null);*/
		Error_SyntaxError (yyToken);
	/*	$$ = null;*/
	  }
  break;
case 972:
#line 6375 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 973:
#line 6379 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 974:
#line 6383 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (lang_version <= LanguageVersion.V_5)
			FeatureIsNotAvailable (GetLocation ($1), "exception filter");

		$$ = new CatchFilterExpression ((Expression) $4, GetLocation ($1));
		lbag.AddLocation ($$, GetLocation ($3), GetLocation ($5));*/
	  }
  break;
case 975:
#line 6394 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*  $$ = new Checked ((Block) $2, GetLocation ($1));*/
	  }
  break;
case 976:
#line 6401 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Unchecked ((Block) $2, GetLocation ($1));*/
	  }
  break;
case 977:
#line 6408 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation ($1));*/
	  }
  break;
case 978:
#line 6411 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Unsafe ((Block) $3, GetLocation ($1));*/
	  }
  break;
case 979:
#line 6418 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if ($5 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($5));
	  
		$$ = new Lock ((Expression) $3, (Statement) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 980:
#line 6426 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
/*
		$$ = new Lock ((Expression) $3, null, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 981:
#line 6436 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /*   start_block (GetLocation ($2));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) $4;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) $3, li);*/
	  }
  break;
case 982:
#line 6446 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = current_variable;
		current_variable = null;*/
	  }
  break;
case 983:
#line 6451 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($10 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($10));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) $9, (Statement) $10, GetLocation ($1));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation ($2), GetLocation ($8));
		$$ = end_block (GetLocation ($8));*/
	  }
  break;
case 984:
#line 6464 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	   /* start_block (GetLocation ($2));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) $4;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) $3, li);*/
	  }
  break;
case 985:
#line 6474 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = current_variable;	  
		current_variable = null;*/
	  }
  break;
case 986:
#line 6479 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if ($9 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($9));
	  
		Using u = new Using ((Using.VariableDeclaration) $8, (Statement) $9, GetLocation ($1));
		lbag.AddStatement (u, GetLocation ($2), GetLocation ($7));
		current_block.AddStatement (u);
		$$ = end_block (GetLocation ($7));*/
	  }
  break;
case 987:
#line 6489 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($5 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($5));
	  
		$$ = new Using ((Expression) $3, (Statement) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 988:
#line 6497 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	
		$$ = new Using ((Expression) $3, null, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 990:
#line 6508 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }
  break;
case 991:
#line 6516 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 992:
#line 6520 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_variable.Initializer = (Expression) $2;
		lbag.AddLocation (current_variable, GetLocation ($1));
		$$ = current_variable;*/
	  }
  break;
case 995:
#line 6544 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		/*current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		// (ref object retval)
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		var method = new InteractiveMethod (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			pars);
			
		current_type.AddMember (method);			
		oob_stack.Push (method);

		interactive_async = false;
		*/
		++lexer.parsing_block;
		/*start_block (lexer.Location);*/
	  }
  break;
case 996:
#line 6572 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	/*	var method = (InteractiveMethod) oob_stack.Pop ();
		method.Block = (ToplevelBlock) end_block(lexer.Location);

		if (interactive_async == true) {
			method.ChangeToAsync ();
		}

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;*/
	  }
  break;
case 1004:
#line 6607 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedName = (MemberName) $2;*/
	  }
  break;
case 1005:
#line 6614 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;*/
	  }
  break;
case 1006:
#line 6618 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)$1;
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;
		$$ = null;*/
	  }
  break;
case 1007:
#line 6624 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation ($1));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;
		$$ = null;*/
	  }
  break;
case 1008:
#line 6630 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)$1;
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$4;
		var lt = (LocatedToken) $3;
		$$ = new MemberName (lt.Value);*/
	  }
  break;
case 1009:
#line 6637 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new MemberName ((MemberName) $1, MemberCache.IndexerNameAlias, Location.Null);*/
	  }
  break;
case 1010:
#line 6641 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 1011:
#line 6645 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$6;*/
		/*$$ = new MemberName ((MemberName) $1, MemberCache.IndexerNameAlias, Location.Null);*/
	  }
  break;
case 1012:
#line 6650 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var p = (List<DocumentationParameter>)$4 ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) $3));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		$$ = null;*/
	  }
  break;
case 1013:
#line 6658 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var p = (List<DocumentationParameter>)$4 ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) $3));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		$$ = null;*/
	  }
  break;
case 1014:
#line 6666 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var p = (List<DocumentationParameter>)$3;
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) $2;
		$$ = null;*/
	  }
  break;
case 1016:
#line 6677 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new MemberName (((MemberName) $1), (MemberName) $3);*/
	  }
  break;
case 1018:
#line 6685 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 1019:
#line 6689 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = $3;*/
	  }
  break;
case 1020:
#line 6696 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new List<DocumentationParameter> (0);*/
	  }
  break;
case 1022:
#line 6704 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) $1);
		$$ = parameters;*/
	  }
  break;
case 1023:
#line 6710 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var parameters = $1 as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) $3);
		$$ = parameters;*/
	  }
  break;
case 1024:
#line 6719 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($1 != null)
			$$ = new DocumentationParameter ((Parameter.Modifier) $1, (FullNamedExpression) $2);
		else
			$$ = new DocumentationParameter ((FullNamedExpression) $2);*/
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   10,   10,   11,   12,   12,   12,   14,   14,   17,   18,
   15,   15,   20,   20,   20,   16,   16,   16,   21,   21,
   22,   22,    6,    6,   19,   19,    7,    7,   23,   23,
   23,   24,   24,   24,   24,   24,    8,    8,    9,    9,
   32,   30,   35,   31,   31,   31,   31,   33,   33,   33,
   34,   34,   39,   36,   37,   38,   38,   40,   40,   40,
   40,   40,   41,   41,   41,   45,   42,   44,   48,   48,
   47,   47,   47,   51,   51,   52,   52,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   67,   62,   72,   74,   77,   78,   79,   26,   26,
   82,   54,   54,   83,   83,   84,   84,   85,   87,   81,
   81,   86,   86,   92,   55,   91,   95,   91,   93,   93,
   96,   96,   97,   98,   97,   94,   94,   94,  101,   56,
  103,  105,  106,   99,   99,   99,  100,  100,  108,  108,
  111,  109,  104,  104,  112,  112,  112,  112,  112,  112,
  113,  113,  115,  115,  115,  115,  118,  115,  116,  116,
  119,  119,  120,  120,  120,  114,  114,  114,  121,  121,
  121,  122,  124,  126,  127,  129,   57,  130,   57,  128,
  132,  128,  131,  131,  134,  136,   59,  135,  135,  125,
  125,  125,  125,  125,  140,  137,  141,  138,  139,  139,
  139,  142,  143,  144,  146,   27,   27,  145,  145,  147,
  147,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  150,   60,  151,  151,  154,  149,  149,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  156,  155,  157,  155,  155,  155,   61,  160,  162,  158,
  159,  159,  161,  161,  166,  164,  167,  164,  164,  164,
  168,   63,  170,   58,  173,  174,   58,   58,  169,  176,
  169,  171,  171,  177,  177,  178,  179,  178,  180,  175,
  172,  172,  172,  172,  172,  184,  181,  185,  182,  183,
  183,   64,   65,  187,  189,  190,   28,  186,  186,  186,
  188,  188,  188,  191,  191,  192,  193,  192,  192,  192,
  194,  195,  196,   29,  197,  197,   13,   13,   13,  198,
  198,  198,  202,  202,  200,  200,  200,  203,  203,  205,
   71,  123,  102,  102,  133,  133,  206,  206,  206,  204,
  204,  207,  207,  208,  208,  209,  209,   90,   80,   80,
  211,  211,  117,  117,  152,  152,  212,  212,  212,  210,
  215,  215,  215,  217,  217,  218,  216,  216,  216,  216,
  216,  216,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  220,  220,  220,  220,  220,  220,  220,  220,  220,
  220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
  220,  220,  221,  221,  221,  222,  222,  222,  243,  243,
  241,  241,  244,  244,  245,  245,  246,  245,  247,  245,
  248,  248,  249,  249,  224,  224,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  226,  226,
  226,  251,  251,  252,  252,  253,  253,  255,  255,  255,
  256,  256,  256,  256,  256,  256,  256,  257,  257,  165,
  165,  250,  250,  250,  250,  250,  262,  262,  261,  261,
  263,  263,  263,  263,  263,  263,   50,   50,   50,  264,
  227,  227,  227,  227,  260,  260,  266,  266,  267,  267,
  228,  229,  229,  230,  231,  232,  232,  223,  223,  223,
  223,  223,  272,  268,  233,  233,  273,  273,  274,  274,
  275,  275,  275,  275,  276,  276,  276,  276,  269,  269,
  213,  213,  271,  271,  277,  277,  270,  270,   89,   89,
  278,  278,  234,  279,  279,  201,  199,  235,  235,  236,
  236,  237,  237,  238,  281,  239,  282,  239,  280,  280,
  284,  283,  225,  285,  285,  285,  285,  285,  285,  285,
  285,  285,  286,  286,  286,  286,  286,  286,  286,  286,
  286,  286,  286,  286,  286,  287,  287,  287,  287,  287,
  287,  287,  288,  288,  288,  288,  288,  288,  288,  288,
  288,  288,  288,  288,  289,  291,  291,  291,  291,  291,
  291,  291,  291,  291,  292,  293,  295,  295,  296,  297,
  297,  294,  294,  298,  298,  299,  299,  300,  300,  300,
  300,  300,  301,  301,  301,  301,  301,  301,  301,  301,
  301,  302,  302,  302,  302,  302,  303,  303,  303,  304,
  304,  304,  305,  305,  305,  306,  306,  306,  307,  307,
  307,  308,  308,  309,  309,  309,  309,  309,  310,  310,
  310,  310,  310,  310,  310,  310,  310,  310,  310,  311,
  311,  312,  312,  312,  312,  313,  313,  315,  314,  314,
  314,   49,   49,  317,  316,  318,  316,  319,  316,  320,
  321,  316,  322,  323,  316,   43,   43,  258,  258,  258,
  240,  240,  240,   88,  324,   73,   73,  325,  326,  326,
  326,  326,  328,  326,  329,  330,  331,  332,   25,   70,
   70,   69,   69,  107,  107,  333,  333,  333,  333,  333,
  333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
   75,   75,  327,  327,   76,   76,  334,  334,  335,  335,
  336,  336,  337,  337,  337,  337,  338,  110,   68,   68,
  339,  163,  163,  341,  340,   66,   66,  342,  342,  343,
  343,  343,  343,  343,  347,  347,  348,  348,  348,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  349,  349,  349,  349,  349,  349,  349,  349,
  349,  349,  349,  349,  349,  363,  363,  363,  363,  350,
  364,  346,  265,  265,  365,  365,  365,  365,  214,  214,
  366,   46,   46,  368,  344,  372,  344,  370,  370,  367,
  367,  367,  369,  369,  376,  376,  375,  375,  377,  377,
  371,  371,  373,  373,  378,  378,  379,  374,  374,  374,
  351,  351,  351,  362,  362,  380,  381,  381,  352,  352,
  382,  382,  382,  385,  383,  383,  384,  384,  386,  386,
  386,  387,  388,  388,  389,  389,  389,  353,  353,  353,
  353,  390,  390,  391,  391,  391,  395,  392,  398,  394,
  394,  401,  397,  397,  400,  400,  396,  396,  404,  403,
  403,  399,  399,  402,  402,  406,  405,  405,  393,  393,
  407,  393,  393,  393,  354,  354,  354,  354,  354,  354,
  408,  409,  409,  410,  410,  410,  411,  411,  411,  412,
  412,  412,  413,  413,  413,  414,  414,  355,  355,  355,
  355,  415,  415,  290,  290,  416,  419,  416,  416,  418,
  418,  417,  420,  417,  356,  357,  421,  360,  358,  358,
  423,  424,  361,  426,  427,  359,  359,  359,  425,  425,
  422,  422,    3,    3,  428,    3,    3,  429,  429,  259,
  259,  254,  254,    5,  430,  430,  430,  430,  430,  434,
  430,  430,  430,  430,  431,  431,  432,  435,  432,  433,
  433,  436,  436,  437,
  };
   static  short [] yyLen = {           2,
    2,    0,    3,    1,    1,    3,    2,    1,    0,    1,
    1,    2,    1,    3,    5,    2,    0,    1,    0,    0,
   10,    3,    0,    1,    1,    1,    3,    1,    0,    1,
    0,    1,    0,    1,    0,    1,    1,    2,    1,    1,
    2,    1,    1,    1,    1,    1,    0,    1,    1,    2,
    0,    3,    0,    6,    3,    2,    1,    1,    1,    1,
    1,    3,    0,    3,    1,    0,    3,    0,    1,    1,
    3,    3,    1,    1,    1,    0,    4,    4,    1,    1,
    0,    1,    1,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    4,    0,    0,    0,    0,    0,   17,    5,
    0,    9,    5,    0,    1,    1,    2,    3,    0,    3,
    1,    1,    1,    0,    8,    0,    0,    3,    0,    1,
    1,    2,    2,    0,    5,    1,    1,    1,    0,    3,
    0,    0,    0,   11,    8,    5,    1,    1,    1,    1,
    0,    4,    0,    1,    1,    3,    3,    5,    1,    1,
    1,    3,    4,    6,    2,    4,    0,    7,    0,    1,
    1,    2,    1,    1,    1,    4,    6,    4,    1,    2,
    2,    1,    0,    0,    0,    0,   12,    0,    6,    0,
    0,    4,    1,    1,    0,    0,   10,    3,    1,    1,
    2,    1,    2,    1,    0,    5,    0,    5,    1,    1,
    1,    0,    0,    0,    0,   15,    5,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    5,    1,    1,    0,    7,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    7,    0,    7,    2,    2,    2,    0,    0,    9,
    1,    1,    0,    1,    0,    6,    0,    6,    2,    1,
    0,    8,    0,    9,    0,    0,   10,    5,    0,    0,
    3,    0,    1,    1,    2,    2,    0,    5,    0,    2,
    2,    2,    1,    1,    1,    0,    5,    0,    5,    1,
    1,    2,    4,    0,    0,    0,   12,    0,    2,    2,
    0,    1,    2,    1,    3,    2,    0,    5,    3,    1,
    0,    0,    0,   13,    0,    1,    1,    3,    3,    1,
    4,    4,    2,    2,    0,    3,    2,    1,    3,    0,
    3,    1,    1,    3,    1,    2,    3,    4,    4,    0,
    3,    1,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    1,    1,
    2,    2,    2,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    3,    1,    1,    3,    1,    3,    0,    4,    0,    6,
    1,    1,    1,    1,    3,    3,    4,    4,    5,    4,
    4,    4,    3,    3,    3,    4,    3,    4,    4,    4,
    3,    0,    1,    3,    4,    0,    1,    1,    3,    2,
    3,    3,    1,    2,    3,    5,    2,    1,    1,    0,
    1,    1,    3,    3,    3,    2,    1,    1,    1,    1,
    2,    2,    2,    2,    4,    3,    3,    2,    4,    1,
    4,    5,    4,    3,    1,    3,    1,    3,    1,    1,
    1,    4,    3,    2,    2,    6,    3,    7,    4,    3,
    7,    3,    0,    2,    4,    3,    1,    2,    0,    1,
    1,    3,    1,    2,    3,    1,    1,    1,    0,    1,
    1,    2,    2,    3,    1,    2,    0,    1,    2,    4,
    1,    3,    4,    1,    1,    1,    2,    4,    4,    4,
    2,    4,    2,    4,    0,    4,    0,    5,    0,    1,
    0,    4,    4,    1,    2,    2,    4,    2,    2,    2,
    4,    2,    1,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    1,    3,    3,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    3,    4,    3,
    3,    3,    3,    3,    1,    1,    2,    2,    1,    1,
    4,    1,    1,    1,    4,    4,    1,    3,    3,    1,
    2,    0,    1,    1,    3,    1,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    1,    5,    4,    5,    5,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    3,    3,    2,    1,    1,    0,    1,    0,    2,    1,
    1,    1,    1,    0,    4,    0,    4,    0,    5,    0,
    0,    7,    0,    0,    8,    1,    1,    1,    1,    1,
    6,    4,    4,    1,    1,    0,    1,    3,    0,    1,
    1,    2,    0,    6,    0,    0,    0,    0,   15,    0,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    1,    2,    3,    0,    1,    1,    2,    4,    3,
    1,    3,    1,    3,    1,    1,    0,    4,    1,    1,
    0,    4,    1,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    2,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    4,    1,    2,    2,    2,    1,    1,    1,    2,
    1,    1,    1,    0,    6,    0,    7,    1,    1,    0,
    2,    1,    0,    1,    0,    1,    1,    2,    2,    4,
    0,    2,    0,    1,    1,    2,    4,    1,    5,    2,
    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
    5,    7,    4,    0,    8,    4,    0,    1,    1,    2,
    1,    2,    1,    2,    3,    3,    1,    1,    1,    1,
    1,    5,    4,    7,    3,    6,    0,    4,    0,    4,
    2,    0,    4,    2,    3,    1,    0,    1,    0,    5,
    1,    0,    1,    0,    1,    1,    1,    3,    4,    5,
    0,    9,    5,    4,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    3,    4,    3,    3,    3,    2,    3,
    3,    2,    4,    4,    3,    0,    1,    3,    4,    5,
    3,    1,    2,    0,    1,    3,    0,    7,    3,    2,
    1,    0,    0,    5,    2,    2,    0,    3,    5,    4,
    0,    0,   10,    0,    0,    9,    5,    4,    2,    1,
    0,    2,    2,    3,    0,    4,    2,    1,    2,    0,
    1,    1,    1,    2,    2,    2,    2,    4,    3,    0,
    7,    4,    4,    3,    1,    3,    0,    0,    4,    0,
    1,    1,    3,    2,
  };
   static  short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   13,   16,    0,    0,  337,    0,  340,
  993,    0,    0,  997,    0,  389,  394,  401,  391,    0,
  390,    0,  397,  399,  387,    0,  393,  395,  388,  398,
  400,  396,    0,  350, 1015,    0,  392, 1004,    0,   10,
    1,    0,   51,    0,    0,    0,   40,   37,   39,   42,
   43,   44,   45,   46,   49,   12,    0,  557,    0,  556,
  343,  344,    0,   14,    0,  878,    0,    0,    0,    0,
    0,    0,    0,    0,  430,    0,    0,    0,    0,    0,
    0,    0,  428,    0,    0,    0,  511,    0,  429,    0,
    0,    0,  977,    0,    0,    0,  720,    0,    0,    0,
    0,    0,    0,  432,  777,    0,  830,    0,    0,    0,
    0,    0,    0,    0,    0,  427,    0,  710,    0,  877,
    0,  813,    0,  423,  838,  837,    0,    0,    0,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  425,
  426,  717,    0,  583,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  718,  716,  719,  797,
  799,    0,  795,  798,  814,  816,  817,  818,  819,  820,
  821,  822,  823,  824,  825,  815,    0,    0,  879,  880,
  898,  899,  900,  901,  935,  936,  937,  938,  939,  940,
    0,    0, 1001,  994,    0,    0,  243,  260,  242,  239,
  244,  245,  238,  257,  256,  249,  250,  246,  248,  247,
  251,  240,  241,  252,  253,  259,  258,  254,  255,    0,
 1018, 1007,    0,    0, 1006,    0, 1005,    3,    0,    0,
   38,  751,  757,  749,    0,  746,  756,  750,  748,  747,
  754,  752,  753,  759,  755,  758,  760,    0,    0,  744,
   41,   50,    0,    0,  347,    0,  348,  369,    0,  370,
    0,  379,    0,    0,  338,  339,    0,    0,    0,  941,
  561,  441,  442,  975,    0,    0,    0,    0,    0,    0,
    0,    0,  943,  942,    0,  571,  565,  570,  829,  876,
  800,  827,  826,  828,  801,  802,  803,  804,  805,  806,
  807,  808,  809,  810,  811,  812,    0,    0,    0,  907,
    0,    0,    0,  843,  842,    0,    0,    0,    0,    0,
    0,    0,    0,  949,    0,    0,    0,    0,  402,    0,
    0,    0,  952,    0,    0,    0,    0,  563,  976,    0,
    0,    0,  841,  383,    0,    0,    0,    0,    0,    0,
  713,    0,  582,    0,    0,  706,    0,    0,  578,    0,
    0,  433,    0,    0,  580,  576,  590,  584,  591,  585,
  579,  575,  595,  589,  594,  588,  592,  586,  593,  587,
  704,  424,    0,    0,    0,    0,  831,    0,  336,    0,
  381,  382,    0,    0,  514,  515,    0,    0,    0,  835,
  836,  844,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  996,  796,  834,    0,  874,
  875,    0,    0, 1014,    0,    0,  351,    0,    0, 1016,
   57,   59,   60,    0,    0,   52,    0,    0,   61,   63,
   28,   26,    0,    0,    0,  741,    0,  745,   15,  377,
  378,    0,  346,  376,  341,  342,  513,    0,  509,  510,
    0,    0,  507,    0,  846,    0,    0,    0,  905,    0,
  873,  871,  872,    0,    0,    0,  724,    0,  946,  944,
  725,    0,    0,  538,    0,    0,  526,  533,    0,    0,
    0,  527,    0,    0,  543,  545,    0,  522,    0,    0,
    0,    0,    0,  517,    0,  520,  372,  524,  371,  948,
  947,    0,    0,  951,  950,  961,    0,    0,    0,  962,
  555,    0,  366,  554,    0,    0,  978,    0,    0,  840,
    0,    0,  596,    0,    0,  567,    0,  708,  614,  613,
    0,    0,    0,  437,    0,  431,  794,    0,    0,    0,
  788,  790,  791,  792,  445,  446,    0,  174,  173,  175,
    0,  695,    0,    0,    0,  373,    0,  690,    0,    0,
  955,    0,    0,    0,  453,  454,    0,  457,    0,    0,
    0,    0,  455,    0,    0,  504,    0,  461,    0,    0,
    0,    0,  487,  490,    0,    0,  482,  489,  488,    0,
  679,  680,  681,  682,  683,  684,  685,  686,  687,  689,
  688,  600,  597,  602,  599,  601,  598,  611,  608,  612,
    0,    0,  622,    0,    0,    0,    0,    0,  615,    0,
  610,  623,  624,  606,    0,  607,    0,  641,    0,    0,
  642,    0,  648,    0,  649,    0,  650,    0,  651,    0,
  655,    0,  656,    0,  659,    0,  662,    0,  665,    0,
  668,    0,  671,    0,  673,    0,  542, 1012, 1013,    0,
    0,  171,    0,    0, 1022,  365,  364,    0,  362, 1008,
 1010,   56,   53,    0,    0,    0,    0,    0,    0,  368,
    0,  735,    0,    0,  349,  451,    0,  512,    0,  560,
    0,  573,  160,    0,    0,    0,  154,    0,    0,  161,
  566,    0,  981,    0,  927,  908,    0,  918,    0,  929,
    0,  945,  883,    0,  980,    0,    0,  525,    0,  534,
  544,  546,    0,    0,    0,    0,  473,    0,    0,  468,
    0,    0,  703,  702,  505,    0,  548,  519,    0,    0,
  138,  549,  136,  137,  551,    0,  559,  558,  886,    0,
  973,    0,    0,  959,    0,  963,  553,  562,  988,    0,
  984,  903,    0,    0,  722,  723,    0,    0,    0,  701,
  700,  707,    0,  452,    0,    0,  434,  793,  779,  780,
  778,  789,  705,  693,    0,    0,    0,  581,  577,  954,
  953,  832,  458,  450,    0,    0,  456,  447,  448,  564,
  503,  501,    0,  500,  494,  493,    0,  492,  491,    0,
  486,  443,  444,  459,  460,    0,  852,    0,    0,  617,
  618,    0,    0,    0,  965,  609,  676,    0, 1024,  172,
 1019,    0,    0,  361,    0,    0,   62,   55,    0,   64,
   27,   20,    0,    0,  314,    0,  217,    0,  110,    0,
   83,   82,    0,  508,    0,    0,    0,    0,    0,  165,
  572,    0,    0,    0,    0,  919,  911,  909,    0,  930,
    0,    0,  979,  535,  532,    0,  477,    0,    0,    0,
 1002, 1003,  464,  470,    0,  474,    0,    0,    0,    0,
    0,    0,  884,    0,  969,    0,  966,  960,  987,    0,
  902,    0,  568,    0,  709,  699,  439,  438,  692,  691,
  711,  449,  502,    0,    0,  496,    0,  485,  484,  483,
    0,  868,  851,    0,    0,    0,  857,    0,    0,    0,
  627,    0,    0,  630,    0,  636,    0,  634,  677,  678,
  675, 1023,  363,    0,    0,   75,    0,    0,   69,   70,
   73,   74,    0,  331,  320,  319,    0,  736,  213,  105,
   78,   79,   80,  862,  122,  123,    0,    0,    0,  865,
  180,  181,    0,    0,    0,  162,  157,  906,    0,    0,
    0,    0,    0,  928,    0,    0,  478,  479,  472,  475,
  471,    0,  465,  469,    0,  540,    0,  506,  516,  463,
  552,  550,    0,    0,    0,  990,    0,    0,  721,  714,
    0,    0,  497,    0,  495,    0,    0,  849,  848,  845,
  858,  621,    0,  626,    0,    0,  631,  625,    0, 1011,
    0,   76,   67,    0,    0,    0,  315,    0,    0,    0,
    0,  847,  866,  166,    0,  178,    0,    0,  904,  992,
    0,    0,    0,    0,  910,    0,  931,  882,    0,  521,
  518,  891,    0,  897,    0,    0,  889,    0,  893,    0,
  967,  989,  985,    0,  440,  712,  499,    0,    0,  629,
  628,  637,  635,   54,    0,   71,   72,    0,    0,    0,
    0,    0,    0,    0,    0,  730,    0,  762,    0,  727,
    0,    0,  167,    0,  158,  982,  920,  914,  912,    0,
  476,    0,  885,  890,    0,  894,  974,    0,    0,  715,
    0,  860,   77,    0,  332,    0,    0,  330,  316,    0,
  324,    0,  386,    0,  384,    0,    0,  737,    0,  767,
  214,    0,  867,  164,    0,  177,    0,    0,  932,  896,
  895,  971,    0,  968,  986,  869,   25,   24,   21,    0,
    0,  312,    0,    0,  728,  764,    0,  733,    0,    0,
  768,    0,  106,  168,  983,  916,  913,    0,    0,  925,
  781,  783,  970,  333,  329,    0,    0,  325,  385,    0,
  770,    0,    0,    0,    0,    0,    0,    0,    0,   30,
  317,    0,  775,    0,  776,  773,    0,  771,  101,  102,
    0,   98,    0,    0,   86,   88,   89,   90,   91,   92,
   93,   94,   95,   96,   97,   99,  100,  139,    0,    0,
    0,  230,  222,  223,  224,  225,  226,  227,  228,  229,
    0,    0,  220,  107,  915,    0,  334,  328,  734,    0,
    0,    0,    0,  738,   87,    0,  272,  267,  271,    0,
  215,  221,    0,  782,  774,  772,    0,    0,    0,    0,
    0,    0,  281,    0,    0,  231,    0,    0,  237,    0,
  151,  150,  140,  147,  148,  149,    0,    0,    0,  103,
    0,    0,  266,    0,  265,    0,    0,    0,  355,  313,
    0,  353,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  739,    0,  216,  108,  113,  111,  288,    0,  352,
    0,    0,    0,    0,    0,    0,    0,    0,  146,    0,
    0,    0,    0,  195,    0,  356,    0,  232,    0,    0,
    0,    0,  285,    0,  263,  261,    0,    0,  127,    0,
  357,  142,    0,  184,  189,    0,    0,    0,  354,  235,
  152,  109,  121,  119,    0,    0,  290,    0,    0,    0,
    0,  269,    0,    0,    0,    0,  131,    0,    0,    0,
    0,  358,  359,    0,    0,    0,    0,    0,  116,  305,
    0,  286,    0,    0,  299,    0,    0,    0,  294,    0,
    0,  282,    0,  128,    0,  125,  132,    0,  145,  204,
    0,  185,    0,    0,  196,    0,  120,    0,  112,  117,
    0,    0,    0,  301,    0,  302,  291,    0,    0,  284,
  295,  264,  262,  280,    0,  270,  274,  134,  143,    0,
    0,  201,  203,    0,  236,  118,  306,  308,  287,    0,
    0,  300,  297,  279,    0,    0,    0,    0,  205,  207,
  186,    0,  199,  197,    0,    0,  299,  275,  277,  135,
  144,    0,    0,    0,    0,  310,  311,  307,  309,  298,
    0,    0,  211,  210,  209,  206,  208,  191,  187,  198,
    0,    0,    0,  276,  278,  193,  194,    0,  192,
  };
  protected static  short [] yyDgoto  = {             7,
    8,   51,    9,   52,   10,   11,   54,  744,  745,   12,
   13,   14,  276,    0,   57,  483,  728, 1003, 1139, 1209,
 1526,  725,   58,   59,   60,   61,   62,   63,   64,   65,
  476,  249,  477,  478,  886,  479,  480,  890,  726,  998,
  999, 1000,  310,  634, 1135,  131,  903, 1011,  785,  855,
 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
 1273, 1274, 1275, 1276, 1277,  589, 1302,  831,  268,  487,
 1352,  900, 1149, 1090, 1147, 1188, 1245, 1313, 1391, 1183,
 1415, 1392, 1437, 1438, 1439, 1014, 1435, 1015,  794,  729,
 1400, 1377, 1425,  972, 1423, 1426, 1427, 1507, 1278, 1333,
 1306, 1353, 1354,  746, 1428, 1508,  269, 1334, 1335,  311,
 1363,  747,  748,  749,  750,  710,  604, 1195,  711,  712,
  909,    0, 1356, 1382, 1462, 1430, 1491, 1539, 1524, 1383,
 1548, 1543, 1357, 1406, 1514, 1494, 1463, 1464, 1536, 1522,
 1523,  898, 1089, 1222, 1291, 1338, 1292, 1293, 1326, 1360,
 1327,  278,  240, 1434, 1329, 1420, 1419, 1279, 1308, 1348,
 1486, 1453, 1233, 1487,  635, 1531, 1532, 1347, 1418, 1394,
 1447, 1442, 1416, 1472, 1477, 1445, 1448, 1449, 1517, 1478,
 1443, 1444, 1528, 1515, 1516,  895, 1007, 1179, 1141, 1213,
 1180, 1181, 1236, 1086, 1210, 1248,  411,   18,  133,   71,
   72,  134,  279,  467,  243, 1372,  718,  719,  730,  135,
  548,  281,  458,  364,  282,  348, 1184, 1185,   47,  138,
  349,  140,  141,  142,  143,  144,  145,  146,  147,  148,
  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
  159,  160,  161,  381,  382,  826, 1061,  295,  864,  790,
 1049, 1038,  778,  933,  779,  780, 1039,  162,  214,  786,
  637,  638,  639,  856,  163,  502,  503,  341, 1047,  788,
  459,  343,  531,  532,  533,  534,  537,  796,  565,  307,
  508,  817,  308,  507,  164,  165,  166,  167,  983,  876,
  984,  672,  673,  985,  980,  981,  986,  987,  988,  168,
  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
  607,  608,  609,  822,  823,  179,  597,  581,  819,  403,
 1062,  577, 1124,  522, 1144, 1145, 1148, 1240,  896, 1088,
 1220, 1330,  270, 1189, 1190, 1257, 1258,  383, 1247,    0,
    0,  590,  591,  312,  313,  314,  182,  183,  184,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  196,  327,  614,  197,  365,  869,  640,  975, 1070,
  906,  741, 1018,  973,  976, 1102,  977, 1019, 1020,  328,
  198,  199,  200, 1115, 1053, 1116, 1117, 1118, 1119,  201,
  202,  203,  204,  756,  515,  757, 1105, 1033, 1106, 1227,
 1198, 1228,  758, 1032,  759, 1230, 1160,  205,  206,  207,
  208,  209,  210,  350,  559,  560,  803, 1204, 1168,  944,
  361, 1031,  915, 1197, 1058,  950, 1169,   22,   24,   48,
   49,  242,  713,  885,  465,  714,  715,
  };
  protected static  short [] yySindex = {         -201,
    0, -146, -125, -194, -194,17427,    0,   65,    0,    0,
  -17, -194,    0,    0,    0,  403,  151,    0,    8,    0,
    0, 6558,  -17,    0,   50,    0,    0,    0,    0,  145,
    0,  228,    0,    0,    0, 5288,    0,    0,    0,    0,
    0,    0,  -14,    0,    0,  758,    0,    0,  774,    0,
    0,   65,    0,  -17, 9554,  691,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  117,    0, 1120,    0,
    0,    0,  200,    0,  497,    0,  221,  252, -175,16916,
 -170, -255,  282, 6719,    0, -255, -255, -255, -145, -255,
 -255,  789,    0, 9220, -255, -255,    0, 9369,    0,  308,
 -255, -174,    0, -255,  326, -255,    0,  412, -255, -255,
 -202, 7616,15941,    0,    0,15941,    0,10249,10384,10519,
10654,10789,10924,11059,11194,    0,  266,    0, 7633,    0,
 -171,    0, -264,    0,    0,    0,  449,  659,  442,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -264,    0, 1403,  784,  124,  824,  562,  846,
  414,  431,  483,  489,  443,  504,    0,    0,    0,    0,
    0, 3642,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  543,   61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -17,  691,    0,    0, 7633, 7633,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -14,
    0,    0,  492,  503,    0, -251,    0,    0, -203, 9554,
    0,    0,    0,    0, -135,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  150, 9703,    0,
    0,    0,  487,  423,    0,  498,    0,    0,  276,    0,
  543,    0,  442,  497,    0,    0,  689, -264,16081,    0,
    0,    0,    0,    0,15941, -118, -107,  688,  577,  425,
  659, -264,    0,    0, 7633,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  102,  213,16916,    0,
 7633,15941,  594,    0,    0,  627,15941,15941, 5145,  566,
  -91,  641, 7633,    0, 7616,  266,  765,  652,    0,  699,
 7633,15941,    0,  783,  705,  634,14183,    0,    0,15941,
  308,15381,    0,    0,  326,15941,15941,15941,15941,  282,
    0,  760,    0, 7633, 7633,    0,10114, -264,    0,  875,
  890,    0, 6880, -278,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,17306,  734,  739,15941,    0,  497,    0,  180,
    0,    0,  141,  182,    0,    0,  714, 9518, 7190,    0,
    0,    0,15941,15941,15941,15941,15941,15941,15941,15941,
15941,15941,15941,11329,11464,11599,14228,13894,11734,11869,
12004,12139,12274,12409,12544,12679,12814,12949,13084,13219,
13354,13489,13624,16361,15941,    0,    0,    0,  543,    0,
    0,  -14,  -14,    0,  653, -131,    0,  -14,  770,    0,
    0,    0,    0, -132,  775,    0,  785,  790,    0,    0,
    0,    0,  795, 8059,  767,    0,  301,    0,    0,    0,
    0, 7633,    0,    0,    0,    0,    0,  764,    0,    0,
  813,  673,    0,  836,    0,  840,   67,  308,    0, -255,
    0,    0,    0, -264,15381, -190,    0,  845,    0,    0,
    0, -192,   79,    0,  577,  425,    0,    0,  843,    0,
  861,    0,  859,  809,    0,    0,  692,    0, 7744,  723,
 9667,  641,15241,    0, 7893,    0,    0,    0,    0,    0,
    0,   92,  101,    0,    0,    0,  250,  308,  246,    0,
    0,  326,    0,    0,  874,  896,    0,  134, -264,    0,
  161,  880,    0,  909,  913,    0,17306,    0,    0,    0,
   83,  764,15941,    0,15941,    0,    0, -144,   -1, 6880,
    0,    0,    0,    0,    0,    0,   83,    0,    0,    0,
  326,    0,  487, -264, 8208,    0,  888,    0,  915,13759,
    0, 1038,  917, 6880,    0,    0,  871,    0,  764, -264,
16081,  876,    0,  497,  764,    0, -183,    0,15521,15521,
  931, 1056,    0,    0,  -12, -100,    0,    0,    0, -200,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
16489,16489,    0, 7633,  396,    0,    0,    0,    0, -264,
    0,    0,    0,    0,  784,    0,  784,    0, 8340,  124,
    0,  124,    0,  824,    0,  824,    0,  824,    0,  824,
    0,  562,    0,  562,    0,  846,    0,  414,    0,  431,
    0,  483,    0,  489,    0, -143,    0,    0,    0, 8208,
  653,    0,  947,  941,    0,    0,    0,  328,    0,    0,
    0,    0,    0,  117,  955,  956,  918,  964,  767,    0,
  966,    0, 1093, 1097,    0,    0,  676,    0,16081,    0,
  969,    0,    0,  625,   94,  979,    0,  980,  981,    0,
    0,15941,    0, -264,    0,    0,  722,    0,  986,    0,
  135,    0,    0, 6719,    0, 6719, 8475,    0,14113,    0,
    0,    0, 7339, 8624,  226, 9667,    0,  157,   85,    0,
  932,  939,    0,    0,    0,  730,    0,    0,  993,  994,
    0,    0,    0,    0,    0,  995,    0,    0,    0, 1000,
    0,14266,  308,    0,  308,    0,    0,    0,    0, 6719,
    0,    0, 6719, 7633,    0,    0,  308, 1003,   83,    0,
    0,    0,15941,    0, 1001,  960,    0,    0,    0,    0,
    0,    0,    0,    0, -264,17306, 1040,    0,    0,    0,
    0,    0,    0,    0,  764,  731,    0,    0,    0,    0,
    0,    0,15521,    0,    0,    0, -264,    0,    0,15101,
    0,    0,    0,    0,    0, 8042,    0, 8191, 1008,    0,
    0, 1012, -264,16617,    0,    0,    0, 8773,    0,    0,
    0,  653, -131,    0,  653,  117,    0,    0, 9816,    0,
    0,    0, 1014,14304,    0,  767,    0,  767,    0,  767,
    0,    0, 8922,    0,15661, 1016,  625, 8208, 7633,    0,
    0,  -17, 1139,  162, 1011,    0,    0,    0,15941,    0,
15941, 1117,    0,    0,    0,15801,    0,   56,15801,  737,
    0,    0,    0,    0, 7467,    0, 1142,  543, 9667, 1029,
 8475, 1030,    0, -255,    0, -264,    0,    0,    0, -138,
    0, 1027,    0, 1061,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1031, 1020,    0,  793,    0,    0,    0,
 7633,    0,    0, -264,  341, 1008,    0,16489, 1108,  360,
    0,  302, -264,    0, 1033,    0, 1032,    0,    0,    0,
    0,    0,    0, 1043,  790,    0,  260,  801,    0,    0,
    0,    0, -194,    0,    0,    0, 1047,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -264, 1041, 1016,    0,
    0,    0, -139, -130, 1045,    0,    0,    0, 1048, 8475,
 1008, -200,15941,    0, 1051, 6719,    0,    0,    0,    0,
    0, 1044,    0,    0, 1057,    0,  641,    0,    0,    0,
    0,    0, -185,15941, 1054,    0, 1008, 1058,    0,    0,
 1022,   83,    0,15941,    0, 1005, 1050,    0,    0,    0,
    0,    0,16726,    0, -264,16726,    0,    0,16617,    0,
 1063,    0,    0, 9816,  -17,   67,    0,  741, 1062, 1069,
 1064,    0,    0,    0, -223,    0, 1068, 1202,    0,    0,
 1008, 1085, 1008, 1086,    0, 1083,    0,    0,15801,    0,
    0,    0,15941,    0, 1092, -154,    0, 6395,    0, 1089,
    0,    0,    0,   83,    0,    0,    0,15941, 8191,    0,
    0,    0,    0,    0,15941,    0,    0,  -17, 1096, 1094,
  -17,   67, 7633, 1062, 1130,    0, 1130,    0, 1062,    0,
15661, 1098,    0,15941,    0,    0,    0,    0,    0, 6719,
    0,  -70,    0,    0, 6880,    0,    0,  159, 6719,    0,
 1100,    0,    0,  -66,    0, 1049,  892,    0,    0, 1099,
    0, 1102,    0,   86,    0, 1104, 1053,    0, 1130,    0,
    0, 1130,    0,    0,15941,    0, 6719, 9965,    0,    0,
    0,    0,  897,    0,    0,    0,    0,    0,    0, 1130,
 1224,    0, 1109,  -17,    0,    0, 7633,    0,   69, 1111,
    0, 1112,    0,    0,    0,    0,    0, 1110,  986,    0,
    0,    0,    0,    0,    0, 1105, 1113,    0,    0,15241,
    0,17483,   98,  -17, 1118, 6719, 6880, 1114,15941,    0,
    0, 1119,    0, 1121,    0,    0, 1122,    0,    0,    0,
 9703,    0, 1125,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  520, 9703,
  -17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1126,  -17,    0,    0,    0, 1127,    0,    0,    0, 1128,
17483, 6880,17153,    0,    0,  375,    0,    0,    0,17185,
    0,    0,   98,    0,    0,    0,   -1, 7633, 7633,  335,
  377,  326,    0,  487,15037,    0, 1198,    0,    0, 1113,
    0,    0,    0,    0,    0,    0, 1255, 1113, 1145,    0,
 -128, -121,    0, 7633,    0, 7633, 1101, 1136,    0,    0,
  109,    0, 1258, 1103, 7226,    0, 1146, 1106,   91,  375,
 5288,    0,15941,    0,    0,    0,    0,    0,  109,    0,
 1147, 1115, 1149, 1151, 1155,   67, 1137, 1154,    0, 1158,
 1161, 1167, 1197,    0,  764,    0,  852,    0, 1168, 1165,
 1113,  -67,    0, 1162,    0,    0, 1170, 1172,    0, 1173,
    0,    0,   67,    0,    0,   67, 1176, 1177,    0,    0,
    0,    0,    0,    0, 1180,  106,    0, 1183,   67,   67,
  146,    0, 8475, 1133, 1189, 1173,    0,   67, 1187,  127,
 1196,    0,    0,   67,15661, 1152, 1191, 1180,    0,    0,
 9703,    0,  -17,  -17,    0, 1156, 1199, 1183,    0, 1205,
 1206,    0,   73,    0, 1207,    0,    0, 1208,    0,    0,
 9703,    0,  127,  127,    0, 1211,    0,  -67,    0,    0,
 -136, 1218, 9703,    0, 9703,    0,    0, 8475, 1219,    0,
    0,    0,    0,    0, -159,    0,    0,    0,    0,  907,
 1231,    0,    0,  494,    0,    0,    0,    0,    0, 1268,
 1343,    0,    0,    0, 1232, 1233, 8475, 1130,    0,    0,
    0,  127,    0,    0,  538,  538,    0,    0,    0,    0,
    0,   64,   64, 1225, 1239,    0,    0,    0,    0,    0,
15241,15241,    0,    0,    0,    0,    0,    0,    0,    0,
 1236, 1237,15661,    0,    0,    0,    0, 1234,    0,
  };
  protected static  short [] yyRindex = {         1687,
    0,    0, 7041, 1687,    0,    0,    0, 1615,    0,    0,
 3312, 1760,    0,    0,    0,  613,    0,    0,    0,    0,
    0,    0, 3359,    0,   46,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1616,    0,    0, 1616,    0,    0, 1616,    0,
    0, 1615,    0, 3406,  500, 3453,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2441,    0,    0,    0,    0,    0,
    0,    0, 1248,    0,    0,    0,    0,    0,    0,    0,
    0, 8641,    0, 1241,    0,    0,    0, 1241,    0,    0,
    0,    0,    0,    0, 3041,    0,    0,    0,    0,    0,
    0,  110,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4119,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1375, 4985, 4857,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5461, 5525, 4472, 4244, 2543, 5996,
  958, 3861, 5569, 6143, -163,  787,    0,    0,    0,    0,
    0,   46,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4027,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3500, 3563,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1616,
    0,    0,  491,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  346,16840,    0,
    0,    0, 2943,    0,    0, 2591,    0,    0,    0,    0,
 2891,    0, 2591, 2441,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3956,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1250,    0,
    0,    0,    0,    0,    0, 4181, 1243,    0,    0,    0,
    0,    0,    0, 1243,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2741,    0,    0,    0,    0, 1248,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  911,
    0,    0,  184,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1254,    0,    0, 1241,    0, 3956,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   63,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1954,    0,
    0, 1616, 1616,    0, 7910,    0,    0, 1616, 1624,    0,
    0,    0,    0,  694,  663,    0,    0, 1259,    0,    0,
    0,    0, 1348,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3956,    0,    0,
    0,    0,    0,    0,    0,    0,17229,    0,    0,    0,
    0,    0,    0,    0,  748,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -256,  866,    0,    0,  203, 1728,
    0,    0, 1262,  557,    0,    0,    0,    0,  194,    0,
    0, 4570, 1260,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1264,    0, 2140,    0,
    0,  225,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1254,    0,    0,    0,
16221, 3956,    0,    0,    0,    0,    0, 6231,    0,  198,
    0,    0,    0,    0,    0,    0,16221,    0,    0,    0,
  -50,    0,  580,    0,    0,    0, 1263,    0,    0,    0,
    0, 1243,    0,    0,    0,    0, 3793,    0, 3956,    0,
    0, 3722,    0, 3956, 4632,    0,    0,    0,    0,    0,
 -195,    0,    0,    0,    0,  210,    0,    0,    0,  623,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5152, 5224, 5333, 5397,    0, 5611,
    0,    0,    0,    0, 5659,    0, 5708,    0,    0, 4920,
    0, 5764,    0, 4695,    0, 5812,    0, 5860,    0, 5916,
    0, 2693,    0, 5962,    0, 6030,    0, 6066,    0, 6101,
    0, 6122,    0, 6164,    0,    0,    0,    0,    0,    0,
 8790,    0,    0,  804,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1267,    0,  752,    0,    0,    0,    0,
 1271,    0, 1216, 1221,    0,    0, 9071,    0,    0,    0,
  805,    0,    0, 8939,17350,    0,    0,  812,  821,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  751,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1274,    0,
    0,    0,    0,    0, 1473,    0,    0,    0,  208,    0,
   81, 4344,    0,    0,    0,    0,    0,    0,    0, 1272,
    0,    0,    0,    0,    0, 1275,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,16221,    0,
    0,    0,    0,    0,  935,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3956,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  592,    0,
    0,    0,    0, 1276,    0,    0,    0,    0,    0,    0,
    0, 8939,    0,    0, 7356,    0,    0,    0,  822,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1273, 9088,    0,    0,    0,
    0,17382,    0,    0,  823,    0,    0,    0,    0,    0,
    0, 2311,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4407,    0, 4795,
 1279,    0,    0,    0,    0, 1278,    0,    0,    0,  823,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -198,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  677,    0,    0,    0,    0,
    0, 3885,  682,    0,    0,    0, 1280,    0,    0,    0,
    0,    0,    0,    0, 1259,    0,14293,    0,    0,    0,
    0,    0,17514,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1281,    0,
    0,    0,    0,    0,  830,    0,    0,    0,    0,    0,
 1286,  670, 1283,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4570,    0,    0,    0,
    0,    0, 1292,    0,    0,    0, 1286,    0,    0,    0,
    0,16221,    0,    0,    0,  620,  646,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,17557,17229,    0,  397,  434,  446,
    0,    0,    0,    0,  700,    0,  706,    0,    0,    0,
 1290,    0,  762, 1287,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1296,    0,    0,    0,    0,
    0,    0,    0,16221,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,17600,    0,    0,
  265,17229,    0,  514, 1299,    0, 1299,    0,  434,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -160,    0,    0,  943,    0,    0,
    0,    0,    0, 1885,    0,    0,14697,    0,    0, 1302,
    0,    0,    0,  419,    0,  515,    0,    0,  386,    0,
    0, 1299,    0,    0,    0,    0,    0, 1300,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1298,
 -239,    0,    0,  267,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1303,    0,
    0,    0,    0,    0,    0,    0, 3210,    0,    0, 1260,
    0,    0,14533,14779,    0,    0, 1308,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  369,    0,    0,    0,
17023,    0,    0,14615,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,17091,
14451,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,14861,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  184,  346,    0,    0,    0,    0,    0,    0,  346,
    0,    0,14533,    0,    0,    0,    0,    0,    0,    0,
    0,14941,    0,14903,    0,    0,    0,15007,    0, 3210,
    0,    0,    0,    0,    0,    0,    0, 3210,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  131,    0,  506,    0,    0,  518,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  606,    0,
  650,    0,    0,    0,    0,17229,  827,    0,    0,    0,
    0,    0,    0,    0, 1305,    0,  169,    0,    0,    0,
 3210,    0,    0,  831,    0,    0,    0,    0,    0, 1309,
    0,    0,17229,    0,    0,17261,    0,    0,    0,    0,
    0,    0,    0,    0, 1311, 9405,    0, 1312,17229,17229,
    0,    0,    0,    0,    0, 1313,    0,17229,    0,17642,
    0,    0,    0,17229,    0,    0,    0, 1315,    0,    0,
  186,    0, 8511, 9256,    0,    0,    0, 1317,    0,    0,
    0,    0,  589,    0,  835,    0,    0,    0,    0,    0,
  949,    0,13930,16762,    0,    0,    0,    0,    0,    0,
    0,    0, 1368,    0, 1422,    0,    0,    0,  841,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  439,    0,    0,
    0,17642,    0,    0, 7780, 8376,    0,    0,    0,    0,
    0,    0,    0,14024,    0,    0,    0,    0,    0,    0,
 1260, 1260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static  short [] yyGindex = {            0,
    0, 1636,    0,    0,    0,    1,  -20,   -4,    3, 1693,
  128,    0,   11,    0,    0,    0,    0,    0,    0,    0,
-1011, -753,  -48, -591,    0,    0,    0,    0,    0,  -55,
    0,    0,    0,  814,    0,  975,    0,    0,    0,    0,
  618,  619,  -22, -266,    0,  -44,    0,    0, -215, -582,
  391,    0,  441, -628, -606, -551, -550, -541, -533, -518,
 -513,    0,    0,-1040,    0,-1110,    0,  389,-1176,    0,
   10,    0,    0,    0,  558,-1108,    0,    0,    0,  183,
  240,    0,    0,    0,  271,-1104,    0, -321, -340, -283,
    0,    0,    0, -527,    0,    0,  285,    0,    0,  352,
    0, -491,    0, -983,    0,    0, -424,  292,-1004,  -10,
    0,    0,    0,  802,  806,  972, -556,    0,    0, -352,
  810,    0,  380,    0, -793,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  201,    0,
    0,    0,    0,    0,    0,    0,    0,  433,    0,    0,
    0, -316,  362,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  448,    0, -526,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  211,    0,    0,  283,    0,    0,
  286,  290,  218,    0,    0,    0,    0,    0,    0,    0,
    0,  523,    0,    0,    0,    0, -106,    0,  231,  -41,
  -45,  484,    0,  358,    0, -411,    0,  856, 1389,   38,
  779, -315, -271, -101,  114,  930,    0,  535,    0,  -60,
  862, -414,    0,    0, -413,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -396,    0,    0,    0,    0,    0,
    0, -307,    0,    0, 1171,    0,    0,  674,    0, -375,
    0, -312,    0,    0,    0,  832, -875, -346, -151,  460,
    0,  893,    0, 1140,   20, -366, 1042,    0,    0,  725,
 1690,    0,    0,    0,    0, 1015,    0,    0,    0, 1416,
    0,    0,    0,    0,    0, 1477,  882,  885, 1351, -311,
 1352,    0,    0,    0,    0,  716,   45,    0,  717,  712,
  895, 1344, 1345, 1347, 1349, 1346,    0, 1353,    0,    0,
    0,  970, 1223, -557,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -357,  715,    0, -622,    0,    0,    0,
    0,    0, -261,    0,  630,    0,  519,    0,    0,    0,
    0,  703, -555,  -18, -368,    5,    0, 1641,    0,   41,
    0,   55,   66,   93,  108,  120,  122,  123,  125,  126,
  129,    0, -704,    0,    0,    0,  794,    0,  724,    0,
    0,    0,    0,  696, -294,  772, -896,    0,  815, -493,
    0,    0,    0,    0,    0,    0,  719,    0,  713,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  638,    0,    0,    0,    0,    0,
    0,    0,    0,  -61,    0, 1282,  664,    0,    0,    0,
    0,  899,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   19,  957,    0,    0,    0,  961,
  };
  protected static  short [] yyTable = {           130,
  272,  546,  211,  180,   23,  251,   55,  488,  571,  494,
  518,  132,   17,   56,  593,   45,  789,  795,   55,  301,
  572,  755,  500,  666,  667,  212,  181,  549,  544,  286,
  456,  530,  420,  285,  832,  412,  355,  421, 1191,  833,
  563,  668,  942,  636,  336, 1000, 1193,  858,  835,  250,
  605,  627,  471, 1041,    1,  867,  212,  498,  842,  922,
  720,  923,  185,  763,  245,  760,  372,  247,  294,  542,
 1112,  347,  851,  469,  370,  354,  186,  274,  472, 1071,
  291,  358, 1113, 1223, 1303,  303,  606,  187,  408,  356,
  380,  359,  672,  384,  405,    6, 1504,  595,  334,  302,
 1178, 1234, 1140, 1310, 1505,  949,  280,  892,  951,   15,
  473,  828,  877, 1113,  188,  843, 1094, 1056,  422,  292,
  481,  843,  332,  722,  716, 1096, 1497, 1366,  843,  189,
  333,   21,  326,    2, 1368,  136, 1296,  291,  326,   66,
    2,  190,  406,  191,  192,  327,  193,  194,  358, 1152,
  195,  500,   66,  879,  596,  865,  272,  335, 1182,  130,
  334, 1153,  251,  180,  538, 1506,  280,  563,  293,  490,
   44,  132,  334, 1178,  491,  498,  843,  498, 1498,  498,
  720,  412,  720,  764,  868, 1200,  181,  707, 1413, 1207,
  852, 1317,  781,  136,  739,  115,  115,  136,  401,  292,
  292,  787,  672,  672, 1071,  374,   55,  407,  672,  304,
  672,  892,  672,  212,  672,  672,  672,  334,  474,  335,
  371,  593,  185,  334,  605, 1251,    3,    4,    5,    6,
  672,  335,   19, 1161,  498,  878,  186,  720,  496,  924,
 1114, 1081,  495,  498,  501,  593, 1030,  187,  293,  293,
   68,  277,  280,  280,  846,  470,  292,  505,  464,  475,
  606,  955,   68,  570, 1471,  892,  499,  292,  301,  672,
  964, 1114,  504,   69,  188,   16,  335,  866,  301,  539,
   70,  540,  335,  292, 1490,   69,  482,  402,  606,  189,
  717, 1097,   70, 1367,  529,  136, 1500,   19, 1501,   19,
 1369,  190, 1000,  191,  192,  293,  193,  194, 1201,  517,
  195,  404,  374, 1208,  521,  523,  293, 1414, 1362, 1533,
 1013,   50,  743,  374, 1241,  374, 1364,  374, 1484,  553,
 1467, 1108,  293,  582,  765,  541, 1000,  566,  820,  568,
  934, 1216,  280,  521,  613,  574,  575,  797,  514,  910,
  567, 1023,    6, 1259,  500,   53,  799,  509,  880,   19,
  241, 1440,  616,  862,  592,  619,  615,  742,  280,  624,
  829,  374,  742,  501,  501,  843,  742,  301, 1405, 1412,
  547,  569, 1460,  612,    2,  437,  350,  594,  280,  809,
  920,  742, 1398,  606,  914,  499,  633,  462,  463, 1521,
  641,  642,  643,  644,  645,  646,  647,  648,  649,  650,
  651,  280,  280, 1051, 1202, 1386,  812, 1028,  742, 1429,
  863,  438, 1431,  843,  360, 1034,  484, 1040,  921,   75,
  485,  830,  706,  939,  115, 1450, 1451,  742,  480,   53,
  460,  510,  136, 1534, 1458,   19,   19, 1242,  742,  215,
 1466, 1485, 1000,  115,  766, 1199,  736,  669, 1000,  666,
  667,  530,  935, 1217, 1205, 1146,   53,  798, 1260,  753,
   53,  761,  500,  350,  280,  136,  800,  668,   53,   19,
  708,  709,  213,  605,  967,   20,  720,  506,  843, 1513,
  360,  486, 1225,  461,  731,  480,  136,  751,  501,   53,
  742,  350, 1100,   68, 1126,  439,  440,  345,  124,  810,
  124,  360, 1387,  516,  557,  124,  115,  620,  784,  606,
  633, 1186,  793,  801,  811, 1332,   69,   73,  931,  280,
   74,  805,  216,  552,  754,   19,  813, 1029,  273,  360,
  824, 1295,  334,  360,  334,  345,  360,  804,  360,  350,
   20,  136,   20,  360, 1021,  786,  579,  580,  420,  834,
  825,   19,  380,  421, 1016,  466, 1170,  621,  401,  787,
  821,  592,  732,   19,  536,  845,  501,  844,  849,  467,
  536,   19,  848,  850,  511,  481,  821,   19,  781,  932,
 1343,  606,  512,  287,  594,  592,  733,  288,  499,  969,
  367,  617,  401,  622,   19,   19,  854,  854,  401,  832,
  929,  618,   20,  623,  801, 1283,  786,  740,  594,  659,
   68,  284, 1002,  734,  292,  875,  466, 1050,  136,  936,
  787,  290, 1345,   19, 1055,  536,  321, 1284,  323, 1344,
  467,  740,  481,   69, 1082,  513,  367,  289,  857,  857,
   70, 1262, 1282,  492,   68,  549,  306,  402,  666,  667,
   68,  666,  667, 1283,  666,  667, 1046,   19,  740, 1492,
 1493, 1077, 1262,  293,  735, 1104,  668,   69,  115,  668,
 1076, 1346,  668,   69,   70, 1284,   47, 1012,   47,  272,
   70,  402, 1285, 1286,  501,  493,   68,  402,   20,   20,
 1282,  280, 1287,  136,  755,  883,  787,  769,  301,  916,
 1288,  769, 1068, 1252,   19,  363,  499, 1331, 1525,   69,
 1069, 1262,   19, 1048,  529, 1289,   70,  136,  766,  521,
 1290, 1074,   20,  402,  475,  729, 1101, 1075,  893,  769,
 1285, 1286,  136,  136,  793,  115,  360,  884,  769,  593,
 1287,  784,  409,  784, 1332,  305,  766,  763, 1288,  329,
  330,  331, 1101,  337,  338,  766,  873,  729,  351,  352,
  874,  742,  761, 1289,  357,  360,  742,  362, 1290,  366,
  742,  765,  368,  369,  726,  363,  367,   67,   20,  763,
  959, 1162,  947,  763,  948,  742,  593,   68,  409,   73,
  956,  449,  489,  962,  761,  409,  953,   19,  821,  765,
 1016,  419,  965,  301,   20,  501,  726, 1002,  765,   68,
   69,  501,  742,  450,  726,  410,   20,   70,  979,  360,
  384,  363, 1196,  360,   20,   19, 1331,  633,  363,  280,
   20,  742,   69,  633,  501,  793,  872,  453,  352,   70,
 1370,  280,  731,  732,  409,  991,  402,   20,   20,  454,
  188,  360, 1380, 1381, 1512,  360, 1001,  360,  360,  360,
  360,  451,  857, 1224,   73,  360,  352,  136,  593,  136,
  784,   68,  517,  139,  731,  732,   20,  363,  183,  556,
 1231, 1232,  452,  669,   19, 1454,  475,  455, 1035, 1307,
 1355,  875,  557, 1037,   69, 1008, 1037, 1009,  115, 1010,
  466,   70, 1355, 1359,   69,  340,  784, 1250,  793,  558,
   20,   70,  857,  136,  468, 1359,  136, 1298,  531, 1067,
  598,  280,  907,  593,  531,   46,  345,  599,  875,  535,
   19,  139,  345,  536,  497,  139,  280,  443,  444,  600,
 1502,  137,  345,  378,   19,  694,  345,  694,  598,  273,
  273,  445,  446,  853,  370,  599,  136,   20,  273,  345,
  360,  853, 1091,  519,  419,   20,  350,  600, 1095, 1520,
  350,  901,  345,  350,  946,  350, 1328,  136,  902,  345,
  350,  870,  345, 1328,  850,  870,  952,  870,  283,  870,
  850,  345,  850, 1085, 1541, 1542,  520,  793,  547,  137,
  521,  545,  301,  137,  543,  301,  136,  859,  301, 1325,
  550,  859,  413,  859,  350,  859, 1337,  283,  410,  283,
  979, 1120,   19,  292,  283,  414,   65,   65,  554,  501,
   65, 1127,  674,  139,   19,  850,  738,  850,  854,  850,
  739,  821,  854,  964,  415,  416,  854,  964,  283,  964,
   20, 1001,  271,   53, 1138,  771,   19,  345,  345,  772,
  345,  345,   58,  163,  417,  163, 1006,  163,  551,  176,
   55,  176,  293,  176,  555,  418, 1037,  212,   20,  251,
  517, 1024,  669,  488, 1016,  669,  782,  917,  669,  592,
  536,  918,  578,  938,  963, 1171,  793,  939,  739,  610,
 1042,  137, 1173,  821,  939, 1142,   19, 1130,  611, 1143,
 1132,  272,  594,  917,   19,   66,  921,  917,  517,   66,
  921,  517,  241,   55,  244,  625, 1176,  853,   19,   19,
  212,  853,  721, 1177,  283,  283,  592,   20,  241,  136,
  246,   73,  674,  674,  684,  686,  688,  690,  674,  339,
  674,  340,  674,  723,  674,  674,  674,  724, 1065,  594,
  866,  727,  517,  434,  435,  436, 1083, 1021, 1084, 1021,
  280,   69,  861,  752,  861,  155,  136,  155,   44,  136,
  139,  737,  136,   20,  159,  501,  159,   68,  991,   68,
  991,   19, 1547,  156,  126,  156,  126,   20,  289, 1176,
  289,  740,  133,  660,  133,  742, 1177,  633,  296,  674,
  296,  441,  442,  139,  762,  272,  517,  767,  592,  345,
  802,  136,  768,  928,  283,  930,  769,  842, 1261, 1280,
  345,  770,  345,  842,  139, 1177, 1281,  447,  448,  807,
  842,  594,  583,  584,  280,  585,  586,  814,  137, 1261,
  283,  345,  345, 1212,   53,  836, 1177, 1231, 1232,   69,
  466,  808,  283,  136, 1509, 1510,  435,  435,  136,  280,
  283,  345,  136,  592,  815,   20,  283, 1280,  816,  345,
  837,  137,  345,  840, 1281, 1336,  841,   20,  842,  665,
  436,  436,  843,  283,  283,  860,  594,  847, 1261, 1378,
  136,  861,  137,  972,  972, 1177,  742,  742,  882,   20,
  675,  677,  881,  660,  660,  680,  682, 1378,  888,  660,
  889,  660,  283,  660,  892,  660,  660,  660,  280,  891,
 1390,  692,  694, 1407,  894, 1408,  660,   22,  897, 1336,
  660,  660,  899,  905,  911,  280,  280,  912,  913,  136,
  136,  660,  660,  919,  213,  937,  283,  137,  940,   20,
  943,  866,  941,   19,  660,  275,  139,   20,  954,  957,
  958,  280,  961,  280,   26,  974,   27,  978, 1004,   28,
  660,   20,   20, 1017, 1027, 1030, 1036, 1045,   29,  539,
  793, 1052, 1059, 1060, 1064, 1073, 1063,   31, 1078, 1079,
 1336, 1441,  517,  283,   33,  136, 1080, 1087, 1281,   34,
 1092,  283, 1098,   35, 1256, 1461, 1107, 1099, 1109, 1121,
 1110, 1128, 1281, 1123, 1129,   37, 1134,   38, 1473, 1475,
 1143,   39, 1125, 1142,  137, 1281, 1281,   19, 1151,   40,
   41,  139, 1154,   42,   20,  793,  105, 1155, 1461, 1461,
 1156, 1158, 1159, 1163, 1167, 1281, 1281, 1174, 1187, 1175,
 1211, 1194,   19, 1206, 1219,  139, 1214, 1215, 1218, 1235,
 1237, 1243, 1244, 1256,  793, 1246,  501,  501, 1294, 1249,
  139,  139, 1250, 1297, 1299, 1300, 1304, 1311, 1314, 1301,
 1341, 1342, 1361, 1315, 1527, 1527,  283, 1461,  633,  633,
 1376, 1535, 1535, 1379, 1281,  252, 1365, 1393, 1384,  137,
 1546, 1399, 1375, 1395, 1369, 1396, 1373, 1385, 1374, 1397,
 1401,   19, 1402,   19,  283, 1403, 1387, 1404,  253, 1331,
   19,  273, 1410,  137, 1411, 1421, 1417, 1422,   19,   19,
 1424,  254, 1432, 1433, 1455, 1358,  256, 1436,  137,  137,
 1446,  257, 1459,  258,  259,  260,  261, 1358, 1456, 1465,
 1469,  262, 1358, 1468,   19,  263,   19, 1479, 1480, 1349,
 1482, 1483, 1498, 1489, 1358, 1358, 1495,  264,  379, 1499,
  265, 1488,  266,  283,  386,  388,  390,  392,  394,  396,
  398,  400, 1511, 1503,   22, 1497, 1518, 1519,   22, 1538,
 1540, 1544, 1545, 1549,    9, 1017,  267, 1054,  569,   22,
  956,  529,  957, 1009,   22,  139,   20,  139,   22,  696,
  335,   22,   31,  530,  972,  480,  335,  212,  697,  283,
   32,  318,  104,   22,   22,  528,   31,  481,   22,   22,
   32,  632,  863,  964,   22,  633,   22,   22,   22,   22,
  864,  855,  922,  887,   22,  856,  923,  888,   22,  765,
   22,  139,  335,  322,  139,  924, 1351,  765,  926,  786,
   22,  345,  742,   22,  742,   22,   33,  248,  129,   22,
  114,  292,  130,  137,  115,  137,  293,   25,  887,  995,
   20, 1136, 1137, 1339, 1305, 1340, 1192, 1496, 1470,   22,
 1457, 1388, 1452, 1025,  139,  908, 1022, 1026,   19,   22,
   22, 1371, 1389, 1537, 1312,   20, 1309, 1530,  345, 1476,
 1481,  283, 1474, 1529,  345,  665, 1238,  335,  993,  137,
  335,  335,  137,  283, 1409,  564,  335,  335,  335, 1066,
  335, 1239,  335,  335,  335,  827,  335,  335,  970,   34,
  335,  335,  335,  335,  139,  283, 1044,  335,  335,  859,
  345, 1111,  335,  335,  335,  335,  335,  335,  335,  335,
  904,  342,  137,  925,   20,  576,   20,  423,  670,  671,
 1131,  335,  696,   20,  698, 1133,  335,  700,  704,  818,
  702,   20,   20,  137, 1150,  960,  705,  335,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433, 1221, 1316,
 1165,  379,  457,  283, 1172, 1103, 1157,   20, 1122,   20,
 1166, 1203,  137, 1093, 1164, 1229,  345,  283,  283,    0,
  806,  994,  992,  573,  345,    0,    0,  345, 1057,  345,
  345,    0,    0,  379,  345,  345,    0,    0,  345,  345,
  345,  345,  345,  345,  345,  345,  345,    0,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,    0,    0,
    0,    0,    0,    0,   23,    0,    0,    0,  345,  345,
    0,    0,    0,    0,    0,    0,  345,  139,    0,  345,
  283,    0,    0,    0,    0,  345,    0,    0,    0,    0,
  653,  655,  657,    0,    0,  573,  573,  573,  573,  573,
  573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
  573,    0,    0,    0,  665,    0,    0,  665,    0,    0,
  665,    0,    0,   33,    0,    0,    0,   33,    0,    0,
    0,    0,    0,  541,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   33,    0,  137,    0,   33,    0,    0,
   33,    0,    0,    0,    0,    0,    0,    0,    0,  139,
    0,    0,   33,   33,    0,    0,    0,   33,   33,    0,
    0,    0,    0,   33,    0,   33,   33,   33,   33,    0,
    0,    0,  137,   33,    0,  137,    0,   33,  137,   33,
    0,    0,    0,    0,    0,  573,   34,    0,    0,   33,
   34,  139,   33,    0,   33,    0,  139,    0,   33,    0,
  139,   34,    0,    0,    0,    0,   34,    0,    0,    0,
   34,    0,    0,   34,    0,    0,    0,  137,   33,    0,
    0,    0,    0,    0,    0,   34,   34,    0,  139,   33,
   34,   34,    0,    0,    0,    0,   34,    0,   34,   34,
   34,   34,  283,    0,    0,    0,   34,    0,    0,    0,
   34,    0,   34,    0,    0,    0,  839,    0,    0,  137,
    0,  425,   34,    0,  137,   34,    0,   34,  137,  537,
    0,   34,  425,    0,  425,  537,    0,  139,  139,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   34,    0,  425,  425,    0,  137,    0,    0,    0,
    0,   34,   34,    0,    0,    0,    0,  870,  871,  958,
    0,   23,    0,  425,    0,   23,  283,    0,    0,    0,
    0,  425,    0,    0,  425,  379,   23,    0,    0,    0,
  537,   23,    0,  139,    0,   23,    0,    0,   23,    0,
    0,  283,    0,    0,    0,  137,  137,    0,    0,    0,
   23,   23,    0,    0,    0,   23,   23,    0,    0,    0,
    0,   23,    0,   23,   23,   23,   23,    0,    0,    0,
    0,   23,    0,    0,    0,   23,    0,   23,    0,  541,
    0,    0,    0,    0,  541,  541,    0,   23,    0,    0,
   23,    0,   23,    0,    0,    0,   23,    0,    0,    0,
  283,  137,  283,    0,    0,    0,    0,  541,    0,  283,
    0,    0,    0,    0,    0,    0,   23,  283,  283,  379,
  541,  541,    0,    0,    0,  541,   23,   23,  541,    0,
  541,    0,  541,  541,  541,  541,    0,    0,    0,    0,
  541,    0,    0,  283,  541,  283,    0,    0,  541,    0,
    0,    0,    0,    0,    0,    0,  541,    0,    0,  541,
    0,  541,  541,    0,    0,    0,  541,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  881,    0,    0,    0,    0,  541,  541,  541,    0,  541,
  541,    0,    0,    0,  541,  541,    0,  541,  541,  541,
  541,  541,  541,  541,    0,  541,  541,    0,  541,  541,
  541,  541,  541,  541,  541,  541,  541,  541,    0,  541,
  541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
  541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
  541,    0,    0,  541,    0,  541,    0,  541,    0,    0,
  541,    0,    0,    0,    0,    0,  541,    0,    0,    0,
    0,    0,    0,    0,    0,  958,  958,    0,    0,    0,
    0,    0,    0,  958,  958,  958,  958,  958,    0,  958,
  958,  573,  958,  958,    0,  958,  958,  958,  958,  958,
    0,    0,    0,    0,  958,    0,  958,  958,  958,  958,
  958,  958,    0,    0,  958,    0,    0,    0,  958,  958,
  345,  958,  958,  958,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  958, 1072,  958,    0,  958,  958,    0,
    0,  958,    0,  958,  958,  958,  958,  958,  958,  958,
  958,  958,  958,  958,  958,    0,  958,    0,    0,  958,
  958,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  958,  958,
  958,  958,  958,    0,    0,  958,  958,    0,    0,    0,
  958,  958,    0,    0,  958,    0,    0,    0,    0,  958,
  958,  958,  958,  958,    0,    0,    0,  958,    0,  958,
    0,    0,    0,    0,    0,  958,  958,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  958,  958,  958,  958,    0,  958,  881,  881,    0,    0,
    0,    0,  958,    0,  881,  881,  881,  881,  881,    0,
  881,  881,    0,  881,  881,    0,  881,  881,  881,  881,
  335,    0,    0,    0,    0,  881,    0,  881,  881,  881,
  881,  881,  881,    0,    0,  881,    0,    0,    0,  881,
  881,    0,  881,  881,  881,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  881,    0,  881,    0,  881,  881,
    0,    0,  881,    0,  881,  881,  881,  881,  881,  881,
  881,  881,  881,  881,  881,  881,    0,  881,    0,    0,
  881,  881,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  881,
  881,  881,  881,  881,    0,    0,  881,  881,    0,    0,
    0,  881,  881,    0,    0,  881,    0,    0,    0,    0,
  881,  881,  881,  881,  881,    0,  345,    0,  881,    0,
  881,  345,  345,    0,    0,    0,  881,  881,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  345,    0,    0,    0,    0,    0,
    0,  881,  881,  881,  881,    0,  881,  345,  345,    0,
  839,    0,  345,  881,    0,  345,    0,  345,    0,  345,
  345,  345,  345,    0,    0,    0,    0,  345,    0,    0,
    0,  345,    0,    0,    0,  345,    0,    0,    0,    0,
    0,    0,    0,  345,    0,    0,  345,    0,  345,  345,
    0,    0,    0,  345,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  345,  652,    0,
    0,    0,  345,  345,    0,    0,  345,  345,    0,    0,
    0,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,    0,  345,  345,    0,    0,  345,  345,  345,  345,
  345,    0,    0,  345,  345,    0,    0,    0,  345,  345,
  345,  345,  345,  345,  345,  345,  335,    0,    0,    0,
    0,  335,  335,    0,    0,    0,    0,  345,    0,    0,
  345,    0,  345,    0,  345,    0,    0,  345,    0,    0,
    0,    0,    0,  345,  335,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  335,  335,    0,
  375,    0,  335,    0,    0,  335,    0,  335,    0,  335,
  335,  335,  335,    0,    0,    0,    0,  335,  652,  652,
    0,  335,    0,    0,  652,  335,  652,    0,  652,    0,
  652,  652,  652,  335,    0,    0,  335,    0,  335,  335,
  652,  652,    0,  335,    0,  652,  652,    0,    0,    0,
    0,    0,  345,    0,  652,  652,  652,  652,  653,    0,
    0,    0,  335,  335,    0,    0,  335,  335,    0,  652,
    0,  335,  335,  335,  335,  335,  335,    0,  335,  335,
  335,    0,  335,  335,    0,  652,  335,  335,  335,  335,
    0,    0,    0,  335,  335,    0,    0,    0,  335,  335,
  335,  335,  335,  335,  335,  335,  839,    0,    0,    0,
    0,  839,  839,    0,    0,    0,    0,  335,    0,    0,
  335,    0,  335,    0,  335,    0,    0,  335,    0,    0,
    0,    0,    0,  335,  839,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  839,  839,    0,
  380,    0,  839,    0,    0,  839,    0,  839,    0,  839,
  839,  839,  839,    0,    0,    0,    0,  839,  653,  653,
    0,  839,    0,    0,  653,  839,  653,    0,  653,    0,
  653,  653,  653,  839,    0,    0,  839,    0,  839,  839,
  653,  653,    0,  839,    0,  653,  653,    0,    0,    0,
    0,    0,    0,    0,  653,  653,  653,  653,    0,    0,
    0,    0,  839,  839,    0,    0,  839,  839,    0,  653,
    0,  839,  839,  839,  839,  839,  839,    0,  839,  839,
  839,    0,  839,  839,    0,  653,  839,  839,  839,  839,
    0,    0,    0,  839,  839,    0,    0,    0,  839,  839,
  839,  839,  839,  839,  839,  839,  375,    0,    0,    0,
    0,  375,  375,    0,    0,    0,    0,  839,    0,    0,
  839,    0,  839,    0,  839,    0,    0,  839,    0,    0,
    0,    0,    0,  839,  375,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  375,  375,    0,
    0,    0,  375,    0,    0,  375,    0,  375,  345,  375,
  375,  375,  375,    0,  345,    0,    0,  375,    0,   29,
    0,  375,    0,    0,    0,  375,    0,    0,    0,    0,
    0,    0,    0,  375,    0,    0,  375,    0,  375,  375,
    0,    0,    0,  375,    0,    0,    0,    0,    0,    0,
  345,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  375,  375,    0,    0,  375,  375,    0,    0,
    0,  375,  375,    0,  375,  375,  375,    0,  375,  375,
  375,    0,  375,  375,    0,    0,  375,  375,  375,  375,
    0,  345,    0,  375,  375,  345,    0,    0,  375,  375,
  375,  375,  375,  375,  375,  375,  380,    0,    0,  345,
    0,    0,  380,    0,    0,  345,    0,  375,  345,  345,
  375,    5,  375,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  375,  345,  345,    0,    0,  345,  345,
  345,  345,  345,    0,    0,  345,  345,    0,  380,    0,
  345,  345,  345,  345,  345,  345,  345,  345,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  998,  345,
    0,    0,  345,    0,  345,    0,  345,    0,    0,  345,
    0,    0,    0,    0,    0,  345,    0,    0,    0,  380,
    0,    0,    0,  380,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  380,    0,   47,  380,  380,    0,    0,
    0,  380,  380,  380,  380,  380,  380,    0,  380,  380,
  380,    0,  380,  380,    0,    0,  380,  380,  380,  380,
    0,    0,    0,  380,  380,    0,    0,    0,  380,  380,
  380,  380,  380,  380,  380,  380,    0,    0,    0,    0,
    0,    0,    7,    0,    0,    0,    0,  380,    0,    0,
  380,    0,  380,    0,  380,   29,   29,  380,    0,    0,
   29,    0,    0,  380,   29,    0,   29,    0,    0,   29,
    0,   29,   29,    0,    0,    0,   29,    0,   29,    0,
   29,   29,   29,   29,    0,    0,    0,   29,    0,  999,
    0,    0,   29,    0,   29,   29,   29,    0,    0,   29,
   29,   29,    0,   29,    0,    0,   29,    0,   29,   29,
   29,   29,    0,    0,    0,   29,   29,   29,    0,    0,
   29,   29,   29,    0,    0,    0,    0,    0,    0,   29,
   29,    0,   29,   29,    0,   29,   29,   29,    0,    0,
    0,   29,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,    0,    0,    5,    0,
    0,   29,   47,    0,    0,    0,    0,    0,    0,    0,
   29,   29,   29,   47,    0,    0,    0,    0,   47,    0,
   29,    0,   47,    0,    0,   47,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   47,   47,    0,
    0,    0,   47,   47,    0,  998,    0,    0,   47,   47,
   47,   47,   47,   47,    0,    0,    0,    0,   47,    0,
   47,   29,   47,    0,   47,   47,    0,    0,    0,   47,
    0,    0,   47,    0,   47,    0,    0,   47,    0,   47,
    0,    0,    0,   47,   47,   47,    0,    0,    0,   47,
   47,    0,   47,    0,    0,   47,   47,   47,   47,   47,
   47,    0,    0,   47,    0,   47,    0,   47,    0,   47,
    0,   47,   47,    0,    0,    0,   47,    0,    0,   47,
    0,   47,    0,    0,   47,    0,   47,    0,    0,    0,
   47,   47,   47,    0,    0,    0,   47,   47,    0,    7,
    0,    0,   47,   48,   47,   47,   47,   47,    0,    0,
   47,    0,   47,    0,   48,    0,   47,    0,   47,   48,
    0,    0,    0,   48,    0,    0,   48,    0,   47,    0,
    0,   47,    0,   47,    0,    0,    0,   47,   48,   48,
    0,    0,    0,   48,   48,    0,  999,    0,    0,   48,
   47,   48,   48,   48,   48,    0,    0,   47,    0,   48,
    0,   47,    0,   48,    0,   48,   47,    0,    0,    0,
   47,    0,    0,   47,    0,   48,    0,    0,   48,    0,
   48,    0,    0,    0,   48,   47,   47,    0,    0,    0,
   47,   47,    0,    0,    0,    0,   47,    0,   47,   47,
   47,   47,    0,    0,   48,    0,   47,    0,    0,   48,
   47,    0,   47,   48,    0,    0,    0,    0,    0,    0,
    0,    0,   47,    0,   48,   47,    0,   47,    0,   48,
    0,   47,    0,   48,    0,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,   48,
    0,   47,    0,   48,   48,    0,    0,    0,    0,   48,
    0,   48,   48,   48,   48,    0,    0,    0,    0,   48,
    0,    0,    0,   48,    0,   48,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   48,    0,   76,   48,    0,
   48,    0,    0,    0,   48,   77,   26,   78,   27,    0,
    0,   28,   79,    0,   80,   81,    0,   82,   83,   84,
   29,    0,    0,    0,   48,    0,   85,    0,   86,   31,
   87,   88,   89,   90,    0,    0,   33,    0,    0,    0,
   91,   34,    0,   92,   93,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   94,    0,   37,    0,   38,
   95,    0,    0,   39,    0,   96,   97,   98,   99,  100,
  101,   40,   41,  102,  103,   42,  104,  842,  105,    0,
    0,  106,  107,  842,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  108,  109,  110,  111,  112,    0,    0,  113,  114,    0,
    0,    0,  115,    0,    0,    0,  116,    0,    0,  842,
    0,  117,  118,  119,  120,  121,    0,    0,    0,  122,
    0,  123,    0,    0,    0,    0,    0,  124,  125,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  842,    0,
    0,    0,    0,    0,  842,    0,    0,    0,    0,    0,
    0,    0,  126,  127,  128,  129,    0,    0,    0,    0,
    0,    0,    0,    0,  213,    0,    0,    0,  842,    0,
    0,    0,    0,    0,  842,  842,    0,  842,  842,    0,
  842,    0,  842,  842,  842,  842,  842,  842,  842,  842,
  842,  842,    0,  842,  842,    0,  842,  842,  842,  842,
  842,  842,  842,  842,  842,  842,  663,  842,  842,  842,
  842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
  842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
    0,    0,    0,  842,    0,  842,  842,    0,  842,  842,
    0,    0,    0,    0,  842,  842,  842,    0,  842,  842,
    0,    0,    0,  842,  842,  842,  842,  842,  842,  842,
  842,  842,  842,    0,  842,  842,    0,  842,  842,  842,
  842,  842,  842,  842,  842,  842,  842,    0,  842,  842,
  842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
  842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
  842,  345,    0,    0,  842,    0,  842,  345,    0,  842,
    0,    0,    0,    0,    0,  842,  663,  663,    0,    0,
    0,    0,  663,    0,  663,    0,  663,    0,  663,  663,
  663,  345,    0,    0,    0,    0,    0,  345,  345,  663,
    0,    0,    0,  345,  663,  345,    0,  345,    0,  345,
  345,  345,  345,    0,  663,  663,    0,    0,    0,    0,
    0,    0,    0,    0,  345,    0,    0,  663,    0,    0,
  345,  345,  833,    0,    0,    0,    0,    0,  833,    0,
    0,    0,    0,  663,    0,    0,    0,    0,    0,    0,
  345,    0,    0,    0,    0,    0,  345,    0,  345,    0,
    0,  345,  345,    0,    0,    0,    0,    0,  345,  345,
    0,  345,  345,    0,  833,    0,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,    0,  345,  345,    0,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
    0,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,    0,  345,    0,    0,  345,    0,  345,
  345,    0,  345,    0,  842,    0,    0,    0,  345,  833,
    0,    0,  833,  833,    0,    0,    0,    0,  833,    0,
  833,    0,  833,    0,  833,  833,  833,    0,  833,  833,
    0,    0,  833,  833,  833,  833,  345,    0,    0,  833,
  833,    0,    0,    0,  833,  833,  833,  833,  833,  833,
  833,  833,  842,    0,    0,    0,  345,    0,    0,    0,
    0,    0,  345,  833,    0,    0,    0,    0,  833,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  833,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  345,    0,    0,  345,    0,
    0,  345,  345,    0,    0,    0,    0,    0,    0,    0,
  345,  345,  345,  345,  345,  345,  345,  842,  345,  643,
  345,  345,    0,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,    0,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,    0,  345,    0,    0,
  345,    0,  345,  345,  345,  345,  345,  345,    0,    0,
    0,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,    0,  345,  345,    0,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,    0,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,    0,  543,
    0,    0,  345,    0,  345,  543,    0,  345,    0,  643,
  643,    0,    0,  345,    0,  643,    0,  643,    0,  643,
    0,  643,  643,  643,    0,    0,    0,    0,    0,  643,
  643,  643,  643,    0,    0,    0,  643,  643,    0,    0,
    0,  543,    0,  643,  643,  643,  643,  643,  643,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  643,    0,  539,    0,    0,    0,    0,    0,  539,    0,
    0,    0,    0,    0,    0,    0,  643,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  539,    0,    0,  543,    0,  543,
  543,    0,    0,    0,  543,  543,  543,  543,  543,  543,
  543,  543,  543,  543,    0,  543,  543,  638,  543,  543,
  543,  543,  543,  543,  543,  543,  543,  543,    0,  543,
  543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
  543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
  543,    0,    0,    0,    0,    0,    0,  543,    0,    0,
  539,    0,  539,  539,    0,    0,  543,  539,  539,    0,
  539,  539,  539,  539,  539,  539,  539,    0,  539,  539,
    0,  539,  539,  539,  539,  539,  539,  539,  539,  539,
  539,    0,  539,  539,  539,  539,  539,  539,  539,  539,
  539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
  539,  539,  539,  539,    0,  547,    0,    0,    0,    0,
  539,  547,    0,  539,    0,    0,    0,  638,  638,  539,
    0,    0,    0,  638,    0,  638,    0,  638,    0,  638,
  638,  638,    0,    0,    0,    0,    0,  638,  638,  638,
  638,    0,    0,    0,  638,  638,    0,  547,    0,  638,
  638,  638,  638,  638,  638,  638,  638,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  345,  638,    0,
    0,    0,    0,  345,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  638,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  345,
    0,    0,    0,  547,    0,  547,  547,    0,    0,    0,
    0,  547,    0,  547,  547,  547,  547,  547,  547,  547,
  644,  547,  547,    0,  547,  547,  547,  547,  547,  547,
  547,  547,  547,  547,    0,  547,  547,  547,  547,  547,
  547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
  547,  547,  547,  547,  547,  547,  547,    0,    0,    0,
    0,    0,    0,  547,    0,  345,  547,  345,  345,    0,
    0,    0,  547,  345,    0,  345,  345,  345,  345,  345,
  345,  345,    0,  345,  345,    0,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,    0,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,    0,
  462,    0,    0,    0,    0,  345,  462,    0,  345,    0,
  644,  644,    0,    0,  345,    0,  644,    0,  644,    0,
  644,    0,  644,  644,  644,    0,    0,    0,    0,    0,
  644,  644,  644,  644,    0,    0,    0,  644,  644,    0,
    0,    0,  462,    0,  644,  644,  644,  644,  644,  644,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  644,  402,    0,    0,    0,    0,    0,  402,    0,
    0,    0,    0,    0,    0,    0,    0,  644,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  402,    0,    0,    0,  462,    0,
  462,  462,    0,    0,    0,    0,  462,    0,  462,  462,
  462,  462,  462,  462,  462,  639,  462,  462,    0,  462,
  462,  462,  462,  462,  462,  462,  462,  462,  462,    0,
  462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
  462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
  462,  462,    0,    0,    0,    0,    0,    0,  462,  335,
  402,  462,    0,    0,    0,    0,    0,  462,  402,  335,
  402,  402,  402,  402,  402,    0,  402,    0,  402,  402,
  574,  402,  402,  402,  402,  402,  574,  402,  402,  402,
  402,    0,  402,  402,  402,  402,  402,  402,  402,  402,
  402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
  402,  402,  402,  402,    0,    0,    0,    0,  335,    0,
  402,    0,  574,  402,    0,  639,  639,    0,    0,  402,
    0,  639,    0,  639,    0,  639,    0,  639,  639,  639,
    0,    0,    0,    0,    0,  639,  639,  639,  639,    0,
    0,    0,  639,  639,    0,    0,    0,  639,  639,  639,
  639,  639,  639,  639,  639,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  639,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  574,  574,  639,    0,    0,    0,  574,    0,  574,    0,
  574,    0,  574,  574,  574,    0,  574,  574,    0,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,    0,
    0,    0,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  524,  574,    0,    0,    0,    0,    0,  335,   77,   26,
    0,   27,    0,  335,   28,  296,    0,  574,    0,    0,
   82,   83,    0,   29,    0,    0,    0,    0,    0,   85,
    0,    0,   31,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0,    0,   34,    0,   92,   93,   35,  335,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,    0,   38,   95,    0,    0,   39,    0,    0,   97,
    0,   99,    0,  101,   40,   41,  297,    0,   42,  616,
    0,    0,    0,    0,    0,  616,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  108,  109,  110,  298,  525,    0,    0,
  113,  114,    0,    0,  335,  402,    0,  335,  335,  116,
    0,  616,    0,  335,  335,  335,    0,  335,  402,  335,
  335,  335,    0,  335,  335,    0,    0,  335,  335,  335,
  335,    0,    0,    0,  335,  335,    0,  402,  402,  335,
  335,  335,  335,  335,  335,  335,  335,    0,    0,    0,
    0,    0,    0,    0,    0,  126,  526,  402,  335,    0,
    0,    0,  217,  335,    0,  402,  527,  528,  402,    0,
    0,    0,    0,    0,  335,  218,    0,  403,  620,  616,
  616,    0,    0,    0,  620,  616,    0,  616,  403,  616,
  403,  616,  616,  616,    0,  616,  616,    0,    0,  616,
  616,  616,  616,    0,  219,    0,  616,  616,    0,  403,
  403,  616,  616,  616,  616,  616,  616,  616,  616,    0,
  620,    0,    0,    0,    0,    0,    0,    0,    0,  403,
  616,    0,    0,    0,    0,    0,    0,  403,    0,    0,
  403,    0,  619,    0,    0,    0,  616,    0,  619,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  220,  221,
  222,  223,    0,  224,  225,  226,  227,  228,  229,  230,
  231,    0,    0,  232,  233,  234,  235,  236,  237,  238,
  239,    0,    0,    0,  619,    0,  406,    0,  620,  620,
    0,    0,    0,    0,  620,    0,  620,  406,  620,  406,
  620,  620,  620,    0,  620,  620,  596,    0,  620,  620,
  620,  620,  596,    0,    0,  620,  620,    0,  406,  406,
  620,  620,  620,  620,  620,  620,  620,  620,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  406,  620,
    0,    0,    0,    0,    0,    0,  406,    0,  596,  406,
  416,    0,  619,  619,    0,  620,    0,    0,  619,    0,
  619,  416,  619,  416,  619,  619,  619,    0,  619,  619,
  603,    0,  619,  619,  619,  619,  603,    0,    0,  619,
  619,    0,  416,  416,  619,  619,  619,  619,  619,  619,
  619,  619,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  416,  619,    0,    0,    0,    0,    0,    0,
  416,    0,  603,  416,  666,    0,  596,  596,    0,  619,
    0,    0,  596,    0,  596,    0,  596,    0,  596,  596,
  596,    0,  596,  596,    0,    0,  596,  596,  596,  596,
  596,  596,  596,  596,  596,    0,    0,    0,  596,  596,
  596,  596,  596,  596,  596,  596,  964,    0,    0,    0,
    0,    0,  964,    0,    0,    0,    0,  596,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  603,  603,    0,  596,    0,    0,  603,    0,  603,    0,
  603,    0,  603,  603,  603,    0,  603,  603,  964,    0,
  603,  603,  603,  603,  604,    0,    0,  603,  603,    0,
  604,    0,  603,  603,  603,  603,  603,  603,  603,  603,
    0,    0,    0,    0,  666,  666,    0,    0,    0,    0,
  666,  603,  666,    0,  666,    0,  666,  666,  666,    0,
    0,    0,    0,    0,    0,    0,  604,  603,    0,    0,
    0,    0,  666,  605,    0,    0,    0,    0,    0,  605,
    0,    0,  666,  666,    0,    0,  964,  964,    0,    0,
    0,    0,  964,    0,  964,  666,  964,    0,  964,  964,
  964,    0,  964,  964,    0,    0,  964,  964,  964,  964,
    0,  666,    0,  964,  964,  605,    0,    0,  964,  964,
  964,  964,  964,  964,  964,  964,    0,    0,    0,  640,
    0,    0,    0,    0,  604,  604,    0,  964,    0,    0,
  604,    0,  604,    0,  604,    0,  604,  604,  604,    0,
  604,  604,    0,  964,  604,  604,  604,  604,    0,    0,
    0,  604,  604,    0,    0,    0,  604,  604,  604,  604,
  604,  604,  604,  604,    0,    0,    0,  645,    0,    0,
    0,    0,    0,  605,  605,  604,    0,    0,    0,  605,
    0,  605,    0,  605,    0,  605,  605,  605,    0,  605,
  605,  604,    0,  605,  605,  605,  605,    0,    0,    0,
  605,  605,    0,    0,    0,  605,  605,  605,  605,  605,
  605,  605,  605,    0,    0,  646,    0,    0,    0,    0,
    0,    0,    0,    0,  605,    0,    0,    0,    0,  640,
  640,    0,    0,    0,    0,  640,    0,  640,    0,  640,
  605,  640,  640,  640,    0,    0,    0,    0,    0,  640,
  640,  640,  640,    0,    0,    0,  640,  640,    0,    0,
    0,  640,  640,  640,  640,  640,  640,  640,  640,    0,
    0,  647,    0,    0,    0,    0,    0,  645,  645,    0,
  640,    0,    0,  645,    0,  645,    0,  645,    0,  645,
  645,  645,    0,    0,    0,    0,  640,  645,  645,  645,
  645,    0,    0,    0,  645,  645,    0,    0,    0,    0,
    0,  645,  645,  645,  645,  645,  645,  654,    0,    0,
    0,    0,    0,    0,    0,  646,  646,    0,  645,    0,
    0,  646,    0,  646,    0,  646,    0,  646,  646,  646,
    0,    0,    0,    0,  645,  646,  646,  646,  646,    0,
    0,  657,  646,  646,    0,    0,    0,    0,    0,  646,
  646,  646,  646,  646,  646,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  646,    0,    0,    0,
    0,  647,  647,    0,    0,  658,    0,  647,    0,  647,
    0,  647,  646,  647,  647,  647,    0,    0,    0,    0,
    0,  647,  647,  647,  647,    0,    0,    0,  647,  647,
    0,    0,    0,    0,    0,  647,  647,  647,  647,  647,
  647,  661,    0,    0,    0,    0,    0,  654,  654,    0,
    0,    0,  647,  654,    0,  654,    0,  654,    0,  654,
  654,  654,    0,    0,    0,    0,    0,    0,  647,  654,
  654,    0,    0,    0,  654,  654,  664,    0,    0,    0,
    0,  657,  657,  654,  654,  654,  654,  657,    0,  657,
    0,  657,    0,  657,  657,  657,    0,  667,  654,    0,
    0,    0,    0,  657,  657,    0,    0,    0,  657,  657,
    0,    0,    0,    0,  654,  658,  658,    0,  669,  657,
  657,  658,    0,  658,    0,  658,    0,  658,  658,  658,
    0,    0,  657,    0,    0,    0,    0,  658,  658,  670,
    0,    0,  658,  658,    0,    0,    0,    0,  657,    0,
    0,  661,  661,  658,  658,    0,    0,  661,    0,  661,
    0,  661,    0,  661,  661,  661,  658,    0,    0,    0,
    0,    0,    0,    0,  661,    0,    0,    0,  661,  661,
    0,    0,  658,    0,    0,    0,  664,  664,    0,  661,
  661,    0,  664,    0,  664,    0,  664,    0,  664,  664,
  664,    0,  661,    0,    0,    0,    0,  667,  667,  664,
    0,    0,  345,  667,  664,  667,  842,  667,  661,  667,
  667,  667,    0,    0,  664,  664,    0,    0,  669,  669,
    0,    0,    0,    0,  669,  667,  669,  664,  669,    0,
  669,  669,  669,    0,    0,  667,  667,    0,  345,  670,
  670,    0,    0,  664,    0,  670,  669,  670,  667,  670,
    0,  670,  670,  670,  842,    0,    0,  669,    0,    0,
    0,    0,    0,    0,  667,    0,    0,  670,    0,  669,
    0,    0,    0,    0,    0,    0,    0,    0,  670,    0,
    0,    0,    0,    0,    0,  669,    0,    0,    0,    0,
  670,    0,    0,    0,    0,    0,    0,  345,    0,    0,
    0,    0,    0,  345,  345,    0,  670,    0,    0,    0,
    0,    0,  345,  345,    0,  345,    0,  345,    0,  842,
  345,    0,  345,  345,    0,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,    0,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,    0,    0,
  587,    0,  345,    0,  345,    0,    0,  345,   77,   26,
   78,   27, 1113,  345,   28,   79,    0,   80,   81,    0,
   82,   83,   84,   29,    0,    0,    0,    0,    0,   85,
    0,   86,   31,   87,   88,   89,   90,    0,    0,   33,
    0,    0,    0,   91,   34,    0,   92,   93,   35,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
   37,    0,   38,   95,    0,    0,   39,    0,   96,   97,
   98,   99,  100,  101,   40,   41,  102,  103,   42,  104,
    0,  105,    0,    0,  106,  107,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  108,  109,  110,  111,  112,    0,    0,
  113,  114,    0,    0,    0,  115,    0,    0,    0,  116,
    0,    0,    0,    0,  117,  118,  119,  120,  121,    0,
    0,    0,  122,    0,  123,    0,    0,    0,    0,    0,
  124,  125,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   76,    0,  126,  588,  128,  129,    0,
 1114,   77,   26,   78,   27,    0,    0,   28,   79,    0,
   80,   81,    0,   82,   83,   84,   29,    0,    0,    0,
    0,    0,   85,    0,   86,   31,   87,   88,   89,   90,
    0,    0,   33,    0,    0,    0,   91,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   94,    0,   37,    0,   38,   95,    0,    0,   39,
    0,   96,   97,   98,   99,  100,  101,   40,   41,  102,
  103,   42,  104,    0,  105,    0,    0,  106,  107,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  108,  109,  110,  111,
  112,    0,    0,  113,  114,    0,    0,    0,  115,    0,
    0,    0,  116,    0,    0,    0,    0,  117,  118,  119,
  120,  121,    0,    0,    0,  122,    0,  123,    0,    0,
    0,    0,    0,  124,  125,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  309,    0,    0,    0,  126,  127,
  128,  129,   77,   26,   78,   27,    0,    0,   28,   79,
    0,   80,   81,    0,   82,   83,   84,   29,    0,    0,
    0,    0,    0,   85,    0,   86,   31,   87,   88,   89,
   90,    0,    0,   33,    0,    0,    0,   91,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   94,    0,   37,    0,   38,   95,    0,    0,
   39,    0,   96,   97,   98,   99,  100,  101,   40,   41,
  102,  103,   42,  104,    0,  105,    0,    0,  106,  107,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  111,  112,    0,    0,  113,  114,    0,    0,    0,  115,
    0,    0,    0,  116,    0,    0,    0,    0,  117,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,    0,
    0,    0,    0,    0,  124,  125,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  587,    0,    0,    0,  126,
  127,  128,  129,   77,   26,   78,   27,    0,    0,   28,
   79,    0,   80,   81,    0,   82,   83,   84,   29,    0,
    0,    0,    0,    0,   85,    0,   86,   31,   87,   88,
   89,   90,    0,    0,   33,    0,    0,    0,   91,   34,
    0,   92,   93,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   94,    0,   37,    0,   38,   95,    0,
    0,   39,    0,   96,   97,   98,   99,  100,  101,   40,
   41,  102,  103,   42,  104,    0,  105,    0,    0,  106,
  107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,  109,
  110,  111,  112,    0,    0,  113,  114,    0,    0,    0,
  115,    0,    0,    0,  116,    0,    0,    0,    0,  117,
  118,  119,  120,  121,    0,    0,    0,  122,    0,  123,
    0,    0,    0,    0,    0,  124,  125,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  995,    0,    0,    0,
  126,  588,  128,  129,  995,  995,  995,  995,    0,    0,
  995,  995,    0,  995,  995,    0,  995,  995,  995,  995,
    0,    0,    0,    0,    0,  995,    0,  995,  995,  995,
  995,  995,  995,    0,    0,  995,    0,    0,    0,  995,
  995,    0,  995,  995,  995,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  995,    0,  995,    0,  995,  995,
    0,    0,  995,    0,  995,  995,  995,  995,  995,  995,
  995,  995,  995,  995,  995,  995,    0,  995,    0,    0,
  995,  995,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  995,
  995,  995,  995,  995,    0,    0,  995,  995,    0,    0,
    0,  995,    0,    0,    0,  995,    0,    0,    0,    0,
  995,  995,  995,  995,  995,    0,    0,    0,  995,    0,
  995,    0,    0,    0,    0,    0,  995,  995,    0,    0,
    0,    0,    0,    0,    0,  628,    0,    0,    0,    0,
    0,    0,    0,   77,   26,    0,   27,    0,    0,   28,
  296,  995,  995,  995,  995,   82,   83,    0,   29,    0,
    0,    0,    0,    0,   85,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,  252,    0,    0,   34,
    0,   92,   93,   35,    0,  629,    0,    0,    0,    0,
    0,    0,  630,    0,    0,   37,    0,   38,   95,  253,
    0,   39,    0,    0,   97,    0,   99,    0,  101,   40,
   41,  297,  254,   42,    0,    0,    0,  256,    0,    0,
  631,    0,  257,    0,  258,  259,  260,  261,    0,    0,
    0,    0,  262,    0,    0,    0,  263,    0,  108,  109,
  110,  111,  112,    0,    0,  113,  114,    0,  264,    0,
    0,  265,    0,  266,  116,    0,    0,  632,    0,    0,
  118,  119,  120,  121,    0,    0,    0,  122,    0,  123,
    0,    0,    0,    0,    0,  124,  125,  267,    0,    0,
    0,    0,    0,    0,  373,    0,    0,    0,    0,    0,
  374,    0,   77,   26,    0,   27,    0,    0,   28,  296,
  126,  127,  128,  129,   82,   83,    0,   29,    0,    0,
  169,    0,  169,   85,    0,  169,   31,    0,    0,    0,
    0,    0,    0,   33,  169,    0,  375,    0,   34,    0,
   92,   93,   35,  169,    0,    0,    0, 1369,    0,    0,
  169,    0,    0,    0,   37,  169,   38,   95,    0,  169,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,  169,   42,  169,    0,    0,    0,  169,    0,    0,
    0,  376,    0,    0,    0,  169,  169,    0,    0,  169,
    0,    0,  169,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,  378,    0,    0,    0,  118,
  119,  120,  121,  926,    0,    0,  122,    0,  123, 1020,
   77,   26,    0,   27,  124,  125,   28,  296,    0,    0,
    0,    0,   82,   83,    0,   29,    0,    0,    0,    0,
    0,   85,    0,    0,   31,    0,    0,    0,    0,  126,
  300,   33,  129,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,  169,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  297,    0,
   42,    0,    0,    0,    0,    0,    0,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  108,  109,  110,  111,  773,
    0,    0,  113,  114,    0,    0,    0,  774, 1043,    0,
    0,  116,    0,    0,    0,    0,    0,  118,  119,  120,
  121,    0,    0,    0,  122,    0,  123,    0,    0,    0,
    0,    0,  124,  125,    0,    0,    0,    0,    0,    0,
    0,  373,    0,    0,    0,    0,    0,  374,    0,   77,
   26,    0,   27,    0,    0,   28,  296,  126,  775,  128,
  129,   82,   83,  776,   29,    0,    0,   26,  777,   27,
   85,    0,   28,   31,    0,    0,    0,    0,    0,    0,
   33,   29,    0,  375,    0,   34,    0,   92,   93,   35,
   31,    0,    0,    0,    0,    0,    0,   33,    0,    0,
    0,   37,   34,   38,   95,    0,   35,   39,    0,    0,
   97,    0,   99,    0,  101,   40,   41,  297,   37,   42,
   38,    0,    0,    0,   39,    0,    0,    0,  376,    0,
    0,    0,   40,   41,    0,    0,   42,    0,    0,  105,
    0,    0,    0,    0,  108,  109,  110,  298,  377,    0,
    0,  113,  114,    0,    0,    0,    0,    0,    0,    0,
  116,    0,  378,    0,    0,    0,  118,  119,  120,  121,
    0,    0,    0,  122,    0,  123,    0,   77,   26,    0,
   27,  124,  125,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,    0,
    0,   31,    0,    0,    0,    0,  126,  300,   33,  129,
   29,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,  273,    0,    0,    0,    0,   37,
    0,   38,   95,   29,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,   29,   42,    0,    0,
    0,   29,    0,    0,  107,    0,   29,    0,   29,   29,
   29,   29,    0,    0,   29,    0,   29,    0,    0,    0,
   29,    0,  108,  109,  110,  111,  773,    0,    0,  113,
  114,    0,   29,    0,  774,   29,    0,   29,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,    0,    0,    0,    0,    0,  124,
  125,   29,    0,    0,    0,    0,    0,    0,  791,    0,
    0,   29,   29,    0,    0,    0,   77,   26,    0,   27,
    0,    0,   28,  296,  126,  775,  128,  129,   82,   83,
  776,   29,    0,    0,  169,  777,  169,   85,    0,  169,
   31,    0,    0,    0,    0,    0,    0,   33,  169,    0,
    0,    0,   34,    0,   92,   93,   35,  169,    0,    0,
    0,    0,    0,    0,  169,    0,    0,    0,   37,  169,
   38,   95,    0,  169,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  297,  169,   42,  169,    0,    0,
    0,  169,    0,  107,    0,    0,    0,    0,    0,  169,
  169,    0,    0,  169,    0,    0,  169,    0,    0,    0,
    0,  108,  109,  110,  111,  345,    0,    0,  113,  114,
    0,    0,    0,  545,  792,    0,    0,  116,    0,    0,
    0,    0,    0,  118,  119,  120,  121,    0,    0,    0,
  122,    0,  123,    0,    0, 1020,    0,    0,  124,  125,
    0,    0,    0,    0,    0,    0,    0,  968,    0,    0,
    0,    0,    0,    0,    0,   77,   26,    0,   27,    0,
    0,   28,  296,  126,  346,  128,  129,   82,   83,    0,
   29,    0,    0,   26,    0,   27,   85,    0,   28,   31,
    0,  169,    0,    0,    0,    0,   33,   29,    0,    0,
    0,   34,    0,   92,   93,   35,   31,  629,    0,    0,
    0,    0,    0,   33,  630,    0,    0,   37,   34,   38,
   95,    0,   35,   39,    0,    0,   97,    0,   99,    0,
  101,   40,   41,  297,   37,   42,   38,    0,    0,    0,
   39,    0,  631,    0,    0,    0,    0,    0,   40,   41,
    0,    0,   42,    0,    0,  562,    0,    0,    0,    0,
  108,  109,  110,  111,  112,    0,    0,  113,  114,    0,
    0,    0,    0,    0,    0,    0,  116,    0,    0,    0,
    0,    0,  118,  119,  120,  121,    0,    0,    0,  122,
    0,  123,    0,    0,    0,    0,    0,  124,  125,    0,
    0,    0,    0,    0,    0,    0,  791,    0,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,  126,  127,  128,  129,   82,   83,    0,   29,
    0,    0,   26,    0,   27,   85,    0,   28,   31,    0,
  273,    0,    0,    0,    0,   33,   29,    0,    0,    0,
   34,    0,   92,   93,   35,   31,    0,    0,    0,    0,
    0,    0,   33,    0,    0,    0,   37,   34,   38,   95,
  971,   35,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,   37,   42,   38,    0,    0,    0,   39,
    0,  107,    0,    0,    0,    0,    0,   40,   41,    0,
    0,   42,    0,    0,  601,    0,    0,    0,    0,  108,
  109,  110,  111,  345,    0,    0,  113,  114,    0,    0,
    0,  545,    0,    0,    0,  116,    0,    0,    0,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,    0,  373,    0,    0,    0,    0,
    0,  374,    0,   77,   26,    0,   27,    0,    0,   28,
  296,  126,  346,  128,  129,   82,   83,    0,   29,    0,
    0,    0,    0,    0,   85,    0,    0,   31,    0,  273,
    0,    0,    0,    0,   33,    0,   29,  375,   29,   34,
    0,   92,   93,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   95,   29,
    0,   39,    0,    0,   97,    0,   99,    0,  101,   40,
   41,  297,   29,   42,    0,    0,    0,   29,    0,    0,
    0,    0,   29,    0,   29,   29,   29,   29,    0,    0,
    0,    0,   29,    0,    0,    0,   29,    0,  108,  109,
  110,  298,  377,    0,    0,  113,  114,    0,   29,    0,
    0,   29,    0,   29,  116,    0,  378,    0,    0,    0,
  118,  119,  120,  121,    0,    0,    0,  122,    0,  123,
  791,    0,    0,    0,    0,  124,  125,   29,   77,   26,
    0,   27,    0,    0,   28,  296,    0,   29,   29,    0,
   82,   83,    0,   29,    0,    0,    0,    0,    0,   85,
  126,  300,   31,  129,    0,    0,    0,    0,    0,   33,
    0,   47,    0,    0,   34,    0,   92,   93,   35,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,    0,   38,   95,   47,    0,   39,    0,    0,   97,
    0,   99,    0,  101,   40,   41,  297,   47,   42,    0,
    0,    0,   47,    0,    0,  107,    0,   47,    0,   47,
   47,   47,   47,    0,    0,   47,    0,   47,    0,    0,
    0,   47,    0,  108,  109,  110,  111,  345,    0,    0,
  113,  114,    0,   47,    0,  545,   47,    0,   47,  116,
    0,    0,    0,    0,    0,  118,  119,  120,  121,    0,
    0,    0,  122,    0,  123,    0,    0,    0,    0,    0,
  124,  125,   47,    0,    0,    0,    0,    0,    0,  783,
    0,    0,  303,    0,    0,    0,    0,   77,   26,    0,
   27,    0,    0,   28,  296,  126,  346,  128,  129,   82,
   83,    0,   29,    0,    0,  523,    0,  523,   85,    0,
  523,   31,    0,    0,    0,    0,    0,    0,   33,  523,
    0,    0,    0,   34,    0,   92,   93,   35,  523,    0,
    0,    0,    0,    0,    0,  523,    0,    0,    0,   37,
  523,   38,   95,    0,  523,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,  523,   42,  523,    0,
    0,    0,  523,    0,  107,    0,    0,    0,    0,    0,
  523,  523,    0,    0,  523,    0,    0,  523,    0,    0,
    0,    0,  108,  109,  110,  111,  345,    0,    0,  113,
  114,    0,    0,    0,    0,  927,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,    0,    0,    0,    0,    0,  124,
  125,    0,    0,    0,    0,    0,    0,    0,  989,    0,
    0,    0,    0,    0,    0,    0,   77,   26,    0,   27,
    0,    0,   28,  296,  126,  346,  128,  129,   82,   83,
    0,   29,    0,    0,  170,    0,  170,   85,    0,  170,
   31,    0,  523,    0,    0,    0,    0,   33,  170,    0,
    0,    0,   34,    0,   92,   93,   35,  170,    0,    0,
    0,    0,    0,    0,  170,    0,    0,    0,   37,  170,
   38,   95,    0,  170,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  297,  170,   42,  170,    0,    0,
    0,  170,    0,  107,    0,    0,    0,    0,    0,  170,
  170,    0,    0,  170,    0,    0,  170,    0,    0,    0,
    0,  108,  109,  110,  111,  345,    0,    0,  113,  114,
    0,    0,    0,    0,  990,    0,    0,  116,    0,    0,
    0,    0,    0,  118,  119,  120,  121,    0,    0,    0,
  122,    0,  123,    0,    0,    0,    0,    0,  124,  125,
    0,    0,    0,    0,    0,    0,    0,  783,    0,    0,
    0,    0,    0,    0,    0,   77,   26,    0,   27,    0,
    0,   28,  296,  126,  346,  128,  129,   82,   83,    0,
   29,    0,    0,  169,    0,  169,   85,    0,  169,   31,
    0,  170,    0,    0,    0,    0,   33,  169,    0,    0,
    0,   34,    0,   92,   93,   35,  169,    0,    0,    0,
    0,    0,    0,  169,    0,    0,    0,   37,  169,   38,
   95,    0,  169,   39,    0,    0,   97,    0,   99,    0,
  101,   40,   41,  297,  169,   42,  169,    0,  105,    0,
  169,    0,  107,    0,    0,    0,    0,    0,  169,  169,
    0,    0,  169,    0,    0,  169,    0,    0,    0,    0,
  108,  109,  110,  111,  345,    0,    0,  113,  114,    0,
    0,    0,    0,    0,    0,    0,  853,    0,    0,    0,
    0,    0,  118,  119,  120,  121,    0,    0,    0,  122,
    0,  123,    0,    0,    0,    0,    0,  124,  125,    0,
    0,    0,    0,    0,    0,    0,   81,    0,    0,    0,
    0,    0,    0,    0,   81,   81,    0,   81,    0,    0,
   81,   81,  126,  346,  128,  129,   81,   81,    0,   81,
    0,    0,  179,    0,  179,   81,    0,  179,   81,    0,
  169,    0,    0,    0,    0,   81,  179,    0,    0,    0,
   81,    0,   81,   81,   81,  179,    0,    0,    0,    0,
    0,    0,  179,    0,    0,    0,   81,  179,   81,   81,
    0,  179,   81,    0,    0,   81,    0,   81,    0,   81,
   81,   81,   81,  179,   81,  179,    0,   81,    0,  179,
    0,   81,    0,    0,    0,    0,    0,  179,  179,    0,
    0,  179,    0,    0,  179,    0,    0,    0,    0,   81,
   81,   81,   81,   81,    0,    0,   81,   81,    0,    0,
    0,    0,    0,    0,    0,   81,    0,    0,    0,    0,
    0,   81,   81,   81,   81,    0,    0,    0,   81,    0,
   81,    0,    0,    0,    0,    0,   81,   81,    0,    0,
    0,    0,    0,    0,    0,  344,    0,    0,    0,    0,
    0,    0,    0,   77,   26,    0,   27,    0,    0,   28,
  296,   81,   81,   81,   81,   82,   83,    0,   29,    0,
    0,    0,    0,    0,   85,    0,    0,   31,    0,  179,
    0,    0,    0,    0,   33,    0,   47,    0,   47,   34,
    0,   92,   93,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   95,   47,
    0,   39,    0,    0,   97,    0,   99,    0,  101,   40,
   41,  297,   47,   42,    0,    0,    0,   47,    0,    0,
  107,    0,   47,    0,   47,   47,   47,   47,    0,    0,
    0,    0,   47,    0,    0,    0,   47,    0,  108,  109,
  110,  111,  345,    0,    0,  113,  114,    0,   47,    0,
    0,   47,    0,   47,  116,    0,    0,    0,    0,    0,
  118,  119,  120,  121,    0,    0,    0,  122,    0,  123,
    0,    0,    0,    0,    0,  124,  125,   47,    0,    0,
    0,    0,    0,    0,  353,    0,    0,  304,    0,    0,
    0,    0,   77,   26,    0,   27,    0,    0,   28,  296,
  126,  346,  128,  129,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,    0,    0,   31,    0,    0,    0,
    0,    0,    0,   33,    0,   47,    0,   47,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,   47,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,   47,   42,    0,    0,    0,   47,    0,    0,  107,
    0,   47,    0,   47,   47,   47,   47,    0,    0,   47,
    0,   47,    0,    0,    0,   47,    0,  108,  109,  110,
  111,  345,    0,    0,  113,  114,    0,   47,    0,    0,
   47,    0,   47,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,    0,
    0,    0,    0,    0,  124,  125,   47,    0,    0,    0,
    0,    0,    0,  626,    0,    0,    0,    0,    0,    0,
    0,   77,   26,    0,   27,    0,    0,   28,  296,  126,
  346,  128,  129,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,    0,    0,   31,    0,    0,    0,    0,
    0,    0,   33,    0,  252,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,  253,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  297,
  254,   42,    0,    0,  255,  256,    0,    0,  107,    0,
  257,    0,  258,  259,  260,  261,    0,    0,    0,    0,
  262,    0,    0,    0,  263,    0,  108,  109,  110,  111,
  112,    0,    0,  113,  114,    0,  264,    0,    0,  265,
    0,  266,  116,    0,    0,    0,    0,    0,  118,  119,
  120,  121,    0,    0,    0,  122,    0,  123,    0,    0,
    0,    0,    0,  124,  125,  267,    0,    0,    0,    0,
    0,    0,  783,    0,    0,    0,    0,    0,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  296,  126,  127,
  128,  129,   82,   83,    0,   29,    0,    0,    0,    0,
    0,   85,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,  252,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,  253,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  297,  254,
   42,    0,    0,    0,  256,    0,    0,  107,    0,  257,
    0,  258,  259,  260,  261,    0,    0,    0,    0,  262,
    0,    0,    0,  263,    0,  108,  109,  110,  111,  345,
    0,    0,  113,  114,    0,  264,    0,    0,  265,    0,
  266,  116,    0,    0,    0,    0,    0,  118,  119,  120,
  121,    0,    0,    0,  122,    0,  123,    0,    0,    0,
    0,    0,  124,  125,  267,    0,    0,    0,    0,    0,
    0,  996,    0,    0,    0,    0,    0,    0,    0,   77,
   26,    0,   27,    0,    0,   28,  296,  126,  346,  128,
  129,   82,   83,    0,   29,    0,    0,    0,    0,    0,
   85,    0,    0,   31,    0,    0,    0,    0,    0,    0,
   33,    0,    0,    0,    0,   34,    0,   92,   93,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,    0,   38,   95,    0,    0,   39,    0,    0,
   97,    0,   99,    0,  101,   40,   41,  297,    0,   42,
    0,    0,    0,    0,    0,    0,  107,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  108,  109,  110,  111,  112,    0,
    0,  113,  114,    0,    0,    0,    0,    0,    0,    0,
  116,    0,    0,    0,    0,    0,  118,  119,  120,  121,
    0,    0,    0,  122,    0,  123,    0,    0,    0,    0,
    0,  124,  125,    0,    0,    0,    0,    0,    0,    0,
 1226,    0,    0,    0,    0,    0,    0,    0,   77,   26,
    0,   27,    0,    0,   28,  296,  126,  997,  128,  129,
   82,   83,    0,   29,    0,    0,    0,    0,    0,   85,
    0,    0,   31,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0,    0,   34,    0,   92,   93,   35,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,    0,   38,   95,    0,    0,   39,    0,    0,   97,
    0,   99,    0,  101,   40,   41,  297,    0,   42,    0,
    0,    0,    0,    0,    0,  107,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  108,  109,  110,  111,  345,    0,    0,
  113,  114,    0,    0,    0,    0,    0,    0,    0,  116,
    0,    0,    0,    0,    0,  118,  119,  120,  121,    0,
    0,    0,  122,    0,  123,    0,    0,    0,    0,    0,
  124,  125,    0,    0,    0,    0,    0,    0,    0,  373,
    0,    0,    0,    0,    0,    0,    0,   77,   26,    0,
   27,    0,    0,   28,  296,  126,  346,  128,  129,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,    0,
    0,   31,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  377,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
  378,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  385,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  387,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  377,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  389,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  391,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  377,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  393,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  395,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  377,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  397,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  399,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  377,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  652,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  654,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  377,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  656,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  674,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  377,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  676,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  678,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  679,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  681,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  679,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  683,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  679,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  685,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  679,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  687,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  679,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  689,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  679,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  691,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  679,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  693,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  679,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  695,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  679,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  697,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  679,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  699,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  679,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  701,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  679,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  703,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,    0,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,    0,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,  110,  298,  679,    0,    0,  113,
  114,    0,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,    0,    0,  118,  119,  120,  121,    0,    0,
    0,  122,    0,  123,  838,    0,    0,    0,    0,  124,
  125,    0,   77,   26,    0,   27,    0,    0,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,  126,  300,   31,  129,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,  660,
    0,    0,    0,    0,  124,  125,    0,   77,   26,    0,
   27,    0,    0,   28,  296,    0,    0,    0,    0,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,  126,
  300,   31,  129,    0,    0,    0,    0,    0,   33,    0,
   47,    0,    0,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,   47,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  297,   47,   42,    0,    0,
  105,   47,    0,    0,    0,    0,   47,    0,   47,   47,
   47,   47,    0,    0,    0,    0,   47,    0,    0,    0,
   47,    0,  108,  109,  110,  298,  299,    0,    0,  113,
  114,    0,   47,    0,    0,   47,    0,   47,  116,    0,
    0,    0,    0,    0,    0,  661,  662,    0,    0,  190,
    0,    0,    0,  663,  190,    0,    0,    0,  190,    0,
  190,   47,    0,  190,    0,  190,  190,   47,   47,    0,
  190,  200,  190,    0,  190,  190,  190,  190,    0,    0,
    0,  190,    0,    0,  126,  300,  190,  664,  190,  190,
  190,    0,    0,  190,    0,  190,    0,  190,    0,    0,
  190,    0,  190,  190,  190,  190,    0,    0,    0,  190,
  190,  190,    0,    0,  190,  190,  190,    0,    0,    0,
    0,    0,    0,  190,  190,    0,  190,  190,    0,  190,
  190,  190,    0,    0,    0,  190,    0,    0,  524,    0,
    0,    0,    0,    0,    0,    0,   77,   26,    0,   27,
    0,    0,   28,  296,    0,  190,    0,    0,   82,   83,
    0,   29,    0,    0,  190,  190,  190,   85,    0,    0,
   31,    0,    0,    0,  190,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,  561,   99,
    0,  101,   40,   41,  297,  190,   42,   26,    0,   27,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,   29,    0,    0,    0,    0,    0,    0,    0,    0,
   31,  108,  109,  110,  298,  525,    0,   33,  113,  114,
    0,    0,   34,  658,    0,    0,   35,  116,    0,    0,
    0,    0,   26,    0,   27,    0,    0,   28,   37,    0,
   38,    0,    0,    0,   39,    0,   29,    0,    0,    0,
    0,    0,   40,   41,    0,   31,   42,    0,    0,  562,
    0,  945,   33,    0,    0,    0,    0,   34,    0,    0,
   26,   35,   27,  126,  526,   28,    0,    0,    0,    0,
    0,    0,    0,   37,   29,   38,    0,    0,    0,   39,
    0,    0,    0,   31,  345,    0,    0,   40,   41, 1005,
   33,   42,    0,    0,  105,   34,    0,    0,   26,   35,
   27,    0,    0,   28,    0,    0,    0,    0,    0,    0,
    0,   37,   29,   38,    0,    0,    0,   39,    0,    0,
  345,   31,    0,    0,    0,   40,   41,    0,   33,   42,
    0,    0,  105,   34,  273,    0,    0,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,    0,    0,    0,   39,    0,    0,    0,    0,
    0,    0,    0,   40,   41,    0,    0,   42,    0,    0,
  105,    0,    0,    0,    0,    0,    0,    0,    0,  273,
    0,    0,    0,    0,    0,    0,  345,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  345,  345,  345,
  345,  842,    0,    0,  345,  345,    0,    0,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  273,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
    0,   48,    0,   48,    0,   48,  345,   48,    0,  345,
   48,    0,   48,   48,    0,  273,    0,   48,    0,   48,
    0,   48,   48,   48,   48,    0,    0,    0,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,    0,    0,
   48,    0,   48,    0,   48,    0,    0,   48,    0,   48,
   48,   48,   48,    0,    0,   48,   48,   48,   48,    0,
    0,   48,   48,   48,    0,    0,    0,    0,    0,    0,
   48,   48,    0,   48,   48,    0,   48,   48,   48,    0,
    0,    0,   48,   47,    0,    0,    0,   47,    0,   47,
    0,    0,   47,    0,   47,   47,    0,    0,    0,   47,
    0,   47,   48,   47,   47,   47,   47,    0,   48,   48,
   47,    0,    0,    0,    0,   47,    0,   47,   47,   47,
    0,    0,   47,    0,   47,    0,   47,    0,    0,   47,
    0,   47,   47,   47,   47,    0,    0,    0,   47,   47,
   47,    0,    0,   47,   47,   47,    0,    0,    0,    0,
    0,    0,   47,   47,    0,   47,   47,    0,   47,   47,
   47,    0,   48,    0,   47,   47,    0,    0,    0,   47,
    0,   47,    0,    0,   47,    0,   47,   47,    0,    0,
    0,   47,    0,   47,   47,   47,   47,   47,   47,    0,
    0,    0,   47,    0,   84,    0,    0,   47,    0,   47,
   47,   47,    0,   47,   47,    0,   47,    0,   47,    0,
    0,   47,    0,   47,   47,   47,   47,    0,    0,    0,
   47,   47,   47,    0,    0,   47,   47,   47,    0,    0,
    0,    0,    0,    0,   47,   47,    0,   47,   47,    0,
   47,   47,   47,    0,   47,    0,   47,   48,    0,    0,
    0,   48,    0,   48,    0,    0,   48,    0,   48,   48,
    0,    0,    0,   48,    0,   48,   47,   48,   48,   48,
   48,    0,    0,    0,   48,    0,   85,    0,    0,   48,
    0,   48,   48,   48,    0,   47,   48,    0,   48,    0,
   48,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,   48,   48,   48,    0,    0,   48,   48,   48,
    0,    0,    0,    0,    0,    0,   48,   48,    0,   48,
   48,    0,   48,   48,   48,    0,   47,    0,   48,   47,
    0,    0,    0,   47,    0,   47,    0,    0,   47,    0,
   47,   47,    0,    0,    0,   47,    0,   47,   48,   47,
   47,   47,   47,    0,    0,    0,   47,    0,    0,    0,
    0,   47,    0,   47,   47,   47,    0,   48,   47,    0,
   47,    0,   47,    0,    0,   47,    0,   47,   47,   47,
   47,    0,    0,    0,   47,   47,   47,    0,    0,   47,
   47,   47,    0,    0,    0,    0,    0,    0,   47,   47,
    0,   47,   47,    0,   47,   47,   47,    0,   48,    0,
   47,   47,    0,    0,    0,   47,    0,   47,    0,    0,
   47,    0,   47,   47,    0,    0,    0,   47,    0,   47,
   47,   47,   47,   47,   47,    0,    0,    0,   47,    0,
  218,    0,    0,   47,    0,   47,   47,   47,    0,    0,
   47,    0,   47,  345,   47,    0,    0,   47,    0,   47,
   47,   47,   47,    0,    0,    0,   47,   47,   47,    0,
    0,   47,   47,   47,    0,    0,  345,    0,    0,    0,
   47,   47,    0,   47,   47,    0,   47,   47,   47,  345,
   47,  367,   47,    0,  345,    0,    0,  345,    0,  345,
    0,  345,  345,  345,  345,    0,    0,    0,    0,  345,
    0,    0,   47,  345,  367,    0,    0,  345,    0,    0,
    0,    0,  219,    0,    0,  345,    0,  367,  345,    0,
  345,    0,  367,    0,    0,  234,    0,  367,    0,  367,
  367,  367,  367,    0,    0,    0,    0,  367,    0,  345,
    0,  367,    0,    0,  345,  367,    0,  366,    0,    0,
    0,    0,    0,  367,  345,  345,  367,  268,  367,  345,
    0,    0,   47,    0,    0,    0,    0,    0,    0,    0,
  366,    0,  345,    0,    0,    0,    0,  252,    0,    0,
    0,    0,  367,  366,    0,    0,    0,    0,  366,    0,
    0,  233,  367,  366,    0,  366,  366,  366,  366,    0,
  253,    0,    0,  366,  345,    0,    0,  366,    0,    0,
    0,  366,    0,  254,    0,    0,    0,    0,  256,  366,
    0,    0,  366,  257,  366,  258,  259,  260,  261,    0,
    0,    0,    0,  262,    0,    0,    0,  263,    0,    0,
    0, 1349,  367,    0,   77,   26,    0,   27,  366,  264,
   28,  296,  265,    0,  266,    0,   82,   83,  366,   29,
    0,    0,    0,    0,    0,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,  267,    0,
   34,    0,   92,   93,   35,    0,  629,    0, 1350,    0,
    0,    0,    0,  630,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,  366,  101,
   40,   41,  297,    0,   42,    0,    0,    0,    0,    0,
    0,  631,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1351,  108,
  109,  110,  111,  112,    0,    0,  113,  114,    0,    0,
    0,    0,    0,    0,    0,  116,  966,    0,  632,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,    0,    0,    0,    0,   82,   83,    0,   29,
    0,  126,  127,  128,  129,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   92,   93,   35,    0,  629,    0,    0,    0,
    0,    0,    0,  630,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,    0,   42,    0,    0,    0,    0,    0,
    0,  631,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,  110,  111,  112,    0,    0,  113,  114,    0,    0,
    0,    0,    0,    0,    0,  116,    0,    0,  632,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,    0,    0,    0,    0,   82,   83,    0,   29,
    0,  126,  127,  128,  129,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,    0,   42,    0,    0,  105,    0,    0,
    0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,  110,  111,  345,    0,    0,  113,  114,    0,    0,
    0,    0,    0,    0,    0,  116,    0,    0,    0,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,    0,    0,    0,    0,   82,   83,    0,   29,
    0,  126,  346,  128,  129,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,    0,   42,    0,    0,  105,    0,    0,
    0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,  110,  111,  345,    0,    0,  113,  114,    0,    0,
    0,    0,    0,    0,    0,  853,    0,    0,    0,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,    0,    0,    0,    0,   82,   83,    0,   29,
    0,  126,  346,  128,  129,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,    0,   42,    0,    0,    0,    0,    0,
    0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,  110,  111,  345,    0,    0,  113,  114,    0,    0,
    0,  545,    0,    0,    0,  116,    0,    0,    0,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,    0,    0,    0,    0,   82,   83,    0,   29,
    0,  126,  346,  128,  129,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,    0,   42,    0,    0,    0,    0,    0,
    0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,  110,  111,  345,    0,    0,  113,  114,    0,    0,
    0,  539,    0,    0,    0,  116,    0,    0,    0,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,    0,    0,    0,    0,   82,   83,    0,   29,
    0,  126,  346,  128,  129,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,    0,   42,    0,    0,    0,    0,    0,
    0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,  110,  111,  345,    0,    0,  113,  114,    0,    0,
    0,    0,    0,    0,    0,  116,    0,    0,    0,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,    0,    0,    0,    0,   82,   83,    0,   29,
    0,  126,  346,  128,  129,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,    0,   42,    0,    0,    0,    0,    0,
    0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,  110,  111,  112,    0,    0,  113,  114,    0,    0,
    0,    0,    0,    0,    0,  116,    0,    0,    0,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,    0,    0,    0,    0,  124,  125,    0,    0,
    0,    0,    0,    0,  698,  698,    0,  698,    0,    0,
  698,  698,    0,    0,    0,    0,  698,  698,    0,  698,
    0,  126,  127,  128,  129,  698,    0,    0,  698,    0,
    0,    0,    0,    0,    0,  698,    0,    0,    0,    0,
  698,    0,  698,  698,  698,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  698,    0,  698,  698,
    0,    0,  698,    0,    0,  698,    0,  698,    0,  698,
  698,  698,  698,    0,  698,    0,    0,    0,    0,    0,
    0,  698,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  698,
  698,  698,  698,  698,    0,    0,  698,  698,    0,    0,
    0,    0,    0,    0,    0,  698,    0,    0,    0,    0,
    0,  698,  698,  698,  698,    0,    0,    0,  698,    0,
  698,    0,    0,    0,    0,    0,  698,  698,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  296,    0,    0,    0,    0,   82,   83,    0,   29,
    0,  698,  698,  698,  698,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   95,
    0,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  297,    0,   42,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,  110,  298,  679,    0,    0,  113,  114,    0,    0,
    0,    0,    0,    0,    0,  116,    0,    0,    0,    0,
    0,  118,  119,  120,  121,    0,    0,    0,  122,    0,
  123,    0,   77,   26,    0,   27,  124,  125,   28,  296,
    0,    0,    0,    0,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,    0,    0,   31,    0,    0,    0,
    0,  126,  300,   33,  129,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  297,    0,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  108,  109,  110,
  298,  377,    0,    0,  113,  114,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,    0,  118,
  119,  120,  121,    0,    0,    0,  122,    0,  123,    0,
   77,   26,    0,   27,  124,  125,   28,  296,    0,    0,
    0,    0,   82,   83,    0,   29,    0,    0,    0,    0,
    0,   85,    0,    0,   31,    0,    0,    0,    0,  126,
  300,   33,  129,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  297,    0,
   42,    0,    0,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  108,  109,  110,  298,  299,
    0,    0,  113,  114,    0,    0,    0,    0,    0,   77,
   26,  116,   27,    0,    0,   28,  296,    0,  661,  662,
    0,   82,   83,    0,   29,    0,  663,    0,    0,    0,
   85,    0,    0,   31,    0,    0,    0,    0,    0,    0,
   33,    0,   47,    0,    0,   34,    0,   92,   93,   35,
    0,    0,    0,    0,    0,    0,    0,  126,  982,    0,
  664,   37,    0,   38,   95,   47,    0,   39,    0,    0,
   97,    0,   99,    0,  101,   40,   41,  297,   47,   42,
    0,    0,  105,   47,    0,    0,    0,    0,   47,    0,
   47,   47,   47,   47,    0,    0,    0,    0,   47,    0,
    0,    0,   47,    0,  108,  109,  110,  298,  299,    0,
    0,  113,  114,    0,   47,    0,    0,   47,    0,   47,
  116,    0,  743,    0,  743,    0,  743,  661,  662,  743,
    0,  743,  743,    0,    0,  663,  743,    0,  743,    0,
  743,  743,  743,   47,    0,    0,    0,  743,    0,   47,
   47,    0,  743,  202,  743,  743,    0,    0,    0,  743,
    0,    0,    0,  743,    0,    0,  126,  300,    0,  664,
    0,    0,    0,    0,  743,  743,    0,  743,    0,    0,
    0,  743,  743,    0,    0,    0,    0,    0,    0,  743,
  743,    0,    0,  743,    0,    0,  743,    0,    0,   77,
   26,  743,   27,    0,    0,   28,  296,    0,    0,    0,
    0,   82,   83,    0,   29,    0,    0,    0,    0,    0,
   85,    0,    0,   31,    0,    0,    0,  743,  743,    0,
   33,    0,    0,    0,    0,   34,    0,   92,   93,   35,
  743,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,    0,   38,   95,    0,    0,   39,    0,    0,
   97,    0,   99,    0,  101,   40,   41,  297,    0,   42,
    0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
    0,  743,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  108,  109,  110,  298,  299,    0,
    0,  113,  114,    0,    0,    0,    0,  742,    0,  742,
  116,    0,  742,    0,  742,  742,    0,    0,    0,  742,
    0,  742,    0,  742,  742,  742,    0,    0,    0,    0,
  742,    0,    0,    0,    0,  742,    0,  742,  742,    0,
    0,    0,  742,    0,    0,    0,  742,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  126,  300,  742,    0,
  742,    0,    0,    0,  742,  742,    0,    0,    0,    0,
    0,    0,  742,  742,    0,  742,  742,  742,    0,  742,
  742,    0,  742,  742,  742,    0,    0,  742,    0,  742,
    0,  742,  742,  742,    0,    0,    0,    0,  742,    0,
    0,    0,    0,  742,    0,  742,  742,    0,    0,    0,
  742,    0,    0,    0,  742,    0,    0,    0,    0,    0,
    0,    0,    0,  742,    0,    0,  742,    0,  742,    0,
    0,    0,  742,  742,    0,    0,    0,   26,    0,   27,
  742,  742,   28,    0,  742, 1318,    0,  742,    0,  484,
    0,   29,  742,  485, 1319, 1320,    0,    0,    0,    0,
   31,    0,    0,    0,  742, 1321,    0,   33,    0,   26,
    0,   27,   34,    0,   28,    0,   35, 1318,    0,    0,
    0,  484,    0,   29,    0,  485, 1319, 1320,   37,    0,
   38,    0,   31,    0,   39,    0,    0, 1321,    0,   33,
    0,    0,   40,   41,   34,    0,   42,    0,   35, 1322,
    0,    0,    0,   47,  486,   47,    0,    0,   47,    0,
   37,    0,   38,    0,    0,    0,   39,   47,    0,    0,
    0,    0,  742,    0,   40,   41,   47,    0,   42,    0,
    0, 1322,    0,   47,    0,   47,  486,   47,   47,    0,
   47,    0,   47, 1323,   47,    0,   47,    0,    0,   47,
    0,   47,    0,    0,   47,    0,   47,    0,   47,    0,
   47,    0,    0,   47,    0,   47,    0,    0,   47,   47,
   47,    0,   47,    0,   47,   47,   47,    0,   47,    0,
   26,    0,   27,   47, 1324,   28,   47,    0,   47,    0,
    0,    0,   47,    0,   29,   47,    0,    0,    0,    0,
   47,   47,    0,   31,   47,    0,    0,   47,    0,    0,
   33,    0,    0,    0,  153,   34, 1324,    0,    0,   35,
    0,  598,    0,    0,   48,    0,   48,    0,  599,   48,
    0,   37,    0,   38,    0,    0,    0,   39,   48,    0,
  600,    0,    0,    0,  153,   40,   41,   48,    0,   42,
    0,    0,  601,    0,   48,    0,   47,    0,   47,   48,
   47,   47,    0,   48,    0,   48,    0,   48,    0,    0,
   47,    0,   48,    0,    0,   48,    0,   48,  602,   47,
    0,   48,    0,    0,   48,    0,   47,    0,    0,   48,
   48,   47,   47,   48,    0,   47,   48,   47,    0,   47,
    0,   26,    0,   27,   47,    0,   28,   47,    0,   47,
    0,    0,    0,   47,    0,   29,   47,    0,    0,   30,
    0,   47,   47,    0,   31,   47,    0,    0,   47,   32,
    0,   33,    0,    0,    0,    0,   34,  603,    0,    0,
   35,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,    0,    0,   26,   39,   27,
    0,    0,   28,    0, 1253,    0,   40,   41,    0,    0,
   42,   29,    0,   43,    0,    0,    0,    0,    0,    0,
   31,   48,    0,    0,   33,    0,    0,   33,    0,    0,
    0,    0,   34,    0, 1254,   33,   35,    0,    0,    0,
   33,    0,    0,    0,   33,    0,    0,   33,   37,    0,
   38,    0,    0,   47,   39, 1255,    0,    0,    0,   33,
   33,    0,   40,   41,   33,   33,   42,   47,    0,  105,
   33,    0,   33,   33,   33,   33,    0,    0,   47,    0,
   33,    0,    0,   47,   33,    0,   33,   47,    0,    0,
   47,    0,    0,    0,    0,    0,   33,    0,   44,   33,
    0,   33,   47,   47,    0,   33,    0,   47,   47,    0,
   47,    0,    0,   47,    0,   47,   47,   47,   47,    0,
    0,   47,    0,   47,    0,   33,   47,   47,    0,   47,
   47,    0,    0,   47,    0,   33,   33,    0,    0,   47,
    0,    0,   47,    0,   47,   47,   47,    0,   47,    0,
   47,   47,   47,    0,  273,    0,   47,    0,   47,   47,
   47,   47,    0,    0,    0,    0,   47,    0,   47,    0,
   47,    0,   47,    0,    0,   47,    0,    0,   35,    0,
    0,    0,   47,    0,    0,   47,    0,   47,   47,    0,
    0,   47,    0,   47,    0,    0,    0,    0,   47,    0,
   47,   47,   47,   47,    0,    0,    0,    0,   47,    0,
    0,   47,   47,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,    0,   47,    0,    0,   47,    0,   47,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   47,    0,    0,    0,    0,    0,   47,
   47,
  };
  protected static  short [] yyCheck = {            22,
   56,  342,   23,   22,    4,   54,   11,  269,  366,  281,
  332,   22,    2,   11,  383,    6,  543,  545,   23,   80,
  367,  515,  289,  438,  438,   23,   22,  343,  341,   75,
  182,  339,  139,   75,  590,  137,   98,  139, 1147,  597,
  357,  438,  796,  419,   89,    0, 1151,  630,  605,   54,
  403,  418,  256,  929,  256,  256,   54,  256,  614,  764,
  256,  766,   22,  256,   46,  256,  111,   49,   79,  341,
  256,   94,  256,  325,  277,   98,   22,   67,  282,  976,
  256,  256,  268, 1192, 1261,  256,  403,   22,  133,  100,
  113,  102,  256,  116,  266,    0,  256,  376,  363,   80,
 1141, 1210, 1086, 1280,  264,  810,   69,  268,  813,  256,
  314,  256,  256,  268,   22,  372,  256,  256,  163,  375,
  256,  378,  268,  256,  256,  256,  263,  256,  385,   22,
  276,  257,  372,  335,  256,   22, 1247,  256,  378,   12,
  335,   22,  314,   22,   22,  385,   22,   22,  256,  373,
   22,  418,   25,  710,  433,  256,  212,  422, 1142,  182,
  363,  385,  211,  182,  256,  325,  129,  484,  424,  276,
  422,  182,  363, 1214,  276,  374,  433,  376,  315,  378,
  376,  283,  378,  376,  385,  256,  182,  459,  256,  256,
  374, 1302,  539,   80,  378,  371,  371,   84,  343,  375,
  375,  542,  366,  367, 1101,  256,  211,  379,  372,  380,
  374,  372,  376,  211,  378,  379,  380,  363,  422,  422,
  423,  590,  182,  363,  577, 1237,  428,  429,  430,  431,
  394,  422,    2, 1109,  433,  379,  182,  433,  284,  767,
  426,  995,  284,  288,  289,  614,  385,  182,  424,  424,
  395,   69,  215,  216,  621,  246,  375,  302,  240,  249,
  577,  819,  395,  365, 1441,  426,  289,  375,  329,  433,
  853,  426,  295,  418,  182,  422,  422,  378,  339,  371,
  425,  373,  422,  375, 1461,  418,  422,  432,  605,  182,
  422,  422,  425,  422,  339,  182, 1473,   67, 1475,   69,
  422,  182,  257,  182,  182,  424,  182,  182,  379,  332,
  182,  129,  363,  380,  337,  338,  424,  385, 1330,  256,
  903,  257,  256,  374,  256,  376, 1338,  378,  256,  352,
 1435, 1036,  424,  378,  256,  427,  256,  360,  256,  362,
  256,  256,  305,  366,  406,  368,  369,  256,  329,  256,
  361,  908,  257,  256,  621,  373,  256,  256,  711,  129,
  375,  256,  408,  376,  383,  410,  408,  272,  331,  414,
  372,  422,  277,  418,  419,  266,  281,  438, 1383, 1391,
  343,  362,  256,  406,  335,  262,  256,  383,  351,  256,
  256,  296, 1376,  710,  752,  418,  419,  215,  216, 1508,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  374,  375,  941,  256,  325,  256,  256,  323, 1403,
  433,  298, 1406,  314,  256,  919,  277,  372,  294,  422,
  281,  433,  455,  378,  371, 1419, 1420,  342,  376,  373,
  380,  340,  329,  380, 1428,  215,  216,  379,  263,  305,
 1434,  379,  372,  371,  376, 1160,  498,  438,  378,  874,
  874,  769,  378,  378, 1169, 1088,  373,  376,  371,  514,
  373,  516,  739,  343,  437,  362,  376,  874,  373,  249,
  462,  463,  433,  836,  860,    2,  468,  305,  379, 1494,
    0,  342, 1197,  433,  485,  433,  383,  508,  543,  373,
  315,  371, 1030,  395, 1062,  382,  383,  377,  378,  376,
  380,  343,  422,  331,  269,  385,  371,  377,  541,  836,
  543, 1144,  545,  365,  569,  380,  418,  377,  372,  492,
  380,  286,  305,  351,  515,  305,  376,  376,  422,  371,
  582, 1246,  363,  375,  363,  377,  378,  558,  380,  419,
   67,  438,   69,  385,  907,  372,  374,  375,  665,  604,
  583,  331,  585,  665,  905,  372, 1124,  427,  343,  372,
  581,  590,  272,  343,  372,  620,  621,  619,  624,  372,
  378,  351,  624,  625,  372,  376,  597,  357,  935,  433,
  256,  908,  380,  373,  590,  614,  296,  377,  621,  866,
  376,  422,  343,  422,  374,  375,  629,  630,  343, 1165,
  385,  432,  129,  432,  365, 1244,  433,  272,  614,  437,
  395,  422,  889,  323,  375,  670,  433,  940,  515,  781,
  433,  380,  256,  403,  946,  433,  372, 1244,  372,  305,
  433,  296,  433,  418,  385,  433,  422,  427,  629,  630,
  425, 1243, 1244,  378,  395,  971,  375,  432, 1073, 1073,
  395, 1076, 1076, 1292, 1079, 1079,  938,  437,  323, 1463,
 1464,  983, 1264,  424,  492, 1033, 1073,  418,  371, 1076,
  379,  305, 1079,  418,  425, 1292,  422,  903,  422,  745,
  425,  432, 1244, 1244,  739,  420,  395,  432,  215,  216,
 1292,  664, 1244,  590, 1198,  378, 1047,  339,  769,  754,
 1244,  343,  372, 1240,  484,  390,  739,  343, 1512,  418,
  380, 1313,  492,  939,  769, 1244,  425,  614,  343,  752,
 1244,  372,  249,  432,  724,  339, 1031,  378,  729,  371,
 1292, 1292,  629,  630,  767,  371,  256,  420,  380, 1118,
 1292,  774,  357,  776,  380,   82,  371,  339, 1292,   86,
   87,   88, 1057,   90,   91,  380,  371,  371,   95,   96,
  375,  272,  339, 1292,  101,  102,  277,  104, 1292,  106,
  281,  343,  109,  110,  339,  390,  375,  385,  305,  371,
  835, 1113,  803,  375,  805,  296, 1165,  395,  357,  377,
  823,  388,  380,  845,  371,  357,  817,  577,  819,  371,
 1151,  138,  857,  874,  331,  860,  371, 1084,  380,  395,
  418,  866,  323,  393,  379,  377,  343,  425,  873,  339,
  853,  390, 1154,  343,  351,  605,  343,  860,  390,  802,
  357,  342,  418,  866,  889,  868,  664,  405,  343,  425,
 1342,  814,  339,  339,  357,  878,  432,  374,  375,  417,
  343,  371, 1354, 1355,  371,  375,  889,  377,  378,  379,
  380,  389,  853, 1195,  377,  385,  371,  764, 1247,  766,
  903,  395,  905,   22,  371,  371,  403,  390,  371,  256,
  371,  372,  404,  874,  664, 1423,  886,  394,  921,  380,
 1325,  946,  269,  926,  418,  896,  929,  898,  371,  900,
  419,  425, 1337, 1325,  418,  373,  939,  380,  941,  286,
  437,  425,  903,  810,  422, 1337,  813, 1249,  372,  974,
  306,  894,  308, 1302,  378,    6,  357,  313,  983,  374,
  710,   80,  363,  378,  256,   84,  909,  386,  387,  325,
 1478,   22,  373,  377,  724,  376,  377,  378,  306,  371,
  372,  400,  401,  372,  277,  313,  853,  484,  380,  390,
  297,  380, 1017,  380,  301,  492,  371,  325, 1023, 1507,
  375,  306,  377,  378,  802,  380, 1303,  874,  313,  377,
  385,  372,  380, 1310,  372,  376,  814,  378,   69,  380,
  378,  422,  380, 1003, 1531, 1532,  380, 1030,  971,   80,
 1033,  371, 1073,   84,  341, 1076,  903,  372, 1079, 1303,
  256,  376,  364,  378,  419,  380, 1310,  378,  377,  380,
 1075, 1054,  802,  375,  385,  377,  374,  375,  256, 1084,
  378, 1064,  256,  182,  814,  376,  374,  378,  372,  380,
  378, 1062,  376,  372,  396,  397,  380,  376,  129,  378,
  577, 1084,  372,  373, 1085,  374,  836,  374,  375,  378,
  377,  378,  379,  374,  416,  376,  894,  378,  380,  374,
 1085,  376,  424,  378,  380,  427, 1109, 1085,  605, 1138,
 1113,  909, 1073, 1355, 1435, 1076,  374,  376, 1079, 1118,
  378,  380,  343,  374,  374, 1128, 1129,  378,  378,  376,
  374,  182, 1135, 1124,  378,  375,  886, 1073,  380,  379,
 1076, 1177, 1118,  376,  894,  374,  376,  380, 1151,  378,
  380, 1154,  375, 1138,  377,  422, 1141,  376,  908,  909,
 1138,  380,  373, 1141,  215,  216, 1165,  664,  375, 1036,
  377,  377,  366,  367,  443,  444,  445,  446,  372,  371,
  374,  373,  376,  379,  378,  379,  380,  378,  376, 1165,
  378,  377, 1195,  390,  391,  392,  376,  374,  378,  376,
 1143,  418,  378,  510,  380,  374, 1073,  376,  422, 1076,
  329,  379, 1079,  710,  374, 1240,  376,  376,  376,  378,
  378,  971, 1543,  374,  378,  376,  380,  724,  378, 1214,
  380,  376,  378,  256,  380,  376, 1214, 1240,  378,  433,
  380,  398,  399,  362,  380, 1281, 1249,  385, 1247,  364,
  557, 1118,  372,  774,  305,  776,  378,  372, 1243, 1244,
  375,  433,  377,  378,  383, 1243, 1244,  402,  403,  376,
  385, 1247,  378,  379, 1217,  366,  367,  378,  329, 1264,
  331,  396,  397,  372,  373,  378, 1264,  371,  372,  418,
  419,  376,  343, 1160,  368,  369,  366,  367, 1165, 1242,
  351,  416, 1169, 1302,  376,  802,  357, 1292,  376,  424,
  376,  362,  427,  256, 1292, 1306,  380,  814,  433,  438,
  366,  367,  432,  374,  375,  375, 1302,  432, 1313, 1351,
 1197,  256,  383,  371,  372, 1313,  368,  369,  378,  836,
  439,  440,  376,  366,  367,  441,  442, 1369,  374,  372,
  375,  374,  403,  376,  371,  378,  379,  380, 1301,  422,
 1363,  447,  448, 1385,  379, 1387,  389,    0,  256, 1360,
  393,  394,  256,  385,  376, 1318, 1319,  378,  378, 1246,
 1247,  404,  405,  378,  433,  427,  437,  438,  376,  886,
  371,  378,  378, 1143,  417,  256,  515,  894,  376,  379,
  421, 1344,  343, 1346,  265,  378,  267,  376,  375,  270,
  433,  908,  909,  378,  256,  385,  280,  256,  279,  371,
 1423,  372,  376,  343,  385,  298,  376,  288,  376,  378,
 1421, 1416, 1435,  484,  295, 1302,  374,  371, 1416,  300,
  380,  492,  378,  304, 1242, 1430,  376,  380,  385,  376,
  374,  427, 1430,  376,  385,  316,  374,  318, 1443, 1444,
  379,  322,  421,  375,  515, 1443, 1444, 1217,  385,  330,
  331,  590,  385,  334,  971, 1478,  337,  256, 1463, 1464,
  376,  376,  380,  372,  376, 1463, 1464,  372,  339,  376,
  422,  374, 1242,  374,  422,  614,  378,  376,  375,  256,
  372,  371,  371, 1301, 1507,  376, 1531, 1532,  371,  385,
  629,  630,  380,  380,  376,  375,  372,  372,  372,  378,
 1318, 1319,  305,  376, 1515, 1516,  577, 1512, 1531, 1532,
  375, 1522, 1523,  256, 1512,  261,  372,  371,  373,  590,
 1543,  385,  422,  375,  422,  375, 1344,  422, 1346,  375,
  377, 1301,  375, 1303,  605,  375,  422,  371,  284,  343,
 1310,  422,  375,  614,  380,  376,  385,  376, 1318, 1319,
  378,  297,  377,  377,  422, 1325,  302,  378,  629,  630,
  378,  307,  376,  309,  310,  311,  312, 1337,  380,  374,
  380,  317, 1342,  422, 1344,  321, 1346,  422,  380,  325,
  376,  376,  315,  376, 1354, 1355,  376,  333,  112,  372,
  336,  385,  338,  664,  118,  119,  120,  121,  122,  123,
  124,  125,  372,  385,  257,  263,  375,  375,  261,  385,
  372,  376,  376,  380,    0,    0,  362,  944,  371,  272,
  380,  372,  380,    0,  277,  764, 1143,  766,  281,  376,
  256,  284,  374,  372,  371,  376,  262,  422,  376,  710,
  374,  371,  422,  296,  297,  372,  372,  376,  301,  302,
  372,  376,  380,  376,  307,  376,  309,  310,  311,  312,
  380,  376,  380,  372,  317,  376,  380,  372,  321,  371,
  323,  810,  298,  372,  813,  376,  422,  380,  376,  372,
  333,  377,  315,  336,  263,  338,    0,   52,  380,  342,
  380,  380,  380,  764,  380,  766,  380,    5,  724,  886,
 1217, 1084, 1084, 1313, 1264, 1317, 1149, 1468, 1438,  362,
 1426, 1360, 1421,  912,  853,  744,  907,  912,  371,  372,
  373, 1342, 1361, 1523, 1292, 1242, 1279, 1517,  256, 1444,
 1448,  802, 1443, 1516,  262,  874, 1214,  363,  883,  810,
  366,  367,  813,  814, 1387,  357,  372,  373,  374,  971,
  376, 1217,  378,  379,  380,  585,  382,  383,  866,    0,
  386,  387,  388,  389,  903,  836,  935,  393,  394,  630,
  298, 1047,  398,  399,  400,  401,  402,  403,  404,  405,
  739,   92,  853,  769, 1301,  370, 1303,  385,  438,  438,
 1075,  417,  449, 1310,  450, 1079,  422,  451,  453,  577,
  452, 1318, 1319,  874, 1090,  836,  454,  433,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415, 1189, 1301,
 1118,  345,  182,  894, 1129, 1032, 1103, 1344, 1057, 1346,
 1118, 1168,  903, 1019, 1116, 1198,  364,  908,  909,   -1,
  559,  885,  882,  367,  372,   -1,   -1,  375,  950,  377,
  378,   -1,   -1,  377,  382,  383,   -1,   -1,  386,  387,
  388,  389,  390,  391,  392,  393,  394,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  416,  417,
   -1,   -1,   -1,   -1,   -1,   -1,  424, 1036,   -1,  427,
  971,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
  434,  435,  436,   -1,   -1,  439,  440,  441,  442,  443,
  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,
  454,   -1,   -1,   -1, 1073,   -1,   -1, 1076,   -1,   -1,
 1079,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,  272,   -1,
   -1,   -1,   -1,  277,   -1, 1036,   -1,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1118,
   -1,   -1,  296,  297,   -1,   -1,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1, 1073,  317,   -1, 1076,   -1,  321, 1079,  323,
   -1,   -1,   -1,   -1,   -1,  539,  257,   -1,   -1,  333,
  261, 1160,  336,   -1,  338,   -1, 1165,   -1,  342,   -1,
 1169,  272,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,
  281,   -1,   -1,  284,   -1,   -1,   -1, 1118,  362,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1, 1197,  373,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312, 1143,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,  323,   -1,   -1,   -1,  610,   -1,   -1, 1160,
   -1,  364,  333,   -1, 1165,  336,   -1,  338, 1169,  372,
   -1,  342,  375,   -1,  377,  378,   -1, 1246, 1247,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  362,   -1,  396,  397,   -1, 1197,   -1,   -1,   -1,
   -1,  372,  373,   -1,   -1,   -1,   -1,  661,  662,    0,
   -1,  257,   -1,  416,   -1,  261, 1217,   -1,   -1,   -1,
   -1,  424,   -1,   -1,  427,  679,  272,   -1,   -1,   -1,
  433,  277,   -1, 1302,   -1,  281,   -1,   -1,  284,   -1,
   -1, 1242,   -1,   -1,   -1, 1246, 1247,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,  323,   -1,  256,
   -1,   -1,   -1,   -1,  261,  262,   -1,  333,   -1,   -1,
  336,   -1,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,
 1301, 1302, 1303,   -1,   -1,   -1,   -1,  284,   -1, 1310,
   -1,   -1,   -1,   -1,   -1,   -1,  362, 1318, 1319,  773,
  297,  298,   -1,   -1,   -1,  302,  372,  373,  305,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1, 1344,  321, 1346,   -1,   -1,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  339,   -1,   -1,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,  362,  363,  364,   -1,  366,
  367,   -1,   -1,   -1,  371,  372,   -1,  374,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,   -1,  385,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,   -1,  420,   -1,  422,   -1,  424,   -1,   -1,
  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,  266,  267,  268,   -1,  270,
  271,  935,  273,  274,   -1,  276,  277,  278,  279,  280,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
    0,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  978,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
  371,  372,   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  421,  422,  423,  424,   -1,  426,  256,  257,   -1,   -1,
   -1,   -1,  433,   -1,  264,  265,  266,  267,  268,   -1,
  270,  271,   -1,  273,  274,   -1,  276,  277,  278,  279,
    0,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,
  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,
  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,  372,   -1,   -1,  375,   -1,   -1,   -1,   -1,
  380,  381,  382,  383,  384,   -1,  256,   -1,  388,   -1,
  390,  261,  262,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  421,  422,  423,  424,   -1,  426,  297,  298,   -1,
    0,   -1,  302,  433,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  357,  256,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
  390,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,
   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,   -1,
    0,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,  366,  367,
   -1,  321,   -1,   -1,  372,  325,  374,   -1,  376,   -1,
  378,  379,  380,  333,   -1,   -1,  336,   -1,  338,  339,
  388,  389,   -1,  343,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,    0,   -1,  402,  403,  404,  405,  256,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,  417,
   -1,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,  433,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,
   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,   -1,
    0,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,  366,  367,
   -1,  321,   -1,   -1,  372,  325,  374,   -1,  376,   -1,
  378,  379,  380,  333,   -1,   -1,  336,   -1,  338,  339,
  388,  389,   -1,  343,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  402,  403,  404,  405,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,  417,
   -1,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,  433,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,
   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,  298,   -1,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,  256,  309,
  310,  311,  312,   -1,  262,   -1,   -1,  317,   -1,    0,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,  372,   -1,  374,  375,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,  339,   -1,  393,  394,  343,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,  357,
   -1,   -1,  262,   -1,   -1,  363,   -1,  417,  366,  367,
  420,    0,  422,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  380,  433,  382,  383,   -1,   -1,  386,  387,
  388,  389,  390,   -1,   -1,  393,  394,   -1,  298,   -1,
  398,  399,  400,  401,  402,  403,  404,  405,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  417,
   -1,   -1,  420,   -1,  422,   -1,  424,   -1,   -1,  427,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,  339,
   -1,   -1,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,    0,  366,  367,   -1,   -1,
   -1,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,   -1,  422,   -1,  424,  256,  257,  427,   -1,   -1,
  261,   -1,   -1,  433,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  273,   -1,   -1,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,   -1,   -1,   -1,  288,   -1,    0,
   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,
  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,   -1,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  362,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,  372,  373,  272,   -1,   -1,   -1,   -1,  277,   -1,
  381,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,  301,  302,   -1,  257,   -1,   -1,  307,  261,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
  272,  422,  321,   -1,  323,  277,   -1,   -1,   -1,  281,
   -1,   -1,  284,   -1,  333,   -1,   -1,  336,   -1,  338,
   -1,   -1,   -1,  342,  296,  297,   -1,   -1,   -1,  301,
  302,   -1,  257,   -1,   -1,  307,  261,  309,  310,  311,
  312,   -1,   -1,  362,   -1,  317,   -1,  272,   -1,  321,
   -1,  323,  277,   -1,   -1,   -1,  281,   -1,   -1,  284,
   -1,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,
  342,  296,  297,   -1,   -1,   -1,  301,  302,   -1,  257,
   -1,   -1,  307,  261,  309,  310,  311,  312,   -1,   -1,
  362,   -1,  317,   -1,  272,   -1,  321,   -1,  323,  277,
   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,   -1,   -1,  342,  296,  297,
   -1,   -1,   -1,  301,  302,   -1,  257,   -1,   -1,  307,
  261,  309,  310,  311,  312,   -1,   -1,  362,   -1,  317,
   -1,  272,   -1,  321,   -1,  323,  277,   -1,   -1,   -1,
  281,   -1,   -1,  284,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,   -1,  342,  296,  297,   -1,   -1,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  362,   -1,  317,   -1,   -1,  257,
  321,   -1,  323,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,  272,  336,   -1,  338,   -1,  277,
   -1,  342,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,
   -1,  362,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,  256,  336,   -1,
  338,   -1,   -1,   -1,  342,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,   -1,  276,  277,  278,
  279,   -1,   -1,   -1,  362,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  256,  337,   -1,
   -1,  340,  341,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,  298,
   -1,  380,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  421,  422,  423,  424,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,  363,  364,   -1,  366,  367,   -1,
  298,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,   -1,  385,  386,  387,  388,
  389,  390,  391,  392,  393,  394,  256,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
   -1,   -1,   -1,  422,   -1,  424,  425,   -1,  427,  357,
   -1,   -1,   -1,   -1,  433,  363,  364,   -1,  366,  367,
   -1,   -1,   -1,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  380,   -1,  382,  383,   -1,  385,  386,  387,
  388,  389,  390,  391,  392,  393,  394,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
  418,  256,   -1,   -1,  422,   -1,  424,  262,   -1,  427,
   -1,   -1,   -1,   -1,   -1,  433,  366,  367,   -1,   -1,
   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,  357,   -1,   -1,   -1,   -1,   -1,  363,  364,  389,
   -1,   -1,   -1,  298,  394,  371,   -1,  373,   -1,  375,
  376,  377,  378,   -1,  404,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,   -1,  417,   -1,   -1,
  396,  397,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,
  416,   -1,   -1,   -1,   -1,   -1,  422,   -1,  424,   -1,
   -1,  427,  357,   -1,   -1,   -1,   -1,   -1,  363,  364,
   -1,  366,  367,   -1,  298,   -1,  371,  372,  373,  374,
  375,  376,  377,  378,  379,  380,   -1,  382,  383,   -1,
  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,   -1,  256,   -1,   -1,  422,   -1,  424,
  262,   -1,  427,   -1,  266,   -1,   -1,   -1,  433,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,  372,   -1,
  374,   -1,  376,   -1,  378,  379,  380,   -1,  382,  383,
   -1,   -1,  386,  387,  388,  389,  298,   -1,   -1,  393,
  394,   -1,   -1,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,  314,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,  417,   -1,   -1,   -1,   -1,  422,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  357,   -1,   -1,  298,   -1,
   -1,  363,  364,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  372,  373,  374,  375,  376,  377,  378,  379,  380,  256,
  382,  383,   -1,  385,  386,  387,  388,  389,  390,  391,
  392,  393,  394,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,   -1,  357,   -1,   -1,
  422,   -1,  424,  363,  364,  427,  366,  367,   -1,   -1,
   -1,  433,  372,  373,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,   -1,  256,
   -1,   -1,  422,   -1,  424,  262,   -1,  427,   -1,  366,
  367,   -1,   -1,  433,   -1,  372,   -1,  374,   -1,  376,
   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,  386,
  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,  298,   -1,  400,  401,  402,  403,  404,  405,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  417,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  298,   -1,   -1,  364,   -1,  366,
  367,   -1,   -1,   -1,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,  256,  385,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,
  364,   -1,  366,  367,   -1,   -1,  433,  371,  372,   -1,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
   -1,  385,  386,  387,  388,  389,  390,  391,  392,  393,
  394,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,   -1,  256,   -1,   -1,   -1,   -1,
  424,  262,   -1,  427,   -1,   -1,   -1,  366,  367,  433,
   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,
  379,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  388,
  389,   -1,   -1,   -1,  393,  394,   -1,  298,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  417,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,
   -1,   -1,   -1,  364,   -1,  366,  367,   -1,   -1,   -1,
   -1,  372,   -1,  374,  375,  376,  377,  378,  379,  380,
  256,  382,  383,   -1,  385,  386,  387,  388,  389,  390,
  391,  392,  393,  394,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,   -1,   -1,   -1,
   -1,   -1,   -1,  424,   -1,  364,  427,  366,  367,   -1,
   -1,   -1,  433,  372,   -1,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,   -1,  385,  386,  387,  388,
  389,  390,  391,  392,  393,  394,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,   -1,
  256,   -1,   -1,   -1,   -1,  424,  262,   -1,  427,   -1,
  366,  367,   -1,   -1,  433,   -1,  372,   -1,  374,   -1,
  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,
  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,
   -1,   -1,  298,   -1,  400,  401,  402,  403,  404,  405,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  417,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,  364,   -1,
  366,  367,   -1,   -1,   -1,   -1,  372,   -1,  374,  375,
  376,  377,  378,  379,  380,  256,  382,  383,   -1,  385,
  386,  387,  388,  389,  390,  391,  392,  393,  394,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,  363,
  364,  427,   -1,   -1,   -1,   -1,   -1,  433,  372,  373,
  374,  375,  376,  377,  378,   -1,  380,   -1,  382,  383,
  256,  385,  386,  387,  388,  389,  262,  391,  392,  393,
  394,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,   -1,   -1,   -1,   -1,  422,   -1,
  424,   -1,  298,  427,   -1,  366,  367,   -1,   -1,  433,
   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,
   -1,   -1,   -1,   -1,   -1,  386,  387,  388,  389,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,  400,
  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,  367,  433,   -1,   -1,   -1,  372,   -1,  374,   -1,
  376,   -1,  378,  379,  380,   -1,  382,  383,   -1,  385,
  386,  387,  388,  389,  390,  391,  392,  393,  394,   -1,
   -1,   -1,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  256,  417,   -1,   -1,   -1,   -1,   -1,  256,  264,  265,
   -1,  267,   -1,  262,  270,  271,   -1,  433,   -1,   -1,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
  366,  367,   -1,   -1,  363,  364,   -1,  366,  367,  375,
   -1,  298,   -1,  372,  373,  374,   -1,  376,  377,  378,
  379,  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,
  389,   -1,   -1,   -1,  393,  394,   -1,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  421,  422,  416,  417,   -1,
   -1,   -1,  285,  422,   -1,  424,  432,  433,  427,   -1,
   -1,   -1,   -1,   -1,  433,  298,   -1,  364,  256,  366,
  367,   -1,   -1,   -1,  262,  372,   -1,  374,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,   -1,   -1,  386,
  387,  388,  389,   -1,  327,   -1,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,   -1,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  416,
  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,
  427,   -1,  256,   -1,   -1,   -1,  433,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,  386,  387,  388,  389,  390,  391,  392,
  393,   -1,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,   -1,   -1,   -1,  298,   -1,  364,   -1,  366,  367,
   -1,   -1,   -1,   -1,  372,   -1,  374,  375,  376,  377,
  378,  379,  380,   -1,  382,  383,  256,   -1,  386,  387,
  388,  389,  262,   -1,   -1,  393,  394,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  416,  417,
   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,  298,  427,
  364,   -1,  366,  367,   -1,  433,   -1,   -1,  372,   -1,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  256,   -1,  386,  387,  388,  389,  262,   -1,   -1,  393,
  394,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  416,  417,   -1,   -1,   -1,   -1,   -1,   -1,
  424,   -1,  298,  427,  256,   -1,  366,  367,   -1,  433,
   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  417,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,  367,   -1,  433,   -1,   -1,  372,   -1,  374,   -1,
  376,   -1,  378,  379,  380,   -1,  382,  383,  298,   -1,
  386,  387,  388,  389,  256,   -1,   -1,  393,  394,   -1,
  262,   -1,  398,  399,  400,  401,  402,  403,  404,  405,
   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
  372,  417,  374,   -1,  376,   -1,  378,  379,  380,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  298,  433,   -1,   -1,
   -1,   -1,  394,  256,   -1,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  404,  405,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,  372,   -1,  374,  417,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,  433,   -1,  393,  394,  298,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,  366,  367,   -1,  417,   -1,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
  382,  383,   -1,  433,  386,  387,  388,  389,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  366,  367,  417,   -1,   -1,   -1,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,  382,
  383,  433,   -1,  386,  387,  388,  389,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,  398,  399,  400,  401,  402,
  403,  404,  405,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  417,   -1,   -1,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,
  433,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,  386,
  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,
  417,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,
  379,  380,   -1,   -1,   -1,   -1,  433,  386,  387,  388,
  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,
   -1,  400,  401,  402,  403,  404,  405,  256,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,  417,   -1,
   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,
   -1,   -1,   -1,   -1,  433,  386,  387,  388,  389,   -1,
   -1,  256,  393,  394,   -1,   -1,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,   -1,
   -1,  366,  367,   -1,   -1,  256,   -1,  372,   -1,  374,
   -1,  376,  433,  378,  379,  380,   -1,   -1,   -1,   -1,
   -1,  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,   -1,   -1,  400,  401,  402,  403,  404,
  405,  256,   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,
   -1,   -1,  417,  372,   -1,  374,   -1,  376,   -1,  378,
  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,  433,  388,
  389,   -1,   -1,   -1,  393,  394,  256,   -1,   -1,   -1,
   -1,  366,  367,  402,  403,  404,  405,  372,   -1,  374,
   -1,  376,   -1,  378,  379,  380,   -1,  256,  417,   -1,
   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,   -1,  433,  366,  367,   -1,  256,  404,
  405,  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,
   -1,   -1,  417,   -1,   -1,   -1,   -1,  388,  389,  256,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,  433,   -1,
   -1,  366,  367,  404,  405,   -1,   -1,  372,   -1,  374,
   -1,  376,   -1,  378,  379,  380,  417,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,  393,  394,
   -1,   -1,  433,   -1,   -1,   -1,  366,  367,   -1,  404,
  405,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,  417,   -1,   -1,   -1,   -1,  366,  367,  389,
   -1,   -1,  262,  372,  394,  374,  266,  376,  433,  378,
  379,  380,   -1,   -1,  404,  405,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,  372,  394,  374,  417,  376,   -1,
  378,  379,  380,   -1,   -1,  404,  405,   -1,  298,  366,
  367,   -1,   -1,  433,   -1,  372,  394,  374,  417,  376,
   -1,  378,  379,  380,  314,   -1,   -1,  405,   -1,   -1,
   -1,   -1,   -1,   -1,  433,   -1,   -1,  394,   -1,  417,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,   -1,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
  417,   -1,   -1,   -1,   -1,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,  363,  364,   -1,  433,   -1,   -1,   -1,
   -1,   -1,  372,  373,   -1,  375,   -1,  377,   -1,  379,
  380,   -1,  382,  383,   -1,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,   -1,   -1,
  256,   -1,  422,   -1,  424,   -1,   -1,  427,  264,  265,
  266,  267,  268,  433,  270,  271,   -1,  273,  274,   -1,
  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
   -1,  337,   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
  366,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,
   -1,   -1,   -1,   -1,  380,  381,  382,  383,  384,   -1,
   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,
  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  421,  422,  423,  424,   -1,
  426,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,   -1,  276,  277,  278,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,
  423,  424,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,   -1,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,
  422,  423,  424,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,   -1,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  421,  422,  423,  424,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,   -1,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,
  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,
  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
  380,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,  421,  422,  423,  424,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,  261,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,  284,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  297,  334,   -1,   -1,   -1,  302,   -1,   -1,
  341,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,  333,   -1,
   -1,  336,   -1,  338,  375,   -1,   -1,  378,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  362,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
  421,  422,  423,  424,  276,  277,   -1,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  279,   -1,  298,   -1,  300,   -1,
  302,  303,  304,  288,   -1,   -1,   -1,  422,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,  343,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,  377,   -1,   -1,   -1,  381,
  382,  383,  384,  385,   -1,   -1,  388,   -1,  390,  374,
  264,  265,   -1,  267,  396,  397,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  421,
  422,  295,  424,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,  422,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,  371,  372,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,  421,  422,  423,
  424,  276,  277,  427,  279,   -1,   -1,  265,  432,  267,
  285,   -1,  270,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  279,   -1,  298,   -1,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,  343,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  375,   -1,  377,   -1,   -1,   -1,  381,  382,  383,  384,
   -1,   -1,   -1,  388,   -1,  390,   -1,  264,  265,   -1,
  267,  396,  397,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  421,  422,  295,  424,
  261,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,  422,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,  284,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  297,  334,   -1,   -1,
   -1,  302,   -1,   -1,  341,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,
  321,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,  333,   -1,  371,  336,   -1,  338,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  362,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  372,  373,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,  421,  422,  423,  424,  276,  277,
  427,  279,   -1,   -1,  265,  432,  267,  285,   -1,  270,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  279,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,
  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  316,  334,  318,   -1,   -1,
   -1,  322,   -1,  341,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,  371,  372,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,  376,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,  421,  422,  423,  424,  276,  277,   -1,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,  422,   -1,   -1,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,  306,   -1,   -1,
   -1,   -1,   -1,  295,  313,   -1,   -1,  316,  300,  318,
  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,
   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,  421,  422,  423,  424,  276,  277,   -1,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
  422,   -1,   -1,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
  320,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,
   -1,  341,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,  421,  422,  423,  424,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  422,
   -1,   -1,   -1,   -1,  295,   -1,  261,  298,  263,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,  284,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  297,  334,   -1,   -1,   -1,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,  333,   -1,
   -1,  336,   -1,  338,  375,   -1,  377,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
  256,   -1,   -1,   -1,   -1,  396,  397,  362,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,  372,  373,   -1,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
  421,  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,
   -1,  261,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,  284,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  297,  334,   -1,
   -1,   -1,  302,   -1,   -1,  341,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  315,   -1,  317,   -1,   -1,
   -1,  321,   -1,  359,  360,  361,  362,  363,   -1,   -1,
  366,  367,   -1,  333,   -1,  371,  336,   -1,  338,  375,
   -1,   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,
   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,
  396,  397,  362,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  372,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,  421,  422,  423,  424,  276,
  277,   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,  372,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,  421,  422,  423,  424,  276,  277,
   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,
  288,   -1,  422,   -1,   -1,   -1,   -1,  295,  279,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,
  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  316,  334,  318,   -1,   -1,
   -1,  322,   -1,  341,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,  372,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,  421,  422,  423,  424,  276,  277,   -1,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,  422,   -1,   -1,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,  337,   -1,
  322,   -1,  341,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,
   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,  421,  422,  423,  424,  276,  277,   -1,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
  422,   -1,   -1,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,  337,   -1,  322,
   -1,  341,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,  421,  422,  423,  424,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  422,
   -1,   -1,   -1,   -1,  295,   -1,  261,   -1,  263,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,  284,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  297,  334,   -1,   -1,   -1,  302,   -1,   -1,
  341,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,  359,  360,
  361,  362,  363,   -1,   -1,  366,  367,   -1,  333,   -1,
   -1,  336,   -1,  338,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  362,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  372,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
  421,  422,  423,  424,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,  261,   -1,  263,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,  284,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  297,  334,   -1,   -1,   -1,  302,   -1,   -1,  341,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,  315,
   -1,  317,   -1,   -1,   -1,  321,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,  333,   -1,   -1,
  336,   -1,  338,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,  362,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,  421,
  422,  423,  424,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,  261,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,  284,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  297,  334,   -1,   -1,  301,  302,   -1,   -1,  341,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,  359,  360,  361,  362,
  363,   -1,   -1,  366,  367,   -1,  333,   -1,   -1,  336,
   -1,  338,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  362,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,  421,  422,
  423,  424,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,  261,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,  284,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  297,
  334,   -1,   -1,   -1,  302,   -1,   -1,  341,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,  359,  360,  361,  362,  363,
   -1,   -1,  366,  367,   -1,  333,   -1,   -1,  336,   -1,
  338,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,  362,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,  421,  422,  423,
  424,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,  384,
   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,  421,  422,  423,  424,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,
   -1,   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,
   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,
  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,  421,  422,  423,  424,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
  377,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,
  397,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,
   -1,   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,
  422,  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  261,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,  284,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  297,  334,   -1,   -1,
  337,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,  359,  360,  361,  362,  363,   -1,   -1,  366,
  367,   -1,  333,   -1,   -1,  336,   -1,  338,  375,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,  256,
   -1,   -1,   -1,  390,  261,   -1,   -1,   -1,  265,   -1,
  267,  362,   -1,  270,   -1,  272,  273,  368,  369,   -1,
  277,  372,  279,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,  288,   -1,   -1,  421,  422,  293,  424,  295,  296,
  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,   -1,   -1,   -1,  342,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,  362,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,  371,  372,  373,  285,   -1,   -1,
  288,   -1,   -1,   -1,  381,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,  256,  327,
   -1,  329,  330,  331,  332,  422,  334,  265,   -1,  267,
   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  359,  360,  361,  362,  363,   -1,  295,  366,  367,
   -1,   -1,  300,  256,   -1,   -1,  304,  375,   -1,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,  316,   -1,
  318,   -1,   -1,   -1,  322,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  288,  334,   -1,   -1,  337,
   -1,  256,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,
  265,  304,  267,  421,  422,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,  279,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,  288,  262,   -1,   -1,  330,  331,  256,
  295,  334,   -1,   -1,  337,  300,   -1,   -1,  265,  304,
  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,  279,  318,   -1,   -1,   -1,  322,   -1,   -1,
  298,  288,   -1,   -1,   -1,  330,  331,   -1,  295,  334,
   -1,   -1,  337,  300,  422,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  422,
   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,  379,   -1,   -1,  382,  383,   -1,   -1,  386,  387,
  388,  389,  390,  391,  392,  393,  394,  422,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
   -1,  261,   -1,  263,   -1,  265,  424,  267,   -1,  427,
  270,   -1,  272,  273,   -1,  422,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  284,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,   -1,
   -1,   -1,  342,  261,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,   -1,   -1,  277,
   -1,  279,  362,  281,  282,  283,  284,   -1,  368,  369,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,  422,   -1,  342,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,   -1,
   -1,  277,   -1,  279,  362,  281,  282,  283,  284,   -1,
   -1,   -1,  288,   -1,  372,   -1,   -1,  293,   -1,  295,
  296,  297,   -1,  381,  300,   -1,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,
  336,  337,  338,   -1,  422,   -1,  342,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,   -1,   -1,  277,   -1,  279,  362,  281,  282,  283,
  284,   -1,   -1,   -1,  288,   -1,  372,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,  381,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,  422,   -1,  342,  261,
   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  273,   -1,   -1,   -1,  277,   -1,  279,  362,  281,
  282,  283,  284,   -1,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,  296,  297,   -1,  381,  300,   -1,
  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,   -1,  336,  337,  338,   -1,  422,   -1,
  342,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,   -1,   -1,  277,   -1,  279,
  362,  281,  282,  283,  284,   -1,   -1,   -1,  288,   -1,
  372,   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,   -1,  302,  261,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,  284,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,  297,
  422,  261,  342,   -1,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,  362,  321,  284,   -1,   -1,  325,   -1,   -1,
   -1,   -1,  372,   -1,   -1,  333,   -1,  297,  336,   -1,
  338,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  357,
   -1,  321,   -1,   -1,  362,  325,   -1,  261,   -1,   -1,
   -1,   -1,   -1,  333,  372,  373,  336,  375,  338,  377,
   -1,   -1,  422,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  284,   -1,  390,   -1,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,  362,  297,   -1,   -1,   -1,   -1,  302,   -1,
   -1,  305,  372,  307,   -1,  309,  310,  311,  312,   -1,
  284,   -1,   -1,  317,  422,   -1,   -1,  321,   -1,   -1,
   -1,  325,   -1,  297,   -1,   -1,   -1,   -1,  302,  333,
   -1,   -1,  336,  307,  338,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,  325,  422,   -1,  264,  265,   -1,  267,  362,  333,
  270,  271,  336,   -1,  338,   -1,  276,  277,  372,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,  362,   -1,
  300,   -1,  302,  303,  304,   -1,  306,   -1,  372,   -1,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,  422,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  422,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,  376,   -1,  378,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,  378,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,  264,  265,   -1,  267,  396,  397,  270,  271,
   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  421,  422,  295,  424,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,
  264,  265,   -1,  267,  396,  397,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  421,
  422,  295,  424,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,  264,
  265,  375,  267,   -1,   -1,  270,  271,   -1,  382,  383,
   -1,  276,  277,   -1,  279,   -1,  390,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,  261,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,  422,   -1,
  424,  316,   -1,  318,  319,  284,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  297,  334,
   -1,   -1,  337,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,  359,  360,  361,  362,  363,   -1,
   -1,  366,  367,   -1,  333,   -1,   -1,  336,   -1,  338,
  375,   -1,  263,   -1,  265,   -1,  267,  382,  383,  270,
   -1,  272,  273,   -1,   -1,  390,  277,   -1,  279,   -1,
  281,  282,  283,  362,   -1,   -1,   -1,  288,   -1,  368,
  369,   -1,  293,  372,  295,  296,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,  421,  422,   -1,  424,
   -1,   -1,   -1,   -1,  315,  316,   -1,  318,   -1,   -1,
   -1,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,  264,
  265,  342,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,  368,  369,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  381,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  422,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,  366,  367,   -1,   -1,   -1,   -1,  265,   -1,  267,
  375,   -1,  270,   -1,  272,  273,   -1,   -1,   -1,  277,
   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,   -1,
   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  421,  422,  316,   -1,
  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  265,  334,  267,   -1,  337,
  270,   -1,  272,  273,  342,   -1,   -1,  277,   -1,  279,
   -1,  281,  282,  283,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  381,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,  323,   -1,   -1,   -1,  265,   -1,  267,
  330,  331,  270,   -1,  334,  273,   -1,  337,   -1,  277,
   -1,  279,  342,  281,  282,  283,   -1,   -1,   -1,   -1,
  288,   -1,   -1,   -1,  422,  293,   -1,  295,   -1,  265,
   -1,  267,  300,   -1,  270,   -1,  304,  273,   -1,   -1,
   -1,  277,   -1,  279,   -1,  281,  282,  283,  316,   -1,
  318,   -1,  288,   -1,  322,   -1,   -1,  293,   -1,  295,
   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,  337,
   -1,   -1,   -1,  265,  342,  267,   -1,   -1,  270,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,  279,   -1,   -1,
   -1,   -1,  422,   -1,  330,  331,  288,   -1,  334,   -1,
   -1,  337,   -1,  295,   -1,  265,  342,  267,  300,   -1,
  270,   -1,  304,  381,  306,   -1,  308,   -1,   -1,  279,
   -1,  313,   -1,   -1,  316,   -1,  318,   -1,  288,   -1,
  322,   -1,   -1,  325,   -1,  295,   -1,   -1,  330,  331,
  300,   -1,  334,   -1,  304,  337,  306,   -1,  308,   -1,
  265,   -1,  267,  313,  422,  270,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,  279,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,  288,  334,   -1,   -1,  337,   -1,   -1,
  295,   -1,   -1,   -1,  376,  300,  422,   -1,   -1,  304,
   -1,  306,   -1,   -1,  265,   -1,  267,   -1,  313,  270,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  279,   -1,
  325,   -1,   -1,   -1,  374,  330,  331,  288,   -1,  334,
   -1,   -1,  337,   -1,  295,   -1,  265,   -1,  267,  300,
  422,  270,   -1,  304,   -1,  306,   -1,  308,   -1,   -1,
  279,   -1,  313,   -1,   -1,  316,   -1,  318,  363,  288,
   -1,  322,   -1,   -1,  325,   -1,  295,   -1,   -1,  330,
  331,  300,  422,  334,   -1,  304,  337,  306,   -1,  308,
   -1,  265,   -1,  267,  313,   -1,  270,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,  279,  325,   -1,   -1,  283,
   -1,  330,  331,   -1,  288,  334,   -1,   -1,  337,  293,
   -1,  295,   -1,   -1,   -1,   -1,  300,  422,   -1,   -1,
  304,  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,  265,  322,  267,
   -1,   -1,  270,   -1,  272,   -1,  330,  331,   -1,   -1,
  334,  279,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  422,   -1,   -1,  261,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  272,  304,   -1,   -1,   -1,
  277,   -1,   -1,   -1,  281,   -1,   -1,  284,  316,   -1,
  318,   -1,   -1,  422,  322,  323,   -1,   -1,   -1,  296,
  297,   -1,  330,  331,  301,  302,  334,  261,   -1,  337,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,   -1,  277,  321,   -1,  323,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,  422,  336,
   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,   -1,
  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  272,   -1,  317,   -1,  362,  277,  321,   -1,  323,
  281,   -1,   -1,  284,   -1,  372,  373,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,  296,  297,   -1,  342,   -1,
  301,  302,  261,   -1,  422,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  362,   -1,
  321,   -1,  323,   -1,   -1,  284,   -1,   -1,  372,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  297,   -1,
   -1,  342,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,  362,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,   -1,   -1,   -1,   -1,   -1,  368,
  369,
  };

#line 6728 "E:\Projects\VSharp\Research\\VSharpParser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly VSC.TypeSystem.Resolver.OperatorType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (VSC.TypeSystem.Resolver.OperatorType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
/*	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}*/
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, VSC.TypeSystem.ParameterModifier mod)
{
/*	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));*/
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDeclaration tce)
{	
	++lexer.parsing_declaration;
	current_container = tce;
	current_type = tce;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDeclaration;

	return retval;
}



[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	/*if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));*/
}

List<Tuple<VSC.TypeSystem.Modifiers, Location>> GetModifierLocations ()
{
	/*var result = mod_locations;
	mod_locations = null;
	return result;*/
	return null;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void PushLocation (Location loc)
{
	if (location_stack == null)
		location_stack = new Stack<Location> ();

	location_stack.Push (loc);
}

Location PopLocation ()
{
	if (location_stack == null)
		return Location.Null;

	return location_stack.Pop ();
}

string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (VSC.TypeSystem.Resolver.OperatorType op)
{
	switch (op) {
		
	case VSC.TypeSystem.Resolver.OperatorType.LogicalNot: 
	case VSC.TypeSystem.Resolver.OperatorType.OnesComplement: 
	case VSC.TypeSystem.Resolver.OperatorType.Increment:
	case VSC.TypeSystem.Resolver.OperatorType.Decrement:
	case VSC.TypeSystem.Resolver.OperatorType.True: 
	case VSC.TypeSystem.Resolver.OperatorType.False: 
	case VSC.TypeSystem.Resolver.OperatorType.UnaryPlus: 
	case VSC.TypeSystem.Resolver.OperatorType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public VSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public VSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = file.RootNamespace.DefaultType;
	current_namespace = file.RootNamespace;
	
	//this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
//	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
//	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
/*	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;
		*/
	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

/*void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}
	current_anonymous_method.IsAsync = isAsync;
	
	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}
*/
/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
/*AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}
*/
void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
	case Token.WHEN:
		return "when";
	case Token.INTERPOLATED_STRING_END:
		return "}";
	case Token.INTERPOLATED_STRING:
		return "${";

	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int INTERR_OPERATOR = 364;
  public const int WHEN = 365;
  public const int INTERPOLATED_STRING = 366;
  public const int INTERPOLATED_STRING_END = 367;
  public const int GET = 368;
  public const int SET = 369;
  public const int LAST_KEYWORD = 370;
  public const int OPEN_BRACE = 371;
  public const int CLOSE_BRACE = 372;
  public const int OPEN_BRACKET = 373;
  public const int CLOSE_BRACKET = 374;
  public const int OPEN_PARENS = 375;
  public const int CLOSE_PARENS = 376;
  public const int DOT = 377;
  public const int COMMA = 378;
  public const int COLON = 379;
  public const int SEMICOLON = 380;
  public const int TILDE = 381;
  public const int PLUS = 382;
  public const int MINUS = 383;
  public const int BANG = 384;
  public const int ASSIGN = 385;
  public const int OP_LT = 386;
  public const int OP_GT = 387;
  public const int BITWISE_AND = 388;
  public const int BITWISE_OR = 389;
  public const int STAR = 390;
  public const int PERCENT = 391;
  public const int DIV = 392;
  public const int CARRET = 393;
  public const int INTERR = 394;
  public const int DOUBLE_COLON = 395;
  public const int OP_INC = 396;
  public const int OP_DEC = 397;
  public const int OP_SHIFT_LEFT = 398;
  public const int OP_SHIFT_RIGHT = 399;
  public const int OP_LE = 400;
  public const int OP_GE = 401;
  public const int OP_EQ = 402;
  public const int OP_NE = 403;
  public const int OP_AND = 404;
  public const int OP_OR = 405;
  public const int OP_MULT_ASSIGN = 406;
  public const int OP_DIV_ASSIGN = 407;
  public const int OP_MOD_ASSIGN = 408;
  public const int OP_ADD_ASSIGN = 409;
  public const int OP_SUB_ASSIGN = 410;
  public const int OP_SHIFT_LEFT_ASSIGN = 411;
  public const int OP_SHIFT_RIGHT_ASSIGN = 412;
  public const int OP_AND_ASSIGN = 413;
  public const int OP_XOR_ASSIGN = 414;
  public const int OP_OR_ASSIGN = 415;
  public const int OP_PTR = 416;
  public const int OP_COALESCING = 417;
  public const int OP_GENERICS_LT = 418;
  public const int OP_GENERICS_LT_DECL = 419;
  public const int OP_GENERICS_GT = 420;
  public const int LITERAL = 421;
  public const int IDENTIFIER = 422;
  public const int OPEN_PARENS_LAMBDA = 423;
  public const int OPEN_PARENS_CAST = 424;
  public const int GENERIC_DIMENSION = 425;
  public const int DEFAULT_COLON = 426;
  public const int OPEN_BRACKET_EXPR = 427;
  public const int EVAL_STATEMENT_PARSER = 428;
  public const int EVAL_COMPILATION_UNIT_PARSER = 429;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 430;
  public const int DOC_SEE = 431;
  public const int GENERATE_COMPLETION = 432;
  public const int COMPLETE_COMPLETION = 433;
  public const int UMINUS = 434;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
