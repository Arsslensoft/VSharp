// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "E:\Projects\VSharp\Research\\VSharpParser.jay"
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using VSC.AST;
using VSC.Base;
using VSC.Context;
using VSC.TypeSystem;
using VSC.TypeSystem.Implementation;
using VSC.TypeSystem.Resolver;
namespace VSC
{
	/// <summary>
	///   V# Parser
	/// </summary>
	public class VSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | DefaultValue,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
	    TypeContainer current_container;
		TypeDeclaration current_type;
		SymbolKind type_parameter_symbol_kind = SymbolKind.TypeDefinition;
		FieldDeclaration current_field;
		PropertyOrIndexer current_property;
		EventDeclaration current_event;
	
	
		// for method type parameter
		bool is_inheritance_impl = false;
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariable current_variable;

		DelegateDeclaration   current_delegate;
		
		//AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
	//	public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		//public Undo undo;

		bool? interactive_async;
		
		//Stack<Linq.QueryBlock> linq_clause_blocks;


		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		//LocationsBag lbag;
	//	List<Tuple<Modifiers, Location>> mod_locations;
	//	Location parameterModifierLocation, savedLocation, savedEventAssignLocation;
	//	Location savedAttrParenOpenLocation, savedAttrParenCloseLocation, savedOperatorLocation;
	//	Stack<List<Location>> locationListStack = new Stack<List<Location>> (); // used for type parameters
		Stack<Location> opt_intoStack = new Stack<Location> ();

		bool HadAttributeParens;
		List<Location> attributeArgumentCommas = new List<Location> ();
		List<Location> parameterListCommas = new List<Location> ();
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 7;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_import_directives",
    "outer_declaration : opt_import_directives namespace_or_type_declarations opt_attributes",
    "outer_declaration : opt_import_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "import_directives : import_directive",
    "import_directives : import_directives import_directive",
    "import_directive : import_package",
    "import_package : USING namespace_or_type_expr SEMICOLON",
    "import_package : USING IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
    "import_package : USING error",
    "opt_static :",
    "opt_static : STATIC",
    "$$2 :",
    "$$3 :",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_import_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon_error",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name",
    "opt_semicolon_error :",
    "opt_semicolon_error : SEMICOLON",
    "opt_semicolon_error : error",
    "namespace_name : IDENTIFIER",
    "namespace_name : namespace_name DOT IDENTIFIER",
    "namespace_name : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "opt_import_directives :",
    "opt_import_directives : import_directives",
    "opt_namespace_or_type_declarations :",
    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
    "namespace_or_type_declarations : namespace_or_type_declaration",
    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
    "namespace_or_type_declaration : type_declaration",
    "namespace_or_type_declaration : namespace_declaration",
    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$4 :",
    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
    "$$5 :",
    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : IDENTIFIER error",
    "attribute_section_cont : error",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$6 :",
    "attribute : attribute_name $$6 opt_attribute_arguments",
    "attribute_name : namespace_or_type_expr",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "positional_or_named_argument : error",
    "$$7 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
    "named_argument_expr : expression_or_error",
    "named_argument_expr : declaration_expression",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : primary_constructor_body",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : attributes_without_members",
    "class_member_declaration : incomplete_member",
    "class_member_declaration : error",
    "$$8 :",
    "primary_constructor_body : OPEN_BRACE $$8 opt_statement_list block_end",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "$$13 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$9 type_declaration_name $$10 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$11 OPEN_BRACE $$12 opt_class_member_declarations CLOSE_BRACE $$13 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$14 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$14 constant_initializer opt_constant_declarators SEMICOLON",
    "constant_declaration : opt_attributes opt_modifiers CONST type error",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$15 :",
    "constant_initializer : ASSIGN $$15 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$16 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$16 opt_field_initializer opt_field_declarators SEMICOLON",
    "opt_field_initializer :",
    "$$17 :",
    "opt_field_initializer : ASSIGN $$17 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$18 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$19 :",
    "method_declaration : method_header $$19 method_body_expression_block",
    "$$20 :",
    "$$21 :",
    "$$22 :",
    "method_header : opt_attributes opt_modifiers member_type $$20 method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
    "method_body_expression_block : method_body",
    "method_body_expression_block : expression_block",
    "method_body : block",
    "method_body : SEMICOLON",
    "$$23 :",
    "expression_block : ARROW $$23 expression SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : attribute_sections error",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$24 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$24 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "$$25 :",
    "$$26 :",
    "$$27 :",
    "$$28 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$25 OPEN_BRACE $$26 accessor_declarations $$27 CLOSE_BRACE $$28 opt_property_initializer",
    "$$29 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$29 expression_block",
    "opt_property_initializer :",
    "$$30 :",
    "opt_property_initializer : ASSIGN $$30 property_initializer SEMICOLON",
    "property_initializer : expression",
    "property_initializer : array_initializer",
    "$$31 :",
    "$$32 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$31 opt_formal_parameter_list CLOSE_BRACKET $$32 indexer_body",
    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
    "indexer_body : expression_block",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$33 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$33 accessor_body",
    "$$34 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$34 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$35 :",
    "$$36 :",
    "$$37 :",
    "$$38 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$35 type_declaration_name $$36 opt_class_base opt_type_parameter_constraints_clauses $$37 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$38 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$39 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$39 method_body_expression_block",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$40 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "overloadable_operator : IS",
    "$$41 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
    "$$42 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$43 :",
    "$$44 :",
    "constructor_declarator : opt_attributes opt_modifiers THIS $$43 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$44 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$45 :",
    "constructor_initializer : COLON BASE OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
    "$$46 :",
    "constructor_initializer : COLON THIS OPEN_PARENS $$46 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "constructor_initializer : error",
    "$$47 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$47 THIS OPEN_PARENS CLOSE_PARENS method_body",
    "$$48 :",
    "$$49 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$48 event_accessor_declarations $$49 CLOSE_BRACE",
    "event_declaration : opt_attributes opt_modifiers EVENT type error",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$50 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$50 event_accessor_block",
    "$$51 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$51 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "attributes_without_members : attribute_sections CLOSE_BRACE",
    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
    "$$52 :",
    "$$53 :",
    "$$54 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$52 OPEN_BRACE $$53 opt_enum_member_declarations $$54 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$55 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$55 ASSIGN constant_expression",
    "enum_member_declaration : opt_attributes IDENTIFIER error",
    "enum_member_declaration : attributes_without_members",
    "$$56 :",
    "$$57 :",
    "$$58 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$56 opt_formal_parameter_list CLOSE_PARENS $$57 opt_type_parameter_constraints_clauses $$58 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_expr : member_name",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
    "member_name : simple_name_expr",
    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
    "member_name : namespace_or_type_expr DOT IDENTIFIER generic_dimension",
    "simple_name_expr : IDENTIFIER opt_type_argument_list",
    "simple_name_expr : IDENTIFIER generic_dimension",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$59 :",
    "type_declaration_name : IDENTIFIER $$59 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : void_invalid",
    "simple_type : type_expression",
    "simple_type : void_invalid",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_expr opt_nullable",
    "type_expression : namespace_or_type_expr pointer_stars",
    "type_expression : builtin_type_expression",
    "void_invalid : VOID",
    "builtin_type_expression : builtin_types opt_nullable",
    "builtin_type_expression : builtin_types pointer_stars",
    "builtin_type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : type_name_expression",
    "primary_expression : literal",
    "primary_expression : array_creation_expression",
    "primary_expression : parenthesized_expression",
    "primary_expression : default_value_expression",
    "primary_expression : invocation_expression",
    "primary_expression : element_access",
    "primary_expression : this_access",
    "primary_expression : base_access",
    "primary_expression : post_increment_expression",
    "primary_expression : post_decrement_expression",
    "primary_expression : object_or_delegate_creation_expression",
    "primary_expression : anonymous_type_expression",
    "primary_expression : typeof_expression",
    "primary_expression : sizeof_expression",
    "primary_expression : checked_expression",
    "primary_expression : unchecked_expression",
    "primary_expression : pointer_member_access",
    "primary_expression : anonymous_method_expression",
    "primary_expression : interpolated_string",
    "type_name_expression : simple_name_expr",
    "type_name_expression : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "interpolated_string : INTERPOLATED_STRING interpolations INTERPOLATED_STRING_END",
    "interpolated_string : INTERPOLATED_STRING_END",
    "interpolations : interpolation",
    "interpolations : interpolations INTERPOLATED_STRING interpolation",
    "interpolation : expression",
    "interpolation : expression COMMA expression",
    "$$60 :",
    "interpolation : expression COLON $$60 LITERAL",
    "$$61 :",
    "interpolation : expression COMMA expression COLON $$61 LITERAL",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
    "member_access : BASE DOT identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "invocation_expression : primary_expression open_parens_any argument_list error",
    "invocation_expression : primary_expression open_parens_any error",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA error",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : REF declaration_expression",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : OUT declaration_expression",
    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
    "declaration_expression : CHECKED open_parens_any declaration_expression CLOSE_PARENS",
    "declaration_expression : UNCHECKED open_parens_any declaration_expression CLOSE_PARENS",
    "declaration_expression : variable_type identifier_inside_body",
    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
    "element_access : primary_expression OPEN_BRACKET_EXPR error",
    "expression_list : expression_or_error",
    "expression_list : expression_list COMMA expression_or_error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "base_access : BASE OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$62 :",
    "new_expr_type : $$62 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
    "anonymous_type_parameter : identifier_inside_body",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : error",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "sizeof_expression : SIZEOF open_parens_any type error",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "checked_expression : CHECKED error",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED error",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$63 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$63 block",
    "$$64 :",
    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$64 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$65 :",
    "anonymous_method_signature : OPEN_PARENS $$65 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : BANG error",
    "unary_expression : TILDE error",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "prefixed_unary_expression : PLUS error",
    "prefixed_unary_expression : MINUS error",
    "prefixed_unary_expression : OP_INC error",
    "prefixed_unary_expression : OP_DEC error",
    "prefixed_unary_expression : STAR error",
    "prefixed_unary_expression : BITWISE_AND error",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR error",
    "multiplicative_expression : multiplicative_expression DIV error",
    "multiplicative_expression : multiplicative_expression PERCENT error",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression PLUS error",
    "additive_expression : additive_expression MINUS error",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS pattern_expr",
    "additive_expression : additive_expression AS error",
    "additive_expression : additive_expression IS error",
    "pattern_type_expr : variable_type",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT error",
    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "relational_expression : relational_expression OP_LT error",
    "relational_expression : relational_expression OP_GT error",
    "relational_expression : relational_expression OP_LE error",
    "relational_expression : relational_expression OP_GE error",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "equality_expression : equality_expression OP_EQ error",
    "equality_expression : equality_expression OP_NE error",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "and_expression : and_expression BITWISE_AND error",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET error",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND error",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR error",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "conditional_expression : null_coalescing_expression INTERR expression error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON CLOSE_BRACE",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "lambda_parameter : AWAIT",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$66 :",
    "lambda_expression_body : $$66 expression",
    "lambda_expression_body : block",
    "lambda_expression_body : error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$67 :",
    "lambda_expression : IDENTIFIER ARROW $$67 lambda_expression_body",
    "$$68 :",
    "lambda_expression : AWAIT ARROW $$68 lambda_expression_body",
    "$$69 :",
    "lambda_expression : ASYNC identifier_inside_body ARROW $$69 lambda_expression_body",
    "$$70 :",
    "$$71 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$70 opt_lambda_parameter_list CLOSE_PARENS ARROW $$71 lambda_expression_body",
    "$$72 :",
    "$$73 :",
    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$72 opt_lambda_parameter_list CLOSE_PARENS ARROW $$73 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : ARGLIST",
    "constant_expression : expression",
    "boolean_expression : expression",
    "opt_primary_parameters :",
    "opt_primary_parameters : primary_parameters",
    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "opt_primary_parameters_with_class_base :",
    "opt_primary_parameters_with_class_base : class_base",
    "opt_primary_parameters_with_class_base : primary_parameters",
    "opt_primary_parameters_with_class_base : primary_parameters class_base",
    "$$74 :",
    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$74 opt_argument_list CLOSE_PARENS",
    "$$75 :",
    "$$76 :",
    "$$77 :",
    "$$78 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$75 type_declaration_name $$76 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$77 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$78 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "opt_class_base :",
    "opt_class_base : class_base",
    "class_base : COLON type_list",
    "class_base : COLON type_list error",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "$$79 :",
    "block : OPEN_BRACE $$79 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$80 :",
    "block_prepared : OPEN_BRACE $$80 opt_statement_list CLOSE_BRACE",
    "block_prepared : CLOSE_BRACE",
    "$$81 :",
    "block_prepared_strict : OPEN_BRACE $$81 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : IDENTIFIER error",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$82 :",
    "labeled_statement : identifier_inside_body COLON $$82 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : type_name_expression opt_nullable",
    "variable_type_simple : type_name_expression pointer_stars",
    "variable_type_simple : builtin_type_expression",
    "variable_type_simple : void_invalid",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "identifier_inside_body : AWAIT",
    "$$83 :",
    "block_variable_declaration : variable_type identifier_inside_body $$83 opt_local_variable_initializer opt_variable_declarators semicolon_or_handle_error_close_brace",
    "$$84 :",
    "block_variable_declaration : CONST variable_type identifier_inside_body $$84 const_variable_initializer opt_const_declarators SEMICOLON",
    "semicolon_or_handle_error_close_brace : SEMICOLON",
    "semicolon_or_handle_error_close_brace : CLOSE_BRACE",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "expression_statement : statement_expression CLOSE_BRACE",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "if_statement : IF open_parens_any boolean_expression error",
    "$$85 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$85 opt_switch_sections CLOSE_BRACE",
    "switch_statement : SWITCH open_parens_any expression error",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "switch_section : switch_labels statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : CASE constant_expression error",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "do_statement : DO embedded_statement error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
    "$$86 :",
    "for_statement : FOR open_parens_any $$86 for_statement_cont",
    "$$87 :",
    "for_statement_cont : opt_for_initializer SEMICOLON $$87 for_statement_condition",
    "for_statement_cont : opt_for_initializer CLOSE_PARENS",
    "$$88 :",
    "for_statement_condition : opt_for_condition SEMICOLON $$88 for_statement_end",
    "for_statement_condition : boolean_expression CLOSE_PARENS",
    "for_statement_end : opt_for_iterator CLOSE_PARENS embedded_statement",
    "for_statement_end : error",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$89 :",
    "for_initializer : variable_type identifier_inside_body $$89 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type error",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "$$90 :",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$90 embedded_statement",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "foreach_statement : FOREACH open_parens_any type error",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "continue_statement : CONTINUE error",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "return_statement : RETURN expression error",
    "return_statement : RETURN error",
    "throw_statement : THROW opt_expression SEMICOLON",
    "throw_statement : THROW expression error",
    "throw_statement : THROW error",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body RETURN expression error",
    "yield_statement : identifier_inside_body BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "catch_clause : CATCH opt_catch_filter block",
    "$$91 :",
    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$91 opt_catch_filter_or_error",
    "catch_clause : CATCH open_parens_any error",
    "opt_catch_filter_or_error : opt_catch_filter block_prepared",
    "opt_catch_filter_or_error : error",
    "opt_catch_filter :",
    "$$92 :",
    "opt_catch_filter : WHEN $$92 open_parens_any expression CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$93 :",
    "unsafe_statement : UNSAFE $$93 block",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
    "lock_statement : LOCK open_parens_any expression error",
    "$$94 :",
    "$$95 :",
    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$94 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$95 embedded_statement",
    "$$96 :",
    "$$97 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$96 using_initialization CLOSE_PARENS $$97 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_statement : USING open_parens_any expression error",
    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
    "using_initialization : error",
    "using_or_fixed_variable_initializer :",
    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER import_directives opt_COMPLETE_COMPLETION",
    "$$98 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$98 interactive_statement_list opt_COMPLETE_COMPLETION",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
    "interactive_compilation_unit : opt_import_directives",
    "interactive_compilation_unit : opt_import_directives namespace_or_type_declarations",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : VOID opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT THIS",
    "$$99 :",
    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$99 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$100 :",
    "opt_doc_method_sig : OPEN_PARENS $$100 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT",
    "INTERR_OPERATOR","WHEN","INTERPOLATED_STRING",
    "INTERPOLATED_STRING_END","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS","event_declarator","pattern_expr",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 383 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 386 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
#line 393 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			VSharpAttributes attrs = (VSharpAttributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
			"Assembly and module attributes must precede all other elements except import clauses");

		current_namespace.UnattachedAttributes = attrs;
		}
	  }
  break;
case 7:
#line 403 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_namespace.UnattachedAttributes = (VSharpAttributes) yyVals[0+yyTop];
	  }
  break;
case 8:
#line 407 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
		Error_SyntaxError (yyToken);
	  }
  break;
case 13:
#line 427 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 14:
#line 435 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Import uc = new ImportPackage ((TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddImport (uc);
	  }
  break;
case 15:
#line 440 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
		 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
	}

		var un = new ImportPackageAlias (new AliasIdentifier (lt.Value, lt.Location), (TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddImport (un);		
	  }
  break;
case 16:
#line 451 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }
  break;
case 19:
#line 469 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		VSharpAttributes attrs = (VSharpAttributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
		bool valid_global_attrs = true;
		if ((current_namespace.DeclarationFound || current_namespace != file.RootNamespace)) {
				valid_global_attrs = false;
			} else {
		foreach (var a in attrs.Attrs) {
		    if (a.ExplicitTarget == "assembly")
				continue;
						
				valid_global_attrs = false;
					break;
			}
		}
		
		if (!valid_global_attrs)
			report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
	}
		
		file.AddAttributes (attrs);
		
		var ns = NamespaceContainer.CreateContainers (current_namespace,name,  GetLocation (yyVals[-1+yyTop]));
		current_namespace = ns;
		current_container = ns.DefaultType;
	  }
  break;
case 20:
#line 497 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 21:
#line 502 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	    current_namespace = current_namespace.Parent;
		current_container =current_namespace.DefaultType; 
	  }
  break;
case 22:
#line 507 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

	var name = (MemberName) yyVals[0+yyTop];		
	NamespaceContainer.CreateContainers (current_namespace,name,  GetLocation (yyVals[-1+yyTop]));

	  }
  break;
case 25:
#line 520 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 26:
#line 528 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 27:
#line 533 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 28:
#line 538 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }
  break;
case 39:
#line 572 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

	if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
			report.Error (1527, ds.Location, 
		"Package elements cannot be explicitly declared as private, protected or protected internal");
		}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
		/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.Attributes != null) {
				ds.ConvertGlobalAttributes (ds, file);
			}
		}
	current_namespace.DeclarationFound = true;
	  }
  break;
case 40:
#line 592 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 41:
#line 595 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_namespace.UnattachedAttributes = (VSharpAttributes) yyVals[-1+yyTop];
	report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
	lexer.putback ('}');
	  }
  break;
case 49:
#line 628 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var sect = (List<VSC.AST.VSharpAttribute>) yyVals[0+yyTop];
		yyVal = new VSharpAttributes (sect);
	  }
  break;
case 50:
#line 633 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		VSharpAttributes attrs = yyVals[-1+yyTop] as VSharpAttributes;
		var sect = (List<VSC.AST.VSharpAttribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new VSharpAttributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }
  break;
case 51:
#line 646 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 52:
#line 650 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 53:
#line 658 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }
  break;
case 54:
#line 665 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<VSC.AST.VSharpAttribute> (0);
		else
		yyVal = yyVals[-2+yyTop];
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }
  break;
case 55:
#line 675 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-2+yyTop];	
	  }
  break;
case 56:
#line 679 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<VSC.AST.VSharpAttribute> () {
			new VSC.AST.VSharpAttribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }
  break;
case 57:
#line 690 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }
  break;
case 58:
#line 700 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	
	  }
  break;
case 59:
#line 705 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = "event"; }
  break;
case 60:
#line 706 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = "return";}
  break;
case 61:
#line 711 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new List<VSC.AST.VSharpAttribute> (4) { (VSC.AST.VSharpAttribute) yyVals[0+yyTop] };
	  }
  break;
case 62:
#line 715 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	var attrs = (List<VSC.AST.VSharpAttribute>) yyVals[-2+yyTop];
	if (attrs != null) 
		attrs.Add ((VSC.AST.VSharpAttribute) yyVals[0+yyTop]);


		yyVal = attrs;
	  }
  break;
case 63:
#line 727 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 64:
#line 731 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		
		var tne = (TypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) 
			report.Error (404, tne.Location, "Attributes cannot be generic");
		
		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];

		yyVal = new VSC.AST.VSharpAttribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	
	  }
  break;
case 66:
#line 750 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; HadAttributeParens = false;	  }
  break;
case 67:
#line 752 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		HadAttributeParens = true;
	  }
  break;
case 68:
#line 760 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 69:
#line 762 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }
  break;
case 70:
#line 768 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments a = new Arguments (4);
	a.Add ((Argument) yyVals[0+yyTop]);  
	yyVal = new Arguments [] { null, a };
	  }
  break;
case 71:
#line 774 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
	if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
		o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
	args.Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 72:
#line 789 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 73:
#line 802 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 75:
#line 807 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 76:
#line 815 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 77:
#line 819 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[-1+yyTop]);	  
	  }
  break;
case 78:
#line 828 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {

	/* Avoid boxing in common case (no modifier)*/
	var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }
  break;
case 81:
#line 844 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 82:
#line 846 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 83:
#line 850 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 86:
#line 862 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 87:
#line 867 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 101:
#line 888 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
		GetSymbolName (yyToken));
	    yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 102:
#line 898 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_local_parameters = current_type.PrimaryConstructorParameters;
	if (current_local_parameters == null) {
			report.Error (9010, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 103:
#line 909 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_local_parameters = null;
		var t = current_type as ClassOrStructDeclaration;
	if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (8041, b.StartLocation, "Primary constructor already has a body");
			} else {
			t.PrimaryConstructorBlock = b;
			}
		}
	  }
  break;
case 104:
#line 928 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 105:
#line 932 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new StructDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], GetLocation(yyVals[-2+yyTop])));
	
	  }
  break;
case 106:
#line 941 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

	if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

	if (doc_support)
			current_type.DocComment = Lexer.consume_doc_comment ();

		
		lexer.parsing_modifiers = true;
	  }
  break;
case 107:
#line 958 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 108:
#line 963 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 109:
#line 969 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = pop_current_class ();
	  }
  break;
case 110:
#line 973 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 111:
#line 982 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new ConstantDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }
  break;
case 112:
#line 995 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
		Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.ConstantValue = (IConstantValue) yyVals[-2+yyTop];
		current_field = null;
	  }
  break;
case 113:
#line 1007 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new ConstantDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-4+yyTop]));
	  }
  break;
case 116:
#line 1021 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
	  }
  break;
case 117:
#line 1025 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		
	  }
  break;
case 118:
#line 1032 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  var lt = (LocatedToken) yyVals[-1+yyTop];
	  	current_field = new ConstantDeclaration (current_field as ConstantDeclaration, new MemberName (lt.Value, lt.Location));
		current_field.ConstantValue = (IConstantValue) yyVals[0+yyTop];
		current_type.AddMember (current_field);
	  }
  break;
case 119:
#line 1042 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 120:
#line 1046 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 121:
#line 1051 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 124:
#line 1066 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FieldDeclaration (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-3+yyTop]);
		current_type.AddMember (current_field);
		yyVal = current_field;
	  }
  break;
case 125:
#line 1081 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
	
		yyVal = current_field;
		current_field = null;
	  }
  break;
case 127:
#line 1096 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	 	start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 128:
#line 1102 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		current_field.ConstantValue = (IConstantValue) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }
  break;
case 131:
#line 1117 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 132:
#line 1120 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 133:
#line 1126 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		 var lt = (LocatedToken) yyVals[0+yyTop];
	  	current_field = new FieldDeclaration (current_field, new MemberName (lt.Value, lt.Location));
		current_type.AddMember (current_field);
	  }
  break;
case 134:
#line 1132 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 135:
#line 1136 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		 var lt = (LocatedToken) yyVals[-3+yyTop];
	  	current_field = new FieldDeclaration (current_field, new MemberName (lt.Value, lt.Location));
		current_field.ConstantValue = (IConstantValue) yyVals[-1+yyTop];
		current_type.AddMember (current_field);
	  }
  break;
case 138:
#line 1149 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 139:
#line 1158 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	is_inheritance_impl = false;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }
  break;
case 140:
#line 1166 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	MethodDeclaration method = (MethodDeclaration) yyVals[-2+yyTop];
	method.Block = (ToplevelBlock) yyVals[0+yyTop];
	async_block = false;
		
		if (method.Block == null) 
		method.ParameterInfo.CheckParameters ();
		 else {
		if (current_container is InterfaceDeclaration) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
				method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 141:
#line 1191 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.Method;
	  }
  break;
case 142:
#line 1195 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
			valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 143:
#line 1199 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-5+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-2+yyTop];
		Modifiers mods = (Modifiers) yyVals[-7+yyTop];
		is_inheritance_impl = ((mods & Modifiers.OVERRIDE) != 0 ) || name.ExplicitInterface != null;
		var method = new MethodDeclaration (current_type, (FullNamedExpression) yyVals[-6+yyTop], mods,
				     name, current_local_parameters, (VSharpAttributes) yyVals[-8+yyTop]);

		current_type.AddMember (method);


		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

	
		yyVal = method;
		is_inheritance_impl = false;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 144:
#line 1220 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null) {
		var method = (MethodDeclaration) yyVals[-2+yyTop];
			method.SetConstraints ((List<TypeParameterConstraints>) yyVals[-1+yyTop]);
		}

		yyVal = yyVals[-2+yyTop];
		
	  }
  break;
case 145:
#line 1235 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		MemberName name = (MemberName) yyVals[-3+yyTop];
			Modifiers mods = (Modifiers) yyVals[-4+yyTop];
		is_inheritance_impl = ((mods & Modifiers.OVERRIDE) != 0 ) || name.ExplicitInterface != null;


		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name (mods));

		var method = new MethodDeclaration (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-7+yyTop]);

	current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
				is_inheritance_impl = false;
	  }
  break;
case 146:
#line 1261 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

	MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = new MethodDeclaration(current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (VSharpAttributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
				is_inheritance_impl = false;
	  }
  break;
case 150:
#line 1286 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* savedLocation = GetLocation ($1); $$ = null;*/
	 }
  break;
case 151:
#line 1292 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	++lexer.parsing_block;
	start_block (GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 152:
#line 1297 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	lexer.parsing_block = 0;*/
		/*current_block.AddStatement (new ContextualReturn ((Expression) $3));*/
		/*var b = end_block (GetLocation ($4));*/
		/*b.IsCompilerGenerated = true;*/
		/*$$ = b;*/
	 }
  break;
case 153:
#line 1307 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters;}
  break;
case 155:
#line 1313 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	 	yyVal = new ParametersCompiled (pars_list.ToArray ());	
	  }
  break;
case 156:
#line 1318 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);
	
		yyVal = new ParametersCompiled (pars_list.ToArray ()); 

	  }
  break;
case 157:
#line 1326 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }
  break;
case 158:
#line 1333 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

	var pars_list = (List<Parameter>) yyVals[-4+yyTop];
	yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 159:
#line 1341 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 160:
#line 1345 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 161:
#line 1353 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		default_parameter_used = p.IsOptional;
		yyVal = parameters_bucket;
	  }
  break;
case 162:
#line 1361 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.IsSelf)
				report.Error (1100, p.Location, "The parameter modifier `self' can only be used on the first parameter");
			else if (!p.IsOptional && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.IsOptional;
			pars.Add (p);
			
		}
		
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 163:
#line 1384 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 164:
#line 1392 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (ParameterModifier) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 165:
#line 1398 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	 	Location l = GetLocation (yyVals[0+yyTop]);
	yyVal = new Parameter (null, null, ParameterModifier.None, (VSharpAttributes) yyVals[-1+yyTop], l);
	  }
  break;
case 166:
#line 1407 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], l);
	  }
  break;
case 167:
#line 1417 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 168:
#line 1421 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;

		ParameterModifier mod = (ParameterModifier) yyVals[-5+yyTop];
		if (mod != ParameterModifier.None) {
			switch (mod) {
			case ParameterModifier.Ref:
			case ParameterModifier.Out:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
				Parameter.GetModifierSignature (mod));
				break;
				
			case ParameterModifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
				Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
		mod = ParameterModifier.None;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (VSharpAttributes) yyVals[-6+yyTop], lt.Location);
	
	if (yyVals[0+yyTop] != null)
		((Parameter) yyVal).DefaultValue = (IConstantValue) yyVals[0+yyTop];
	  }
  break;
case 169:
#line 1456 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = ParameterModifier.None; 
	}
  break;
case 171:
#line 1463 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 172:
#line 1467 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		ParameterModifier p2 = (ParameterModifier)yyVals[0+yyTop];
  		ParameterModifier mod = (ParameterModifier)yyVals[-1+yyTop] | p2;
  		if (((ParameterModifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~ParameterModifier.This) {
  				case ParameterModifier.Ref:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case ParameterModifier.Out:
				report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 				break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 173:
#line 1491 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));

	  	yyVal = ParameterModifier.Ref;
	  }
  break;
case 174:
#line 1498 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	 		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));

	 	yyVal = ParameterModifier.Out;
	  }
  break;
case 175:
#line 1505 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	 		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));


		yyVal = ParameterModifier.This;
	  }
  break;
case 176:
#line 1516 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 177:
#line 1521 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (ParameterModifier) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 178:
#line 1528 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], GetLocation(yyVals[-2+yyTop]));
	  }
  break;
case 179:
#line 1536 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ParameterModifier.Params;
	  }
  break;
case 180:
#line 1540 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		ParameterModifier mod = (ParameterModifier)yyVals[0+yyTop];
		if ((mod & ParameterModifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	mod |=  ParameterModifier.Params;
	  }
  break;
case 181:
#line 1550 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), ParameterModifier.Params);
	  }
  break;
case 182:
#line 1560 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }
  break;
case 183:
#line 1566 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new PropertyDeclaration (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		
		lexer.PropertyParsing = true;
	  }
  break;
case 184:
#line 1579 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }
  break;
case 185:
#line 1586 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 186:
#line 1590 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_property = null;
	  }
  break;
case 187:
#line 1597 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 188:
#line 1604 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		var property = new PropertyDeclaration (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);

		property.Getter = new GetterDeclaration (property, Modifiers.COMPILER_GENERATED, null, property.Location);
		(property.Getter  as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];

		if (current_container is InterfaceDeclaration) {
			report.Error (531, (property.Getter as MethodOrOperator).Block.StartLocation,
			"`{0}': interface members cannot have a definition", property.GetSignatureForError ());
		}

		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());

		current_type.AddMember (property);

		current_local_parameters = null;
	  }
  break;
case 190:
#line 1629 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 191:
#line 1635 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	((PropertyDeclaration)current_property).Initializer = (Expression) yyVals[-1+yyTop];

	end_block (GetLocation (yyVals[0+yyTop]));
		current_local_parameters = null;
	  }
  break;
case 194:
#line 1652 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 195:
#line 1656 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		IndexerDeclaration indexer = new IndexerDeclaration (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddMember (indexer);

		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (620, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
	  }
  break;
case 196:
#line 1681 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
 		lexer.PropertyParsing = false;
		current_local_parameters = null;

		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((IndexerDeclaration) current_property).ParameterInfo.CheckParameters ();
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
		
		current_property = null;		
	  }
  break;
case 197:
#line 1697 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {

	  }
  break;
case 198:
#line 1701 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_property.Getter = new IndexerGetterDeclaration (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);
		(current_property.Getter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
	  }
  break;
case 203:
#line 1713 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyToken == Token.CLOSE_BRACE) {
	 		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }
  break;
case 204:
#line 1727 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
	  
		if (current_property.Getter != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is IndexerDeclaration) {
			current_property.Getter = new IndexerGetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop], ((IndexerDeclaration)current_property).ParameterInfo.Clone (),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Getter = new GetterDeclaration (current_property,
				(Modifiers) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = (current_property.Getter as MethodOrOperator).ParameterInfo;	  
		lexer.PropertyParsing = false;
	  }
  break;
case 205:
#line 1746 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyVals[0+yyTop] != null) {
	  	 (current_property.Getter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container is InterfaceDeclaration) {
				report.Error (531,  (current_property.Getter as MethodOrOperator).Block.StartLocation,
					"`{0}': interface members cannot have a definition",  (current_property.Getter as MethodOrOperator).GetSignatureForError ());
			}

		} 
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 206:
#line 1768 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {

		if (current_property.Setter != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is IndexerDeclaration) {
			current_property.Setter = new IndexerSetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop],
			ParametersCompiled.MergeGenerated (compiler,
				((IndexerDeclaration)current_property).ParameterInfo, true, new Parameter (
				current_property.TypeExpression, "value", ParameterModifier.None, null, GetLocation (yyVals[0+yyTop]))),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Setter = new SetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = (current_property.Setter as MethodOrOperator).ParameterInfo;	
		lexer.PropertyParsing = false;
	  }
  break;
case 207:
#line 1790 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {		
			(current_property.Setter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
			report.Error (531, (current_property.Setter as MethodOrOperator).Block.StartLocation,
					"`{0}': interface members cannot have a definition", (current_property.Setter as MethodOrOperator).GetSignatureForError ());
		}
	}

		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 209:
#line 1813 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 210:
#line 1817 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }
  break;
case 211:
#line 1828 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 212:
#line 1832 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;
		push_current_container (new InterfaceDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], GetLocation(yyVals[-2+yyTop])));
	  }
  break;
case 213:
#line 1838 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 214:
#line 1852 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;	  
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 215:
#line 1858 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 216:
#line 1862 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 219:
#line 1874 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 220:
#line 1879 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 221:
#line 1887 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 222:
#line 1891 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 227:
#line 1899 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 228:
#line 1903 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 229:
#line 1907 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 230:
#line 1914 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 231:
#line 1917 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		OperatorDeclarationInfo decl = (OperatorDeclarationInfo) yyVals[-2+yyTop];
		if (decl != null) {
			OperatorDeclaration op = new OperatorDeclaration (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (VSharpAttributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters ();

		if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddMember (op);


		
	}
		
		current_local_parameters = null;
	  }
  break;
case 233:
#line 1947 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 234:
#line 1955 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
		if ((VSC.TypeSystem.Resolver.OperatorType ) yyVals[-1+yyTop] ==VSC.TypeSystem.Resolver.OperatorType.Is)
			valid_param_mod |= ParameterModifierType.Out;
	  }
  break;
case 235:
#line 1961 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		VSC.TypeSystem.Resolver.OperatorType  op = (VSC.TypeSystem.Resolver.OperatorType ) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == VSC.TypeSystem.Resolver.OperatorType.Addition)
				op = VSC.TypeSystem.Resolver.OperatorType.UnaryPlus;
			else if (op == VSC.TypeSystem.Resolver.OperatorType.Subtraction)
			op = VSC.TypeSystem.Resolver.OperatorType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
			report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					VSC.TypeSystem.Resolver.VSharpResolver.GetMetadataName (op));
			}
		} else if (op ==VSC.TypeSystem.Resolver.OperatorType.Is) {
			/* TODO: Special checks for is operator*/
		} else {
		if (p_count == 1) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
			report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					VSC.TypeSystem.Resolver.VSharpResolver.GetMetadataName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclarationInfo (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
	  }
  break;
case 237:
#line 2006 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LogicalNot; }
  break;
case 238:
#line 2007 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.OnesComplement;  }
  break;
case 239:
#line 2008 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Increment;}
  break;
case 240:
#line 2009 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Decrement; }
  break;
case 241:
#line 2010 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.True; }
  break;
case 242:
#line 2011 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.False;}
  break;
case 243:
#line 2013 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Addition;  }
  break;
case 244:
#line 2014 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Subtraction; }
  break;
case 245:
#line 2016 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Multiply; 	 }
  break;
case 246:
#line 2017 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {  yyVal = VSC.TypeSystem.Resolver.OperatorType.Division; }
  break;
case 247:
#line 2018 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Modulus;  }
  break;
case 248:
#line 2019 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.BitwiseAnd; 	 }
  break;
case 249:
#line 2020 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.BitwiseOr; 	}
  break;
case 250:
#line 2021 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.ExclusiveOr;	 }
  break;
case 251:
#line 2022 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LeftShift; 	 }
  break;
case 252:
#line 2023 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.RightShift;  }
  break;
case 253:
#line 2024 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Equality;}
  break;
case 254:
#line 2025 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Inequality;	}
  break;
case 255:
#line 2026 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.GreaterThan;}
  break;
case 256:
#line 2027 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LessThan; 	 }
  break;
case 257:
#line 2028 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.GreaterThanOrEqual; 	 }
  break;
case 258:
#line 2029 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LessThanOrEqual; 	}
  break;
case 259:
#line 2031 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = VSC.TypeSystem.Resolver.OperatorType.Is;
	  }
  break;
case 260:
#line 2038 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 261:
#line 2042 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `implicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

	yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 262:
#line 2060 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 263:
#line 2064 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

	if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `explicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
	}

		yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 264:
#line 2082 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 265:
#line 2088 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 266:
#line 2098 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		ConstructorDeclaration c = (ConstructorDeclaration) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 267:
#line 2115 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 268:
#line 2124 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
	
		var mods = (Modifiers) yyVals[-5+yyTop];
		string ctor_name = (current_container.IsStatic || ((mods & Modifiers.STATIC) != 0))?ConstructorDeclaration.TypeConstructorName : ConstructorDeclaration.ConstructorName;
		var c = new ConstructorDeclaration (current_type, ctor_name, mods, (VSharpAttributes) yyVals[-6+yyTop], current_local_parameters, GetLocation(yyVals[-4+yyTop]));

	 if ((mods & Modifiers.STATIC) != 0) {
		if (!current_local_parameters.IsEmpty) {
				report.Error (132, c.Location, "`{0}': The static constructor must be parameterless",
					c.GetSignatureForError ());
			}

			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		} else {
			if (current_type is StructDeclaration && current_local_parameters.IsEmpty) {
			
				if ((mods & Modifiers.PUBLIC) == 0) {
					report.Error (8075, c.Location, "`{0}': Structs parameterless instance constructor must be public", c.GetSignatureForError ());
				}
		}
	}

	current_type.AddMember (c);
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
	/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }
  break;
case 269:
#line 2163 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			var c = (ConstructorDeclaration) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 271:
#line 2181 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { current_block = null; yyVal = null; 	}
  break;
case 274:
#line 2191 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 275:
#line 2195 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
	yyVal = new ConstructorSuperInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 276:
#line 2200 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 277:
#line 2204 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorSelfInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 278:
#line 2209 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorSelfInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 279:
#line 2214 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 280:
#line 2222 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
			}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 281:
#line 2231 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 if (!(current_container is ClassDeclaration)){
			report.Error (575, GetLocation(yyVals[-4+yyTop]), "Only class types can contain destructor");
		}
		
		DestructorDeclaration d = new DestructorDeclaration (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (VSharpAttributes) yyVals[-7+yyTop], GetLocation(yyVals[-4+yyTop]));
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);

		current_local_parameters = null;
	  }
  break;
case 282:
#line 2253 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_event = new EventDeclaration (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
	
		lexer.EventParsing = true;
	  }
  break;
case 283:
#line 2260 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (current_container is InterfaceDeclaration)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }
  break;
case 284:
#line 2267 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		

	  	current_event = null;	
		current_local_parameters = null;
	  }
  break;
case 285:
#line 2280 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-4+yyTop]));
	  }
  break;
case 286:
#line 2290 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_event_field.AddDeclarator ((FieldDeclarator) $1);*/
	  }
  break;
case 287:
#line 2294 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_event_field.AddDeclarator ((FieldDeclarator) $2);*/
	  }
  break;
case 290:
#line 2304 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 291:
#line 2309 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 292:
#line 2314 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }
  break;
case 293:
#line 2322 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  
	  	Modifiers mods = (Modifiers)yyVals[-1+yyTop];
	 	current_event.AddAccessor = new AddEventAccessor (current_event, mods,(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = (current_event.AddAccessor as MethodOrOperator).ParameterInfo;
		
	
		lexer.EventParsing = false;		
	  }
  break;
case 294:
#line 2332 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.EventParsing = true;
	  
		(current_event.AddAccessor as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
		report.Error (531, (current_event.AddAccessor as MethodOrOperator).Block.StartLocation,
			"`{0}': interface members cannot have a definition", (current_event.AddAccessor as MethodOrOperator).GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 295:
#line 2348 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {	
	   	Modifiers mods = (Modifiers)yyVals[-1+yyTop];
	  	current_event.RemoveAccessor = new RemoveEventAccessor(current_event, mods, (VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters =( current_event.RemoveAccessor as MethodOrOperator).ParameterInfo;

		lexer.EventParsing = false;		
	  }
  break;
case 296:
#line 2356 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.EventParsing = true;
	  
	 ( current_event.RemoveAccessor as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
			report.Error (531, ( current_event.RemoveAccessor as MethodOrOperator).Block.StartLocation,
				"`{0}': interface members cannot have a definition", ( current_event.RemoveAccessor as MethodOrOperator).GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 297:
#line 2372 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 299:
#line 2381 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_type.UnattachedAttributes = (VSharpAttributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }
  break;
case 300:
#line 2392 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1519, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");
		lexer.putback ('}');

	 	lexer.parsing_generic_declaration = false;
		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		current_field = new FieldDeclaration (current_type, type, (Modifiers) yyVals[-2+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-3+yyTop]);
		current_type.AddMember(current_field);
		yyVal = current_field;
	  }
  break;
case 301:
#line 2410 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }
  break;
case 302:
#line 2415 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new EnumDeclaration (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (VSharpAttributes) yyVals[-6+yyTop]));
	
	  }
  break;
case 303:
#line 2428 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
	  
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 304:
#line 2436 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
		
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

	/*		if (doc_support)*/
	/*				em.DocComment = ev.DocComment;*/

		yyVal = pop_current_class ();
	  }
  break;
case 306:
#line 2454 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 307:
#line 2458 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }
  break;
case 312:
#line 2473 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = yyVals[0+yyTop];
  }
  break;
case 313:
#line 2480 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	var lt = (LocatedToken) yyVals[0+yyTop];
	 	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-1+yyTop]);
	  	((EnumDeclaration) current_type).AddMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 314:
#line 2493 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }
  break;
case 315:
#line 2501 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-4+yyTop]);
	  	em.ConstantValue = (IConstantValue) yyVals[0+yyTop];
	  	((EnumDeclaration) current_type).AddMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }
  break;
case 316:
#line 2515 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-2+yyTop]);
	  	((EnumDeclaration) current_type).AddMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 318:
#line 2538 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 319:
#line 2542 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];
		DelegateDeclaration del = new DelegateDeclaration (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (VSharpAttributes) yyVals[-8+yyTop]);
		p.CheckParameters ();
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 320:
#line 2552 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 321:
#line 2556 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
		current_delegate.SetConstraints ((List<TypeParameterConstraints>) yyVals[-2+yyTop]);

		yyVal = current_delegate;

		current_delegate = null;
	  }
  break;
case 323:
#line 2574 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  			yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 325:
#line 2582 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new QualifiedAlias(lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 326:
#line 2588 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  	    var lt1 = (LocatedToken) yyVals[-2+yyTop];
    	var lt2 = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 328:
#line 2598 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	
	  }
  break;
case 329:
#line 2604 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 330:
#line 2612 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 331:
#line 2617 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 333:
#line 2629 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
			yyVal = yyVals[-1+yyTop];
	  }
  break;
case 334:
#line 2633 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 335:
#line 2641 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	
	  }
  break;
case 336:
#line 2648 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 337:
#line 2660 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 338:
#line 2664 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 339:
#line 2673 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	MemberName mn = (MemberName)yyVals[0+yyTop];
	 	if (mn.TypeParameters != null)
	 		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
				mn.GetSignatureForError ()));
	  }
  break;
case 341:
#line 2684 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (TypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }
  break;
case 342:
#line 2693 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDeclaration.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 343:
#line 2698 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDeclaration.DefaultIndexerName, null, (TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 344:
#line 2706 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	  }
  break;
case 345:
#line 2711 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
	  }
  break;
case 346:
#line 2718 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((TypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	
	  }
  break;
case 348:
#line 2728 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 349:
#line 2735 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var tparams = new TypeParameters ();
		tparams.Add ((UnresolvedTypeParameterSpec)yyVals[0+yyTop]);
		yyVal = tparams;
	  }
  break;
case 350:
#line 2741 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((UnresolvedTypeParameterSpec)yyVals[0+yyTop]);
		yyVal = tparams;
		
	  }
  break;
case 351:
#line 2751 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];
		if(type_parameter_symbol_kind == SymbolKind.Method && is_inheritance_impl)
		   yyVal = new MethodTypeParameterWithInheritedConstraints(0, lt.Value);
		else
			yyVal = new UnresolvedTypeParameterSpec (type_parameter_symbol_kind,0,lt.Value);
  	  }
  break;
case 352:
#line 2759 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new UnresolvedTypeParameterSpec (type_parameter_symbol_kind, 0);
  	  }
  break;
case 354:
#line 2775 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new TypeExpression (KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 355:
#line 2782 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 361:
#line 2803 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
	yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 363:
#line 2812 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 364:
#line 2819 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) 
			yyVal = new ComposedType ((TypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		 else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarTypeExpression (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }
  break;
case 365:
#line 2831 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType ((TypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 367:
#line 2839 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error(1547, GetLocation (yyVals[0+yyTop]), "Keyword `void' cannot be used in this context");
		yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 368:
#line 2847 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 369:
#line 2852 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 370:
#line 2856 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType (new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 371:
#line 2863 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 372:
#line 2869 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
	
		yyVal = types;
	  }
  break;
case 373:
#line 2879 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is ComposedType)
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedType)yyVals[0+yyTop]).GetSignatureForError ());
	
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 374:
#line 2892 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 375:
#line 2893 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 376:
#line 2894 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Boolean, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 377:
#line 2895 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Single, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 378:
#line 2896 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Double, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 380:
#line 2901 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.SByte, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 381:
#line 2902 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Byte, GetLocation (yyVals[0+yyTop]));	}
  break;
case 382:
#line 2903 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int16, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 383:
#line 2904 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt16, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 384:
#line 2905 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int32, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 385:
#line 2906 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt32, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 386:
#line 2907 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int64, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 387:
#line 2908 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt64, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 388:
#line 2909 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Char, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 413:
#line 2948 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		 yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 414:
#line 2954 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 	yyVal = new BoolLiteral (true, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 415:
#line 2955 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 	yyVal = new BoolLiteral (false, GetLocation (yyVals[0+yyTop]));	}
  break;
case 416:
#line 2960 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[-2+yyTop], (List<Expression>) yyVals[-1+yyTop], (StringLiteral) yyVals[0+yyTop]);
	  }
  break;
case 417:
#line 2964 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[0+yyTop], null, null);
	  }
  break;
case 418:
#line 2971 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = new List<Expression> ();
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 419:
#line 2977 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((StringLiteral) yyVals[-1+yyTop]);
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 420:
#line 2987 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 421:
#line 2991 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-2+yyTop]) {
			Alignment = (Expression)yyVals[0+yyTop]
		};
	  }
  break;
case 422:
#line 2997 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 423:
#line 3001 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-3+yyTop]) {
			Format = (string)yyVals[0+yyTop]
		};
	  }
  break;
case 424:
#line 3009 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 425:
#line 3013 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-5+yyTop]) {
			Alignment = (Expression)yyVals[-3+yyTop],
			Format = (string) yyVals[0+yyTop]
		};
	  }
  break;
case 430:
#line 3046 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 431:
#line 3050 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 432:
#line 3057 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 433:
#line 3062 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 434:
#line 3067 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 435:
#line 3072 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 436:
#line 3077 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SuperReference (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 437:
#line 3082 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAlias(lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location, NameLookupMode.Expression);
	  }
  break;
case 438:
#line 3089 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location, NameLookupMode.Expression);
	  }
  break;
case 439:
#line 3099 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 440:
#line 3103 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 441:
#line 3108 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Invocation ((Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 442:
#line 3115 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 	yyVal = null; 	}
  break;
case 444:
#line 3121 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (GetLocation (yyVals[-2+yyTop]));
	  	} else {
			yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	}

	  }
  break;
case 445:
#line 3130 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 446:
#line 3136 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {	 yyVal = null; 	}
  break;
case 447:
#line 3138 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {		yyVal = yyVals[0+yyTop];}
  break;
case 448:
#line 3143 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 449:
#line 3149 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 450:
#line 3154 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 451:
#line 3162 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 452:
#line 3167 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-1+yyTop] == null)
			yyVal = new CollectionElementInitializer (GetLocation (yyVals[-2+yyTop]));
		else {
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		}
	  }
  break;
case 453:
#line 3175 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 456:
#line 3187 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; 	 }
  break;
case 458:
#line 3193 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 459:
#line 3199 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 460:
#line 3208 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
		if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }
  break;
case 461:
#line 3222 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 462:
#line 3229 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }
  break;
case 463:
#line 3237 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation(yyVals[0+yyTop]));
	  }
  break;
case 467:
#line 3250 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 468:
#line 3254 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 469:
#line 3258 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 470:
#line 3262 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 471:
#line 3269 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 472:
#line 3274 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 473:
#line 3278 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnCheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 474:
#line 3283 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }
  break;
case 475:
#line 3290 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
	var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-3+yyTop], lv) {
		Initializer = (Expression) yyVals[0+yyTop]
		};
	  }
  break;
case 477:
#line 3306 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 478:
#line 3310 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};
	  }
  break;
case 479:
#line 3316 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 480:
#line 3321 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 481:
#line 3329 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 482:
#line 3335 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 483:
#line 3344 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 484:
#line 3350 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments args = (Arguments) yyVals[-2+yyTop];
	if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }
  break;
case 485:
#line 3362 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 487:
#line 3370 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SelfReference (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 488:
#line 3377 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	yyVal = new ElementAccess (new SuperReference (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 489:
#line 3381 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 490:
#line 3389 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 491:
#line 3396 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 492:
#line 3403 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {			
			yyVal = new NewInitializeExpression ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new NewExpression ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
	  }
  break;
case 493:
#line 3412 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new NewInitializeExpression ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 494:
#line 3421 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 495:
#line 3428 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 496:
#line 3435 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 497:
#line 3439 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 498:
#line 3444 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new NewExpression ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 499:
#line 3452 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 500:
#line 3456 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 501:
#line 3464 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new NewAnonymousTypeExpression ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 504:
#line 3475 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 yyVal = null; 
	 }
  break;
case 506:
#line 3483 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 507:
#line 3489 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);

	  	yyVal = a;
	  }
  break;
case 508:
#line 3499 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  }
  break;
case 509:
#line 3504 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }
  break;
case 510:
#line 3510 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }
  break;
case 511:
#line 3515 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }
  break;
case 515:
#line 3530 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 516:
#line 3538 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		
	  }
  break;
case 517:
#line 3543 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 518:
#line 3550 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = 2;
	  }
  break;
case 519:
#line 3554 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 520:
#line 3561 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = null;
	  }
  break;
case 521:
#line 3565 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 522:
#line 3572 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		yyVal = ai;
	  }
  break;
case 523:
#line 3578 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
	
		yyVal = ai;
	  }
  break;
case 524:
#line 3588 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 525:
#line 3594 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 526:
#line 3603 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new TypeOfExpression ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 528:
#line 3611 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }
  break;
case 529:
#line 3619 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 530:
#line 3626 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = lt;		
	  }
  break;
case 531:
#line 3634 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = new SizeOfExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 532:
#line 3638 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new SizeOfExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 533:
#line 3647 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 534:
#line 3651 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 535:
#line 3660 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnCheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 536:
#line 3664 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 537:
#line 3673 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new IndirectionExpression ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 538:
#line 3682 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_anonymous (false, (ParametersCompiled) $2, false, GetLocation ($1));*/
	  }
  break;
case 539:
#line 3686 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $4);*/
		/*if ((ParametersCompiled) $2 != ParametersCompiled.Undefined) {*/
		/*	lbag.AddLocation ($$, GetLocation ($1), PopLocation (), PopLocation ());*/
		/*} else {*/
		/*	lbag.AddLocation ($$, GetLocation ($1));*/
	/*	}*/
	  }
  break;
case 540:
#line 3695 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_anonymous (false, (ParametersCompiled) $3, true, GetLocation ($1));*/
	  }
  break;
case 541:
#line 3699 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $5);*/
		
	/*	if ((ParametersCompiled) $3 != ParametersCompiled.Undefined) {*/
	/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2), PopLocation (), PopLocation ());*/
	/*	} else {*/
	/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2));*/
	/*	}*/
	  }
  break;
case 542:
#line 3712 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = ParametersCompiled.Undefined;*/
	  }
  break;
case 544:
#line 3720 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 545:
#line 3724 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/
	 /* 	$$ = $3;*/
	  /*	PushLocation (GetLocation ($3));*/
	 /* 	PushLocation (GetLocation ($1));*/
	
	  }
  break;
case 546:
#line 3735 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 548:
#line 3743 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 549:
#line 3747 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 550:
#line 3751 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CastExpression ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 551:
#line 3755 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 552:
#line 3760 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 553:
#line 3765 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new CastExpression ((FullNamedExpression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 555:
#line 3778 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	 	yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 556:
#line 3782 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 557:
#line 3786 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 558:
#line 3790 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
#line 3794 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new IndirectionExpression ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3798 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3802 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		Error_SyntaxError (yyToken);

	  	yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 562:
#line 3808 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		Error_SyntaxError (yyToken);

		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 3814 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 564:
#line 3820 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 565:
#line 3826 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new IndirectionExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 566:
#line 3832 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 568:
#line 3842 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 569:
#line 3846 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 570:
#line 3850 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 571:
#line 3854 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 572:
#line 3859 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 573:
#line 3865 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 575:
#line 3875 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);

	  }
  break;
case 576:
#line 3880 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 577:
#line 3884 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 578:
#line 3889 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 579:
#line 3894 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new AsExpression ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 580:
#line 3898 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var is_expr = new IsExpression ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		yyVal = is_expr;
	  }
  break;
case 581:
#line 3903 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new AsExpression ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 582:
#line 3908 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new IsExpression ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 585:
#line 3922 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 586:
#line 3926 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 587:
#line 3930 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 588:
#line 3936 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 590:
#line 3945 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = new BinaryExpression (BinaryOperatorType.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 591:
#line 3949 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 592:
#line 3953 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 593:
#line 3957 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 594:
#line 3961 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		 yyVal = new BinaryExpression (BinaryOperatorType.LessThan, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 595:
#line 3967 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThan, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 596:
#line 3973 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 597:
#line 3979 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 599:
#line 3989 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 600:
#line 3993 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 601:
#line 3997 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Equality, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 602:
#line 4002 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Inequality, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 604:
#line 4012 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 605:
#line 4016 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 607:
#line 4026 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 608:
#line 4030 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 610:
#line 4040 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 611:
#line 4044 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 613:
#line 4054 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 614:
#line 4058 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 616:
#line 4068 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 617:
#line 4072 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LogicalOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 619:
#line 4082 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {		
		yyVal = new BinaryExpression (BinaryOperatorType.NullCoalescing, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 621:
#line 4090 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 622:
#line 4094 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		 yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 623:
#line 4100 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 624:
#line 4106 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (Token.CLOSE_BRACE);

		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lexer.putback ('}');
	  }
  break;
case 625:
#line 4116 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 626:
#line 4120 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 627:
#line 4124 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 628:
#line 4128 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 629:
#line 4132 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 630:
#line 4136 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 631:
#line 4140 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 632:
#line 4144 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 633:
#line 4148 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 634:
#line 4152 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 635:
#line 4156 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 636:
#line 4164 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/* var pars = new List<Parameter> (4);*/
	/*	pars.Add ((Parameter) $1);*/
	/*	parameterListCommas.Clear ();*/
	/*	$$ = pars;*/
	  }
  break;
case 637:
#line 4171 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var pars = (List<Parameter>) $1;*/
	/*	Parameter p = (Parameter)$3;*/
	/*	if (pars[0].GetType () != p.GetType ()) {*/
	/*		report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");*/
	/*	}*/
		
	/*	pars.Add (p);*/
		/*parameterListCommas.Add (GetLocation ($2));*/

		/*$$ = pars;*/
	  }
  break;
case 638:
#line 4187 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $3;*/

	/*	$$ = new Parameter ((FullNamedExpression) $2, lt.Value, (Parameter.Modifier) $1, null, lt.Location);*/
	  }
  break;
case 639:
#line 4193 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;*/

	/*	$$ = new Parameter ((FullNamedExpression) $1, lt.Value, Parameter.Modifier.NONE, null, lt.Location);*/
	  }
  break;
case 640:
#line 4199 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var lt = (LocatedToken) $1;*/
	/*	$$ = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
	  }
  break;
case 641:
#line 4204 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var lt = (LocatedToken) Error_AwaitAsIdentifier ($1);*/
	/*	$$ = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
	  }
  break;
case 642:
#line 4211 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = ParametersCompiled.EmptyReadOnlyParameters; */
	}
  break;
case 643:
#line 4213 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*	var pars_list = (List<Parameter>) $1;*/
	/*	$$ = new ParametersCompiled (pars_list.ToArray ());*/
	/*	lbag.AddLocation ($$, parameterListCommas);*/
	  }
  break;
case 644:
#line 4221 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_block (Location.Null);*/
	  }
  break;
case 645:
#line 4225 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Block b = end_block (Location.Null);*/
	/*	b.IsCompilerGenerated = true;*/
	/*	b.AddStatement (new ContextualReturn ((Expression) $2));*/
	/*	$$ = b;*/
	  }
  break;
case 647:
#line 4233 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
	/*	Block b = end_block (Location.Null);*/
	/*	b.IsCompilerGenerated = true;*/

	/*	Error_SyntaxError (yyToken);*/
/*		$$ = null;*/
	  }
  break;
case 649:
#line 4247 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 650:
#line 4255 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;	*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
		/*start_anonymous (true, new ParametersCompiled (p), false, lt.Location);*/
	  }
  break;
case 651:
#line 4261 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $4);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 652:
#line 4266 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) Error_AwaitAsIdentifier ($1);*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
/*		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);*/
	  }
  break;
case 653:
#line 4272 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $4);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 654:
#line 4277 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		var lt = (LocatedToken) $2;*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
/*		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);*/
	  }
  break;
case 655:
#line 4283 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $5);*/
/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 656:
#line 4288 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 657:
#line 4292 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	valid_param_mod = 0;*/
	/*	start_anonymous (true, (ParametersCompiled) $3, false, GetLocation ($1));*/
	  }
  break;
case 658:
#line 4297 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $7);*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($4), GetLocation ($5));*/
	  }
  break;
case 659:
#line 4302 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  */
	  }
  break;
case 660:
#line 4306 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	valid_param_mod = 0;*/
	/*	start_anonymous (true, (ParametersCompiled) $4, true, GetLocation ($1));*/
	  }
  break;
case 661:
#line 4311 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $8);*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2), GetLocation ($5), GetLocation ($6));*/
	  }
  break;
case 666:
#line 4326 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new ArglistAccess (GetLocation ($1));*/
	  }
  break;
case 668:
#line 4338 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 669:
#line 4345 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 671:
#line 4353 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 672:
#line 4360 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 673:
#line 4364 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = null;
	  }
  break;
case 674:
#line 4368 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 675:
#line 4372 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 676:
#line 4376 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 677:
#line 4381 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }
  break;
case 678:
#line 4397 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 679:
#line 4401 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;

		ClassDeclaration c = new ClassDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop],GetLocation(yyVals[-2+yyTop]) );		
		push_current_container (c);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }
  break;
case 680:
#line 4410 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

	if (yyVals[-1+yyTop] != null)
		current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 681:
#line 4428 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 682:
#line 4434 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = pop_current_class ();
	  }
  break;
case 683:
#line 4441 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 684:
#line 4443 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[0+yyTop];  }
  break;
case 685:
#line 4448 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }
  break;
case 686:
#line 4453 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 688:
#line 4461 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
			"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
		((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }
  break;
case 689:
#line 4480 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.NEW;	
		/*if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation ($1), "Keyword `new' is not allowed on namespace elements");*/
	  }
  break;
case 690:
#line 4486 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {	yyVal = Modifiers.PUBLIC;  }
  break;
case 691:
#line 4488 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.PROTECTED;
	
	  }
  break;
case 692:
#line 4493 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.INTERNAL;

	  }
  break;
case 693:
#line 4498 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.PRIVATE;
	  }
  break;
case 694:
#line 4502 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.ABSTRACT;
	  }
  break;
case 695:
#line 4506 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.SEALED;
	  }
  break;
case 696:
#line 4510 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.STATIC;
	  }
  break;
case 697:
#line 4514 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = Modifiers.READONLY;
	  }
  break;
case 698:
#line 4518 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.VIRTUAL;
	  }
  break;
case 699:
#line 4522 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.OVERRIDE;
	  }
  break;
case 700:
#line 4526 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.EXTERN;
	  }
  break;
case 703:
#line 4538 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 704:
#line 4542 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }
  break;
case 706:
#line 4552 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 707:
#line 4559 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = new List<TypeParameterConstraints> (1);
		constraints.Add ((TypeParameterConstraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 708:
#line 4565 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = (List<TypeParameterConstraints>) yyVals[-1+yyTop];
		TypeParameterConstraints new_constraint = (TypeParameterConstraints)yyVals[0+yyTop];

		foreach (TypeParameterConstraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
				"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
		}
	}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 709:
#line 4584 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new TypeParameterConstraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	
	  }
  break;
case 710:
#line 4590 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new TypeParameterConstraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 711:
#line 4600 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 712:
#line 4606 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
	var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
		} else {
		 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);

		yyVal = constraints;
	  }
  break;
case 713:
#line 4633 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is ComposedType)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedType)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 714:
#line 4640 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 715:
#line 4644 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 716:
#line 4648 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 717:
#line 4668 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	/*	start_block (GetLocation ($1));*/
	  }
  break;
case 718:
#line 4673 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $4;*/
	  }
  break;
case 719:
#line 4680 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	--lexer.parsing_block;
	/*	$$ = end_block (GetLocation ($1));*/
	  }
  break;
case 720:
#line 4685 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	--lexer.parsing_block;
	/*	$$ = end_block (lexer.Location);*/
	  }
  break;
case 721:
#line 4694 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
/*		current_block.StartLocation = GetLocation ($1);*/
	  }
  break;
case 722:
#line 4699 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	/*	$$ = end_block (GetLocation ($4));*/
	  }
  break;
case 723:
#line 4703 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		report.Error (1525, GetLocation ($1), "Unexpected symbol '}', expected '{'");*/
	/*	lexer.putback ('}');*/
	/*	$$ = end_block (GetLocation ($1));*/
	  }
  break;
case 724:
#line 4712 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	/*	current_block.StartLocation = GetLocation ($1);*/
	  }
  break;
case 725:
#line 4717 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	/*	$$ = end_block (GetLocation ($4));*/
	  }
  break;
case 730:
#line 4735 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		current_block.AddStatement ((Statement) $1);*/
	  }
  break;
case 731:
#line 4739 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		current_block.AddStatement ((Statement) $1);*/
	  }
  break;
case 733:
#line 4745 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	var lt =(LocatedToken) $1;
		var sn = new SimpleName (lt.Value, lt.Location);
		current_block.AddStatement(new StatementErrorExpression (sn));
		$$ = null;*/
	}
  break;
case 734:
#line 4754 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 737:
#line 4773 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_block.AddStatement ((Statement) $1);*/
	  }
  break;
case 738:
#line 4777 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_block.AddStatement ((Statement) $1);*/
	  }
  break;
case 767:
#line 4818 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 768:
#line 4823 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 769:
#line 4828 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new EmptyStatement (GetLocation ($1));*/
	  }
  break;
case 770:
#line 4836 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
	/*	$$ = new EmptyStatement (lexer.Location);*/
	  }
  break;
case 771:
#line 4844 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation ($2));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);*/
	  }
  break;
case 774:
#line 4857 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($1 is VarExpr)
			$1 = new SimpleName ("var", ((VarExpr) $1).Location);
	  
		$$ = new ComposedCast ((FullNamedExpression) $1, (ComposedTypeSpecifier) $2);*/
	  }
  break;
case 775:
#line 4873 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*
		// Ok, the above "primary_expression" is there to get rid of
		// both reduce/reduce and shift/reduces in the grammar, it should
		// really just be "type_name".  If you use type_name, a reduce/reduce
		// creeps up.  If you use namespace_or_type_name (which is all we need
		// really) two shift/reduces appear.
		// 

		// So the super-trick is that primary_expression
		// can only be either a SimpleName or a MemberAccess. 
		// The MemberAccess case arises when you have a fully qualified type-name like :
		// Foo.Bar.Blah i;
		// SimpleName is when you have
		// Blah i;
		
		var expr = (ATypeNameExpression) $1;
		if ($2 == null) {
			if (expr.Name == "var" && expr is SimpleName)
				$$ = new VarExpr (expr.Location);
			else
				$$ = $1;
		} else {
			$$ = new ComposedCast (expr, (ComposedTypeSpecifier) $2);
		}*/
	  }
  break;
case 776:
#line 4900 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var expr = (ATypeNameExpression) $1;*/
	/*	$$ = new ComposedCast (expr, (ComposedTypeSpecifier) $2);*/
	  }
  break;
case 780:
#line 4911 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	 	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 781:
#line 4919 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 783:
#line 4927 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /* 	$$ = Error_AwaitAsIdentifier ($1);*/
	  }
  break;
case 784:
#line 4934 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) $1, li);*/
	  }
  break;
case 785:
#line 4941 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = current_variable;
		current_variable = null;
		if ($4 != null)
			lbag.AddLocation ($$, PopLocation (), GetLocation ($6));
		else
			lbag.AddLocation ($$, GetLocation ($6));*/
	  }
  break;
case 786:
#line 4950 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $3;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) $2, li);*/
	  }
  break;
case 787:
#line 4957 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if (current_variable.Initializer != null) {
			lbag.AddLocation (current_variable, GetLocation ($1), savedLocation, GetLocation ($7));
		} else {
			lbag.AddLocation (current_variable, GetLocation ($1), GetLocation ($7));
		}
		$$ = current_variable;;
		current_variable = null;*/
	  }
  break;
case 789:
#line 4970 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* Redundant, but wont regress*/
		report.Error (1525, lexer.Location, "Unexpected symbol }");
		lexer.putback ('}');
		/*$$ = $1;*/
	  }
  break;
case 791:
#line 4981 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_variable.Initializer = (Expression) $2;
		PushLocation (GetLocation ($1));
		$$ = current_variable;*/
	  }
  break;
case 792:
#line 4987 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }
  break;
case 796:
#line 5005 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}*/
	  }
  break;
case 799:
#line 5020 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation ($1));*/
	  }
  break;
case 800:
#line 5029 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) $4);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 801:
#line 5041 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (145, lexer.Location, "A const field requires a value to be provided");*/
	  }
  break;
case 802:
#line 5045 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	savedLocation = GetLocation ($1);
		current_variable.Initializer = (Expression) $2;*/
	  }
  break;
case 807:
#line 5063 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) $4);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 809:
#line 5076 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new StackAlloc ((Expression) $2, (Expression) $4, GetLocation ($1));*/
	/*	lbag.AddLocation ($$, GetLocation ($3), GetLocation ($5));*/
	  }
  break;
case 810:
#line 5081 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (1575, GetLocation ($1), "A stackalloc expression requires [] after type");*/
	/*	$$ = new StackAlloc ((Expression) $2, null, GetLocation ($1));		*/
	  }
  break;
case 811:
#line 5089 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $1;*/
	/*	lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 812:
#line 5093 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 813:
#line 5095 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $1;*/
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }
  break;
case 814:
#line 5103 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 815:
#line 5104 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 816:
#line 5113 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*ExpressionStatement s = $1 as ExpressionStatement;
		if (s == null) {
			var expr = $1 as Expression;
			$$ = new StatementErrorExpression (expr);
		} else {
			$$ = new StatementExpression (s);
		}*/
	  }
  break;
case 817:
#line 5126 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
	/*	$$ = new StatementExpression (new OptionalAssign (expr, lexer.Location));*/
	  }
  break;
case 818:
#line 5131 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		/*$$ = new EmptyStatement (GetLocation ($1));*/
	  }
  break;
case 821:
#line 5145 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
/*  if ($5 is EmptyStatement)
			Warning_EmptyStatement (GetLocation ($5));
		
		$$ = new If ((BooleanExpression) $3, (Statement) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 822:
#line 5154 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = new If ((BooleanExpression) $3, (Statement) $5, (Statement) $7, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4), GetLocation ($6));
		
		if ($5 is EmptyStatement)
			Warning_EmptyStatement (GetLocation ($5));
		if ($7 is EmptyStatement)
			Warning_EmptyStatement (GetLocation ($7));*/
	  }
  break;
case 823:
#line 5164 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
	/*	$$ = new If ((BooleanExpression) $3, null, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 824:
#line 5174 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_block (GetLocation ($5));*/
	  }
  break;
case 825:
#line 5178 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Switch ((Expression) $3, (ExplicitBlock) current_block.Explicit, GetLocation ($1));	
		end_block (GetLocation ($8));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4), GetLocation ($5), GetLocation ($8));*/
	  }
  break;
case 826:
#line 5184 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
	/*	$$ = new Switch ((Expression) $3, null, GetLocation ($1));	
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 827:
#line 5194 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); */
	  }
  break;
case 831:
#line 5204 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 833:
#line 5215 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*	  	var label = (SwitchLabel) $1;*/
/*	  	label.SectionStart = true;*/
/*		current_block.AddStatement (label);*/
	  }
  break;
case 834:
#line 5221 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	current_block.AddStatement ((Statement) $2);*/
	  }
  break;
case 835:
#line 5228 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/* 	$$ = new SwitchLabel ((Expression) $2, GetLocation ($1));*/
	 /*	lbag.AddLocation ($$, GetLocation ($3));*/
	 }
  break;
case 836:
#line 5233 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new SwitchLabel ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 837:
#line 5250 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new SwitchLabel (null, GetLocation ($1));*/
	  }
  break;
case 842:
#line 5264 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($5 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($5));
	  
		$$ = new While ((BooleanExpression) $3, (Statement) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 843:
#line 5272 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
	/*	$$ = new While ((BooleanExpression) $3, null, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 844:
#line 5282 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Do ((Statement) $2, (BooleanExpression) $5, GetLocation ($1), GetLocation ($3));*/
	/*	lbag.AddStatement ($$, GetLocation ($3), GetLocation ($4), GetLocation ($6), GetLocation ($7));*/
	  }
  break;
case 845:
#line 5287 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new Do ((Statement) $2, null, GetLocation ($1), Location.Null);*/
	  }
  break;
case 846:
#line 5292 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
	/*	$$ = new Do ((Statement) $2, (BooleanExpression) $5, GetLocation ($1), GetLocation ($3));
		lbag.AddStatement ($$, GetLocation ($3), GetLocation ($4));*/
	  }
  break;
case 847:
#line 5302 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation ($1));
		current_block.AddStatement (f);
		lbag.AddStatement (f, current_block.StartLocation);
		$$ = f;*/
	  }
  break;
case 848:
#line 5311 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $4;*/
	  }
  break;
case 849:
#line 5319 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*For f =  (For) $0;
		f.Initializer = (Statement) $1;
		lbag.AddLocation (f, GetLocation ($2));
		$$ = f;*/
	  }
  break;
case 850:
#line 5326 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $4;*/
	  }
  break;
case 851:
#line 5329 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (1525, GetLocation ($2), "Unexpected symbol ')', expected ';'");
		For f =  (For) $0;
		f.Initializer = (Statement) $1;
		lbag.AddLocation (f, GetLocation ($2));
		$$ = end_block (GetLocation ($2));*/
	}
  break;
case 852:
#line 5340 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	For f =  (For) $0;
		f.Condition = (BooleanExpression) $1;
		lbag.AddLocation (f, GetLocation ($2));
		$$ = f;*/
	  }
  break;
case 853:
#line 5347 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $4;*/
	  }
  break;
case 854:
#line 5351 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*report.Error (1525, GetLocation ($2), "Unexpected symbol ')', expected ';'");
		For f =  (For) $0;
		f.Condition = (BooleanExpression) $1;
		lbag.AddLocation (f, GetLocation ($2));
		$$ = end_block (GetLocation ($2));*/
	}
  break;
case 855:
#line 5363 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	For f =  (For) $0;
		f.Iterator = (Statement) $1;
		
		if ($3 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($3));
	  
		f.Statement = (Statement) $3;
		lbag.AddLocation (f, GetLocation ($2));

		$$ = end_block (GetLocation ($2));*/
	  }
  break;
case 856:
#line 5376 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = end_block (current_block.StartLocation);*/
	  }
  break;
case 857:
#line 5383 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = new EmptyStatement (lexer.Location); */
	}
  break;
case 859:
#line 5390 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $2;
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) $1, li);*/
	  }
  break;
case 860:
#line 5397 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = current_variable;
		if ($4 != null)
			lbag.AddLocation (current_variable, PopLocation ());

		current_variable = null;*/
	  }
  break;
case 862:
#line 5408 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* $$ = null;*/
	 }
  break;
case 864:
#line 5414 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = new EmptyStatement (lexer.Location); */
	}
  break;
case 868:
#line 5426 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /* 	var sl = $1 as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) $1, (Statement) $3);
			lbag.AddStatement (sl, GetLocation ($2));
	  	} else {
	  		sl.Add ((Statement) $3);
	  		lbag.AddLocation (sl, GetLocation ($2));
	  		
	  	}
	  		
		$$ = sl;*/
	  }
  break;
case 869:
#line 5443 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	report.Error (230, GetLocation ($1), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) $3, null, null, null, null, GetLocation ($1));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation ($2));
		$$ = end_block (GetLocation ($4));*/
	  }
  break;
case 870:
#line 5456 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	
	/*	start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) $4;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) $3, li, null, null, null, GetLocation ($1));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation ($2));
		$$ = end_block (GetLocation ($5));*/
	  }
  break;
case 871:
#line 5473 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) $4;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		$$ = li;*/
	  }
  break;
case 872:
#line 5483 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($9 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($9));
		
		Foreach f = new Foreach ((Expression) $3, (LocalVariable) $8, (Expression) $6, (Statement) $9, current_block, GetLocation ($1));
		lbag.AddStatement (f, GetLocation ($2), GetLocation ($5), GetLocation ($7));
		end_block (GetLocation ($7));
		
		$$ = f;*/
	  }
  break;
case 873:
#line 5494 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*start_block (GetLocation ($2));
		current_block.IsCompilerGenerated = true;
		var lt = $4 as LocatedToken;
		var li = lt != null ? new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location) : null;
		
		Foreach f = new Foreach ((Expression) $3, li, null, null, null, GetLocation ($1));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation ($2));
		$$ = end_block (GetLocation ($5));*/
	  }
  break;
case 874:
#line 5507 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Foreach f = new Foreach ((Expression) $3, null, null, null, null, GetLocation ($1));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation ($2));
		$$ = f;*/
	  }
  break;
case 881:
#line 5527 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Break (GetLocation ($1));*/
	/*	lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 882:
#line 5535 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new Continue (GetLocation ($1));*/
/*		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 883:
#line 5540 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
/*		$$ = new Continue (GetLocation ($1));*/
	  }
  break;
case 884:
#line 5548 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;
		$$ = new Goto (lt.Value, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($3));*/
	  }
  break;
case 885:
#line 5554 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new GotoCase ((Expression) $3, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 886:
#line 5559 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new GotoDefault (GetLocation ($1));*/
/*		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($3));*/
	  }
  break;
case 887:
#line 5567 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = new Return ((Expression) $2, GetLocation ($1));*/
/*		lbag.AddStatement ($$, GetLocation ($3));*/
	  }
  break;
case 888:
#line 5572 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new Return ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 889:
#line 5577 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
/*		$$ = new Return (null, GetLocation ($1));*/
	  }
  break;
case 890:
#line 5585 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Throw ((Expression) $2, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($3));*/
	  }
  break;
case 891:
#line 5590 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new Throw ((Expression) $2, GetLocation ($1));*/
	  }
  break;
case 892:
#line 5595 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	$$ = new Throw (null, GetLocation ($1));*/
	  }
  break;
case 893:
#line 5603 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if ($3 == null) {
			report.Error (1627, GetLocation ($4), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		$$ = new Yield ((Expression) $3, lt.Location);
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 894:
#line 5619 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	/*	var lt = (LocatedToken) $1;
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if ($3 == null) {
			report.Error (1627, GetLocation ($4), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		$$ = new Yield ((Expression) $3, lt.Location);
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 895:
#line 5637 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		$$ = new YieldBreak (lt.Location);
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($3));*/
	  }
  break;
case 898:
#line 5659 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new TryCatch ((Block) $2, (List<Catch>) $3, GetLocation ($1), false);*/
	  }
  break;
case 899:
#line 5663 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new TryFinally ((Statement) $2, (ExplicitBlock) $4, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($3));*/
	  }
  break;
case 900:
#line 5668 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = new TryFinally (new TryCatch ((Block) $2, (List<Catch>) $3, GetLocation ($1), true), (ExplicitBlock) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($4));*/
	  }
  break;
case 901:
#line 5673 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (1524, yyToken);
/*		$$ = new TryCatch ((Block) $2, null, GetLocation ($1), false);*/
	  }
  break;
case 902:
#line 5681 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var l = new List<Catch> (2);

		l.Add ((Catch) $1);
		$$ = l;*/
	  }
  break;
case 903:
#line 5688 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var l = (List<Catch>) $1;
		
		Catch c = (Catch) $2;
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		$$ = l;*/
	  }
  break;
case 906:
#line 5709 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var c = new Catch ((ExplicitBlock) $3, GetLocation ($1));
	  	c.Filter = (CatchFilterExpression) $2;
	  	$$ = c;*/
	  }
  break;
case 907:
#line 5715 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		start_block (GetLocation ($2));
		var c = new Catch ((ExplicitBlock) current_block, GetLocation ($1));
		c.TypeExpression = (FullNamedExpression) $3;

		if ($4 != null) {
			var lt = (LocatedToken) $4;
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation ($2), GetLocation ($5));
		$$ = c;*/
	/*	lexer.parsing_catch_when = true;*/
	  }
  break;
case 908:
#line 5731 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	((Catch) $6).Filter = (CatchFilterExpression) $7;*/
	/*	$$ = $6;*/
	  }
  break;
case 909:
#line 5736 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		/*$$ = new Catch (null, GetLocation ($1));*/
	  }
  break;
case 910:
#line 5750 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = $1;*/
	  }
  break;
case 911:
#line 5754 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*end_block (Location.Null);*/
		Error_SyntaxError (yyToken);
	/*	$$ = null;*/
	  }
  break;
case 912:
#line 5762 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 913:
#line 5766 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 914:
#line 5770 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (lang_version <= LanguageVersion.V_5)
			FeatureIsNotAvailable (GetLocation ($1), "exception filter");

		$$ = new CatchFilterExpression ((Expression) $4, GetLocation ($1));
		lbag.AddLocation ($$, GetLocation ($3), GetLocation ($5));*/
	  }
  break;
case 915:
#line 5781 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*  $$ = new Checked ((Block) $2, GetLocation ($1));*/
	  }
  break;
case 916:
#line 5788 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Unchecked ((Block) $2, GetLocation ($1));*/
	  }
  break;
case 917:
#line 5795 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation ($1));*/
	  }
  break;
case 918:
#line 5798 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new Unsafe ((Block) $3, GetLocation ($1));*/
	  }
  break;
case 919:
#line 5805 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if ($5 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($5));
	  
		$$ = new Lock ((Expression) $3, (Statement) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 920:
#line 5813 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
/*
		$$ = new Lock ((Expression) $3, null, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 921:
#line 5823 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 /*   start_block (GetLocation ($2));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) $4;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) $3, li);*/
	  }
  break;
case 922:
#line 5833 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = current_variable;
		current_variable = null;*/
	  }
  break;
case 923:
#line 5838 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($10 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($10));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) $9, (Statement) $10, GetLocation ($1));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation ($2), GetLocation ($8));
		$$ = end_block (GetLocation ($8));*/
	  }
  break;
case 924:
#line 5851 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	   /* start_block (GetLocation ($2));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) $4;
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) $3, li);*/
	  }
  break;
case 925:
#line 5861 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = current_variable;	  
		current_variable = null;*/
	  }
  break;
case 926:
#line 5866 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*if ($9 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($9));
	  
		Using u = new Using ((Using.VariableDeclaration) $8, (Statement) $9, GetLocation ($1));
		lbag.AddStatement (u, GetLocation ($2), GetLocation ($7));
		current_block.AddStatement (u);
		$$ = end_block (GetLocation ($7));*/
	  }
  break;
case 927:
#line 5876 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($5 is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation ($5));
	  
		$$ = new Using ((Expression) $3, (Statement) $5, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2), GetLocation ($4));*/
	  }
  break;
case 928:
#line 5884 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	/*	
		$$ = new Using ((Expression) $3, null, GetLocation ($1));
		lbag.AddStatement ($$, GetLocation ($2));*/
	  }
  break;
case 930:
#line 5895 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }
  break;
case 931:
#line 5903 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 932:
#line 5907 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_variable.Initializer = (Expression) $2;
		lbag.AddLocation (current_variable, GetLocation ($1));
		$$ = current_variable;*/
	  }
  break;
case 935:
#line 5931 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		/*current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		// (ref object retval)
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		var method = new InteractiveMethod (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			pars);
			
		current_type.AddMember (method);			
		oob_stack.Push (method);

		interactive_async = false;
		*/
		++lexer.parsing_block;
		/*start_block (lexer.Location);*/
	  }
  break;
case 936:
#line 5959 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	/*	var method = (InteractiveMethod) oob_stack.Pop ();
		method.Block = (ToplevelBlock) end_block(lexer.Location);

		if (interactive_async == true) {
			method.ChangeToAsync ();
		}

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;*/
	  }
  break;
case 944:
#line 5994 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedName = (MemberName) $2;*/
	  }
  break;
case 945:
#line 6001 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;*/
	  }
  break;
case 946:
#line 6005 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)$1;
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;
		$$ = null;*/
	  }
  break;
case 947:
#line 6011 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation ($1));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;
		$$ = null;*/
	  }
  break;
case 948:
#line 6017 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)$1;
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$4;
		var lt = (LocatedToken) $3;
		$$ = new MemberName (lt.Value);*/
	  }
  break;
case 949:
#line 6024 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = new MemberName ((MemberName) $1, MemberCache.IndexerNameAlias, Location.Null);*/
	  }
  break;
case 950:
#line 6028 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 951:
#line 6032 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$6;*/
		/*$$ = new MemberName ((MemberName) $1, MemberCache.IndexerNameAlias, Location.Null);*/
	  }
  break;
case 952:
#line 6037 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var p = (List<DocumentationParameter>)$4 ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) $3));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = VSC.TypeSystem.Resolver.OperatorType.Explicit;
		$$ = null;*/
	  }
  break;
case 953:
#line 6045 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var p = (List<DocumentationParameter>)$4 ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) $3));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = VSC.TypeSystem.Resolver.OperatorType.Implicit;
		$$ = null;*/
	  }
  break;
case 954:
#line 6053 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var p = (List<DocumentationParameter>)$3;
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) $2;
		$$ = null;*/
	  }
  break;
case 956:
#line 6064 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new MemberName (((MemberName) $1), (MemberName) $3);*/
	  }
  break;
case 958:
#line 6072 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 959:
#line 6076 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = $3;*/
	  }
  break;
case 960:
#line 6083 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new List<DocumentationParameter> (0);*/
	  }
  break;
case 962:
#line 6091 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) $1);
		$$ = parameters;*/
	  }
  break;
case 963:
#line 6097 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var parameters = $1 as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) $3);
		$$ = parameters;*/
	  }
  break;
case 964:
#line 6106 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($1 != null)
			$$ = new DocumentationParameter ((Parameter.Modifier) $1, (FullNamedExpression) $2);
		else
			$$ = new DocumentationParameter ((FullNamedExpression) $2);*/
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   10,   10,   11,   12,   12,   12,   14,   14,   17,   18,
   15,   15,   20,   20,   20,   16,   16,   16,   21,   21,
   22,   22,    6,    6,   19,   19,    7,    7,   23,   23,
   23,   24,   24,   24,   24,   24,    8,    8,    9,    9,
   32,   30,   35,   31,   31,   31,   31,   33,   33,   33,
   34,   34,   39,   36,   37,   38,   38,   40,   40,   40,
   40,   40,   41,   41,   41,   45,   42,   44,   48,   48,
   47,   47,   47,   51,   51,   52,   52,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   67,   62,   72,   74,   77,   78,   79,   26,   26,
   82,   54,   54,   83,   83,   84,   84,   85,   87,   81,
   81,   86,   86,   92,   55,   91,   95,   91,   93,   93,
   96,   96,   97,   98,   97,   94,   94,   94,  101,   56,
  103,  105,  106,   99,   99,   99,  100,  100,  108,  108,
  111,  109,  104,  104,  112,  112,  112,  112,  112,  112,
  113,  113,  115,  115,  115,  115,  118,  115,  116,  116,
  119,  119,  120,  120,  120,  114,  114,  114,  121,  121,
  121,  123,  125,  126,  128,   57,  129,   57,  127,  131,
  127,  130,  130,  133,  135,   59,  134,  134,  124,  124,
  124,  124,  124,  139,  136,  140,  137,  138,  138,  138,
  141,  142,  143,  145,   27,   27,  144,  144,  146,  146,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  149,
   60,  150,  150,  153,  148,  148,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  155,
  154,  156,  154,  154,  154,   61,  159,  161,  157,  158,
  158,  160,  160,  165,  163,  166,  163,  163,  163,  167,
   63,  169,  170,   58,   58,  171,  171,  168,  168,  168,
  168,  168,  175,  172,  176,  173,  174,  174,   64,   65,
  178,  180,  181,   28,  177,  177,  177,  179,  179,  179,
  182,  182,  183,  184,  183,  183,  183,  185,  186,  187,
   29,  188,  188,   13,   13,   13,  189,  189,  189,  193,
  193,  191,  191,  191,  194,  194,  196,   71,  122,  102,
  102,  132,  132,  197,  197,  197,  195,  195,  198,  198,
  199,  199,  200,  200,   90,   80,   80,  202,  202,  117,
  117,  151,  151,  203,  203,  203,  201,  206,  206,  206,
  208,  208,  209,  207,  207,  207,  207,  207,  207,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  212,  212,
  213,  213,  213,  233,  233,  231,  231,  234,  234,  235,
  235,  236,  235,  237,  235,  238,  238,  239,  239,  215,
  215,  232,  232,  232,  232,  232,  232,  232,  217,  217,
  217,  241,  241,  242,  242,  243,  243,  245,  245,  245,
  246,  246,  246,  247,  247,  164,  164,  240,  240,  240,
  240,  240,  250,  250,  249,  249,  251,  251,  251,  251,
   50,   50,   50,   50,   50,  252,  218,  218,  218,  218,
  248,  248,  254,  254,  255,  255,  219,  220,  220,  221,
  222,  223,  223,  214,  214,  214,  214,  214,  260,  256,
  224,  261,  261,  262,  262,  263,  263,  264,  264,  264,
  264,  257,  257,  204,  204,  259,  259,  265,  265,  258,
  258,   89,   89,  266,  266,  225,  267,  267,  192,  190,
  226,  226,  227,  227,  228,  228,  229,  269,  230,  270,
  230,  268,  268,  272,  271,  216,  273,  273,  273,  273,
  273,  273,  273,  274,  274,  274,  274,  274,  274,  274,
  274,  274,  274,  274,  274,  274,  275,  275,  275,  275,
  275,  275,  275,  276,  276,  276,  276,  276,  276,  276,
  276,  276,  277,  278,  278,  278,  278,  278,  279,  279,
  279,  279,  279,  279,  279,  279,  279,  280,  280,  280,
  280,  280,  281,  281,  281,  282,  282,  282,  283,  283,
  283,  284,  284,  284,  285,  285,  285,  286,  286,  287,
  287,  287,  287,  287,  288,  288,  288,  288,  288,  288,
  288,  288,  288,  288,  288,  289,  289,  290,  290,  290,
  290,  291,  291,  293,  292,  292,  292,   49,   49,  295,
  294,  296,  294,  297,  294,  298,  299,  294,  300,  301,
  294,   43,   43,  302,  302,  302,   88,  303,   73,   73,
  304,  305,  305,  305,  305,  307,  305,  308,  309,  310,
  311,   25,   70,   70,   69,   69,  107,  107,  312,  312,
  312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
   75,   75,  306,  306,   76,   76,  313,  313,  314,  314,
  315,  315,  316,  316,  316,  316,  317,  110,   68,   68,
  318,  162,  162,  320,  319,   66,   66,  321,  321,  322,
  322,  322,  322,  322,  326,  326,  327,  327,  327,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  328,  328,  328,  328,  328,  328,  328,  328,
  328,  328,  328,  328,  328,  342,  342,  342,  342,  329,
  343,  325,  253,  253,  344,  344,  344,  344,  205,  205,
  345,   46,   46,  347,  323,  351,  323,  349,  349,  346,
  346,  346,  348,  348,  355,  355,  354,  354,  356,  356,
  350,  350,  352,  352,  357,  357,  358,  353,  353,  353,
  330,  330,  330,  341,  341,  359,  360,  360,  331,  331,
  361,  361,  361,  364,  362,  362,  363,  363,  365,  365,
  365,  366,  367,  367,  368,  368,  368,  332,  332,  332,
  332,  369,  369,  370,  370,  370,  374,  371,  377,  373,
  373,  380,  376,  376,  379,  379,  375,  375,  383,  382,
  382,  378,  378,  381,  381,  385,  384,  384,  372,  372,
  386,  372,  372,  372,  333,  333,  333,  333,  333,  333,
  387,  388,  388,  389,  389,  389,  390,  390,  390,  391,
  391,  391,  392,  392,  392,  393,  393,  334,  334,  334,
  334,  394,  394,  396,  396,  395,  399,  395,  395,  398,
  398,  397,  400,  397,  335,  336,  401,  339,  337,  337,
  403,  404,  340,  406,  407,  338,  338,  338,  405,  405,
  402,  402,    3,    3,  409,    3,    3,  410,  410,  408,
  408,  244,  244,    5,  411,  411,  411,  411,  411,  415,
  411,  411,  411,  411,  412,  412,  413,  416,  413,  414,
  414,  417,  417,  418,
  };
   static  short [] yyLen = {           2,
    2,    0,    3,    1,    1,    3,    2,    1,    0,    1,
    1,    2,    1,    3,    5,    2,    0,    1,    0,    0,
   10,    3,    0,    1,    1,    1,    3,    1,    0,    1,
    0,    1,    0,    1,    0,    1,    1,    2,    1,    1,
    2,    1,    1,    1,    1,    1,    0,    1,    1,    2,
    0,    3,    0,    6,    3,    2,    1,    1,    1,    1,
    1,    3,    0,    3,    1,    0,    3,    0,    1,    1,
    3,    3,    1,    1,    1,    0,    4,    4,    1,    1,
    0,    1,    1,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    4,    0,    0,    0,    0,    0,   17,    5,
    0,    9,    5,    0,    1,    1,    2,    3,    0,    3,
    1,    1,    1,    0,    8,    0,    0,    3,    0,    1,
    1,    2,    2,    0,    5,    1,    1,    1,    0,    3,
    0,    0,    0,   11,    8,    5,    1,    1,    1,    1,
    0,    4,    0,    1,    1,    3,    3,    5,    1,    1,
    1,    3,    4,    6,    2,    4,    0,    7,    0,    1,
    1,    2,    1,    1,    1,    4,    6,    4,    1,    2,
    2,    0,    0,    0,    0,   12,    0,    6,    0,    0,
    4,    1,    1,    0,    0,   10,    3,    1,    1,    2,
    1,    2,    1,    0,    5,    0,    5,    1,    1,    1,
    0,    0,    0,    0,   15,    5,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    5,    1,    1,    0,    7,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    7,    0,    7,    2,    2,    2,    0,    0,    9,    1,
    1,    0,    1,    0,    6,    0,    6,    2,    1,    0,
    8,    0,    0,   10,    5,    1,    2,    2,    2,    1,
    1,    1,    0,    5,    0,    5,    1,    1,    2,    4,
    0,    0,    0,   12,    0,    2,    2,    0,    1,    2,
    1,    3,    2,    0,    5,    3,    1,    0,    0,    0,
   13,    0,    1,    1,    3,    3,    1,    4,    4,    2,
    2,    0,    3,    2,    1,    3,    0,    3,    1,    1,
    3,    1,    2,    3,    4,    4,    0,    3,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    1,    1,    2,    2,    2,
    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    1,    1,    3,    1,
    3,    0,    4,    0,    6,    1,    1,    1,    1,    3,
    3,    4,    4,    5,    4,    4,    3,    3,    4,    4,
    3,    0,    1,    3,    4,    0,    1,    1,    3,    2,
    3,    3,    2,    1,    1,    0,    1,    1,    3,    3,
    3,    2,    1,    1,    1,    1,    2,    2,    2,    2,
    3,    4,    4,    2,    4,    1,    4,    5,    4,    3,
    1,    3,    1,    3,    1,    1,    1,    4,    3,    2,
    2,    6,    3,    7,    4,    3,    7,    3,    0,    2,
    4,    1,    2,    0,    1,    1,    3,    3,    1,    1,
    1,    0,    1,    1,    2,    2,    3,    1,    2,    0,
    1,    2,    4,    1,    3,    4,    1,    1,    1,    2,
    4,    4,    4,    2,    4,    2,    4,    0,    4,    0,
    5,    0,    1,    0,    4,    4,    1,    2,    2,    4,
    2,    2,    4,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    1,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    1,    3,    3,    3,    3,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    3,    1,    3,    3,    1,    3,    1,
    5,    4,    5,    5,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    2,    1,
    1,    0,    1,    0,    2,    1,    1,    1,    1,    0,
    4,    0,    4,    0,    5,    0,    0,    7,    0,    0,
    8,    1,    1,    1,    1,    1,    1,    1,    0,    1,
    3,    0,    1,    1,    2,    0,    6,    0,    0,    0,
    0,   15,    0,    1,    0,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    1,    2,    3,    0,    1,    1,    2,    4,    3,
    1,    3,    1,    3,    1,    1,    0,    4,    1,    1,
    0,    4,    1,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    2,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    4,    1,    2,    2,    2,    1,    1,    1,    2,
    1,    1,    1,    0,    6,    0,    7,    1,    1,    0,
    2,    1,    0,    1,    0,    1,    1,    2,    2,    4,
    0,    2,    0,    1,    1,    2,    4,    1,    5,    2,
    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
    5,    7,    4,    0,    8,    4,    0,    1,    1,    2,
    1,    2,    1,    2,    3,    3,    1,    1,    1,    1,
    1,    5,    4,    7,    3,    6,    0,    4,    0,    4,
    2,    0,    4,    2,    3,    1,    0,    1,    0,    5,
    1,    0,    1,    0,    1,    1,    1,    3,    4,    5,
    0,    9,    5,    4,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    3,    4,    3,    3,    3,    2,    3,
    3,    2,    4,    4,    3,    0,    1,    3,    4,    5,
    3,    1,    2,    0,    1,    3,    0,    7,    3,    2,
    1,    0,    0,    5,    2,    2,    0,    3,    5,    4,
    0,    0,   10,    0,    0,    9,    5,    4,    2,    1,
    0,    2,    2,    3,    0,    4,    2,    1,    2,    0,
    1,    1,    1,    2,    2,    2,    2,    4,    3,    0,
    7,    4,    4,    3,    1,    3,    0,    0,    4,    0,
    1,    1,    3,    2,
  };
   static  short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   13,   16,    0,    0,  324,    0,  327,
  933,    0,    0,  937,    0,  376,  381,  388,  378,    0,
  377,    0,  384,  386,  374,    0,  380,  382,  375,  385,
  387,  383,    0,  337,  955,    0,  379,  944,    0,   10,
    1,    0,   51,    0,    0,    0,   40,   37,   39,   42,
   43,   44,   45,   46,   49,   12,    0,  530,    0,  529,
  330,  331,    0,   14,    0,  818,    0,    0,    0,    0,
    0,    0,    0,    0,  415,    0,    0,    0,    0,    0,
    0,    0,  413,    0,    0,    0,  487,    0,  414,    0,
    0,    0,  917,    0,    0,    0,  666,    0,    0,    0,
  417,  717,    0,  770,    0,    0,    0,    0,    0,    0,
    0,    0,  412,    0,  656,    0,  817,    0,  753,    0,
  409,  778,  777,    0,    0,    0,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  410,  411,    0,  554,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  664,  662,  665,  663,  737,  739,    0,  735,  738,
  754,  756,  757,  758,  759,  760,  761,  762,  763,  764,
  765,  755,    0,    0,  819,  820,  838,  839,  840,  841,
  875,  876,  877,  878,  879,  880,    0,    0,  941,  934,
    0,    0,  242,  259,  241,  238,  243,  244,  237,  256,
  255,  248,  249,  245,  247,  246,  250,  239,  240,  251,
  252,  258,  257,  253,  254,    0,  958,  947,    0,    0,
  946,    0,  945,    3,    0,    0,   38,  694,  700,  692,
    0,  689,  699,  693,  691,  690,  697,  695,  696,  698,
    0,    0,  687,   41,   50,    0,    0,  334,    0,  335,
  356,    0,  357,    0,  366,    0,    0,  325,  326,    0,
    0,    0,  881,  534,  426,  427,  915,    0,    0,    0,
    0,    0,    0,  883,  882,    0,  544,  538,  543,  769,
  816,  740,  767,  766,  768,  741,  742,  743,  744,  745,
  746,  747,  748,  749,  750,  751,  752,    0,    0,    0,
  847,    0,    0,    0,  783,  782,    0,    0,    0,    0,
    0,    0,    0,    0,  889,    0,    0,    0,    0,  389,
    0,    0,    0,  892,    0,    0,    0,    0,  536,  916,
    0,    0,    0,  781,  370,    0,    0,    0,  659,    0,
  652,    0,    0,  418,    0,    0,  552,  549,  561,  555,
  562,  556,  551,  548,  566,  560,  565,  559,  563,  557,
  564,  558,  650,    0,    0,    0,    0,  771,    0,  323,
    0,  368,  369,    0,    0,  490,  491,    0,    0,    0,
  775,  776,  784,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  736,  936,  774,    0,
  814,  815,    0,    0,  954,    0,    0,  338,    0,    0,
  956,   57,   59,   60,    0,    0,   52,    0,    0,   61,
   63,   28,   26,    0,    0,    0,  684,    0,  688,   15,
  364,  365,    0,  333,  363,  328,  329,  489,    0,  485,
  486,    0,    0,  483,    0,  786,    0,    0,    0,  845,
    0,  813,  811,  812,    0,    0,    0,  667,    0,  886,
  884,  668,    0,    0,  511,    0,    0,    0,    0,  502,
    0,  506,  516,  518,    0,  498,    0,    0,    0,    0,
    0,  493,    0,  496,  359,  500,  358,  888,  887,    0,
    0,  891,  890,  901,    0,    0,    0,  902,  528,    0,
  353,  527,    0,    0,  918,    0,    0,  780,    0,  540,
    0,  654,    0,    0,  422,    0,  416,  734,    0,    0,
    0,  728,  730,  731,  732,  430,  431,    0,  174,  173,
  175,    0,  641,    0,    0,    0,  360,    0,  636,    0,
    0,  895,    0,    0,    0,  437,  438,    0,    0,    0,
    0,    0,  480,    0,  441,    0,    0,    0,  463,  466,
    0,    0,  458,  465,  464,    0,  625,  626,  627,  628,
  629,  630,  631,  632,  633,  635,  634,  571,  568,  573,
  570,  572,  569,  581,  579,  582,  580,  577,  567,    0,
  578,    0,  587,    0,  588,    0,  594,    0,  595,    0,
  596,    0,  597,    0,  601,    0,  602,    0,  605,    0,
  608,    0,  611,    0,  614,    0,  617,    0,  619,    0,
  515,  952,  953,    0,    0,  171,    0,    0,  962,  352,
  351,    0,  349,  948,  950,   56,   53,    0,    0,    0,
    0,    0,    0,  355,    0,  678,    0,    0,  336,  436,
    0,  488,    0,  533,    0,  546,  160,    0,    0,    0,
  154,    0,    0,  161,  539,    0,  921,    0,  867,  848,
    0,  858,    0,  869,    0,  885,  823,    0,  920,    0,
    0,  501,    0,  517,  519,    0,    0,    0,    0,  448,
    0,  649,  648,  481,    0,  521,  495,    0,    0,  138,
  522,  136,  137,  524,    0,  532,  531,  826,    0,  913,
    0,    0,  899,    0,  903,  526,  535,  928,    0,  924,
  843,    0,    0,    0,    0,  647,  646,  653,    0,    0,
    0,  419,  733,  719,  720,  718,  729,  651,  639,    0,
    0,    0,  553,  550,  894,  893,  772,  435,    0,    0,
  432,  433,  537,  479,  477,    0,    0,    0,  476,  470,
  469,    0,  468,  467,  462,  428,  429,  439,  440,    0,
  792,    0,    0,  622,    0,  964,  172,  959,    0,    0,
  348,    0,    0,   62,   55,    0,   64,   27,   20,    0,
    0,  301,    0,  216,    0,  110,    0,   83,   82,    0,
  484,    0,    0,    0,    0,    0,  165,  545,    0,    0,
    0,    0,  859,  851,  849,    0,  870,    0,    0,  919,
  508,  507,  453,    0,    0,  942,  943,  444,  450,    0,
    0,    0,    0,    0,    0,    0,  824,    0,  909,    0,
  906,  900,  927,    0,  842,  541,    0,  655,  645,  424,
  423,  638,  637,  657,  434,  478,    0,    0,    0,    0,
  461,  460,  459,    0,  808,  791,    0,    0,    0,  797,
  623,  624,  621,  963,  350,    0,    0,   75,    0,    0,
   69,   70,   73,   74,    0,  318,  307,  306,    0,  679,
  212,  105,   78,   79,   80,  802,  122,  123,    0,    0,
    0,  805,  180,  181,    0,    0,    0,  162,  157,  846,
    0,    0,    0,    0,    0,  868,    0,    0,  452,  454,
  455,  451,  445,  449,    0,  513,    0,  482,  492,  443,
  525,  523,    0,    0,  905,    0,  930,    0,    0,  660,
    0,    0,    0,    0,  471,    0,    0,    0,  789,  788,
  785,  798,  951,    0,   76,   67,    0,    0,    0,  302,
    0,    0,    0,    0,  787,  806,  166,    0,  178,    0,
    0,  844,  932,    0,    0,    0,    0,  850,    0,  871,
  822,  497,  494,  831,    0,  837,    0,    0,  829,    0,
  833,    0,  907,  929,  925,    0,  425,  658,  472,  473,
  475,    0,    0,   54,    0,   71,   72,    0,    0,    0,
    0,    0,    0,    0,    0,  673,    0,  702,    0,  670,
    0,    0,  167,    0,  158,  922,  860,  854,  852,    0,
    0,  825,  830,    0,  834,  914,    0,    0,  661,    0,
  800,   77,    0,  319,    0,    0,  317,  303,    0,  311,
    0,  373,    0,  371,    0,    0,  680,    0,  707,  213,
    0,  807,  164,    0,  177,    0,    0,  872,  836,  835,
  911,    0,  908,  926,  809,   25,   24,   21,    0,    0,
  299,    0,    0,  671,  704,    0,  676,    0,    0,  708,
    0,  106,  168,  923,  856,  853,    0,    0,  865,  721,
  723,  910,  320,  316,    0,    0,  312,  372,    0,  710,
    0,    0,    0,    0,    0,    0,    0,    0,   30,  304,
    0,  715,    0,  716,  713,    0,  711,  101,  102,    0,
   98,    0,    0,   86,   88,   89,   90,   91,   92,   93,
   94,   95,   96,   97,   99,  100,  139,    0,    0,    0,
  229,  221,  222,  223,  224,  225,  226,  227,  228,    0,
    0,  219,  107,  855,    0,  321,  315,  677,    0,    0,
    0,    0,  681,   87,    0,  271,  266,  270,    0,  214,
  220,    0,  722,  714,  712,    0,    0,    0,    0,    0,
  267,    0,  280,    0,  230,    0,    0,  236,    0,  151,
  150,  140,  147,  148,  149,    0,    0,    0,  103,    0,
    0,  265,    0,  264,    0,    0,    0,  342,  300,    0,
  340,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  682,    0,  215,  108,  113,  111,  285,    0,  339,    0,
    0,    0,    0,    0,    0,    0,    0,  146,    0,    0,
    0,    0,  194,    0,  343,    0,  231,    0,    0,    0,
    0,  282,  262,  260,    0,    0,  127,    0,  344,  142,
    0,  183,  188,    0,    0,    0,  341,  234,  152,  109,
  121,  119,    0,    0,    0,    0,  268,    0,    0,    0,
    0,    0,  131,    0,    0,    0,    0,  345,  346,    0,
    0,    0,    0,    0,  116,  292,    0,  283,    0,    0,
    0,    0,    0,  281,  128,    0,  125,  132,    0,  145,
  203,    0,  184,    0,    0,  195,    0,  120,    0,  112,
  117,    0,    0,    0,  288,    0,  289,  263,  261,  279,
    0,  269,  273,  134,  143,    0,    0,  200,  202,    0,
  235,  118,  293,  295,  284,    0,    0,  278,    0,    0,
    0,    0,  204,  206,  185,    0,  198,  196,    0,    0,
  274,  276,  135,  144,    0,    0,    0,    0,  297,  298,
  294,  296,    0,    0,  210,  209,  208,  205,  207,  190,
  186,  197,    0,    0,    0,  275,  277,  192,  193,    0,
  191,
  };
  protected static  short [] yyDgoto  = {             7,
    8,   51,    9,   52,   10,   11,   54,  698,  699,   12,
   13,   14,  269,    0,   57,  464,  682,  925, 1049, 1118,
 1419,  679,   58,   59,   60,   61,   62,   63,   64,   65,
  457,  245,  458,  459,  823,  460,  461,  827,  680,  920,
  921,  922,  301,  600, 1045,  128,  840,  933,  734,  800,
 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
 1182, 1183, 1184, 1185, 1186,  560, 1211,  776,  261,  468,
 1261,  837, 1059, 1003, 1057, 1097, 1154, 1222, 1300, 1092,
 1323, 1301, 1343, 1344, 1345,  936, 1341,  937,  743,  683,
 1308, 1286, 1331,  905, 1329, 1332, 1333, 1401, 1187, 1242,
 1215, 1262, 1263,  700, 1334, 1402,  262, 1243, 1244,  302,
 1272,  701,  702,  703,  704,  664,  575, 1104,  665,  666,
  846, 1265, 1291, 1363, 1336, 1387, 1431, 1417, 1292, 1440,
 1435, 1266, 1314, 1408, 1390, 1364, 1365, 1428, 1415, 1416,
  835, 1002, 1131, 1200, 1247, 1201, 1202, 1235, 1269, 1236,
  271,  236, 1340, 1238, 1326, 1325, 1188, 1217, 1256, 1382,
 1353, 1142, 1383,  601, 1423, 1424, 1257, 1348, 1324, 1373,
    0, 1349, 1350, 1421, 1409, 1410,  832,  929, 1088, 1051,
 1122, 1089, 1090, 1145,  999, 1119, 1157,  392,   18,  130,
   71,   72,  131,  272,  448,  239, 1281,  672,  673,  684,
  132,  526,  274,  439,  355,  275,  339, 1093, 1094,   47,
  135,  340,  137,  138,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
  155,  156,  157,  363,  364,  771,  981,  288,  808,  739,
  969,  522,  728,  868,  729,  730,  962,  735,  603,  604,
  605,  801,  158,  483,  484,  332,  967,  737,  440,  334,
  509,  510,  511,  512,  515,  745,  543,  298,  489,  763,
  299,  488,  159,  160,  161,  162,    0,  163,  164,  165,
  166,  167,  168,  169,  170,  171,  172,  173,  578,  579,
  580,  768,  769,  174,  568,  553,  765,  384,  982,  551,
 1036,  175,  503, 1054, 1055, 1058, 1149,  833, 1001, 1129,
 1239,  263, 1098, 1099, 1166, 1167,  365, 1156,    0,    0,
  561,  562,  303,  304,  305,  178,  179,  180,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  192,  318,  585,  193,  356,  813,  606,  908,  991,  843,
  695,  940,  906,  909, 1015,  910,  941,  942,  319,  194,
  195,  196, 1027,  973, 1028, 1029, 1030, 1031,  197,  198,
  199,  200,  710,  496,  711, 1018,  955, 1019, 1136, 1107,
 1137,  712,  954,  713, 1139, 1070,  201,  202,  203,  204,
  205,  206,  341,  537,  538,  976,  752, 1113, 1077,  878,
  352,  953,  852, 1106,  979,  884, 1078,  210,   22,   24,
   48,   49,  238,  667,  822,  446,  668,  669,
  };
  protected static  short [] yySindex = {         -139,
    0, -195, -127,   63,   63,14598,    0,  167,    0,    0,
  192,   63,    0,    0,    0,  380,  394,    0,   16,    0,
    0, 5501,  192,    0,    9,    0,    0,    0,    0,  321,
    0,  362,    0,    0,    0, 8323,    0,    0,    0,    0,
    0,    0,  313,    0,    0,  567,    0,    0,  584,    0,
    0,  167,    0,  192, 2571,  601,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  302,    0,  339,    0,
    0,    0,  338,    0, -292,    0,  146,  432, -214,14150,
 -133, -278,  508, 5662,    0, -278, -278, -278,   88, -278,
 -278,  616,    0, 7474, -278, -278,    0, 7623,    0,  517,
 -278, -207,    0, -278,  516, -278,    0,   93,  579,13567,
    0,    0,13567,    0, 8368, 8503, 8638, 8773, 8908, 9043,
 9178, 9313,    0,  197,    0, 6597,    0, -204,    0, -281,
    0,    0,    0,  405,  417,  388,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -281,    0,  858,
  693,  106,  583,  524,  651,  547,  561,  571,  562,  203,
  603,    0,    0,    0,    0,    0,    0, 3583,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  631, -268,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  192,  601,    0,    0,
 6597, 6597,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  313,    0,    0,  609,  613,
    0,   80,    0,    0, -171, 2571,    0,    0,    0,    0,
 -176,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -168, 3917,    0,    0,    0,  427,  452,    0,  406,    0,
    0,  -51,    0,  631,    0,  388, -292,    0,    0,  789,
 -281,13707,    0,    0,    0,    0,    0,13567, -188, -185,
  791,  417, -281,    0,    0, 6597,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -181, -230,14150,
    0, 6597,13567,  710,    0,    0,  729,13567,13567,12106,
  489,  -75,  642, 6597,    0,  579,  197,  869,  751,    0,
  752, 6597,13567,    0,  891,  773,  569,12123,    0,    0,
13567,  517,13007,    0,    0,  516,13567,  508,    0,  814,
    0,  717,  736,    0, 5823, -262,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 6653,  783,  782,13567,    0, -292,    0,
 -281,    0,    0,  208, -281,    0,    0,  763, 7772, 6133,
    0,    0,    0,13567,13567,13567,13567,13567,13567,13567,
13567,13567,13567,13567, 9448, 9583, 9718,12200, -215, 9853,
 9988,10123,10258,10393,10528,10663,10798,10933,11068,11203,
11338,11473,11608,11743,13987,13567,    0,    0,    0,  631,
    0,    0,  313,  313,    0,  573, -166,    0,  313,  801,
    0,    0,    0,    0, -150,  787,    0,  802,  808,    0,
    0,    0,    0,  815, 6895,  772,    0,  328,    0,    0,
    0,    0, 6597,    0,    0,    0,    0,    0,  778,    0,
    0,  816,  526,    0,  821,    0,  822,  123,  517,    0,
 -278,    0,    0,    0, -281,13007, -152,    0,  820,    0,
    0,    0,   92,  102,    0,  427,  818,    0,  829,    0,
  826,    0,    0,    0,  541,    0,   60,  594, 7921,  642,
12867,    0, 6282,    0,    0,    0,    0,    0,    0,  124,
  157,    0,    0,    0, -272,  517,  239,    0,    0,  516,
    0,    0,  831,  835,    0,  159, -281,    0,  161,    0,
 6653,    0,   57,13567,    0,13567,    0,    0, -151, -285,
 5823,    0,    0,    0,    0,    0,    0,   57,    0,    0,
    0,  516,    0,  427, -281, 6951,    0,  827,    0,  839,
11878,    0,  954,  836, 5823,    0,    0,  778, -281,13707,
 -292,  778,    0,   21,    0,13147,13147,  961,    0,    0,
  127,   49,    0,    0,    0, -187,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  693,
    0,  693,    0,  106,    0,  106,    0,  583,    0,  583,
    0,  583,    0,  583,    0,  524,    0,  524,    0,  651,
    0,  547,    0,  561,    0,  571,    0,  562,    0, -196,
    0,    0,    0, 6951,  573,    0,  842,  841,    0,    0,
    0,  224,    0,    0,    0,    0,    0,  302,  846,  847,
  805,  850,  772,    0,  844,    0,  969,  972,    0,    0,
  396,    0,13707,    0,  845,    0,    0,  552,  141,  855,
    0,  854,  856,    0,    0,13567,    0, -281,    0,    0,
  646,    0,  857,    0, -131,    0,    0, 5662,    0, 5662,
 6729,    0,12106,    0,    0, 6878,  848,   24,   84,    0,
  810,    0,    0,    0,  653,    0,    0,  860,  861,    0,
    0,    0,    0,    0,  863,    0,    0,    0,  867,    0,
12220,  517,    0,  517,    0,    0,    0,    0, 5662,    0,
    0, 5662,  517,  866,   57,    0,    0,    0,13567,  868,
  824,    0,    0,    0,    0,    0,    0,    0,    0, -281,
 6653,  903,    0,    0,    0,    0,    0,    0,  778,  673,
    0,    0,    0,    0,    0, -188, -185,13147,    0,    0,
    0, -281,    0,    0,    0,    0,    0,    0,    0, 6431,
    0, 6580,  870,    0, 7027,    0,    0,    0,  573, -166,
    0,  573,  302,    0,    0, 8070,    0,    0,    0,  874,
12276,    0,  772,    0,  772,    0,  772,    0,    0, 7176,
    0,13287,  873,  552, 6951, 6597,    0,    0,  192,  996,
  163,  871,    0,    0,    0,13567,    0,13567,  973,    0,
    0,    0,    0,  227,13427,    0,    0,    0,    0,  258,
  998,  631, 7921,  887, 6729,  888,    0, -278,    0, -281,
    0,    0,    0, -179,    0,    0,  916,    0,    0,    0,
    0,    0,    0,    0,    0,    0,13147,13147,  886,  889,
    0,    0,    0, 6597,    0,    0, -281,  549,  870,    0,
    0,    0,    0,    0,    0,  901,  808,    0,  166,  689,
    0,    0,    0,    0,   63,    0,    0,    0,  905,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -281,  897,
  873,    0,    0,    0, -111, -161,  902,    0,    0,    0,
  904, 6729,  870, -187,13567,    0,  909, 5662,    0,    0,
    0,    0,    0,    0,  918,    0,  642,    0,    0,    0,
    0,    0, -198,13567,    0,  914,    0,  870,  921,    0,
  877,   57,  924,  926,    0,13567,  876,  920,    0,    0,
    0,    0,    0,  934,    0,    0, 8070,  192,  123,    0,
  574,  931,  936,  927,    0,    0,    0,  486,    0,  928,
 1059,    0,    0,  870,  941,  870,  942,    0,  943,    0,
    0,    0,    0,    0,13567,    0,  949, -194,    0, 5338,
    0,  948,    0,    0,    0,   57,    0,    0,    0,    0,
    0,13567, 6580,    0,13567,    0,    0,  192,  953,  951,
  192,  123, 6597,  931,  990,    0,  990,    0,  931,    0,
13287,  957,    0,13567,    0,    0,    0,    0,    0, 5662,
 -178,    0,    0, 5823,    0,    0,  119, 5662,    0,  959,
    0,    0, -122,    0,  912,  777,    0,    0,  958,    0,
  967,    0,   85,    0,  962,  922,    0,  990,    0,    0,
  990,    0,    0,13567,    0, 5662, 8219,    0,    0,    0,
    0,  784,    0,    0,    0,    0,    0,    0,  990, 1089,
    0,  977,  192,    0,    0, 6597,    0,  -86,  979,    0,
  980,    0,    0,    0,    0,    0,  976,  857,    0,    0,
    0,    0,    0,    0,  968,  978,    0,    0,12867,    0,
 2255,  103,  192,  988, 5662, 5823,  982,13567,    0,    0,
  984,    0,  989,    0,    0,  987,    0,    0,    0, 3917,
    0,  994,  103,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  498, 3917,  192,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  995,
  192,    0,    0,    0,  997,    0,    0,    0,  992, 2255,
 5823,14359,    0,    0,  358,    0,    0,    0,14421,    0,
    0,  103,    0,    0,    0, -285, 6597, 6597,  323,  332,
    0,  516,    0, 6467,    0, 1065,    0,    0,  978,    0,
    0,    0,    0,    0,    0, 1895,  978, 1001,    0, -141,
 -135,    0, 6597,    0, 6597, 1000, 1051,    0,    0,  431,
    0, 1124,  960, 1961,    0, 1008,  963,  136,  358, 8323,
    0,13567,    0,    0,    0,    0,    0,  431,    0, 1012,
  965, 1009, 1013,  123, 1014, 1005, 1015,    0, 1016, 1018,
 1023, 1054,    0,  778,    0,  742,    0, 1025, 1026,  978,
 -177,    0,    0,    0, 1029, 1031,    0, 1030,    0,    0,
  123,    0,    0,  123, 1034, 1035,    0,    0,    0,    0,
    0,    0, 1036,  155,  123,  123,    0,  430, 6729,  993,
 1037, 1030,    0,  123, 1040,  156, 1044,    0,    0,  123,
13287,  999, 1042, 1036,    0,    0, 3917,    0,  192,  192,
 1047, 1048,   43,    0,    0, 1041,    0,    0, 1049,    0,
    0, 3917,    0,  156,  156,    0, 1052,    0, -177,    0,
    0, -164, 1055, 3917,    0, 3917,    0,    0,    0,    0,
  322,    0,    0,    0,    0,  799, 1057,    0,    0, -227,
    0,    0,    0,    0,    0, 1105, 1169,    0, 1058, 1062,
 6729,  990,    0,    0,    0,  156,    0,    0,  514,  514,
    0,    0,    0,    0,  -26,  -26, 1053, 1068,    0,    0,
    0,    0,12867,12867,    0,    0,    0,    0,    0,    0,
    0,    0, 1066, 1067,13287,    0,    0,    0,    0, 1061,
    0,
  };
  protected static  short [] yyRindex = {         3244,
    0,    0, 5984, 3244,    0,    0,    0, 1444,    0,    0,
 3291, 1652,    0,    0,    0,  657,    0,    0,    0,    0,
    0,    0, 3334,    0,   40,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1446,    0,    0, 1446,    0,    0, 1446,    0,
    0, 1444,    0, 3377,  271, 3420,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2554,    0,    0,    0,    0,    0,
    0,    0, 1077,    0,    0,    0,    0,    0,    0,    0,
    0, 7044,    0, 1069,    0,    0,    0, 1069,    0,    0,
    0,    0,    0,    0, 1439,    0,    0,    0,  228,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3663,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -255, 4529, 4401,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4581,
 4689, 4016,  591, 1283, 4994, 2032, 2918,  683,  529, -154,
  -94,    0,    0,    0,    0,    0,    0,   40,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -256,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3467, 3510,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1446,    0,    0,   64,    0,
    0,    0,    0,    0,    0,  149,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  342,14063,    0,    0,    0, 2084,    0,    0, 2704,    0,
    0,    0,    0, 3004,    0, 2704, 2554,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1078,
    0,    0,    0,    0,    0,    0, 3725, 1071,    0,    0,
    0,    0,    0,    0, 1071,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2854,    0, 1077,    0,    0,
    0,  803,    0,    0,   44,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1076,    0,    0, 1069,    0, 3725,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  170,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2251,
    0,    0, 1446, 1446,    0, 6299,    0,    0, 1446, 1453,
    0,    0,    0,    0,  640, -246,    0,    0, 1081,    0,
    0,    0,    0, 1574,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3725,    0,
    0,    0,    0,    0,    0,    0,    0,14453,    0,    0,
    0,    0,    0,    0,    0,  676,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  714,  509,  315,    0,    0,
 1085,    0,    0,    0,    0,    0,  148,    0,    0, 4114,
 1083,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1090,    0, 1803,    0,    0,  284,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1076,    0,13847,    0,    0,    0,    0,    0, 5174,    0,
  164,    0,    0,    0,    0,    0,    0,13847,    0,    0,
    0,  -21,    0,  378,    0,    0,    0, 1088,    0,    0,
    0,    0, 1071,    0,    0,    0,    0, 3725,    0,    0,
 3725, 4176,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  178,    0,    0,    0,  560,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4737,
    0, 4786,    0, 4629,    0, 4842,    0, 3788,    0, 4239,
    0, 4890,    0, 4938,    0, 2656,    0, 2806,    0, 5029,
    0, 5063,    0, 5097,    0, 1527,    0,  915,    0,    0,
    0,    0,    0,    0, 7100,    0,    0,  699,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1091,    0,  686,
    0,    0,    0,    0, 1095,    0, 1046, 1050,    0,    0,
 7325,    0,    0,    0,  734,    0,    0, 7193,12296,    0,
    0,  743,  744,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  694,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1098,    0,    0,    0,    0,    0,  177,    0,
 3888,    0,    0,    0,    0,    0,    0,    0, 1097,    0,
    0,    0,    0,    0, 1099,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,13847,    0,    0,    0,    0,  806,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3725,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  576,    0,    0,    0,    0,    0, 7193,    0,
    0, 6802,    0,    0,    0,  745,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1094, 7249,    0,    0,    0,    0,14542,    0,
    0,  748,    0,    0,    0,    0,    0,    0, 2424,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3951,    0, 4339, 1106,    0,    0,    0,    0, 1101,
    0,    0,    0,  748,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -190,
    0,    0,    0,    0,    0,    0,    0,    0,  575,    0,
    0,    0,    0,    0,    0,    0, 1081,    0,12261,    0,
    0,    0,    0,    0,14629,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1103,    0,    0,    0,    0,    0,  755,    0,    0,    0,
    0,    0, 1108,  622, 1107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4114,    0,    0,    0,
    0,    0, 1113,    0,    0,    0,    0, 1108,    0,    0,
    0,13847,    0,    0,    0,    0,  459,  565,    0,    0,
    0,    0,    0,    0,    0,    0,    0,14672,14453,    0,
  346,  401,  379,    0,    0,    0,    0,  633,    0,  670,
    0,    0,    0, 1115,    0,  721, 1109,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1120,    0,    0,
    0,    0,    0,    0,    0,13847,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,14715,    0,    0,
   65,14453,    0,  445, 1122,    0, 1122,    0,  401,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -89,    0,    0,  804,    0,    0,    0,
    0,    0, 1983,    0,    0,12663,    0,    0, 1125,    0,
    0,    0,  448,    0,  469,    0,    0,  409,    0,    0,
 1122,    0,    0,    0,    0,    0, 1128,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1116,  449,
    0,    0,  226,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1129,    0,    0,
    0,    0,    0,    0,    0, 3162,    0,    0, 1083,    0,
    0,12507,12731,    0,    0, 1134,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  352,    0,    0,    0,14226,
    0,    0,12585,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,14297,12429,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
12805,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   44,  342,    0,    0,    0,    0,    0,    0,  342,    0,
    0,12507,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1251,    0,    0,    0,    0, 6173,    0, 3162,    0,
    0,    0,    0,    0,    0,    0, 3162,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
    0,  351,    0,    0,  393,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  279,    0,    0,
    0,    0,    0,14453,    0,  757,    0,    0,    0,    0,
    0,    0,    0, 1102,    0,  115,    0,    0,    0, 3162,
    0,    0,    0,    0,    0,    0,    0, 1127,    0,    0,
14453,    0,    0,14497,    0,    0,    0,    0,    0,    0,
    0,    0, 1130, 2026,14453,14453,    0,    0,    0,    0,
    0, 1131,    0,14453,    0, 8110,    0,    0,    0,14453,
    0,    0,    0, 1135,    0,    0,  326,    0, 2042, 7957,
    0,    0,  556,    0,    0,  768,    0,    0,    0,    0,
    0,  809,    0, 7663, 7812,    0,    0,    0,    0,    0,
    0,    0,    0, 1185,    0, 1246,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  426,    0,    0,    0, 8110,    0,    0, 2833, 7510,
    0,    0,    0,    0,    0,    0,12024,    0,    0,    0,
    0,    0, 1083, 1083,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
  };
  protected static  short [] yyGindex = {            0,
    0, 1462,    0,    0,    0,    6,  -15,  -10,   -8, 1511,
  741,    0,   19,    0,    0,    0,    0,    0,    0,    0,
 -774, -698,  -47, -646,    0,    0,    0,    0,    0,  -50,
    0,    0,    0,  696,    0,  843,    0,    0,    0,    0,
  520,  523,  -22, -260,    0,  -77,    0,    0, -335, -564,
  306,    0,  356, -791, -589, -520, -494, -491, -481, -475,
 -467,    0,    0, -988,    0,-1056,    0,  304,-1105,    0,
   13,    0,    0,    0,  474,-1000,    0,    0,    0,   51,
  165,    0,    0,    0,  199,-1029,    0, -297, -331, -442,
    0,    0,    0, -512,    0,    0,  204,    0,    0,  272,
    0, -371,    0, -859,    0,    0,-1110,  217, -926,   -6,
    0,    0,    0,  697,  698,  851, -537,    0,    0, -349,
  706,  300,    0, -701,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  139,    0,    0,
    0,    0,    0,    0,    0,    0,  363,    0,    0,    0,
 -328,  287,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  371,    0, -507,    0,    0,    0,    0,    0,    0,
    0,  215,  220,  169,    0,    0,    0,    0,    0,    0,
    0,    0,  443,    0,    0,    0,    0,  -69,    0,  235,
  -70,  -46,  248,    0,  274,    0, -455,    0,  753, 1227,
  532,  677, -311, -249,  -91,  537, 1160,    0,  451,    0,
  -71,  834,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -300,    0,    0, 1024,    0,    0, 1436,    0, 1182,
    0, -743,    0,    0,    0,  713,    0,  862,    0,  774,
    0, 1002,  -25, -361,  893,    0,    0,  623, 1497,    0,
    0,    0,    0,  872,    0,    0,    0, 1233,    0,    0,
    0,    0,    0, 1587,  759,  761,    0,  681,  760, 1162,
 1163, 1165, 1167, 1164,    0, 1166,    0,    0,    0,  823,
 1063, -532,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -330,  599,    0, -620,    0,    0,    0,    0,
    0, -258,    0,  505,    0,  395,    0,    0,    0,    0,
  578, -533,   -5, -347,    2,    0, 1428,    0,   37,    0,
   76,  116,  125,  131,  132,  147,  154,  160,  172,  173,
    0, -670,    0,    0,    0,  655,    0,  596,    0,    0,
    0,    0,  570, -264,  632, -585,    0,  675, -462,    0,
    0,    0,    0,    0,    0,  589,    0,  588,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  512,    0,    0,    0,    0,    0,    0,
    0,    0,  -61,    0, 1084,    0,  543,    0,    0,    0,
    0,  738,    0,    0,    0,    0,    0, 1448,    0,    0,
    0,    0,    5,  807,    0,    0,    0,  811,
  };
  protected static  short [] yyTable = {           127,
   55,  524,   56,  469,  278,  265,  247,  207,  292,   23,
  744,  327,   55,  738,  208,  129,  176,  564,   45,  541,
   17,  481,  527,  177,  475,  499,  549,  777,  279,  508,
  360, 1102,  803,  709,  576,  778,  346,  594,  780,  940,
  626,  284,  393,  246,  402,  208,  876,  859,  349,  860,
  241,  787,  389,  243,  293,  577, 1100, 1024,  181,  814,
   15,  386, 1087,  347, 1212,  474,  401,  284,  811, 1025,
  349,  338,  287, 1025,  490,  345,  977, 1109, 1321,  462,
  403,  325,  520, 1219,  452,  267,  774,  362,  883,  670,
  366,  885,  750,  347, 1009,  350,  285,  182, 1393, 1205,
 1132,  618,  285,  714,  773,  676,  773,  322,  465,  387,
  453,  441,  466,  566, 1275, 1240,    1,  322, 1143,  270,
 1277,  961,  294, 1264,  857,   69,  816,   65,   65,   21,
  970,   65,   70, 1116, 1087, 1264,  541,  183,  481, 1050,
  326,  492,  454, 1406, 1007,  286,  184,  775,    6,  493,
 1394,  286,  185,  186, 1226,  127,  112,  265,  491,  247,
  285,  620,  858,  112,  442,  773,  322,  285,  187, 1150,
  567,  129,  176,  467,  388,  188,  385,  472,  832,  177,
  516,  189,  815,  474,  393,  474,  285,  474,  736,  285,
  661,  383, 1091,  190,  191,    2,   55,  812,  208,  471,
 1110,  576,  494,  479,  482,  952,  476, 1322,  861,  286,
  325,  618,  618,  564,  181,  486,  286,  618,  994,  618,
  627,  618,  577,  618,  618,  618,   16, 1026,  790, 1425,
  477, 1026,  888,  899,  361,  286,   19,  564,  286,  618,
  445, 1372,  474,   68,   68,  463,  295,  577,  292,   20,
  455,  325,  507,  182,  451,  671, 1386, 1117,  292,  480,
 1010,  443,  444,  456,  548,  485,   69,   69, 1396,  326,
 1397,  620,  620,   70,   70,  935,  794,  620,  618,  620,
 1276,  620,  832,  620,  620,  620, 1278, 1021,    3,    4,
    5,    6, 1151,  183,  495,  517,  940,  518, 1380,  285,
  498,   19,  184,   19,  809,  502,  504,  945,  185,  186,
  326, 1368,  766,  588,   20,  817,   20,  591,  586,  347,
  531,  482,  482,  992,  187,  584,  473,  547,  544,  481,
  546,  188,  983,  984,  502,  577,  832,  189,  620,  869,
 1125,  361,  587,    2,  112,  545,  487,  717,  286,  190,
  191,  519,  361, 1426,  361,  323,  361,  719, 1168,  563,
   19, 1192,  971,  324,  583, 1313,  565,  418,  474,  358,
  347, 1160,  497,   20, 1111,  851,  480,  599,  697,  746,
 1056,  607,  608,  609,  610,  611,  612,  613,  614,  615,
  616,  617,  530,  956,  795,  866,  847,    2,  693, 1108,
  361, 1414,  347,  419,  450,    6,  347, 1114,  690, 1192,
 1346, 1361,  748,  660,  758,  726,  761,  707,  950,  715,
  685, 1381,  508,   50, 1305,  685,  810,  112,  992,  685,
  726,  576,  481, 1095,  347, 1134,  308,   75,  347, 1013,
  347,  209,  347,  482,  685,   19,   19,  662,  663, 1038,
  325, 1335,  577,  674, 1337,  325,  867,  347,   20,   20,
 1295,  870, 1126, 1407, 1271, 1351, 1352,  718,  625,  760,
  708,  685, 1273, 1169, 1359,   53,  726,  720,  685,   19,
 1367,  727,  705,  750, 1204,  347,   47,  420,  421,  347,
  685,  332,   20,  783,  943,   53,  733,  779,  599,  747,
  742,   44,  806, 1079,  934, 1171, 1191,  535,  383,  326,
  938,  789,  482,   53,  326,  359,  577,  788,  280,  446,
  791,  793,  281,  689,  754, 1320, 1171,   53,   53,  753,
   19,  770,  749,  362,  759,  727,  762,  968,  951,  383,
  777,  783,  685,   20,  792,  456,  767,  685,  447,  902,
  995,  685,  337,  457, 1191,  563,   19, 1296,  133,  807,
   68,  767,  565, 1193,   53,  924,  685,  480,   19,   20,
  802,  802,  282,  799,  799, 1171,   19, 1398, 1252,  563,
  446,   20,   19,   69,  589, 1399,  565, 1254,  685,   20,
   70,   68,  527,  685,  268,   20,  727,  310,  959,  686,
  273,  820,  456,   26,  873,   27,  783,  434,   28,  447,
  457, 1193,  685,  683,   69,  482,  133,   29,   19,  435,
  133,   70,  966,  687, 1017,  211,   31, 1253,  726,  963,
  853,   20, 1194,   33,  590,  736, 1255,  683,   34,  337,
  685, 1161,   35,  821,  709,  507, 1400,   47,  265,  337,
  688,  292,   19,  337,   37,  332,   38,  273, 1195,  354,
   39, 1196, 1388, 1389,  683,   20,  212,  337,   40,   41,
  480, 1197,   42,  332,  124,  105,  124, 1198,  410,  727,
 1194,  124,  564,  502,  672, 1199,  510,  237, 1014,  410,
  709,  410,  510,  339,  709,  830,  456,  337,  742,   19,
 1240,  838,  892,  733, 1418,  354, 1195,   19,  839, 1196,
  410,  410,   20, 1014,  133,  337,  672,  669,  895, 1197,
   20,  339,  709,  266,  900, 1198,  564, 1071,  112,  938,
  410,  709,  482, 1199,  332,  187,  924, 1241,  410,  701,
  332,  410,  273,  273,  390,  881,  889,  882,  482,  669,
  332,  706,   66,  640,  332,  640,  886,  669,  767,  277,
  266,  390,  390,  182,   67,   66, 1105,  332,  705, 1234,
   73,  701,  802,   74,   68,  366, 1246,  354, 1268,  706,
  394,  391,   73,  674,  615,   19,  703,  599,  706,  742,
 1268,  285,  913,  395,  354,  354,  705,   69,   20,  332,
  112,  880,  975,  923,   70,  705, 1133,  675,  564, 1241,
   19,  283,  396,  397,  802,  674, 1355,  733,  703,  498,
  313,   68,  703,   20,  534,   68,  313,  273,   73,  988,
  810,  470,  398,  314,  810,  957,  810,  535,  810,  675,
  286,  456,  960,  399,   69,  930,  589,  931,   69,  932,
  733,   70,  742,  273,  536,  136,  133,  569, 1062,  844,
 1207, 1004,  513,  564,  570,  525,  514, 1008, 1140, 1141,
 1063,  802,  802,  273,  485,  544,  571, 1216,  569, 1279,
  509,  928,  297, 1237,  112,  570,  509,  112, 1413,  133,
 1237, 1289, 1290, 1159,  615,  615,  946,  571,   19,  692,
  615,  133,  615,  693,  615,  354,  615,  615,  615,  424,
  425,   20,   19,  136,  724, 1433, 1434,  136,  725,  482,
  989,  361,  615,  426,  427,   20,  272,  272,  990,  742,
  998,  790,  502,  615,  430,  272,  799,  790,  612,  790,
  799,  237,  799,  240,  799,  615,  794,  793, 1052,  273,
  794, 1032, 1053,  431,  794,  793,  589,  589,  237,  432,
  242,  615,  589, 1041,  589,  433,  589,  731,  589,  589,
  589,  514,  264,   53,  923,  767,  589,  589,  589,  589,
  422,  423, 1048,  589,  589,   19,  330,   55,  331,  208,
  589,  589,  589,  589,  589,  589,  436,  790,   20,  790,
  247,  790,  498,  331,  273,  469,  163,  589,  163,  938,
  163,  136,  523,  332,  332,   19,  332,  332,   58, 1080,
  742,  854, 1082,  589,  563,  855,  872,  447,   20,  767,
  873,  565,  133,  332,  449,  265,  332,   55,  498,  208,
 1085,  498, 1086,  176,  478,  176,  896,  176,  612,  612,
  693,  857,  428,  429,  612,  857,  612,   19,  612,   66,
  612,  612,  612,   66,  996,   19,  997,  358,  563,  861,
   20,  482,  961,  861,  961,  565,  612,  332,   20,   19,
   19,  498,  415,  416,  417,  782,  612,  612,  332,  500,
  332,  782,   20,   20,  554,  555,  793,  133,  782,  612,
  793,  556,  557, 1439,  638,  640,  642,  644,  501,  332,
  332,  801, 1085,  801, 1086,  612,  155,  159,  155,  159,
   68,  133,   68,  931,  528,  931,  599,  391,  156,  332,
  156,  529,  133,  133,  126,  498,  126,  332,   19,  265,
  332, 1170, 1189, 1086, 1190,  133,  532,  133, 1121,   53,
  563,   20,  533,  136, 1140, 1141,  552,  565,  581,   69,
  447,  582, 1170,   73, 1086,   46, 1403, 1404,  420,  420,
  616,  421,  421,  675,  912,  912,  685,  685,  630,  632,
  677,  134,  634,  636,  592,  678,  136,  646,  648, 1287,
 1189,  681, 1190,   44,  691,   69,  694,  696,  136,  716,
  722, 1165,  721,  723,  781,  563,  756, 1287, 1245,  785,
  757, 1170,  565, 1086,  782,  786,  805,  818,  819,  825,
  829,  826,  831, 1315,  834, 1316,  828,  836,  276,  842,
  848,  849,  865,  850,  856,  874,  871,  877,  810,  134,
  875,  887,  404,  134,  891,  894,  890,  907,  926, 1299,
  939,  949,  958,  965,  133,  952,  133,  517,  980,  972,
 1165,  985, 1245,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  986,  993, 1000, 1005, 1250, 1251, 1011,
  616,  616,  273, 1012, 1020,  276,  616,   19,  616, 1033,
  616, 1022,  616,  616,  616,  133, 1035, 1037,  133, 1039,
   20, 1040, 1042, 1282, 1043, 1283,  742, 1044,  616, 1053,
 1052, 1061, 1064, 1347, 1065, 1190, 1066, 1068,  498,  616,
 1072, 1245, 1069, 1076, 1083, 1362, 1084, 1190, 1096,  136,
 1103,  616, 1115, 1120,  133, 1123, 1127,  134, 1374, 1376,
 1190, 1190, 1124, 1128, 1144,  482,  482,  616, 1146, 1152,
 1153, 1155, 1158, 1362, 1362, 1190, 1190, 1159, 1203, 1208,
   19, 1206,  273, 1209, 1210, 1213, 1220, 1224, 1223, 1270,
  276,  276, 1274,   20, 1284, 1285,  133,  273,  742, 1288,
 1293, 1278, 1302, 1303, 1294,   19, 1296, 1304, 1306, 1307,
 1310, 1309, 1311, 1312,  136, 1362, 1240, 1190,   20, 1318,
  599,  599, 1420, 1420, 1327, 1319, 1328, 1330, 1427, 1427,
 1338, 1339, 1438, 1342, 1356, 1360, 1357, 1366,  136, 1394,
 1369, 1370, 1378, 1379, 1385, 1384, 1395, 1391, 1405,  136,
  136, 1393, 1411,  133,  133,  525, 1412, 1430,  367, 1432,
 1441, 1436, 1437,    9,   19,  957,   19,  542,  896,  504,
  897,  642,  949,   19,   31,  276,  505,   20,  456,   20,
  912,   19,   19,  643,   32,  305,   20,  211, 1267,  503,
   31,  104,  457,  803,   20,   20,  904,   32,  332,  134,
 1267,  276,  804,  795,  827, 1267,  862,   19,  863,   19,
  796,  828,  705,  276,  133,  705,  309, 1267, 1267,  685,
   20,  276,   20,  864,  866,  726,  129,  276,  685,  114,
  130,  354,  134,  244,  115,   25, 1046,  296,  917, 1047,
  824,  320,  321,  322,  134,  328,  329, 1248, 1214, 1249,
  342,  343, 1101, 1392,  354, 1358,  348,  351,  598,  353,
 1297,  357, 1371,  276, 1354,  947,  948,  354,  845,  944,
 1280,  136,  354,  136, 1429,  233, 1298,  354, 1218,  354,
  354,  354,  354, 1221, 1377, 1147,  133,  354, 1375, 1317,
  400,  354,  915,   22,  542,  354, 1148,  276, 1422,  772,
  987,  602,  964,  903,  273,  841,  354,  864,  333, 1023,
  550,  650,  136,  652,  862,  136,  654,  658,  804,  656,
  659, 1060, 1130,  893, 1225,  437,  133, 1074, 1016, 1034,
  133, 1067, 1081,  764,  133, 1006, 1073, 1075, 1138, 1112,
  755,  978,  354,    0,  276,  438,    0,    0,  916,  914,
    0,  136,  276,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  133,    0,    0,    0,    0,    0,  598,  598,
    0,   34,    0,    0,  598,  134,  598,  273,  598,    0,
  598,  598,  598,    0,    0,    0,    0,    0,    0,    0,
  598,  598,  354,  136,    0,  598,  598,    0,    0,    0,
    0,    0,  273,    0,  598,  598,  598,  598,    0,    0,
    0,  133,  133,    0,  367,    0,    0,    0,    0,  598,
  367,  368,  370,  372,  374,  376,  378,  380,  382,    0,
  276,    0,    0,    0,    0,  598,    0,    0,    0,    0,
  134,    0,    0,    0,    0,  351,    0,  400,    0,    0,
  136,  136,    0,    0,    0,  276,  367,    0,    0,    0,
    0,  273,    0,    0,  134,    0,    0,  133,    0,    0,
    0,    0,    0,    0,    0,  134,  134,    0,  273,  273,
    0,    0,    0,    0,    0,    0,    0,  521,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  367,    0,    0,
    0,  367,  613,    0,  273,    0,  273,    0,    0,    0,
    0,  136,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  367,  898,    0,  367,  367,    0,    0,    0,  367,
  367,  367,  367,  367,  367,    0,  367,  367,  367,    0,
  367,  367,    0,  276,  367,  367,  367,  367,    0,    0,
   22,  367,  367,    0,   22,    0,  367,  367,  367,  367,
  367,  367,  367,  367,    0,   22,    0,    0,    0,    0,
   22,    0,    0,    0,   22,  367,    0,   22,  367,    0,
  367,    0,  367,  136,    0,  367,    0,    0,    0,   22,
   22,  367,    0,    0,   22,   22,    0,  134,    0,  134,
   22,    0,   22,   22,   22,   22,    0,    0,    0,    0,
   22,    0,  613,  613,   22,    0,   22,    0,  613,    0,
  613,    0,  613,  136,  613,  613,  613,  136,   34,   22,
  276,  136,   34,    0,    0,   22,    0,    0,  134,    0,
  613,  134,    0,   34,    0,    0,  706,    0,   34,    0,
  613,  613,   34,    0,    0,   34,    0,    0,    0,  136,
  276,    0,    0,  613,   19,   22,   22,   34,   34,    0,
    0,    0,   34,   34,    0,    0,    0,  134,   34,  613,
   34,   34,   34,   34,    0,    0,    0,    0,   34,    0,
  751,    0,   34,    0,   34,    0,    0,    0,    0,    0,
    0,    0,   23,    0,    0,    0,    0,   34,  136,  136,
  276,    0,    0,   34,    0,    0,    0,    0,    0,  134,
    0,  619,  621,  623,  276,  276,  629,  629,  629,  629,
  629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
  629,  629,    0,   34,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  136,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  134,  134,  898,  898,
    0,    0,    0,  276,    0,    0,  898,  898,  898,  898,
  898,    0,  898,  898,    0,  898,  898,    0,  898,  898,
  898,  898,  898,  332,    0,    0,    0,  898,    0,  898,
  898,  898,  898,  898,  898,    0,    0,  898,    0,    0,
    0,  898,  898,    0,  898,  898,  898,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  898,  134,  898,    0,
  898,  898,    0,    0,  898,    0,  898,  898,  898,  898,
  898,  898,  898,  898,  898,  898,  898,  898,    0,  898,
    0,    0,  898,  898,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  248,    0,    0,    0,    0,
    0,    0,    0,    0,  898,  898,    0,  784,  898,  898,
    0,    0,    0,  898,  898,    0,    0,  898,  249,    0,
    0,    0,  898,  898,  898,  898,  898,    0,    0,  134,
  898,  250,  898,    0,    0,    0,  252,    0,  898,  898,
    0,  253,    0,  254,  255,  256,  257,    0,    0,    0,
    0,  258,  276,    0,    0,  259,    0,    0,    0, 1258,
    0,  248,    0,  898,  898,  898,  898,    0,  898,  134,
  260,  897,  898,  134,    0,  898,    0,  134,    0,   23,
    0,    0,    0,   23,  249,    0,    0,    0,    0,    0,
  514,    0,    0,    0,   23,    0,    0,  250,    0,   23,
    0,    0,  252,   23,    0,  134,   23,  253,    0,  254,
  255,  256,  257,    0,    0,    0,    0,  258,   23,   23,
    0,  259,    0,   23,   23,  276,   47,  606,   47,   23,
    0,   23,   23,   23,   23,    0,  260,    0,    0,   23,
    0,    0,   47,   23,    0,   23,    0,    0,    0,   47,
  276,    0,    0,  974,  134,  134, 1260,    0,   23,    0,
    0,    0,   47,    0,   23,   47,    0,   47,    0,    0,
    0,    0,   47,    0,   47,   47,   47,   47,   47,  332,
   47,    0,   47,   47,  332,  332,   47,    0,   47,    0,
   47,   47,   47,   47,   23,   23,   47,    0,   47,    0,
    0,   47,   47,    0,    0,    0,    0,  332,    0,  276,
  134,  276,    0,    0,    0,    0,    0,   47,  276,    0,
  332,  332, 1278,    0,    0,  332,  276,  276,  332,    0,
  332,    0,  332,  332,  332,  332,    0,  606,  606,    0,
  332,    0,    0,  606,  332,  606,    0,  606,  332,  606,
  606,  606,  276,  290,  276,    0,    0,    0,    0,  332,
  606,    0,  332,  821,  606,  606,  332,    0,    0,    0,
    0,    0,    0,    0,    0,  606,  606,    0,    0,    0,
  332,    0,    0,    0,    0,    0,  332,  332,  606,  332,
  332,    0,    0,    0,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  606,  332,  332,    0,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,    0,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,    0,    0,  332,    0,  332,  514,  332,    0,    0,
  332,  514,  514,    0,    0,    0,  332,    0,    0,   26,
    0,   27,    0,    0,   28,    0, 1162,    0,    0,    0,
    0,    0,    0,   29,  514,    0,    0,    0,    0,    0,
    0,    0,   31,    0,    0,    0,    0,  514,  514,   33,
    0,    0,  514,  332,   34,  514, 1163,  514,   35,  514,
  514,  514,  514,    0,    0,    0,    0,  514,    0,    0,
   37,  514,   38,    0,    0,  514,   39, 1164,    0,    0,
    0,    0,    0,    0,   40,   41,  514,    0,   42,  514,
    0,  105,    0,  514,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  514,  514,    0,  514,  514,    0,    0,
    0,  514,  514,    0,  514,  514,  514,  514,  514,  514,
  514,    0,  514,  514,    0,  514,  514,  514,  514,  514,
  514,  514,  514,  514,  514,    0,  514,  514,  514,  514,
  514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
  514,  514,  514,  514,  514,  514,  514,  514,    0,    0,
  514,    0,  514,    0,  514,    0,  266,  514,    0,  821,
  821,    0,    0,  514,    0,    0,    0,  821,  821,  821,
  821,  821,    0,  821,  821,    0,  821,  821,    0,  821,
  821,  821,  821,  322,    0,    0,    0,    0,  821,    0,
  821,  821,  821,  821,  821,  821,    0,    0,  821,    0,
    0,    0,  821,  821,    0,  821,  821,  821,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  821,    0,  821,
    0,  821,  821,    0,    0,  821,    0,  821,  821,  821,
  821,  821,  821,  821,  821,  821,  821,  821,  821,    0,
  821,    0,    0,  821,  821,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  821,  821,    0,    0,  821,
  821,    0,    0,    0,  821,  821,    0,    0,  821,    0,
    0,    0,    0,  821,  821,  821,  821,  821,    0,  332,
    0,  821,    0,  821,  332,  332,    0,    0,    0,  821,
  821,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  248,    0,    0,    0,    0,    0,  332,    0,    0,
    0,    0,    0,    0,  821,  821,  821,  821,    0,  821,
  332,  332,    0,  779,  249,  332,  821,    0,  332,    0,
  332,    0,  332,  332,  332,  332,    0,  250,    0,    0,
  332,  251,  252,    0,  332,    0,    0,  253,  332,  254,
  255,  256,  257,    0,    0,    0,    0,  258,    0,  332,
    0,  259,  332,    0,    0,    0,  332,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  260,    0,    0,    0,
  332,  599,    0,    0,    0,    0,  332,    0,    0,  332,
  332,    0,    0,    0,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,    0,  332,  332,    0,    0,  332,
  332,  332,  332,  332,    0,    0,  332,  332,    0,    0,
    0,  332,  332,  332,  332,  332,  332,  332,  332,  322,
    0,    0,    0,    0,  322,  322,    0,    0,    0,    0,
  332,    0,    0,  332,    0,  332,    0,  332,    0,    0,
  332,    0,    0,    0,    0,    0,  332,  322,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  322,  322,    0,  362,    0,  322,    0,    0,  322,    0,
  322,    0,  322,  322,  322,  322,    0,    0,    0,    0,
  322,  599,  599,    0,  322,    0,    0,  599,  322,  599,
    0,  599,    0,  599,  599,  599,    0,    0,    0,  322,
    0,    0,  322,  599,  599,    0,  322,    0,  599,  599,
    0,    0,    0,    0,    0,    0,    0,  599,  599,  599,
  599,  600,    0,    0,    0,    0,  322,    0,    0,  322,
  322,    0,  599,    0,  322,  322,  322,  322,  322,  322,
    0,  322,  322,  322,    0,  322,  322,    0,  599,  322,
  322,  322,  322,   29,    0,    0,  322,  322,    0,    0,
    0,  322,  322,  322,  322,  322,  322,  322,  322,  779,
    0,    0,    0,    0,  779,  779,   29,    0,    0,    0,
  322,    0,    0,  322,    0,  322,    0,  322,    0,   29,
  322,    0,    0,    0,   29,    0,  322,  779,    0,   29,
    0,   29,   29,   29,   29,    0,    0,   29,    0,   29,
  779,  779,    0,   29,    0,  779,    0,    0,  779,    0,
  779,   29,  779,  779,  779,  779,    0,    0,   29,    0,
  779,  600,  600,  609,  779,    0,    0,  600,  779,  600,
    0,  600,    0,  600,  600,  600,    0,    0,    0,  779,
    0,    0,  779,  600,  600,    0,  779,    0,  600,  600,
    0,    0,    0,    0,   29,   29,    0,  600,  600,  600,
  600,    0,    0,    0,    0,    0,  779,    0,    0,  779,
  779,    0,  600,    0,  779,  779,  779,  779,  779,  779,
    0,  779,  779,  779,    0,  779,  779,    0,  600,  779,
  779,  779,  779,   33,    0,    0,  779,  779,    0,    0,
    0,  779,  779,  779,  779,  779,  779,  779,  779,  362,
    0,    0,    0,    0,  362,  362,    0,    0,    0,    0,
  779,    0,    0,  779,    0,  779,    0,  779,    0,    0,
  779,    0,    0,  609,  609,    0,  779,  362,    0,  609,
    5,  609,    0,  609,    0,  609,  609,  609,    0,    0,
  362,  362,    0,    0,    0,  362,  609,    0,  362,    0,
  362,  609,  362,  362,  362,  362,    0,    0,    0,    0,
  362,  609,  609,    0,  362,    0,    0,    0,  362,    0,
    0,    0,    0,  938,  609,    0,    0,    0,    0,  362,
    0,    0,  362,    0,    0,    0,  362,    0,    0,    0,
  609,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  362,    0,    0,  362,
  362,    0,    0,    0,  362,  362,   47,  362,  362,  362,
    0,  362,  362,  362,    0,  362,  362,    0,    0,  362,
  362,  362,  362,    0,    0,    0,  362,  362,    0,    0,
    0,  362,  362,  362,  362,  362,  362,  362,  362,    0,
    0,    0,    0,    0,    0,    0,    0,   29,   29,    7,
  362,    0,   29,  362,    0,  362,   29,    0,   29,    0,
    0,   29,    0,   29,   29,    0,  362,    0,   29,    0,
   29,    0,   29,   29,   29,   29,    0,    0,    0,   29,
    0,    0,    0,    0,   29,    0,   29,   29,   29,    0,
    0,   29,   29,   29,    0,   29,  939,    0,   29,    0,
   29,   29,   29,   29,    0,    0,    0,   29,   29,   29,
    0,    0,   29,   29,   29,    0,   29,    0,    0,    0,
    0,   29,   29,    0,    0,   29,    0,   29,   29,    0,
   33,    0,    0,   29,   33,    0,    0,    0,    0,   48,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   33,    0,    0,    0,   33,    0,    0,   33,    0,    0,
    0,    0,   29,   29,   29,    0,    0,    0,    0,   33,
   33,    0,   29,    0,   33,   33,    0,    5,    0,    0,
   33,   47,   33,   33,   33,   33,    0,    0,    0,    0,
   33,    0,   47,    0,   33,    0,   33,   47,    0,    0,
    0,   47,    0,    0,   47,    0,    0,    0,    0,   33,
    0,    0,    0,   29,    0,   33,   47,   47,    0,    0,
  938,   47,   47,    0,   47,    0,    0,   47,    0,   47,
   47,   47,   47,    0,    0,   47,    0,   47,    0,    0,
   47,   47,    0,   47,   47,    0,   33,   47,    0,    0,
    0,    0,    0,    0,    0,    0,   47,    0,    0,   47,
   47,    0,   47,   47,   47,   47,    0,   47,    0,    0,
   47,    0,   47,   47,   47,   47,    0,    0,   47,    0,
   47,    0,    0,   47,   47,    0,   47,   47,    0,    0,
   47,    0,    0,    0,    0,    0,    0,    0,    0,   47,
    0,    0,   47,   47,    0,   47,    7,   47,   47,    0,
   48,    0,    0,   47,    0,   47,   47,   47,   47,    0,
    0,   48,    0,   47,    0,    0,   48,   47,    0,   47,
   48,    0,    0,   48,    0,    0,    0,    0,    0,    0,
    0,    0,   47,    0,    0,   48,   48,    0,   47,    0,
   48,   48,    0,  939,    0,    0,   48,   47,   48,   48,
   48,   48,    0,    0,    0,    0,   48,    0,   47,    0,
   48,    0,   48,   47,    0,    0,    0,   47,    0,    0,
   47,    0,    0,    0,    0,   48,    0,    0,    0,    0,
    0,   48,   47,   47,    0,    0,   48,   47,   47,    0,
   48,    0,    0,   47,    0,   47,   47,   47,   47,    0,
    0,   48,    0,   47,    0,    0,   48,   47,    0,   47,
   48,    0,    0,   48,    0,    0,    0,    0,    0,    0,
    0,    0,   47,    0,    0,   48,   48,    0,   47,    0,
   48,   48,    0,    0,    0,    0,   48,    0,   48,   48,
   48,   48,    0,    0,    0,    0,   48,    0,    0,    0,
   48,    0,   48,    0,    0,    0,    0,    0,   76,    0,
    0,    0,    0,    0,    0,   48,   77,   26,   78,   27,
    0,   48,   28,   79,    0,   80,   81,    0,   82,   83,
   84,   29,    0,    0,    0,    0,    0,   85,    0,   86,
   31,   87,   88,   89,   90,    0,    0,   33,    0,    0,
    0,   91,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   94,    0,   37,    0,
   38,   95,    0,    0,   39,    0,   96,   97,   98,   99,
  100,  101,   40,   41,  102,  103,   42,  104,  332,  105,
    0,    0,  106,  107,  332,    0,    0,    0,  782,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  108,  109,    0,    0,  110,  111,
    0,    0,    0,  112,    0,    0,    0,  113,    0,    0,
  332,    0,  114,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,    0,    0,    0,  782,    0,  121,  122,
  332,    0,    0,    0,    0,    0,  332,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  123,  124,  125,  126,    0,    0,    0,
    0,    0,    0,    0,    0,  209,    0,    0,    0,  332,
    0,    0,  332,    0,    0,  332,  332,    0,    0,    0,
    0,    0,    0,    0,  332,  332,  332,  332,  332,  332,
  332,  782,  332,  590,  332,  332,    0,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,    0,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
    0,  332,    0,    0,  332,    0,  332,  332,  332,  332,
  332,  332,    0,    0,    0,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,    0,  332,  332,    0,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,    0,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,    0,  516,    0,    0,  332,    0,  332,  516,
    0,  332,    0,  590,  590,    0,    0,  332,    0,  590,
    0,  590,    0,  590,    0,  590,  590,  590,    0,    0,
    0,    0,    0,  590,  590,  590,  590,  248,    0,    0,
  590,  590,    0,    0,    0,  516,    0,  590,  590,  590,
  590,  590,  590,    0,    0,    0,    0,    0,    0,    0,
  249,    0,    0,    0,  590,    0,  512,    0,    0,    0,
    0,    0,  512,  250,    0,    0,    0,    0,  252,    0,
  590,    0,    0,  253,    0,  254,  255,  256,  257,    0,
    0,    0,    0,  258,    0,    0,    0,  259,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  512,    0,
    0,  516,  260,  516,  516,    0,    0,    0,  516,  516,
  516,  516,  516,  516,  516,  516,  516,  516,    0,  516,
  516,  584,  516,  516,  516,  516,  516,  516,  516,  516,
  516,  516,    0,  516,  516,  516,  516,  516,  516,  516,
  516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
  516,  516,  516,  516,  516,    0,    0,    0,    0,    0,
    0,  516,    0,    0,  512,    0,  512,  512,    0,    0,
  516,  512,  512,    0,  512,  512,  512,  512,  512,  512,
  512,    0,  512,  512,    0,  512,  512,  512,  512,  512,
  512,  512,  512,  512,  512,    0,  512,  512,  512,  512,
  512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
  512,  512,  512,  512,  512,  512,  512,  512,    0,  520,
    0,    0,    0,    0,  512,  520,    0,  512,    0,    0,
    0,  584,  584,  512,    0,    0,    0,  584,    0,  584,
    0,  584,    0,  584,  584,  584,    0,    0,    0,    0,
    0,  584,  584,  584,  584,    0,    0,    0,  584,  584,
    0,  520,    0,  584,  584,  584,  584,  584,  584,  584,
  584,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  332,  584,    0,    0,    0,    0,  332,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  584,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  332,    0,    0,    0,  520,    0,  520,
  520,    0,    0,    0,    0,  520,    0,  520,  520,  520,
  520,  520,  520,  520,  591,  520,  520,    0,  520,  520,
  520,  520,  520,  520,  520,  520,  520,  520,    0,  520,
  520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
  520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
  520,    0,    0,    0,    0,    0,    0,  520,    0,  332,
  520,  332,  332,    0,    0,    0,  520,  332,    0,  332,
  332,  332,  332,  332,  332,  332,    0,  332,  332,    0,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
    0,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,    0,  442,    0,    0,    0,    0,  332,
  442,    0,  332,    0,  591,  591,    0,    0,  332,    0,
  591,    0,  591,    0,  591,    0,  591,  591,  591,    0,
    0,    0,    0,    0,  591,  591,  591,  591,    0,    0,
    0,  591,  591,    0,    0,    0,  442,    0,  591,  591,
  591,  591,  591,  591,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  591,  389,    0,    0,    0,
    0,    0,  389,    0,    0,    0,    0,    0,    0,    0,
    0,  591,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  389,    0,
    0,    0,  442,    0,  442,  442,    0,    0,    0,    0,
  442,    0,  442,  442,  442,  442,  442,  442,  442,    0,
  442,  442,    0,  442,  442,  442,  442,  442,  442,  442,
  442,  442,  442,    0,  442,  442,  442,  442,  442,  442,
  442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
  442,  442,  442,  442,  442,  442,    0,    0,    0,    0,
    0,    0,  442,  322,  389,  442,    0,    0,    0,    0,
    0,  442,  389,  322,  389,  389,  389,  389,  389,    0,
  389,    0,  389,  389,  547,  389,  389,  389,  389,  389,
  547,  389,  389,  389,  389,    0,  389,  389,  389,  389,
  389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
  389,  389,  389,  389,  389,  389,  389,  389,    0,    0,
    0,    0,  322,    0,  389,    0,  547,  389,    0,    0,
    0,    0,    0,  389,    0,    0,  567,    0,    0,    0,
    0,    0,  567,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  567,    0,
    0,    0,    0,    0,  585,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  547,  547,    0,    0,    0,    0,
  547,    0,  547,    0,  547,    0,  547,  547,  547,    0,
  547,  547,    0,  547,  547,  547,  547,  547,  547,  547,
  547,  547,  547,    0,    0,    0,  547,  547,  547,  547,
  547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
  547,  547,  547,  547,  574,  547,  567,  567,    0,    0,
  574,    0,  567,    0,  567,    0,  567,    0,  567,  567,
  567,  547,  567,  567,    0,    0,  567,  567,  567,  567,
  567,  567,  567,  567,  567,    0,    0,    0,  567,  567,
  567,  567,  567,  567,  567,  567,  574,    0,    0,    0,
    0,    0,  575,    0,  585,  585,    0,  567,  575,    0,
  585,    0,  585,    0,  585,    0,  585,  585,  585,    0,
    0,    0,    0,  567,  585,  585,  585,  585,    0,    0,
    0,  585,  585,    0,    0,    0,  585,  585,  585,  585,
  585,  585,  585,  585,  575,    0,    0,    0,    0,    0,
    0,  576,    0,    0,    0,  585,    0,  576,    0,    0,
    0,    0,    0,    0,  574,  574,    0,    0,    0,    0,
  574,  585,  574,    0,  574,    0,  574,  574,  574,    0,
  574,  574,    0,    0,  574,  574,  574,  574,    0,    0,
    0,  574,  574,  576,    0,    0,  574,  574,  574,  574,
  574,  574,  574,  574,    0,    0,    0,  586,    0,    0,
    0,    0,  575,  575,    0,  574,    0,    0,  575,    0,
  575,    0,  575,    0,  575,  575,  575,    0,  575,  575,
    0,  574,  575,  575,  575,  575,    0,    0,    0,  575,
  575,    0,    0,    0,  575,  575,  575,  575,  575,  575,
  575,  575,    0,    0,    0,  592,    0,    0,    0,    0,
    0,  576,  576,  575,    0,    0,    0,  576,    0,  576,
    0,  576,    0,  576,  576,  576,    0,  576,  576,  575,
    0,  576,  576,  576,  576,    0,    0,    0,  576,  576,
    0,    0,    0,  576,  576,  576,  576,  576,  576,  576,
  576,    0,    0,  593,    0,    0,    0,    0,    0,    0,
    0,    0,  576,    0,    0,    0,    0,  586,  586,    0,
    0,    0,    0,  586,    0,  586,    0,  586,  576,  586,
  586,  586,    0,    0,    0,    0,    0,  586,  586,  586,
  586,    0,    0,    0,  586,  586,    0,    0,    0,  586,
  586,  586,  586,  586,  586,  586,  586,    0,    0,  603,
    0,    0,    0,    0,    0,  592,  592,    0,  586,    0,
    0,  592,    0,  592,    0,  592,    0,  592,  592,  592,
    0,    0,    0,    0,  586,  592,  592,  592,  592,    0,
    0,    0,  592,  592,  604,    0,    0,    0,    0,  592,
  592,  592,  592,  592,  592,    0,    0,    0,    0,    0,
    0,    0,    0,  593,  593,    0,  592,    0,    0,  593,
    0,  593,    0,  593,    0,  593,  593,  593,  607,    0,
    0,    0,  592,  593,  593,  593,  593,    0,    0,    0,
  593,  593,    0,    0,    0,    0,    0,  593,  593,  593,
  593,  593,  593,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  610,    0,  593,    0,    0,    0,    0,  603,
  603,    0,    0,    0,    0,  603,    0,  603,    0,  603,
  593,  603,  603,  603,    0,    0,    0,    0,    0,    0,
    0,  603,  603,    0,    0,    0,  603,  603,    0,    0,
    0,    0,    0,    0,  604,  604,    0,  603,  603,    0,
  604,    0,  604,    0,  604,    0,  604,  604,  604,    0,
  603,    0,    0,    0,    0,    0,  604,  604,    0,    0,
    0,  604,  604,    0,    0,    0,  603,    0,  607,  607,
    0,    0,  604,  604,  607,  332,  607,    0,  607,  782,
  607,  607,  607,    0,    0,  604,    0,    0,    0,    0,
    0,  607,    0,    0,    0,  607,  607,    0,    0,    0,
    0,  604,  610,  610,    0,    0,  607,  607,  610,    0,
  610,  332,  610,    0,  610,  610,  610,    0,    0,  607,
    0,    0,    0,    0,    0,  610,    0,  782,    0,    0,
  610,    0,    0,    0,    0,  607,    0,    0,    0,    0,
  610,  610,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  610,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  610,
  332,    0,    0,    0,    0,    0,  332,  332,    0,    0,
    0,    0,    0,    0,    0,  332,  332,    0,  332,    0,
  332,    0,  782,  332,    0,  332,  332,    0,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,    0,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,    0,    0,  558,    0,  332,    0,  332,    0,    0,
  332,   77,   26,   78,   27, 1025,  332,   28,   79,    0,
   80,   81,    0,   82,   83,   84,   29,    0,    0,    0,
    0,    0,   85,    0,   86,   31,   87,   88,   89,   90,
    0,    0,   33,    0,    0,    0,   91,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   94,    0,   37,    0,   38,   95,    0,    0,   39,
    0,   96,   97,   98,   99,  100,  101,   40,   41,  102,
  103,   42,  104,    0,  105,    0,    0,  106,  107,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
  109,    0,    0,  110,  111,    0,    0,    0,  112,    0,
    0,    0,  113,    0,    0,    0,    0,  114,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,    0,    0,
    0,    0,    0,  121,  122,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   76,    0,  123,  559,
  125,  126,    0, 1026,   77,   26,   78,   27,    0,    0,
   28,   79,    0,   80,   81,    0,   82,   83,   84,   29,
    0,    0,    0,    0,    0,   85,    0,   86,   31,   87,
   88,   89,   90,    0,    0,   33,    0,    0,    0,   91,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   94,    0,   37,    0,   38,   95,
    0,    0,   39,    0,   96,   97,   98,   99,  100,  101,
   40,   41,  102,  103,   42,  104,    0,  105,    0,    0,
  106,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  109,    0,    0,  110,  111,    0,    0,
    0,  112,    0,    0,    0,  113,    0,    0,    0,    0,
  114,  115,  116,  117,  118,    0,    0,    0,  119,    0,
  120,    0,    0,    0,    0,    0,  121,  122,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  300,    0,    0,
    0,  123,  124,  125,  126,   77,   26,   78,   27,    0,
    0,   28,   79,    0,   80,   81,    0,   82,   83,   84,
   29,    0,    0,    0,    0,    0,   85,    0,   86,   31,
   87,   88,   89,   90,    0,    0,   33,    0,    0,    0,
   91,   34,    0,   92,   93,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   94,    0,   37,    0,   38,
   95,    0,    0,   39,    0,   96,   97,   98,   99,  100,
  101,   40,   41,  102,  103,   42,  104,    0,  105,    0,
    0,  106,  107,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  108,  109,    0,    0,  110,  111,    0,
    0,    0,  112,    0,    0,    0,  113,    0,    0,    0,
    0,  114,  115,  116,  117,  118,    0,    0,    0,  119,
    0,  120,    0,    0,    0,    0,    0,  121,  122,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  558,    0,
    0,    0,  123,  124,  125,  126,   77,   26,   78,   27,
    0,    0,   28,   79,    0,   80,   81,    0,   82,   83,
   84,   29,    0,    0,    0,    0,    0,   85,    0,   86,
   31,   87,   88,   89,   90,    0,    0,   33,    0,    0,
    0,   91,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   94,    0,   37,    0,
   38,   95,    0,    0,   39,    0,   96,   97,   98,   99,
  100,  101,   40,   41,  102,  103,   42,  104,    0,  105,
    0,    0,  106,  107,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  108,  109,    0,    0,  110,  111,
    0,    0,    0,  112,    0,    0,    0,  113,    0,    0,
    0,    0,  114,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,    0,    0,    0,    0,    0,  121,  122,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  935,
    0,    0,    0,  123,  559,  125,  126,  935,  935,  935,
  935,    0,    0,  935,  935,    0,  935,  935,    0,  935,
  935,  935,  935,    0,    0,    0,    0,    0,  935,    0,
  935,  935,  935,  935,  935,  935,    0,    0,  935,    0,
    0,    0,  935,  935,    0,  935,  935,  935,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  935,    0,  935,
    0,  935,  935,    0,    0,  935,    0,  935,  935,  935,
  935,  935,  935,  935,  935,  935,  935,  935,  935,    0,
  935,    0,    0,  935,  935,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  935,  935,    0,    0,  935,
  935,    0,    0,    0,  935,    0,    0,    0,  935,    0,
    0,    0,    0,  935,  935,  935,  935,  935,    0,    0,
    0,  935,    0,  935,    0,    0,    0,    0,    0,  935,
  935,    0,    0,    0,    0,    0,    0,    0,  595,    0,
    0,    0,    0,    0,    0,    0,   77,   26,    0,   27,
    0,    0,   28,  289,  935,  935,  935,  935,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,    0,    0,
   31,    0,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,  353,   92,   93,   35,    0,  596,    0,
    0,    0,    0,    0,    0,  597,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,  353,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,  353,
    0,    0,    0,  107,  353,    0,    0,  232,    0,  353,
    0,  353,  353,  353,  353,    0,    0,    0,    0,  353,
    0,    0,    0,  353,  108,  109,    0,  353,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,  353,    0,
  598,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,    0,    0,    0,    0,    0,  121,  122,
    0,    0,    0,    0,    0,    0,    0,  740,    0,    0,
    0,    0,    0,    0,  353,   77,   26,    0,   27,    0,
    0,   28,  289,  123,  124,  125,  126,   82,   83,    0,
   29,    0,    0,  169,    0,  169,   85,    0,  169,   31,
    0,    0,    0,    0,    0,    0,   33,  169,    0,    0,
    0,   34,    0,   92,   93,   35,  169,    0,    0,    0,
    0,    0,    0,  169,  353,    0,    0,   37,  169,   38,
   95,    0,  169,   39,    0,    0,   97,    0,   99,    0,
  101,   40,   41,  290,  169,   42,  169,    0,    0,    0,
  169,    0,  107,    0,    0,    0,    0,    0,  169,  169,
    0,    0,  169,    0,    0,  169,    0,    0,    0,    0,
    0,    0,    0,  108,  336,    0,    0,  110,  111,    0,
    0,    0,  523,  741,    0,    0,  113,    0,    0,    0,
    0,    0,  115,  116,  117,  118,    0,    0,    0,  119,
    0,  120,    0,    0,  960,    0,    0,  121,  122,    0,
    0,    0,    0,    0,    0,    0,  901,    0,    0,    0,
    0,    0,    0,    0,   77,   26,    0,   27,    0,    0,
   28,  289,  123,  337,  125,  126,   82,   83,    0,   29,
    0,    0,    0,    0,    0,   85,    0,    0,   31,    0,
  169,    0,    0,    0,    0,   33,    0,  248,    0,    0,
   34,    0,   92,   93,   35,    0,  596,    0,    0,    0,
    0,    0,    0,  597,    0,    0,   37,    0,   38,   95,
  249,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  290,  250,   42,    0,    0,    0,  252,    0,
    0,  107,    0,  253,    0,  254,  255,  256,  257,    0,
    0,    0,    0,  258,    0,    0,    0,  259,    0,    0,
    0, 1258,  108,  109,    0,    0,  110,  111,    0,    0,
    0,    0,  260,    0,    0,  113,    0,    0,    0,    0,
    0,  115,  116,  117,  118,    0,    0,    0,  119,    0,
  120,    0,    0,    0,    0,    0,  121,  122,    0,    0,
    0,    0,    0,    0,    0,  740,    0,    0, 1259,    0,
    0,    0,    0,   77,   26,    0,   27,    0,    0,   28,
  289,  123,  124,  125,  126,   82,   83,    0,   29,    0,
    0,   26,    0,   27,   85,    0,   28,   31,    0,    0,
    0,    0,    0,    0,   33,   29,    0,    0,    0,   34,
    0,   92,   93,   35,   31,    0,    0,    0, 1260,    0,
    0,   33,    0,    0,    0,   37,   34,   38,   95,  904,
   35,   39,    0,    0,   97,    0,   99,    0,  101,   40,
   41,  290,   37,   42,   38,    0,    0,   26,   39,   27,
  107,    0,   28,    0,    0,    0,   40,   41,    0,    0,
   42,   29,    0,  105,    0,    0,    0,    0,    0,    0,
   31,  108,  336,    0,    0,  110,  111,   33,    0,    0,
  523,    0,   34,    0,  113,    0,   35,    0,  569,    0,
  115,  116,  117,  118,    0,  570,    0,  119,   37,  120,
   38,    0,    0,    0,   39,  121,  122,  571,    0,    0,
    0,    0,   40,   41,  740,    0,   42,    0,    0,  572,
    0,    0,   77,   26,    0,   27,    0,    0,   28,  289,
  123,  337,  125,  126,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,    0,  573,   31,    0,  266,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  290,    0,   42,    0,    0,    0,  169,    0,  169,  107,
    0,  169,    0,    0,  574,    0,    0,    0,    0,    0,
  169,    0,    0,    0,    0,    0,    0,    0,    0,  169,
  108,  336,    0,    0,  110,  111,  169,    0,    0,  523,
    0,  169,    0,  113,    0,  169,    0,    0,    0,  115,
  116,  117,  118,    0,    0,    0,  119,  169,  120,  169,
    0,    0,    0,  169,  121,  122,    0,    0,    0,    0,
    0,  169,  169,  732,    0,  169,    0,    0,  169,    0,
    0,   77,   26,    0,   27,    0,    0,   28,  289,  123,
  337,  125,  126,   82,   83,    0,   29,    0,    0,   26,
    0,   27,   85,    0,   28,   31,    0,    0,    0,    0,
    0,    0,   33,   29,    0,  960,    0,   34,    0,   92,
   93,   35,   31,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0,   37,   34,   38,   95,    0,   35,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
   37,   42,   38,    0,    0,   26,   39,   27,  107,    0,
   28,    0,    0,  169,   40,   41,    0,    0,   42,   29,
    0,  540,    0,    0,    0,    0,    0,    0,   31,  108,
  336,    0,    0,  110,  111,   33,    0,    0,    0,  863,
   34,    0,  113,    0,   35,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,   37,  120,   38,    0,
    0,    0,   39,  121,  122,    0,    0,    0,    0,    0,
   40,   41,  911,    0,   42,    0,    0,  572,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  289,  123,  337,
  125,  126,   82,   83,    0,   29,    0,    0,  499,    0,
  499,   85,    0,  499,   31,    0,  266,    0,    0,    0,
    0,   33,  499,    0,    0,    0,   34,    0,   92,   93,
   35,  499,    0,    0,    0,    0,    0,    0,  499,    0,
    0,    0,   37,  499,   38,   95,    0,  499,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  290,  499,
   42,  499,    0,    0,  170,  499,  170,  107,    0,  170,
    0,    0,  266,  499,  499,    0,    0,  499,  170,    0,
  499,    0,    0,    0,    0,    0,    0,  170,  108,  336,
    0,    0,  110,  111,  170,    0,    0,    0,  912,  170,
    0,  113,    0,  170,    0,    0,    0,  115,  116,  117,
  118,    0,    0,    0,  119,  170,  120,  170,    0,    0,
    0,  170,  121,  122,    0,    0,    0,    0,    0,  170,
  170,  732,    0,  170,    0,    0,  170,    0,    0,   77,
   26,    0,   27,    0,    0,   28,  796,  123,  337,  125,
  126,   82,   83,    0,   29,    0,    0,  169,    0,  169,
   85,    0,  169,   31,    0,  499,    0,    0,    0,    0,
   33,  169,    0,    0,    0,   34,    0,   92,   93,   35,
  169,    0,    0,    0,    0,    0,    0,  169,    0,    0,
    0,   37,  169,   38,   95,    0,  169,   39,    0,    0,
   97,    0,   99,    0,  101,   40,   41,  797,  169,   42,
  169,    0,  105,  179,  169,  179,  107,    0,  179,    0,
    0,  170,  169,  169,    0,    0,  169,  179,    0,  169,
    0,    0,    0,    0,    0,    0,  179,  108,  336,    0,
    0,  110,  111,  179,    0,    0,    0,    0,  179,    0,
  798,    0,  179,    0,    0,    0,  115,  116,  117,  118,
    0,    0,    0,  119,  179,  120,  179,    0,    0,    0,
  179,  121,  122,    0,    0,    0,    0,    0,  179,  179,
   81,    0,  179,    0,    0,  179,    0,    0,   81,   81,
    0,   81,    0,    0,   81,   81,  123,  337,  125,  126,
   81,   81,    0,   81,    0,    0,    0,    0,    0,   81,
    0,    0,   81,    0,  169,    0,    0,    0,    0,   81,
    0,    0,    0,    0,   81,    0,   81,   81,   81,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   81,    0,   81,   81,    0,    0,   81,    0,    0,   81,
    0,   81,    0,   81,   81,   81,   81,    0,   81,    0,
    0,   81,    0,    0,    0,   81,    0,    0,    0,    0,
  179,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   81,   81,    0,    0,
   81,   81,    0,    0,    0,    0,    0,    0,    0,   81,
    0,    0,    0,    0,    0,   81,   81,   81,   81,    0,
    0,    0,   81,    0,   81,    0,    0,    0,    0,    0,
   81,   81,    0,    0,    0,    0,    0,    0,    0,  335,
    0,    0,    0,    0,    0,    0,    0,   77,   26,    0,
   27,    0,    0,   28,  289,   81,   81,   81,   81,   82,
   83,    0,   29,    0,    0,    0,    0,    0,   85,    0,
    0,   31,    0,    0,    0,    0,    0,    0,   33,    0,
   29,    0,   29,   34,    0,   92,   93,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   95,   29,    0,   39,    0,    0,   97,    0,
   99,    0,  101,   40,   41,  290,   29,   42,    0,    0,
    0,   29,    0,    0,  107,    0,   29,    0,   29,   29,
   29,   29,    0,    0,    0,    0,   29,    0,    0,    0,
   29,    0,    0,    0,    0,  108,  336,    0,    0,  110,
  111,    0,    0,    0,    0,   29,    0,    0,  113,    0,
    0,    0,    0,    0,  115,  116,  117,  118,    0,    0,
    0,  119,    0,  120,    0,    0,    0,    0,    0,  121,
  122,    0,    0,    0,    0,    0,    0,    0,  344,    0,
    0,   29,   29,    0,    0,    0,   77,   26,    0,   27,
    0,    0,   28,  289,  123,  337,  125,  126,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,    0,    0,
   31,    0,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,   47,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,   47,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,   47,
    0,    0,    0,  107,   47,    0,    0,    0,    0,   47,
    0,   47,   47,   47,   47,    0,    0,    0,    0,   47,
    0,    0,    0,   47,  108,  336,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,   47,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,    0,    0,    0,    0,    0,  121,  122,
    0,    0,    0,    0,    0,    0,    0,  593,    0,    0,
   47,   47,    0,    0,  199,   77,   26,    0,   27,    0,
    0,   28,  289,  123,  337,  125,  126,   82,   83,    0,
   29,    0,    0,    0,    0,    0,   85,    0,    0,   31,
    0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
    0,   34,   47,   92,   93,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,    0,   38,
   95,    0,    0,   39,    0,   47,   97,    0,   99,    0,
  101,   40,   41,  290,    0,   42,    0,    0,   47,    0,
    0,    0,  107,   47,    0,    0,    0,    0,   47,    0,
   47,   47,   47,   47,    0,    0,    0,    0,   47,    0,
    0,    0,   47,  108,  109,    0,    0,  110,  111,    0,
    0,    0,    0,    0,    0,    0,  113,   47,    0,    0,
    0,    0,  115,  116,  117,  118,    0,    0,    0,  119,
    0,  120,    0,    0,    0,    0,    0,  121,  122,    0,
    0,    0,    0,    0,    0,    0,  732,    0,    0,   47,
   47,    0,    0,  201,   77,   26,    0,   27,    0,    0,
   28,  289,  123,  124,  125,  126,   82,   83,    0,   29,
    0,    0,    0,    0,    0,   85,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,   47,    0,   47,
   34,    0,   92,   93,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   95,
   47,    0,   39,    0,    0,   97,    0,   99,    0,  101,
   40,   41,  290,   47,   42,    0,    0,    0,   47,    0,
    0,  107,    0,   47,    0,   47,   47,   47,   47,    0,
    0,    0,    0,   47,    0,    0,    0,   47,    0,    0,
    0,    0,  108,  336,    0,    0,  110,  111,    0,    0,
    0,    0,   47,    0,    0,  113,    0,    0,    0,    0,
    0,  115,  116,  117,  118,    0,    0,    0,  119,    0,
  120,    0,    0,    0,    0,    0,  121,  122,    0,    0,
    0,    0,    0,    0,    0,  918,    0,    0,  291,    0,
    0,    0,    0,   77,   26,    0,   27,    0,    0,   28,
  289,  123,  337,  125,  126,   82,   83,    0,   29,    0,
    0,    0,    0,    0,   85,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
   47,   92,   93,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   95,    0,
    0,   39,    0,   47,   97,    0,   99,    0,  101,   40,
   41,  290,    0,   42,    0,    0,   47,    0,    0,    0,
  107,   47,    0,    0,    0,    0,   47,    0,   47,   47,
   47,   47,    0,    0,    0,    0,   47,    0,    0,    0,
   47,  108,  109,    0,    0,  110,  111,    0,    0,    0,
    0,    0,    0,    0,  113,   47,    0,    0,    0,    0,
  115,  116,  117,  118,    0,    0,    0,  119,    0,  120,
    0,    0,    0,    0,    0,  121,  122,    0,    0,    0,
    0,    0,    0,    0, 1135,    0,    0,   47,   47,    0,
    0,    0,   77,   26,    0,   27,    0,    0,   28,  289,
  123,  919,  125,  126,   82,   83,    0,   29,    0,    0,
    0,    0,    0,   85,    0,    0,   31,    0,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   92,   93,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   95,    0,    0,
   39,    0,    0,   97,    0,   99,    0,  101,   40,   41,
  290,    0,   42,    0,    0,    0,    0,    0,    0,  107,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  108,  336,    0,    0,  110,  111,    0,    0,    0,    0,
    0,    0,    0,  113,    0,    0,    0,    0,    0,  115,
  116,  117,  118,    0,    0,    0,  119,  213,  120,    0,
    0,    0,    0,    0,  121,  122,    0,    0,    0,    0,
  214,    0,    0,  367,    0,    0,    0,    0,    0,    0,
    0,   77,   26,    0,   27,    0,    0,   28,  289,  123,
  337,  125,  126,   82,   83,    0,   29,    0,    0,  215,
    0,    0,   85,    0,    0,   31,    0,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,  216,  217,  218,  219,    0,  220,  221,
  222,  223,  224,  225,  226,  227,    0,    0,  228,  229,
  230,  231,  232,  233,  234,  235,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  369,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  371,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  373,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  375,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  377,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  379,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  381,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  618,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  620,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  622,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  628,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  631,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  633,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  635,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  637,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  639,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  641,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  643,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  645,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  647,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  649,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  651,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  653,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  655,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,  657,    0,
    0,    0,    0,  121,  122,    0,   77,   26,    0,   27,
    0,    0,   28,  289,    0,    0,    0,    0,   82,   83,
    0,   29,    0,    0,    0,    0,    0,   85,  123,  266,
   31,  126,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   92,   93,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   95,    0,    0,   39,    0,    0,   97,    0,   99,
    0,  101,   40,   41,  290,    0,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
    0,    0,    0,  115,  116,  117,  118,    0,    0,    0,
  119,    0,  120,  783,    0,    0,    0,    0,  121,  122,
    0,   77,   26,    0,   27,    0,    0,   28,  289,    0,
    0,    0,    0,   82,   83,    0,   29,    0,    0,    0,
    0,    0,   85,  123,  266,   31,  126,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   92,
   93,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   95,    0,    0,   39,
    0,    0,   97,    0,   99,    0,  101,   40,   41,  290,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  110,  111,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  115,  116,
  117,  118,    0,    0,    0,  119,    0,  120,    0,    0,
    0,    0,    0,  121,  122,    0,    0,    0,    0,  189,
    0,    0,    0,    0,  189,    0,    0,    0,  189,    0,
  189,    0,    0,  189,    0,  189,  189,    0,  123,  266,
  189,  126,  189,    0,  189,  189,  189,  189,    0,    0,
    0,  189,    0,    0,    0,    0,  189,    0,  189,  189,
  189,    0,    0,  189,    0,  189,    0,  189,    0,    0,
  189,    0,  189,  189,  189,  189,    0,    0,    0,  189,
  189,  189,    0,    0,  189,  189,  189,    0,  189,    0,
    0,    0,    0,  189,  189,    0,    0,  189,    0,  189,
  189,  505,    0,    0,    0,  189,    0,    0,    0,   77,
   26,    0,   27,    0,    0,   28,  289,    0,  539,    0,
    0,   82,   83,    0,   29,    0,    0,   26,    0,   27,
   85,    0,   28,   31,  189,  189,  189,    0,    0,    0,
   33,   29,    0,    0,  189,   34,    0,   92,   93,   35,
   31,    0,    0,    0,    0,    0,    0,   33,    0,    0,
    0,   37,   34,   38,   95,    0,   35,   39,    0,    0,
   97,    0,   99,    0,  101,   40,   41,  290,   37,   42,
   38,    0,    0,    0,   39,  189,    0,    0,    0,    0,
    0,    0,   40,   41,    0,  624,   42,    0,    0,  540,
    0,    0,    0,    0,   26,    0,   27,  291,  325,   28,
    0,  110,  111,    0,    0,  879,    0,    0,   29,    0,
  113,    0,    0,    0,   26,    0,   27,   31,    0,   28,
    0,    0,    0,    0,   33,    0,    0,    0,   29,   34,
    0,    0,    0,   35,    0,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,   37,    0,   38,    0,   34,
    0,   39,  332,   35,    0,    0,  123,  506,    0,   40,
   41,  927,    0,   42,    0,   37,  105,   38,    0,    0,
   26,   39,   27,    0,  266,   28,    0,    0,    0,   40,
   41,    0,    0,   42,   29,    0,  105,    0,  332,    0,
   48,    0,   48,   31,    0,   48,    0,    0,    0,    0,
   33,    0,    0,    0,   48,   34,    0,    0,    0,   35,
    0,    0,    0,   48,    0,    0,    0,    0,    0,    0,
   48,   37,    0,   38,    0,   48,    0,   39,    0,   48,
    0,   48,    0,   48,    0,   40,   41,    0,   48,   42,
    0,   48,  105,   48,    0,    0,    0,   48,    0,    0,
   48,  266,    0,    0,  332,   48,   48,    0,    0,   48,
    0,    0,   48,    0,    0,  332,  332,  332,  332,  782,
    0,  266,  332,  332,    0,    0,  332,  332,  332,  332,
  332,  332,  332,  332,  332,    0,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,    0,    0,
    0,    0,    0,    0,  332,    0,    0,  332,    0,   48,
    0,   48,    0,   48,    0,   48,    0,  266,   48,    0,
   48,   48,    0,    0,    0,   48,    0,   48,    0,   48,
   48,   48,   48,    0,    0,    0,   48,   48,    0,    0,
    0,   48,    0,   48,   48,   48,    0,    0,   48,    0,
   48,    0,   48,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,   48,   48,   48,   48,    0,    0,   48,
   48,   48,    0,   48,    0,    0,    0,    0,   48,   48,
    0,    0,   48,    0,   48,   48,    0,   47,    0,    0,
   48,   47,    0,   47,    0,    0,   47,    0,   47,   47,
    0,    0,    0,   47,    0,   47,    0,   47,   47,   47,
   47,    0,    0,    0,   47,    0,   48,   48,    0,   47,
    0,   47,   47,   47,    0,    0,   47,    0,   47,    0,
   47,    0,    0,   47,    0,   47,   47,   47,   47,    0,
    0,    0,   47,   47,   47,    0,    0,   47,   47,   47,
    0,   47,    0,    0,    0,    0,   47,   47,    0,    0,
   47,    0,   47,   47,    0,   47,    0,    0,   47,   47,
   48,   47,    0,    0,   47,    0,   47,   47,    0,    0,
    0,   47,    0,   47,    0,   47,   47,   47,   47,    0,
    0,    0,   47,    0,    0,    0,    0,   47,   84,   47,
   47,   47,    0,    0,   47,    0,   47,   47,   47,    0,
    0,   47,    0,   47,   47,   47,   47,    0,    0,    0,
   47,   47,   47,    0,    0,   47,   47,   47,    0,   47,
    0,    0,    0,    0,   47,   47,    0,    0,   47,    0,
   47,   47,    0,   48,    0,    0,   47,   48,   47,   48,
    0,    0,   48,    0,   48,   48,    0,    0,    0,   48,
    0,   48,    0,   48,   48,   48,   48,    0,    0,    0,
   48,    0,    0,    0,    0,   48,   85,   48,   48,   48,
    0,    0,   48,    0,   48,   47,   48,    0,    0,   48,
    0,   48,   48,   48,   48,    0,    0,    0,   48,   48,
   48,    0,    0,   48,   48,   48,    0,   48,    0,    0,
    0,   47,   48,   48,    0,   47,   48,   47,   48,   48,
   47,    0,   47,   47,   48,    0,   47,   47,    0,   47,
    0,   47,   47,   47,   47,    0,    0,    0,   47,    0,
    0,    0,    0,   47,    0,   47,   47,   47,    0,    0,
   47,    0,   47,    0,   47,    0,    0,   47,    0,   47,
   47,   47,   47,   48,    0,    0,   47,   47,   47,    0,
    0,   47,   47,   47,    0,   47,    0,    0,    0,    0,
   47,   47,    0,    0,   47,   47,   47,   47,    0,   47,
    0,   47,   47,    0,   47,    0,   47,   47,    0,    0,
    0,   47,    0,   47,   48,   47,   47,   47,   47,    0,
    0,    0,   47,    0,    0,    0,    0,   47,    0,   47,
   47,   47,  217,    0,   47,    0,   47,    0,   47,    0,
    0,   47,    0,   47,   47,   47,   47,    0,    0,    0,
   47,   47,   47,    0,    0,   47,   47,   47,    0,   47,
   77,   26,    0,   27,   47,   47,   28,  289,   47,    0,
   47,   47,   82,   83,    0,   29,   47,    0,    0,    0,
    0,   85,   47,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   92,   93,
   35,    0,  596,    0,    0,    0,  218,    0,    0,  597,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  290,    0,
   42,    0,    0,    0,    0,    0,    0,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   47,    0,  108,  109,
    0,    0,  110,  111,    0,    0,    0,    0,    0,    0,
    0,  113,    0,    0,  598,    0,    0,  115,  116,  117,
  118,    0,    0,    0,  119,    0,  120,    0,    0,    0,
    0,    0,  121,  122,    0,    0,    0,    0,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  289,    0,    0,
    0,    0,   82,   83,    0,   29,    0,  123,  124,  125,
  126,   85,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  290,    0,
   42,    0,    0,  105,    0,    0,    0,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,  336,
    0,    0,  110,  111,    0,    0,    0,    0,    0,    0,
    0,  113,    0,    0,    0,    0,    0,  115,  116,  117,
  118,    0,    0,    0,  119,    0,  120,    0,    0,    0,
    0,    0,  121,  122,    0,    0,    0,    0,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  796,    0,    0,
    0,    0,   82,   83,    0,   29,    0,  123,  337,  125,
  126,   85,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  797,    0,
   42,    0,    0,  105,    0,    0,    0,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,  336,
    0,    0,  110,  111,    0,    0,    0,    0,    0,    0,
    0,  798,    0,    0,    0,    0,    0,  115,  116,  117,
  118,    0,    0,    0,  119,    0,  120,    0,    0,    0,
    0,    0,  121,  122,    0,    0,    0,    0,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  289,    0,    0,
    0,    0,   82,   83,    0,   29,    0,  123,  337,  125,
  126,   85,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  290,    0,
   42,    0,    0,    0,    0,    0,    0,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,  336,
    0,    0,  110,  111,    0,    0,    0,  523,    0,    0,
    0,  113,    0,    0,    0,    0,    0,  115,  116,  117,
  118,    0,    0,    0,  119,    0,  120,    0,    0,    0,
    0,    0,  121,  122,    0,    0,    0,    0,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  289,    0,    0,
    0,    0,   82,   83,    0,   29,    0,  123,  337,  125,
  126,   85,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  290,    0,
   42,    0,    0,    0,    0,    0,    0,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,  336,
    0,    0,  110,  111,    0,    0,    0,  517,    0,    0,
    0,  113,    0,    0,    0,    0,    0,  115,  116,  117,
  118,    0,    0,    0,  119,    0,  120,    0,    0,    0,
    0,    0,  121,  122,    0,    0,    0,    0,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  289,    0,    0,
    0,    0,   82,   83,    0,   29,    0,  123,  337,  125,
  126,   85,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  290,    0,
   42,    0,    0,    0,    0,    0,    0,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,  336,
    0,    0,  110,  111,    0,    0,    0,    0,    0,    0,
    0,  113,    0,    0,    0,    0,    0,  115,  116,  117,
  118,    0,    0,    0,  119,    0,  120,    0,    0,    0,
    0,    0,  121,  122,    0,    0,    0,    0,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  289,    0,    0,
    0,    0,   82,   83,    0,   29,    0,  123,  337,  125,
  126,   85,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  290,    0,
   42,    0,    0,    0,    0,    0,    0,  107,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,  109,
    0,    0,  110,  111,    0,    0,    0,    0,    0,    0,
    0,  113,    0,    0,    0,    0,    0,  115,  116,  117,
  118,    0,    0,    0,  119,    0,  120,    0,    0,    0,
    0,    0,  121,  122,    0,    0,    0,    0,    0,    0,
  644,  644,    0,  644,    0,    0,  644,  644,    0,    0,
    0,    0,  644,  644,    0,  644,    0,  123,  124,  125,
  126,  644,    0,    0,  644,    0,    0,    0,    0,    0,
    0,  644,    0,    0,    0,    0,  644,    0,  644,  644,
  644,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  644,    0,  644,  644,    0,    0,  644,    0,
    0,  644,    0,  644,    0,  644,  644,  644,  644,    0,
  644,    0,    0,    0,    0,    0,    0,  644,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  644,  644,
    0,    0,  644,  644,    0,    0,    0,    0,    0,    0,
    0,  644,    0,    0,    0,    0,    0,  644,  644,  644,
  644,    0,    0,    0,  644,    0,  644,    0,    0,    0,
    0,    0,  644,  644,    0,    0,    0,    0,    0,    0,
   77,   26,    0,   27,    0,    0,   28,  289,    0,    0,
    0,    0,   82,   83,    0,   29,    0,  644,  644,  644,
  644,   85,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   92,   93,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   95,    0,    0,   39,    0,
    0,   97,    0,   99,    0,  101,   40,   41,  290,    0,
   42,    0,    0,    0,    0,  686,    0,  686,    0,  686,
    0,    0,  686,    0,  686,  686,    0,    0,    0,  686,
    0,  686,    0,  686,  686,  686,    0,    0,  291,    0,
  686,    0,  110,  111,    0,  686,    0,  686,  686,    0,
    0,  113,  686,    0,    0,    0,  686,  115,  116,  117,
  118,    0,    0,    0,  119,    0,  120,  686,  686,    0,
  686,    0,  121,  122,  686,  686,    0,  686,    0,    0,
    0,    0,  686,  686,    0,    0,  686,    0,    0,  686,
    0,    0,    0,    0,  686,    0,    0,  123,  266,    0,
  126,    0,    0,   77,   26,    0,   27,    0,    0,   28,
  289,    0,    0,    0,    0,   82,   83,    0,   29,    0,
  686,  686,    0,    0,   85,    0,    0,   31,    0,    0,
    0,    0,    0,  686,   33,    0,    0,    0,    0,   34,
    0,   92,   93,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   95,    0,
    0,   39,    0,    0,   97,    0,   99,    0,  101,   40,
   41,  290,    0,   42,  686,    0,  105,    0,    0,    0,
  685,    0,  685,    0,    0,  685,    0,  685,  685,    0,
    0,    0,  685,    0,  685,    0,  685,  685,  685,    0,
    0,  291,    0,  685,    0,  110,  111,    0,  685,    0,
  685,  685,    0,    0,  113,  685,    0,    0,    0,  685,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  685,    0,  685,    0,    0,    0,  685,  685,    0,
  685,    0,    0,    0,    0,  685,  685,    0,    0,  685,
    0,  685,  685,  685,    0,    0,  685,  685,  685,  685,
  123,  266,    0,  685,    0,  685,    0,  685,  685,  685,
    0,    0,    0,    0,  685,    0,    0,    0,    0,  685,
    0,  685,  685,    0,    0,    0,  685,    0,    0,    0,
  685,    0,    0,    0,    0,    0,  685,    0,    0,    0,
    0,    0,  685,    0,  685,    0,    0,    0,  685,  685,
    0,  685,    0,   26,    0,   27,  685,  685,   28,    0,
  685, 1227,    0,  685,    0,  465,    0,   29,  685,  466,
 1228, 1229,    0,    0,    0,    0,   31,  685,    0,    0,
    0, 1230,    0,   33,    0,    0,    0,    0,   34,    0,
    0,    0,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,    0,    0,    0,
   39,    0,    0, 1231,    0,   26,    0,   27,   40,   41,
   28,    0,   42, 1227,    0, 1232,    0,  465,    0,   29,
  467,  466, 1228, 1229,    0,    0,    0,    0,   31,    0,
    0,    0,    0, 1230,    0,   33,    0,   47,  685,   47,
   34,    0,   47,    0,   35,    0,    0,    0,    0,    0,
    0,   47,    0,    0,    0,    0,   37,    0,   38, 1233,
   47,    0,   39,    0,    0, 1231,    0,   47,    0,    0,
   40,   41,   47,    0,   42,    0,   47, 1232,   47,    0,
   47,   47,  467,   47,    0,   47,   47,    0,   47,    0,
   47,    0,    0,    0,   47,   47,    0,   47,    0,    0,
  266,    0,   47,   47,   47,    0,   47,    0,    0,   47,
    0,   47,    0,    0,    0,    0,   47,    0,    0,    0,
   47,    0,   47,    0,   47,    0,   47,    0,   47,   47,
    0,   47,   47,    0,   47,    0,    0,    0,   47,    0,
   47,   47,    0,    0,    0,    0,   47,   47,  153,   47,
   47,    0,    0,   47,    0,    0,   47,    0,    0,    0,
    0,   47,  266,    0,    0,   47,    0,   47,    0,   47,
    0,    0,    0,    0,   47,    0,    0,   47,    0,   47,
    0,    0,   26,   47,   27,    0,   47,   28,    0,    0,
  153,   47,   47,    0,   47,   47,   29,    0,   47,    0,
   30,    0,    0,    0,    0,   31,    0,    0,    0,   33,
   32,    0,   33,    0,    0,    0,    0,   34,    0,    0,
   33,   35,   36,    0,    0,   33,    0,    0,    0,   33,
    0,    0,   33,   37,    0,   38,    0,    0,   47,   39,
    0,    0,    0,    0,   33,   33,    0,   40,   41,   33,
   33,   42,   47,    0,   43,   33,    0,   33,   33,   33,
   33,    0,    0,   47,    0,   33,    0,    0,   47,   33,
    0,   33,   47,    0,    0,   47,    0,    0,    0,    0,
    0,    0,    0,   47,   33,    0,    0,   47,   47,    0,
   33,    0,   47,   47,    0,   47,    0,    0,   47,    0,
   47,   47,   47,   47,    0,    0,   47,    0,   47,    0,
    0,   47,   47,    0,   47,   47,    0,    0,   47,    0,
   33,   33,    0,    0,    0,    0,    0,   47,    0,    0,
   47,   47,    0,   47,    0,   47,   47,    0,    0,   44,
    0,   47,    0,   47,   47,   47,   47,    0,    0,    0,
    0,   47,    0,    0,    0,   47,    0,   47,    0,    0,
    0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
   47,    0,    0,    0,    0,    0,   47,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,
  };
  protected static  short [] yyCheck = {            22,
   11,  333,   11,  262,   75,   56,   54,   23,   80,    4,
  523,   89,   23,  521,   23,   22,   22,  365,    6,  348,
    2,  282,  334,   22,  274,  323,  357,  561,   75,  330,
  108, 1061,  597,  496,  384,  568,   98,  399,  576,    0,
  256,  256,  134,   54,  136,   54,  745,  718,  256,  720,
   46,  585,  130,   49,   80,  384, 1057,  256,   22,  256,
  256,  266, 1051,    0, 1170,  256,  136,  256,  256,  268,
  256,   94,   79,  268,  256,   98,  256,  256,  256,  256,
  158,  363,  332, 1189,  256,   67,  372,  110,  759,  256,
  113,  762,  365,  100,  256,  102,  375,   22,  263, 1156,
 1101,  256,  375,  256,  256,  256,  363,  363,  277,  314,
  282,  380,  281,  376,  256,  343,  256,  373, 1119,   69,
  256,  865,  256, 1234,  256,  418,  664,  374,  375,  257,
  874,  378,  425,  256, 1123, 1246,  465,   22,  399,  999,
  422,  372,  314,  371,  256,  424,   22,  433,    0,  380,
  315,  424,   22,   22, 1211,  178,  371,  208,  340,  207,
  375,  256,  294,  371,  433,  422,  422,  375,   22,  256,
  433,  178,  178,  342,  379,   22,  126,  269,  268,  178,
  256,   22,  379,  374,  276,  376,  375,  378,  520,  375,
  440,  343, 1052,   22,   22,  335,  207,  385,  207,  269,
  379,  551,  433,  281,  282,  385,  277,  385,  721,  424,
  363,  366,  367,  561,  178,  293,  424,  372,  917,  374,
  436,  376,  551,  378,  379,  380,  422,  426,  590,  256,
  277,  426,  765,  798,  256,  424,    2,  585,  424,  394,
  236, 1347,  433,  395,  395,  422,  380,  576,  320,    2,
  422,  363,  330,  178,  242,  422, 1362,  380,  330,  282,
  422,  211,  212,  245,  356,  288,  418,  418, 1374,  422,
 1376,  366,  367,  425,  425,  840,  256,  372,  433,  374,
  422,  376,  372,  378,  379,  380,  422,  958,  428,  429,
  430,  431,  379,  178,  320,  371,  257,  373,  256,  375,
  323,   67,  178,   69,  256,  328,  329,  845,  178,  178,
  422, 1341,  256,  391,   67,  665,   69,  395,  389,  256,
  343,  399,  400,  909,  178,  387,  378,  353,  351,  590,
  353,  178,  897,  898,  357,  664,  426,  178,  433,  256,
  256,  363,  389,  335,  371,  352,  296,  256,  424,  178,
  178,  427,  374,  380,  376,  268,  378,  256,  256,  365,
  126, 1153,  875,  276,  387, 1292,  365,  262,  420,  277,
  256, 1146,  322,  126,  256,  706,  399,  400,  256,  256,
 1001,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  342,  856,  374,  372,  256,  335,  378, 1070,
  422, 1402,  339,  298,  325,  257,  343, 1078,  479, 1201,
  256,  256,  256,  436,  256,  372,  256,  495,  256,  497,
  272,  379,  723,  257, 1284,  277,  378,  371, 1014,  281,
  371,  781,  693, 1054,  371, 1106,  372,  422,  375,  952,
  377,  433,  379,  521,  296,  211,  212,  443,  444,  982,
  363, 1311,  781,  449, 1314,  363,  433,  343,  211,  212,
  325,  378,  378, 1390, 1239, 1325, 1326,  376,  418,  547,
  496,  323, 1247,  371, 1334,  373,  433,  376,  466,  245,
 1340,  422,  489,  365, 1155,  371,  422,  382,  383,  375,
  342,  377,  245,  266,  844,  373,  519,  575,  521,  376,
  523,  422,  376, 1036,  840, 1152, 1153,  269,  343,  422,
  842,  589,  590,  373,  422,  423,  845,  588,  373,  372,
  591,  592,  377,  473,  286, 1300, 1173,  373,  373,  536,
  296,  554,  376,  556,  376,  372,  376,  873,  376,  343,
 1074,  314,  272,  296,  591,  376,  553,  277,  372,  810,
  385,  281,  256,  376, 1201,  561,  322,  422,   22,  433,
  395,  568,  561, 1153,  373,  826,  296,  590,  334,  322,
  596,  597,  427,  596,  597, 1222,  342,  256,  256,  585,
  433,  334,  348,  418,  377,  264,  585,  256,  263,  342,
  425,  395,  904,  323,  256,  348,  433,  372,  372,  272,
   69,  378,  433,  265,  378,  267,  379,  405,  270,  433,
  433, 1201,  342,  272,  418,  693,   80,  279,  384,  417,
   84,  425,  872,  296,  955,  305,  288,  305,  371,  372,
  708,  384, 1153,  295,  427,  967,  305,  296,  300,  343,
  315, 1149,  304,  420, 1107,  723,  325,  422,  699,  371,
  323,  723,  418,  375,  316,  377,  318,  126, 1153,  376,
  322, 1153, 1364, 1365,  323,  418,  305,  371,  330,  331,
  693, 1153,  334,  377,  378,  337,  380, 1153,  364,  422,
 1201,  385, 1030,  706,  339, 1153,  372,  375,  953,  375,
  339,  377,  378,  343,  343,  683,  678,  419,  721,  465,
  343,  306,  780,  726, 1406,  422, 1201,  473,  313, 1201,
  396,  397,  465,  978,  178,  419,  371,  339,  789, 1201,
  473,  371,  371,  422,  802, 1201, 1074, 1025,  371, 1061,
  416,  380,  810, 1201,  357,  343,  997,  380,  424,  339,
  363,  427,  211,  212,  357,  752,  769,  754,  826,  371,
  373,  343,   12,  376,  377,  378,  763,  379,  765,  422,
  422,  357,  357,  371,  385,   25, 1064,  390,  343, 1212,
  377,  371,  798,  380,  395,  798, 1219,  390, 1234,  371,
  364,  377,  377,  339,  256,  551,  339,  810,  380,  812,
 1246,  375,  815,  377,  390,  390,  371,  418,  551,  422,
  371,  751,  880,  826,  425,  380, 1104,  339, 1156,  380,
  576,  380,  396,  397,  840,  371, 1329,  840,  371,  842,
  372,  395,  375,  576,  256,  395,  378,  296,  377,  907,
  372,  380,  416,  385,  376,  858,  378,  269,  380,  371,
  424,  823,  865,  427,  418,  833,  256,  835,  418,  837,
  873,  425,  875,  322,  286,   22,  320,  306,  373,  308,
 1158,  939,  374, 1211,  313,  334,  378,  945,  371,  372,
  385,  897,  898,  342,  897,  898,  325,  380,  306, 1251,
  372,  831,  375, 1212,  371,  313,  378,  371, 1401,  353,
 1219, 1263, 1264,  380,  366,  367,  846,  325,  664,  374,
  372,  365,  374,  378,  376,  390,  378,  379,  380,  386,
  387,  664,  678,   80,  374, 1423, 1424,   84,  378,  997,
  372,  343,  394,  400,  401,  678,  371,  372,  380,  952,
  925,  372,  955,  405,  388,  380,  372,  378,  256,  380,
  376,  375,  378,  377,  380,  417,  372,  372,  375,  418,
  376,  974,  379,  393,  380,  380,  366,  367,  375,  389,
  377,  433,  372,  986,  374,  404,  376,  374,  378,  379,
  380,  378,  372,  373,  997,  982,  386,  387,  388,  389,
  398,  399,  998,  393,  394,  751,  371,  998,  373,  998,
  400,  401,  402,  403,  404,  405,  394,  376,  751,  378,
 1048,  380, 1025,  373,  473, 1264,  374,  417,  376, 1341,
  378,  178,  371,  374,  375,  781,  377,  378,  379, 1042,
 1043,  376, 1045,  433, 1030,  380,  374,  419,  781, 1036,
  378, 1030,  496,  377,  422, 1086,  380, 1048, 1061, 1048,
 1051, 1064, 1051,  374,  256,  376,  374,  378,  366,  367,
  378,  376,  402,  403,  372,  380,  374,  823,  376,  374,
  378,  379,  380,  378,  376,  831,  378,  277, 1074,  376,
  823, 1149,  374,  380,  376, 1074,  394,  364,  831,  845,
  846, 1104,  390,  391,  392,  372,  404,  405,  375,  380,
  377,  378,  845,  846,  378,  379,  376,  561,  385,  417,
  380,  366,  367, 1435,  424,  425,  426,  427,  380,  396,
  397,  378, 1123,  380, 1123,  433,  374,  374,  376,  376,
  376,  585,  378,  376,  256,  378, 1149,  377,  374,  416,
  376,  380,  596,  597,  378, 1158,  380,  424,  904, 1190,
  427, 1152, 1153, 1152, 1153,  378,  256,  380,  372,  373,
 1156,  904,  380,  320,  371,  372,  343, 1156,  376,  418,
  419,  380, 1173,  377, 1173,    6,  368,  369,  366,  367,
  256,  366,  367,  373,  371,  372,  368,  369,  420,  421,
  379,   22,  422,  423,  422,  378,  353,  428,  429, 1260,
 1201,  377, 1201,  422,  379,  418,  376,  376,  365,  380,
  372, 1151,  385,  378,  378, 1211,  376, 1278, 1215,  256,
  376, 1222, 1211, 1222,  376,  380,  256,  376,  378,  374,
  371,  375,  379, 1294,  256, 1296,  422,  256,   69,  385,
  376,  378,  385,  378,  378,  376,  427,  371,  378,   80,
  378,  376,  385,   84,  421,  343,  379,  378,  375, 1272,
  378,  256,  280,  256,  718,  385,  720,  371,  343,  372,
 1210,  376, 1269,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  385,  374,  371,  380, 1227, 1228,  378,
  366,  367,  751,  380,  376,  126,  372, 1053,  374,  376,
  376,  374,  378,  379,  380,  759,  376,  421,  762,  376,
 1053,  376,  427, 1253,  385, 1255, 1329,  374,  394,  379,
  375,  385,  385, 1324,  256, 1324,  376,  376, 1341,  405,
  372, 1328,  380,  376,  372, 1336,  376, 1336,  339,  496,
  374,  417,  374,  422,  798,  378,  375,  178, 1349, 1350,
 1349, 1350,  376,  422,  256, 1423, 1424,  433,  372,  371,
  371,  376,  385, 1364, 1365, 1364, 1365,  380,  371,  376,
 1126,  380,  831,  375,  378,  372,  372,  376,  372,  305,
  211,  212,  372, 1126,  375,  325,  840,  846, 1401,  256,
  373,  422,  371,  375,  422, 1151,  422,  375,  375,  385,
  375,  377,  375,  371,  561, 1406,  343, 1406, 1151,  375,
 1423, 1424, 1409, 1410,  376,  380,  376,  378, 1415, 1416,
  377,  377, 1435,  378,  422,  376,  380,  374,  585,  315,
  422,  380,  376,  376,  376,  385,  372,  376,  372,  596,
  597,  263,  375,  897,  898,  904,  375,  385,    0,  372,
  380,  376,  376,    0, 1210,    0, 1212,  371,  380,  372,
  380,  376,    0, 1219,  374,  296,  372, 1210,  376, 1212,
  371, 1227, 1228,  376,  374,  371, 1219,  422, 1234,  372,
  372,  422,  376,  380, 1227, 1228,  376,  372,  377,  320,
 1246,  322,  380,  376,  372, 1251,  380, 1253,  380, 1255,
  376,  372,  371,  334,  958,  380,  372, 1263, 1264,  315,
 1253,  342, 1255,  376,  376,  372,  380,  348,  263,  380,
  380,  261,  353,   52,  380,    5,  997,   82,  823,  997,
  678,   86,   87,   88,  365,   90,   91, 1222, 1173, 1226,
   95,   96, 1059, 1369,  284, 1332,  101,  102,  256,  104,
 1269,  106, 1344,  384, 1328,  849,  849,  297,  698,  844,
 1251,  718,  302,  720, 1416,  305, 1270,  307, 1188,  309,
  310,  311,  312, 1201, 1350, 1123, 1030,  317, 1349, 1296,
  135,  321,  820,    0,  348,  325, 1126,  418, 1410,  556,
  904,  400,  870,  810, 1053,  693,  336,  726,   92,  967,
  358,  430,  759,  431,  723,  762,  432,  434,  597,  433,
  435, 1003, 1098,  781, 1210,  178, 1070, 1030,  954,  978,
 1074, 1016, 1043,  551, 1078,  941, 1028, 1030, 1107, 1077,
  537,  884,  372,   -1,  465,  178,   -1,   -1,  822,  819,
   -1,  798,  473,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1, 1106,   -1,   -1,   -1,   -1,   -1,  366,  367,
   -1,    0,   -1,   -1,  372,  496,  374, 1126,  376,   -1,
  378,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  388,  389,  422,  840,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1, 1151,   -1,  402,  403,  404,  405,   -1,   -1,
   -1, 1155, 1156,   -1,  256,   -1,   -1,   -1,   -1,  417,
  262,  115,  116,  117,  118,  119,  120,  121,  122,   -1,
  551,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
  561,   -1,   -1,   -1,   -1,  290,   -1,  292,   -1,   -1,
  897,  898,   -1,   -1,   -1,  576,  298,   -1,   -1,   -1,
   -1, 1210,   -1,   -1,  585,   -1,   -1, 1211,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  596,  597,   -1, 1227, 1228,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  332,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,  343,  256,   -1, 1253,   -1, 1255,   -1,   -1,   -1,
   -1,  958,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  363,    0,   -1,  366,  367,   -1,   -1,   -1,  371,
  372,  373,  374,  375,  376,   -1,  378,  379,  380,   -1,
  382,  383,   -1,  664,  386,  387,  388,  389,   -1,   -1,
  257,  393,  394,   -1,  261,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,   -1,  272,   -1,   -1,   -1,   -1,
  277,   -1,   -1,   -1,  281,  417,   -1,  284,  420,   -1,
  422,   -1,  424, 1030,   -1,  427,   -1,   -1,   -1,  296,
  297,  433,   -1,   -1,  301,  302,   -1,  718,   -1,  720,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,  366,  367,  321,   -1,  323,   -1,  372,   -1,
  374,   -1,  376, 1070,  378,  379,  380, 1074,  257,  336,
  751, 1078,  261,   -1,   -1,  342,   -1,   -1,  759,   -1,
  394,  762,   -1,  272,   -1,   -1,  491,   -1,  277,   -1,
  404,  405,  281,   -1,   -1,  284,   -1,   -1,   -1, 1106,
  781,   -1,   -1,  417,  371,  372,  373,  296,  297,   -1,
   -1,   -1,  301,  302,   -1,   -1,   -1,  798,  307,  433,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
  535,   -1,  321,   -1,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,  336, 1155, 1156,
  831,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,  840,
   -1,  415,  416,  417,  845,  846,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,  435,   -1,  372,  373,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1, 1211,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  897,  898,  256,  257,
   -1,   -1,   -1,  904,   -1,   -1,  264,  265,  266,  267,
  268,   -1,  270,  271,   -1,  273,  274,   -1,  276,  277,
  278,  279,  280,    0,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  958,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,  363,   -1,  581,  366,  367,
   -1,   -1,   -1,  371,  372,   -1,   -1,  375,  284,   -1,
   -1,   -1,  380,  381,  382,  383,  384,   -1,   -1, 1030,
  388,  297,  390,   -1,   -1,   -1,  302,   -1,  396,  397,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317, 1053,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,  261,   -1,  421,  422,  423,  424,   -1,  426, 1070,
  336,  796,  797, 1074,   -1,  433,   -1, 1078,   -1,  257,
   -1,   -1,   -1,  261,  284,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,  272,   -1,   -1,  297,   -1,  277,
   -1,   -1,  302,  281,   -1, 1106,  284,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,  296,  297,
   -1,  321,   -1,  301,  302, 1126,  261,  256,  263,  307,
   -1,  309,  310,  311,  312,   -1,  336,   -1,   -1,  317,
   -1,   -1,  261,  321,   -1,  323,   -1,   -1,   -1,  284,
 1151,   -1,   -1,  878, 1155, 1156,  422,   -1,  336,   -1,
   -1,   -1,  297,   -1,  342,  284,   -1,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,  297,  256,
  315,   -1,  317,  302,  261,  262,  321,   -1,  307,   -1,
  309,  310,  311,  312,  372,  373,  315,   -1,  317,   -1,
   -1,  336,  321,   -1,   -1,   -1,   -1,  284,   -1, 1210,
 1211, 1212,   -1,   -1,   -1,   -1,   -1,  336, 1219,   -1,
  297,  298,  422,   -1,   -1,  302, 1227, 1228,  305,   -1,
  307,   -1,  309,  310,  311,  312,   -1,  366,  367,   -1,
  317,   -1,   -1,  372,  321,  374,   -1,  376,  325,  378,
  379,  380, 1253,  372, 1255,   -1,   -1,   -1,   -1,  336,
  389,   -1,  339,    0,  393,  394,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  404,  405,   -1,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,  363,  364,  417,  366,
  367,   -1,   -1,   -1,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  380,  433,  382,  383,   -1,  385,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,   -1,  420,   -1,  422,  256,  424,   -1,   -1,
  427,  261,  262,   -1,   -1,   -1,  433,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,   -1,
   -1,   -1,   -1,  279,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  297,  298,  295,
   -1,   -1,  302,    0,  300,  305,  302,  307,  304,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
  316,  321,  318,   -1,   -1,  325,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,  336,   -1,  334,  339,
   -1,  337,   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,  364,   -1,  366,  367,   -1,   -1,
   -1,  371,  372,   -1,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,   -1,   -1,
  420,   -1,  422,   -1,  424,   -1,  422,  427,   -1,  256,
  257,   -1,   -1,  433,   -1,   -1,   -1,  264,  265,  266,
  267,  268,   -1,  270,  271,   -1,  273,  274,   -1,  276,
  277,  278,  279,    0,   -1,   -1,   -1,   -1,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,  371,  372,   -1,   -1,  375,   -1,
   -1,   -1,   -1,  380,  381,  382,  383,  384,   -1,  256,
   -1,  388,   -1,  390,  261,  262,   -1,   -1,   -1,  396,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,  421,  422,  423,  424,   -1,  426,
  297,  298,   -1,    0,  284,  302,  433,   -1,  305,   -1,
  307,   -1,  309,  310,  311,  312,   -1,  297,   -1,   -1,
  317,  301,  302,   -1,  321,   -1,   -1,  307,  325,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  336,
   -1,  321,  339,   -1,   -1,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,   -1,
  357,  256,   -1,   -1,   -1,   -1,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,   -1,   -1,  386,
  387,  388,  389,  390,   -1,   -1,  393,  394,   -1,   -1,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,  256,
   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,
  417,   -1,   -1,  420,   -1,  422,   -1,  424,   -1,   -1,
  427,   -1,   -1,   -1,   -1,   -1,  433,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  297,  298,   -1,    0,   -1,  302,   -1,   -1,  305,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,  366,  367,   -1,  321,   -1,   -1,  372,  325,  374,
   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,  336,
   -1,   -1,  339,  388,  389,   -1,  343,   -1,  393,  394,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,  403,  404,
  405,  256,   -1,   -1,   -1,   -1,  363,   -1,   -1,  366,
  367,   -1,  417,   -1,  371,  372,  373,  374,  375,  376,
   -1,  378,  379,  380,   -1,  382,  383,   -1,  433,  386,
  387,  388,  389,  261,   -1,   -1,  393,  394,   -1,   -1,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,  256,
   -1,   -1,   -1,   -1,  261,  262,  284,   -1,   -1,   -1,
  417,   -1,   -1,  420,   -1,  422,   -1,  424,   -1,  297,
  427,   -1,   -1,   -1,  302,   -1,  433,  284,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  315,   -1,  317,
  297,  298,   -1,  321,   -1,  302,   -1,   -1,  305,   -1,
  307,    0,  309,  310,  311,  312,   -1,   -1,  336,   -1,
  317,  366,  367,  256,  321,   -1,   -1,  372,  325,  374,
   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,  336,
   -1,   -1,  339,  388,  389,   -1,  343,   -1,  393,  394,
   -1,   -1,   -1,   -1,  372,  373,   -1,  402,  403,  404,
  405,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,  366,
  367,   -1,  417,   -1,  371,  372,  373,  374,  375,  376,
   -1,  378,  379,  380,   -1,  382,  383,   -1,  433,  386,
  387,  388,  389,    0,   -1,   -1,  393,  394,   -1,   -1,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,  256,
   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,
  417,   -1,   -1,  420,   -1,  422,   -1,  424,   -1,   -1,
  427,   -1,   -1,  366,  367,   -1,  433,  284,   -1,  372,
    0,  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,
  297,  298,   -1,   -1,   -1,  302,  389,   -1,  305,   -1,
  307,  394,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,  404,  405,   -1,  321,   -1,   -1,   -1,  325,   -1,
   -1,   -1,   -1,    0,  417,   -1,   -1,   -1,   -1,  336,
   -1,   -1,  339,   -1,   -1,   -1,  343,   -1,   -1,   -1,
  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,  371,  372,    0,  374,  375,  376,
   -1,  378,  379,  380,   -1,  382,  383,   -1,   -1,  386,
  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,    0,
  417,   -1,  261,  420,   -1,  422,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  433,   -1,  277,   -1,
  279,   -1,  281,  282,  283,  284,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,    0,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,  325,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,  336,  337,   -1,
  257,   -1,   -1,  342,  261,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,
  277,   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,  371,  372,  373,   -1,   -1,   -1,   -1,  296,
  297,   -1,  381,   -1,  301,  302,   -1,  257,   -1,   -1,
  307,  261,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,  272,   -1,  321,   -1,  323,  277,   -1,   -1,
   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,  336,
   -1,   -1,   -1,  422,   -1,  342,  296,  297,   -1,   -1,
  257,  301,  302,   -1,  261,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,   -1,
  277,  321,   -1,  323,  281,   -1,  373,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,  296,
  297,   -1,  342,  257,  301,  302,   -1,  261,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,   -1,  277,  321,   -1,  323,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,
   -1,   -1,  296,  297,   -1,  342,  257,  301,  302,   -1,
  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  272,   -1,  317,   -1,   -1,  277,  321,   -1,  323,
  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  336,   -1,   -1,  296,  297,   -1,  342,   -1,
  301,  302,   -1,  257,   -1,   -1,  307,  261,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  272,   -1,
  321,   -1,  323,  277,   -1,   -1,   -1,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,  336,   -1,   -1,   -1,   -1,
   -1,  342,  296,  297,   -1,   -1,  257,  301,  302,   -1,
  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  272,   -1,  317,   -1,   -1,  277,  321,   -1,  323,
  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  336,   -1,   -1,  296,  297,   -1,  342,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,  323,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,  336,  264,  265,  266,  267,
   -1,  342,  270,  271,   -1,  273,  274,   -1,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  256,  337,
   -1,   -1,  340,  341,  262,   -1,   -1,   -1,  266,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,
  298,   -1,  380,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,  314,   -1,  396,  397,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  421,  422,  423,  424,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,  357,
   -1,   -1,  298,   -1,   -1,  363,  364,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,  373,  374,  375,  376,  377,
  378,  379,  380,  256,  382,  383,   -1,  385,  386,  387,
  388,  389,  390,  391,  392,  393,  394,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
   -1,  357,   -1,   -1,  422,   -1,  424,  363,  364,  427,
  366,  367,   -1,   -1,   -1,  433,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,   -1,  385,
  386,  387,  388,  389,  390,  391,  392,  393,  394,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,   -1,  256,   -1,   -1,  422,   -1,  424,  262,
   -1,  427,   -1,  366,  367,   -1,   -1,  433,   -1,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,
   -1,   -1,   -1,  386,  387,  388,  389,  261,   -1,   -1,
  393,  394,   -1,   -1,   -1,  298,   -1,  400,  401,  402,
  403,  404,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  284,   -1,   -1,   -1,  417,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,  297,   -1,   -1,   -1,   -1,  302,   -1,
  433,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
   -1,  364,  336,  366,  367,   -1,   -1,   -1,  371,  372,
  373,  374,  375,  376,  377,  378,  379,  380,   -1,  382,
  383,  256,  385,  386,  387,  388,  389,  390,  391,  392,
  393,  394,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,   -1,   -1,   -1,   -1,   -1,
   -1,  424,   -1,   -1,  364,   -1,  366,  367,   -1,   -1,
  433,  371,  372,   -1,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,   -1,  256,
   -1,   -1,   -1,   -1,  424,  262,   -1,  427,   -1,   -1,
   -1,  366,  367,  433,   -1,   -1,   -1,  372,   -1,  374,
   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,
   -1,  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,
   -1,  298,   -1,  398,  399,  400,  401,  402,  403,  404,
  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  417,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,   -1,   -1,   -1,  364,   -1,  366,
  367,   -1,   -1,   -1,   -1,  372,   -1,  374,  375,  376,
  377,  378,  379,  380,  256,  382,  383,   -1,  385,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,  364,
  427,  366,  367,   -1,   -1,   -1,  433,  372,   -1,  374,
  375,  376,  377,  378,  379,  380,   -1,  382,  383,   -1,
  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,   -1,  256,   -1,   -1,   -1,   -1,  424,
  262,   -1,  427,   -1,  366,  367,   -1,   -1,  433,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
   -1,   -1,   -1,   -1,  386,  387,  388,  389,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,  298,   -1,  400,  401,
  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  417,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
   -1,   -1,  364,   -1,  366,  367,   -1,   -1,   -1,   -1,
  372,   -1,  374,  375,  376,  377,  378,  379,  380,   -1,
  382,  383,   -1,  385,  386,  387,  388,  389,  390,  391,
  392,  393,  394,   -1,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,   -1,   -1,   -1,   -1,
   -1,   -1,  424,  363,  364,  427,   -1,   -1,   -1,   -1,
   -1,  433,  372,  373,  374,  375,  376,  377,  378,   -1,
  380,   -1,  382,  383,  256,  385,  386,  387,  388,  389,
  262,  391,  392,  393,  394,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,   -1,   -1,
   -1,   -1,  422,   -1,  424,   -1,  298,  427,   -1,   -1,
   -1,   -1,   -1,  433,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
  382,  383,   -1,  385,  386,  387,  388,  389,  390,  391,
  392,  393,  394,   -1,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  256,  417,  366,  367,   -1,   -1,
  262,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,  433,  382,  383,   -1,   -1,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  298,   -1,   -1,   -1,
   -1,   -1,  256,   -1,  366,  367,   -1,  417,  262,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
   -1,   -1,   -1,  433,  386,  387,  388,  389,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,  298,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  417,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
  372,  433,  374,   -1,  376,   -1,  378,  379,  380,   -1,
  382,  383,   -1,   -1,  386,  387,  388,  389,   -1,   -1,
   -1,  393,  394,  298,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  366,  367,   -1,  417,   -1,   -1,  372,   -1,
  374,   -1,  376,   -1,  378,  379,  380,   -1,  382,  383,
   -1,  433,  386,  387,  388,  389,   -1,   -1,   -1,  393,
  394,   -1,   -1,   -1,  398,  399,  400,  401,  402,  403,
  404,  405,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  366,  367,  417,   -1,   -1,   -1,  372,   -1,  374,
   -1,  376,   -1,  378,  379,  380,   -1,  382,  383,  433,
   -1,  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,  398,  399,  400,  401,  402,  403,  404,
  405,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  417,   -1,   -1,   -1,   -1,  366,  367,   -1,
   -1,   -1,   -1,  372,   -1,  374,   -1,  376,  433,  378,
  379,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  388,
  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  366,  367,   -1,  417,   -1,
   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,
   -1,   -1,   -1,   -1,  433,  386,  387,  388,  389,   -1,
   -1,   -1,  393,  394,  256,   -1,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,  367,   -1,  417,   -1,   -1,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,  256,   -1,
   -1,   -1,  433,  386,  387,  388,  389,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,  400,  401,  402,
  403,  404,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,  417,   -1,   -1,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,
  433,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,   -1,   -1,   -1,  366,  367,   -1,  404,  405,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
  417,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,  433,   -1,  366,  367,
   -1,   -1,  404,  405,  372,  262,  374,   -1,  376,  266,
  378,  379,  380,   -1,   -1,  417,   -1,   -1,   -1,   -1,
   -1,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
   -1,  433,  366,  367,   -1,   -1,  404,  405,  372,   -1,
  374,  298,  376,   -1,  378,  379,  380,   -1,   -1,  417,
   -1,   -1,   -1,   -1,   -1,  389,   -1,  314,   -1,   -1,
  394,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,
  404,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  417,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  433,
  357,   -1,   -1,   -1,   -1,   -1,  363,  364,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,  373,   -1,  375,   -1,
  377,   -1,  379,  380,   -1,  382,  383,   -1,  385,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,   -1,  256,   -1,  422,   -1,  424,   -1,   -1,
  427,  264,  265,  266,  267,  268,  433,  270,  271,   -1,
  273,  274,   -1,  276,  277,  278,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
  363,   -1,   -1,  366,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  421,  422,
  423,  424,   -1,  426,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,   -1,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,
  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,
  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
  380,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  421,  422,  423,  424,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,   -1,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,
   -1,  380,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  421,  422,  423,  424,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,   -1,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,  380,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  421,  422,  423,  424,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,  274,   -1,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,  380,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,  421,  422,  423,  424,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,  261,  302,  303,  304,   -1,  306,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  284,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  297,
   -1,   -1,   -1,  341,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,  362,  363,   -1,  325,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,  336,   -1,
  378,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,  372,  264,  265,   -1,  267,   -1,
   -1,  270,  271,  421,  422,  423,  424,  276,  277,   -1,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  422,   -1,   -1,  316,  300,  318,
  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,
   -1,   -1,  371,  372,   -1,   -1,  375,   -1,   -1,   -1,
   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,   -1,   -1,  376,   -1,   -1,  396,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,  421,  422,  423,  424,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  422,   -1,   -1,   -1,   -1,  295,   -1,  261,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
  284,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  297,  334,   -1,   -1,   -1,  302,   -1,
   -1,  341,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,  325,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,  336,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  372,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,  421,  422,  423,  424,  276,  277,   -1,  279,   -1,
   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,  288,   -1,   -1,   -1,  422,   -1,
   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,  320,
  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  316,  334,  318,   -1,   -1,  265,  322,  267,
  341,   -1,  270,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,  279,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  362,  363,   -1,   -1,  366,  367,  295,   -1,   -1,
  371,   -1,  300,   -1,  375,   -1,  304,   -1,  306,   -1,
  381,  382,  383,  384,   -1,  313,   -1,  388,  316,  390,
  318,   -1,   -1,   -1,  322,  396,  397,  325,   -1,   -1,
   -1,   -1,  330,  331,  256,   -1,  334,   -1,   -1,  337,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
  421,  422,  423,  424,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  363,  288,   -1,  422,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,  265,   -1,  267,  341,
   -1,  270,   -1,   -1,  422,   -1,   -1,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  362,  363,   -1,   -1,  366,  367,  295,   -1,   -1,  371,
   -1,  300,   -1,  375,   -1,  304,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,  316,  390,  318,
   -1,   -1,   -1,  322,  396,  397,   -1,   -1,   -1,   -1,
   -1,  330,  331,  256,   -1,  334,   -1,   -1,  337,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,  421,
  422,  423,  424,  276,  277,   -1,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  279,   -1,  374,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,  265,  322,  267,  341,   -1,
  270,   -1,   -1,  422,  330,  331,   -1,   -1,  334,  279,
   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,  288,  362,
  363,   -1,   -1,  366,  367,  295,   -1,   -1,   -1,  372,
  300,   -1,  375,   -1,  304,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,  316,  390,  318,   -1,
   -1,   -1,  322,  396,  397,   -1,   -1,   -1,   -1,   -1,
  330,  331,  256,   -1,  334,   -1,   -1,  337,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,  421,  422,
  423,  424,  276,  277,   -1,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,  422,   -1,   -1,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,   -1,  265,  322,  267,  341,   -1,  270,
   -1,   -1,  422,  330,  331,   -1,   -1,  334,  279,   -1,
  337,   -1,   -1,   -1,   -1,   -1,   -1,  288,  362,  363,
   -1,   -1,  366,  367,  295,   -1,   -1,   -1,  372,  300,
   -1,  375,   -1,  304,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,  316,  390,  318,   -1,   -1,
   -1,  322,  396,  397,   -1,   -1,   -1,   -1,   -1,  330,
  331,  256,   -1,  334,   -1,   -1,  337,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,  421,  422,  423,
  424,  276,  277,   -1,  279,   -1,   -1,  265,   -1,  267,
  285,   -1,  270,  288,   -1,  422,   -1,   -1,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,  337,  265,  322,  267,  341,   -1,  270,   -1,
   -1,  422,  330,  331,   -1,   -1,  334,  279,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  362,  363,   -1,
   -1,  366,  367,  295,   -1,   -1,   -1,   -1,  300,   -1,
  375,   -1,  304,   -1,   -1,   -1,  381,  382,  383,  384,
   -1,   -1,   -1,  388,  316,  390,  318,   -1,   -1,   -1,
  322,  396,  397,   -1,   -1,   -1,   -1,   -1,  330,  331,
  256,   -1,  334,   -1,   -1,  337,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,  421,  422,  423,  424,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  422,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,  341,   -1,   -1,   -1,   -1,
  422,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,
  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,
   -1,   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,
   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,
  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,  421,  422,  423,  424,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  261,   -1,  263,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,  284,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  297,  334,   -1,   -1,
   -1,  302,   -1,   -1,  341,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,  366,
  367,   -1,   -1,   -1,   -1,  336,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  372,  373,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,  421,  422,  423,  424,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,  261,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  284,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  297,
   -1,   -1,   -1,  341,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,  362,  363,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,  336,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  368,  369,   -1,   -1,  372,  264,  265,   -1,  267,   -1,
   -1,  270,  271,  421,  422,  423,  424,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,  261,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  284,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,  297,   -1,
   -1,   -1,  341,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,  362,  363,   -1,   -1,  366,  367,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  375,  336,   -1,   -1,
   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  368,
  369,   -1,   -1,  372,  264,  265,   -1,  267,   -1,   -1,
  270,  271,  421,  422,  423,  424,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,  261,   -1,  263,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
  284,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  297,  334,   -1,   -1,   -1,  302,   -1,
   -1,  341,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,   -1,  362,  363,   -1,   -1,  366,  367,   -1,   -1,
   -1,   -1,  336,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  372,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,  421,  422,  423,  424,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
  261,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  284,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,  297,   -1,   -1,   -1,
  341,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,  336,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  368,  369,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
  421,  422,  423,  424,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  362,  363,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,
  382,  383,  384,   -1,   -1,   -1,  388,  285,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,
  298,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,  421,
  422,  423,  424,  276,  277,   -1,  279,   -1,   -1,  327,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,  381,  382,  383,  384,   -1,  386,  387,
  388,  389,  390,  391,  392,  393,   -1,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,  256,   -1,
   -1,   -1,   -1,  396,  397,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,  421,  422,
  288,  424,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  366,  367,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,  256,   -1,   -1,   -1,   -1,  396,  397,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,  421,  422,  288,  424,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,  273,   -1,  421,  422,
  277,  424,  279,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,  336,
  337,  256,   -1,   -1,   -1,  342,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,  256,   -1,
   -1,  276,  277,   -1,  279,   -1,   -1,  265,   -1,  267,
  285,   -1,  270,  288,  371,  372,  373,   -1,   -1,   -1,
  295,  279,   -1,   -1,  381,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,   -1,   -1,  322,  422,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  256,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  265,   -1,  267,  362,  363,  270,
   -1,  366,  367,   -1,   -1,  256,   -1,   -1,  279,   -1,
  375,   -1,   -1,   -1,  265,   -1,  267,  288,   -1,  270,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  279,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  316,   -1,  318,   -1,  300,
   -1,  322,  262,  304,   -1,   -1,  421,  422,   -1,  330,
  331,  256,   -1,  334,   -1,  316,  337,  318,   -1,   -1,
  265,  322,  267,   -1,  422,  270,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,  279,   -1,  337,   -1,  298,   -1,
  265,   -1,  267,  288,   -1,  270,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  279,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  316,   -1,  318,   -1,  300,   -1,  322,   -1,  304,
   -1,  306,   -1,  308,   -1,  330,  331,   -1,  313,  334,
   -1,  316,  337,  318,   -1,   -1,   -1,  322,   -1,   -1,
  325,  422,   -1,   -1,  364,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,  375,  376,  377,  378,  379,
   -1,  422,  382,  383,   -1,   -1,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,   -1,   -1,
   -1,   -1,   -1,   -1,  424,   -1,   -1,  427,   -1,  261,
   -1,  263,   -1,  265,   -1,  267,   -1,  422,  270,   -1,
  272,  273,   -1,   -1,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  284,   -1,   -1,   -1,  288,  422,   -1,   -1,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,
  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  315,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,   -1,  336,  337,   -1,  261,   -1,   -1,
  342,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,   -1,   -1,  277,   -1,  279,   -1,  281,  282,  283,
  284,   -1,   -1,   -1,  288,   -1,  368,  369,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,  325,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,  336,  337,   -1,  261,   -1,   -1,  342,  265,
  422,  267,   -1,   -1,  270,   -1,  272,  273,   -1,   -1,
   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  372,  295,
  296,  297,   -1,   -1,  300,   -1,  302,  381,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,  325,
   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,
  336,  337,   -1,  261,   -1,   -1,  342,  265,  422,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,   -1,   -1,  277,
   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,  372,  295,  296,  297,
   -1,   -1,  300,   -1,  302,  381,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,  325,   -1,   -1,
   -1,  261,  330,  331,   -1,  265,  334,  267,  336,  337,
  270,   -1,  272,  273,  342,   -1,  422,  277,   -1,  279,
   -1,  281,  282,  283,  284,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,  381,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  261,  336,  337,   -1,  265,
   -1,  267,  342,   -1,  270,   -1,  272,  273,   -1,   -1,
   -1,  277,   -1,  279,  422,  281,  282,  283,  284,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,  297,  372,   -1,  300,   -1,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,  325,
  264,  265,   -1,  267,  330,  331,  270,  271,  334,   -1,
  336,  337,  276,  277,   -1,  279,  342,   -1,   -1,   -1,
   -1,  285,  422,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,  306,   -1,   -1,   -1,  372,   -1,   -1,  313,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  422,   -1,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,  378,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,
   -1,   -1,  366,  367,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,   -1,   -1,  277,
   -1,  279,   -1,  281,  282,  283,   -1,   -1,  362,   -1,
  288,   -1,  366,  367,   -1,  293,   -1,  295,  296,   -1,
   -1,  375,  300,   -1,   -1,   -1,  304,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,  315,  316,   -1,
  318,   -1,  396,  397,  322,  323,   -1,  325,   -1,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  342,   -1,   -1,  421,  422,   -1,
  424,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  368,  369,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,  381,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,  422,   -1,  337,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
   -1,   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,  362,   -1,  288,   -1,  366,  367,   -1,  293,   -1,
  295,  296,   -1,   -1,  375,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,
  325,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,  265,  337,  267,   -1,   -1,  270,  342,  272,  273,
  421,  422,   -1,  277,   -1,  279,   -1,  281,  282,  283,
   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  323,
   -1,  325,   -1,  265,   -1,  267,  330,  331,  270,   -1,
  334,  273,   -1,  337,   -1,  277,   -1,  279,  342,  281,
  282,  283,   -1,   -1,   -1,   -1,  288,  422,   -1,   -1,
   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,  325,   -1,  265,   -1,  267,  330,  331,
  270,   -1,  334,  273,   -1,  337,   -1,  277,   -1,  279,
  342,  281,  282,  283,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,   -1,  265,  422,  267,
  300,   -1,  270,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,  279,   -1,   -1,   -1,   -1,  316,   -1,  318,  381,
  288,   -1,  322,   -1,   -1,  325,   -1,  295,   -1,   -1,
  330,  331,  300,   -1,  334,   -1,  304,  337,  306,   -1,
  308,  265,  342,  267,   -1,  313,  270,   -1,  316,   -1,
  318,   -1,   -1,   -1,  322,  279,   -1,  325,   -1,   -1,
  422,   -1,  330,  331,  288,   -1,  334,   -1,   -1,  337,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,  306,   -1,  308,   -1,  265,   -1,  267,  313,
   -1,  270,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,
  279,  325,   -1,   -1,   -1,   -1,  330,  331,  376,  288,
  334,   -1,   -1,  337,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,  422,   -1,   -1,  304,   -1,  306,   -1,  308,
   -1,   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,
   -1,   -1,  265,  322,  267,   -1,  325,  270,   -1,   -1,
  374,  330,  331,   -1,  422,  334,  279,   -1,  337,   -1,
  283,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,  261,
  293,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,
  272,  304,  305,   -1,   -1,  277,   -1,   -1,   -1,  281,
   -1,   -1,  284,  316,   -1,  318,   -1,   -1,  422,  322,
   -1,   -1,   -1,   -1,  296,  297,   -1,  330,  331,  301,
  302,  334,  261,   -1,  337,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  272,   -1,  317,   -1,   -1,  277,  321,
   -1,  323,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  422,  336,   -1,   -1,  296,  297,   -1,
  342,   -1,  301,  302,   -1,  261,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,
   -1,  277,  321,   -1,  323,  281,   -1,   -1,  284,   -1,
  372,  373,   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,
  296,  297,   -1,  342,   -1,  301,  302,   -1,   -1,  422,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,  323,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,
  336,   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  372,
  };

#line 6115 "E:\Projects\VSharp\Research\\VSharpParser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclarationInfo {
	public readonly VSC.TypeSystem.Resolver.OperatorType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
/*	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}*/
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, VSC.TypeSystem.ParameterModifier mod)
{
/*	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));*/
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDeclaration tce)
{	
	++lexer.parsing_declaration;
	current_container = tce;
	current_type = tce;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDeclaration;

	return retval;
}



[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	/*if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));*/
}

List<Tuple<VSC.TypeSystem.Modifiers, Location>> GetModifierLocations ()
{
	/*var result = mod_locations;
	mod_locations = null;
	return result;*/
	return null;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void PushLocation (Location loc)
{
	if (location_stack == null)
		location_stack = new Stack<Location> ();

	location_stack.Push (loc);
}

Location PopLocation ()
{
	if (location_stack == null)
		return Location.Null;

	return location_stack.Pop ();
}

string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (VSC.TypeSystem.Resolver.OperatorType op)
{
	switch (op) {
		
	case VSC.TypeSystem.Resolver.OperatorType.LogicalNot: 
	case VSC.TypeSystem.Resolver.OperatorType.OnesComplement: 
	case VSC.TypeSystem.Resolver.OperatorType.Increment:
	case VSC.TypeSystem.Resolver.OperatorType.Decrement:
	case VSC.TypeSystem.Resolver.OperatorType.True: 
	case VSC.TypeSystem.Resolver.OperatorType.False: 
	case VSC.TypeSystem.Resolver.OperatorType.UnaryPlus: 
	case VSC.TypeSystem.Resolver.OperatorType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public VSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public VSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = file.RootNamespace.DefaultType;
	current_namespace = file.RootNamespace;
	
	//this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
//	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
//	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
/*	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;
		*/
	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

/*void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}
	current_anonymous_method.IsAsync = isAsync;
	
	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}
*/
/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
/*AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}
*/
void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
	case Token.WHEN:
		return "when";
	case Token.INTERPOLATED_STRING_END:
		return "}";
	case Token.INTERPOLATED_STRING:
		return "${";

	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int INTERR_OPERATOR = 364;
  public const int WHEN = 365;
  public const int INTERPOLATED_STRING = 366;
  public const int INTERPOLATED_STRING_END = 367;
  public const int GET = 368;
  public const int SET = 369;
  public const int LAST_KEYWORD = 370;
  public const int OPEN_BRACE = 371;
  public const int CLOSE_BRACE = 372;
  public const int OPEN_BRACKET = 373;
  public const int CLOSE_BRACKET = 374;
  public const int OPEN_PARENS = 375;
  public const int CLOSE_PARENS = 376;
  public const int DOT = 377;
  public const int COMMA = 378;
  public const int COLON = 379;
  public const int SEMICOLON = 380;
  public const int TILDE = 381;
  public const int PLUS = 382;
  public const int MINUS = 383;
  public const int BANG = 384;
  public const int ASSIGN = 385;
  public const int OP_LT = 386;
  public const int OP_GT = 387;
  public const int BITWISE_AND = 388;
  public const int BITWISE_OR = 389;
  public const int STAR = 390;
  public const int PERCENT = 391;
  public const int DIV = 392;
  public const int CARRET = 393;
  public const int INTERR = 394;
  public const int DOUBLE_COLON = 395;
  public const int OP_INC = 396;
  public const int OP_DEC = 397;
  public const int OP_SHIFT_LEFT = 398;
  public const int OP_SHIFT_RIGHT = 399;
  public const int OP_LE = 400;
  public const int OP_GE = 401;
  public const int OP_EQ = 402;
  public const int OP_NE = 403;
  public const int OP_AND = 404;
  public const int OP_OR = 405;
  public const int OP_MULT_ASSIGN = 406;
  public const int OP_DIV_ASSIGN = 407;
  public const int OP_MOD_ASSIGN = 408;
  public const int OP_ADD_ASSIGN = 409;
  public const int OP_SUB_ASSIGN = 410;
  public const int OP_SHIFT_LEFT_ASSIGN = 411;
  public const int OP_SHIFT_RIGHT_ASSIGN = 412;
  public const int OP_AND_ASSIGN = 413;
  public const int OP_XOR_ASSIGN = 414;
  public const int OP_OR_ASSIGN = 415;
  public const int OP_PTR = 416;
  public const int OP_COALESCING = 417;
  public const int OP_GENERICS_LT = 418;
  public const int OP_GENERICS_LT_DECL = 419;
  public const int OP_GENERICS_GT = 420;
  public const int LITERAL = 421;
  public const int IDENTIFIER = 422;
  public const int OPEN_PARENS_LAMBDA = 423;
  public const int OPEN_PARENS_CAST = 424;
  public const int GENERIC_DIMENSION = 425;
  public const int DEFAULT_COLON = 426;
  public const int OPEN_BRACKET_EXPR = 427;
  public const int EVAL_STATEMENT_PARSER = 428;
  public const int EVAL_COMPILATION_UNIT_PARSER = 429;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 430;
  public const int DOC_SEE = 431;
  public const int GENERATE_COMPLETION = 432;
  public const int COMPLETE_COMPLETION = 433;
  public const int UMINUS = 434;
  public const int event_declarator = 435;
  public const int pattern_expr = 436;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
