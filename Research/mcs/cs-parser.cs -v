// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariable current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;

		bool? interactive_async;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 7;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_extern_alias_directives opt_using_directives",
    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "extern_alias_directives : extern_alias_directive",
    "extern_alias_directives : extern_alias_directives extern_alias_directive",
    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
    "extern_alias_directive : EXTERN_ALIAS error",
    "using_directives : using_directive",
    "using_directives : using_directives using_directive",
    "using_directive : using_namespace",
    "using_namespace : INCLUDE opt_static namespace_or_type_expr SEMICOLON",
    "using_namespace : INCLUDE opt_static IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
    "using_namespace : INCLUDE error",
    "opt_static :",
    "opt_static : STATIC",
    "$$2 :",
    "$$3 :",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon_error",
    "namespace_declaration : opt_attributes NAMESPACE namespace_name",
    "opt_semicolon_error :",
    "opt_semicolon_error : SEMICOLON",
    "opt_semicolon_error : error",
    "namespace_name : IDENTIFIER",
    "namespace_name : namespace_name DOT IDENTIFIER",
    "namespace_name : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "opt_using_directives :",
    "opt_using_directives : using_directives",
    "opt_extern_alias_directives :",
    "opt_extern_alias_directives : extern_alias_directives",
    "opt_namespace_or_type_declarations :",
    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
    "namespace_or_type_declarations : namespace_or_type_declaration",
    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
    "namespace_or_type_declaration : type_declaration",
    "namespace_or_type_declaration : namespace_declaration",
    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$4 :",
    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
    "$$5 :",
    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : IDENTIFIER error",
    "attribute_section_cont : error",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$6 :",
    "attribute : attribute_name $$6 opt_attribute_arguments",
    "attribute_name : namespace_or_type_expr",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "positional_or_named_argument : error",
    "$$7 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
    "named_argument_expr : expression_or_error",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : primary_constructor_body",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : attributes_without_members",
    "class_member_declaration : incomplete_member",
    "class_member_declaration : error",
    "$$8 :",
    "primary_constructor_body : OPEN_BRACE $$8 opt_statement_list block_end",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "$$13 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$9 type_declaration_name $$10 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$11 OPEN_BRACE $$12 opt_class_member_declarations CLOSE_BRACE $$13 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$14 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$14 constant_initializer opt_constant_declarators SEMICOLON",
    "constant_declaration : opt_attributes opt_modifiers CONST type error",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$15 :",
    "constant_initializer : ASSIGN $$15 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$16 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$16 opt_field_initializer opt_field_declarators SEMICOLON",
    "$$17 :",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$17 fixed_field_size opt_fixed_field_declarators SEMICOLON",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
    "opt_field_initializer :",
    "$$18 :",
    "opt_field_initializer : ASSIGN $$18 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$19 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$19 variable_initializer",
    "opt_fixed_field_declarators :",
    "opt_fixed_field_declarators : fixed_field_declarators",
    "fixed_field_declarators : fixed_field_declarator",
    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
    "$$20 :",
    "fixed_field_size : OPEN_BRACKET $$20 expression CLOSE_BRACKET",
    "fixed_field_size : OPEN_BRACKET error",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$21 :",
    "method_declaration : method_header $$21 method_body_expression_block",
    "$$22 :",
    "$$23 :",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$22 opt_formal_parameter_list CLOSE_PARENS $$23 opt_type_parameter_constraints_clauses",
    "$$24 :",
    "$$25 :",
    "$$26 :",
    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$24 method_declaration_name OPEN_PARENS $$25 opt_formal_parameter_list CLOSE_PARENS $$26 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
    "method_body_expression_block : method_body",
    "method_body_expression_block : expression_block",
    "method_body : block",
    "method_body : SEMICOLON",
    "$$27 :",
    "expression_block : ARROW $$27 expression SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : arglist_modifier COMMA error",
    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : arglist_modifier",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : attribute_sections error",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$28 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$28 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "arglist_modifier : ARGLIST",
    "$$29 :",
    "$$30 :",
    "$$31 :",
    "$$32 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$29 OPEN_BRACE $$30 accessor_declarations $$31 CLOSE_BRACE $$32 opt_property_initializer",
    "$$33 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$33 expression_block",
    "opt_property_initializer :",
    "$$34 :",
    "opt_property_initializer : ASSIGN $$34 property_initializer SEMICOLON",
    "property_initializer : expression",
    "property_initializer : array_initializer",
    "$$35 :",
    "$$36 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$35 opt_formal_parameter_list CLOSE_BRACKET $$36 indexer_body",
    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
    "indexer_body : expression_block",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$37 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$37 accessor_body",
    "$$38 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$38 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$39 :",
    "$$40 :",
    "$$41 :",
    "$$42 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$39 type_declaration_name $$40 opt_class_base opt_type_parameter_constraints_clauses $$41 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$42 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$43 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$43 method_body_expression_block",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$44 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$44 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : POWER",
    "overloadable_operator : XNOR",
    "overloadable_operator : NOR",
    "overloadable_operator : NAND",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "overloadable_operator : IS",
    "$$45 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$45 opt_formal_parameter_list CLOSE_PARENS",
    "$$46 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$46 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$47 :",
    "$$48 :",
    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$47 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$48 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$49 :",
    "constructor_initializer : COLON BASE OPEN_PARENS $$49 opt_argument_list CLOSE_PARENS",
    "$$50 :",
    "constructor_initializer : COLON THIS OPEN_PARENS $$50 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "constructor_initializer : error",
    "$$51 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$51 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
    "$$52 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$52 opt_event_initializer opt_event_declarators SEMICOLON",
    "$$53 :",
    "$$54 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$53 event_accessor_declarations $$54 CLOSE_BRACE",
    "event_declaration : opt_attributes opt_modifiers EVENT type error",
    "opt_event_initializer :",
    "$$55 :",
    "opt_event_initializer : ASSIGN $$55 event_variable_initializer",
    "opt_event_declarators :",
    "opt_event_declarators : event_declarators",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_declarator : COMMA IDENTIFIER",
    "$$56 :",
    "event_declarator : COMMA IDENTIFIER ASSIGN $$56 event_variable_initializer",
    "$$57 :",
    "event_variable_initializer : $$57 variable_initializer",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$58 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$58 event_accessor_block",
    "$$59 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$59 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "attributes_without_members : attribute_sections CLOSE_BRACE",
    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
    "$$60 :",
    "$$61 :",
    "$$62 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$60 OPEN_BRACE $$61 opt_enum_member_declarations $$62 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$63 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$63 ASSIGN constant_expression",
    "enum_member_declaration : opt_attributes IDENTIFIER error",
    "enum_member_declaration : attributes_without_members",
    "$$64 :",
    "$$65 :",
    "$$66 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$64 opt_formal_parameter_list CLOSE_PARENS $$65 opt_type_parameter_constraints_clauses $$66 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_expr : member_name",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "namespace_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
    "member_name : simple_name_expr",
    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
    "member_name : namespace_or_type_expr DOT IDENTIFIER generic_dimension",
    "simple_name_expr : IDENTIFIER opt_type_argument_list",
    "simple_name_expr : IDENTIFIER generic_dimension",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$67 :",
    "type_declaration_name : IDENTIFIER $$67 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : void_invalid",
    "simple_type : type_expression",
    "simple_type : void_invalid",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_expr opt_nullable",
    "type_expression : namespace_or_type_expr pointer_stars",
    "type_expression : builtin_type_expression",
    "void_invalid : VOID",
    "builtin_type_expression : builtin_types opt_nullable",
    "builtin_type_expression : builtin_types pointer_stars",
    "builtin_type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : DECIMAL",
    "builtin_types : COMPLEX",
    "builtin_types : VLONG",
    "builtin_types : QUAD",
    "builtin_types : DATE",
    "builtin_types : TIME",
    "builtin_types : POINTER",
    "builtin_types : UPOINTER",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : type_name_expression",
    "primary_expression : literal",
    "primary_expression : array_creation_expression",
    "primary_expression : parenthesized_expression",
    "primary_expression : default_value_expression",
    "primary_expression : invocation_expression",
    "primary_expression : element_access",
    "primary_expression : this_access",
    "primary_expression : base_access",
    "primary_expression : post_increment_expression",
    "primary_expression : post_decrement_expression",
    "primary_expression : object_or_delegate_creation_expression",
    "primary_expression : anonymous_type_expression",
    "primary_expression : typeof_expression",
    "primary_expression : sizeof_expression",
    "primary_expression : checked_expression",
    "primary_expression : unchecked_expression",
    "primary_expression : pointer_member_access",
    "primary_expression : anonymous_method_expression",
    "primary_expression : undocumented_expressions",
    "primary_expression : interpolated_string",
    "type_name_expression : simple_name_expr",
    "type_name_expression : IDENTIFIER GENERATE_COMPLETION",
    "type_name_expression : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "interpolated_string : INTERPOLATED_STRING interpolations INTERPOLATED_STRING_END",
    "interpolated_string : INTERPOLATED_STRING_END",
    "interpolations : interpolation",
    "interpolations : interpolations INTERPOLATED_STRING interpolation",
    "interpolation : expression",
    "interpolation : expression COMMA expression",
    "$$68 :",
    "interpolation : expression COLON $$68 LITERAL",
    "$$69 :",
    "interpolation : expression COMMA expression COLON $$69 LITERAL",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
    "member_access : BASE DOT identifier_inside_body opt_type_argument_list",
    "member_access : AWAIT DOT identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
    "member_access : primary_expression DOT GENERATE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
    "member_access : builtin_types DOT GENERATE_COMPLETION",
    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "invocation_expression : primary_expression open_parens_any argument_list error",
    "invocation_expression : primary_expression open_parens_any error",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : AWAIT ASSIGN initializer_value",
    "member_initializer : GENERATE_COMPLETION",
    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACKET_EXPR argument_list CLOSE_BRACKET ASSIGN initializer_value",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA error",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : REF declaration_expression",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : OUT declaration_expression",
    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
    "declaration_expression : variable_type identifier_inside_body",
    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
    "element_access : primary_expression OPEN_BRACKET_EXPR error",
    "expression_list : expression_or_error",
    "expression_list : expression_list COMMA expression_or_error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "base_access : BASE OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$70 :",
    "new_expr_type : $$70 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_expression : NEW OPEN_BRACE GENERATE_COMPLETION",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameters : COMPLETE_COMPLETION",
    "anonymous_type_parameters : anonymous_type_parameter COMPLETE_COMPLETION",
    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
    "anonymous_type_parameter : identifier_inside_body",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : error",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "sizeof_expression : SIZEOF open_parens_any type error",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "checked_expression : CHECKED error",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED error",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$71 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$71 block",
    "$$72 :",
    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$72 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$73 :",
    "anonymous_method_signature : OPEN_PARENS $$73 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : AWAIT prefixed_unary_expression",
    "unary_expression : BANG error",
    "unary_expression : TILDE error",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
    "unary_expression : AWAIT error",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "prefixed_unary_expression : PLUS error",
    "prefixed_unary_expression : MINUS error",
    "prefixed_unary_expression : OP_INC error",
    "prefixed_unary_expression : OP_DEC error",
    "prefixed_unary_expression : STAR error",
    "prefixed_unary_expression : BITWISE_AND error",
    "power_expression : prefixed_unary_expression",
    "power_expression : power_expression POWER prefixed_unary_expression",
    "power_expression : power_expression POWER error",
    "multiplicative_expression : power_expression",
    "multiplicative_expression : multiplicative_expression STAR power_expression",
    "multiplicative_expression : multiplicative_expression DIV power_expression",
    "multiplicative_expression : multiplicative_expression PERCENT power_expression",
    "multiplicative_expression : multiplicative_expression STAR error",
    "multiplicative_expression : multiplicative_expression DIV error",
    "multiplicative_expression : multiplicative_expression PERCENT error",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression PLUS error",
    "additive_expression : additive_expression MINUS error",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS pattern_type_expr opt_identifier",
    "additive_expression : additive_expression IS pattern_expr",
    "additive_expression : additive_expression AS error",
    "additive_expression : additive_expression IS error",
    "additive_expression : AWAIT IS type",
    "additive_expression : AWAIT AS type",
    "pattern_type_expr : variable_type",
    "pattern_expr : literal",
    "pattern_expr : PLUS prefixed_unary_expression",
    "pattern_expr : MINUS prefixed_unary_expression",
    "pattern_expr : sizeof_expression",
    "pattern_expr : default_value_expression",
    "pattern_expr : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "pattern_expr : STAR",
    "pattern_expr : pattern_expr_invocation",
    "pattern_expr : pattern_property",
    "pattern_expr_invocation : type_name_expression OPEN_PARENS opt_pattern_list CLOSE_PARENS",
    "pattern_property : type_name_expression OPEN_BRACE pattern_property_list CLOSE_BRACE",
    "pattern_property_list : pattern_property_entry",
    "pattern_property_list : pattern_property_list COMMA pattern_property_entry",
    "pattern_property_entry : identifier_inside_body IS pattern",
    "pattern : pattern_expr",
    "pattern : pattern_type_expr opt_identifier",
    "opt_pattern_list :",
    "opt_pattern_list : pattern_list",
    "pattern_list : pattern_argument",
    "pattern_list : pattern_list COMMA pattern_argument",
    "pattern_argument : pattern",
    "pattern_argument : IDENTIFIER COLON pattern",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT error",
    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "relational_expression : relational_expression OP_LT error",
    "relational_expression : relational_expression OP_GT error",
    "relational_expression : relational_expression OP_LE error",
    "relational_expression : relational_expression OP_GE error",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "equality_expression : equality_expression OP_EQ error",
    "equality_expression : equality_expression OP_NE error",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "and_expression : and_expression BITWISE_AND error",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET error",
    "Nor_expression : exclusive_or_expression",
    "Nor_expression : Nor_expression NOR exclusive_or_expression",
    "Nor_expression : Nor_expression NOR error",
    "Xnor_expression : Nor_expression",
    "Xnor_expression : Xnor_expression XNOR Nor_expression",
    "Xnor_expression : Xnor_expression XNOR error",
    "Nand_expression : Xnor_expression",
    "Nand_expression : Nand_expression NAND Xnor_expression",
    "Nand_expression : Nand_expression NAND error",
    "inclusive_or_expression : Nand_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR Nand_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND error",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR error",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "conditional_expression : null_coalescing_expression INTERR expression error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON CLOSE_BRACE",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_NAND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_NOR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XNOR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_POWER_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "lambda_parameter : AWAIT",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$74 :",
    "lambda_expression_body : $$74 expression",
    "lambda_expression_body : block",
    "lambda_expression_body : error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$75 :",
    "lambda_expression : IDENTIFIER ARROW $$75 lambda_expression_body",
    "$$76 :",
    "lambda_expression : AWAIT ARROW $$76 lambda_expression_body",
    "$$77 :",
    "lambda_expression : ASYNC identifier_inside_body ARROW $$77 lambda_expression_body",
    "$$78 :",
    "$$79 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$78 opt_lambda_parameter_list CLOSE_PARENS ARROW $$79 lambda_expression_body",
    "$$80 :",
    "$$81 :",
    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$80 opt_lambda_parameter_list CLOSE_PARENS ARROW $$81 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : query_expression",
    "non_assignment_expression : ARGLIST",
    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
    "constant_expression : expression",
    "boolean_expression : expression",
    "opt_primary_parameters :",
    "opt_primary_parameters : primary_parameters",
    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "opt_primary_parameters_with_class_base :",
    "opt_primary_parameters_with_class_base : class_base",
    "opt_primary_parameters_with_class_base : primary_parameters",
    "opt_primary_parameters_with_class_base : primary_parameters class_base",
    "$$82 :",
    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$82 opt_argument_list CLOSE_PARENS",
    "$$83 :",
    "$$84 :",
    "$$85 :",
    "$$86 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$83 type_declaration_name $$84 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$85 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$86 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "modifier : VOLATILE",
    "modifier : UNSAFE",
    "modifier : SYNC",
    "modifier : ASYNC",
    "opt_class_base :",
    "opt_class_base : class_base",
    "class_base : COLON type_list",
    "class_base : COLON type_list error",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "opt_type_parameter_variance :",
    "opt_type_parameter_variance : type_parameter_variance",
    "type_parameter_variance : OUT",
    "type_parameter_variance : IN",
    "$$87 :",
    "block : OPEN_BRACE $$87 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$88 :",
    "block_prepared : OPEN_BRACE $$88 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : restrict_statement",
    "valid_declaration_statement : safe_statement",
    "valid_declaration_statement : sync_statement",
    "valid_declaration_statement : asm_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : async_statement",
    "valid_declaration_statement : fixed_statement",
    "valid_declaration_statement : groupassign_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : restrict_statement",
    "interactive_valid_declaration_statement : safe_statement",
    "interactive_valid_declaration_statement : sync_statement",
    "interactive_valid_declaration_statement : asm_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : async_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : groupassign_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$89 :",
    "labeled_statement : identifier_inside_body COLON $$89 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : type_name_expression opt_nullable",
    "variable_type_simple : type_name_expression pointer_stars",
    "variable_type_simple : builtin_type_expression",
    "variable_type_simple : void_invalid",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "identifier_inside_body : AWAIT",
    "$$90 :",
    "block_variable_declaration : variable_type identifier_inside_body $$90 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
    "$$91 :",
    "block_variable_declaration : CONST variable_type identifier_inside_body $$91 const_variable_initializer opt_const_declarators SEMICOLON",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "expression_statement : statement_expression CLOSE_BRACE",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "if_statement : IF open_parens_any boolean_expression error",
    "$$92 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$92 opt_switch_sections CLOSE_BRACE",
    "switch_statement : SWITCH open_parens_any expression error",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "switch_section : switch_labels statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : CASE constant_expression error",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : loop_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression error",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE error",
    "loop_statement : LOOP open_parens_any expression CLOSE_PARENS embedded_statement",
    "$$93 :",
    "loop_statement : LOOP $$93 block",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "do_statement : DO embedded_statement error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
    "$$94 :",
    "for_statement : FOR open_parens_any $$94 for_statement_cont",
    "$$95 :",
    "for_statement_cont : opt_for_initializer SEMICOLON $$95 for_condition_and_iterator_part embedded_statement",
    "for_statement_cont : error",
    "$$96 :",
    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$96 for_iterator_part",
    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
    "for_iterator_part : opt_for_iterator CLOSE_PARENS",
    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
    "close_parens_close_brace : CLOSE_PARENS",
    "close_parens_close_brace : CLOSE_BRACE",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$97 :",
    "for_initializer : variable_type identifier_inside_body $$97 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type error",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "$$98 :",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$98 embedded_statement",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "jump_statement : assert_statement",
    "assert_statement : ASSERT expression COLON expression SEMICOLON",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "continue_statement : CONTINUE error",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "return_statement : RETURN expression error",
    "return_statement : RETURN error",
    "throw_statement : THROW opt_expression SEMICOLON",
    "throw_statement : THROW expression error",
    "throw_statement : THROW error",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body RETURN expression error",
    "yield_statement : identifier_inside_body BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "catch_clause : CATCH opt_catch_filter block",
    "$$99 :",
    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$99 opt_catch_filter_or_error",
    "catch_clause : CATCH open_parens_any error",
    "opt_catch_filter_or_error : opt_catch_filter block_prepared",
    "opt_catch_filter_or_error : error",
    "opt_catch_filter :",
    "$$100 :",
    "opt_catch_filter : WHEN $$100 open_parens_any expression CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$101 :",
    "unsafe_statement : UNSAFE $$101 block",
    "groupassign_statement : OPEN_PARENS expression_list CLOSE_PARENS ASSIGN OPEN_PARENS expression_list CLOSE_PARENS",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
    "lock_statement : LOCK open_parens_any expression error",
    "safe_statement : SAFE open_parens_any expression CLOSE_PARENS embedded_statement",
    "safe_statement : SAFE block",
    "$$102 :",
    "async_statement : SYM $$102 block",
    "$$103 :",
    "asm_statement : ASM $$103 block",
    "$$104 :",
    "sync_statement : SYNC open_parens_any expression CLOSE_PARENS $$104 block",
    "restrict_statement : RESTRICT open_parens_any expression CLOSE_PARENS embedded_statement",
    "restrict_statement : RESTRICT open_parens_any expression error",
    "$$105 :",
    "$$106 :",
    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$105 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$106 embedded_statement",
    "$$107 :",
    "$$108 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$107 using_initialization CLOSE_PARENS $$108 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_statement : USING open_parens_any expression error",
    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
    "using_initialization : error",
    "using_or_fixed_variable_initializer :",
    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
    "query_expression : first_from_clause query_body",
    "query_expression : nested_from_clause query_body",
    "query_expression : first_from_clause COMPLETE_COMPLETION",
    "query_expression : nested_from_clause COMPLETE_COMPLETION",
    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
    "nested_from_clause : FROM identifier_inside_body IN expression",
    "nested_from_clause : FROM type identifier_inside_body IN expression",
    "$$109 :",
    "from_clause : FROM identifier_inside_body IN $$109 expression_or_error",
    "$$110 :",
    "from_clause : FROM type identifier_inside_body IN $$110 expression_or_error",
    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
    "query_body : select_or_group_clause opt_query_continuation",
    "query_body : query_body_clauses COMPLETE_COMPLETION",
    "query_body : query_body_clauses error",
    "query_body : error",
    "$$111 :",
    "select_or_group_clause : SELECT $$111 expression_or_error",
    "$$112 :",
    "$$113 :",
    "select_or_group_clause : GROUP $$112 expression_or_error $$113 by_expression",
    "by_expression : BY expression_or_error",
    "by_expression : error",
    "query_body_clauses : query_body_clause",
    "query_body_clauses : query_body_clauses query_body_clause",
    "query_body_clause : from_clause",
    "query_body_clause : let_clause",
    "query_body_clause : where_clause",
    "query_body_clause : join_clause",
    "query_body_clause : orderby_clause",
    "$$114 :",
    "let_clause : LET identifier_inside_body ASSIGN $$114 expression_or_error",
    "$$115 :",
    "where_clause : WHERE $$115 expression_or_error",
    "$$116 :",
    "$$117 :",
    "$$118 :",
    "join_clause : JOIN identifier_inside_body IN $$116 expression_or_error ON $$117 expression_or_error EQUALS $$118 expression_or_error opt_join_into",
    "$$119 :",
    "$$120 :",
    "$$121 :",
    "join_clause : JOIN type identifier_inside_body IN $$119 expression_or_error ON $$120 expression_or_error EQUALS $$121 expression_or_error opt_join_into",
    "opt_join_into :",
    "opt_join_into : INTO identifier_inside_body",
    "$$122 :",
    "orderby_clause : ORDERBY $$122 orderings",
    "orderings : order_by",
    "$$123 :",
    "orderings : order_by COMMA $$123 orderings_then_by",
    "orderings_then_by : then_by",
    "$$124 :",
    "orderings_then_by : orderings_then_by COMMA $$124 then_by",
    "order_by : expression",
    "order_by : expression ASCENDING",
    "order_by : expression DESCENDING",
    "then_by : expression",
    "then_by : expression ASCENDING",
    "then_by : expression DESCENDING",
    "opt_query_continuation :",
    "$$125 :",
    "opt_query_continuation : INTO identifier_inside_body $$125 query_body",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
    "$$126 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$126 interactive_statement_list opt_COMPLETE_COMPLETION",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : VOID opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT THIS",
    "$$127 :",
    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$127 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$128 :",
    "opt_doc_method_sig : OPEN_PARENS $$128 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "COMPLEX","VLONG","DATE","TIME","QUAD","POINTER","UPOINTER","DEFAULT",
    "DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT","EXTERN",
    "FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO","IF",
    "IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","ASSERT",
    "ASM","SYNC","SAFE","SYM","RESTRICT","LONG","NAMESPACE","NEW","NULL",
    "OBJECT","OPERATOR","OUT","OVERRIDE","PARAMS","PRIVATE","PROTECTED",
    "PUBLIC","READONLY","REF","RETURN","REMOVE","SBYTE","SEALED","SHORT",
    "SIZEOF","STACKALLOC","STATIC","STRING","STRUCT","SWITCH","THIS",
    "THROW","TRUE","TRY","TYPEOF","UINT","ULONG","UNCHECKED","UNSAFE",
    "USHORT","USING","INCLUDE","VIRTUAL","VOID","VOLATILE","WHERE",
    "WHILE","LOOP","ARGLIST","PARTIAL","ARROW","FROM","FROM_FIRST","JOIN",
    "ON","EQUALS","SELECT","GROUP","BY","LET","ORDERBY","ASCENDING",
    "DESCENDING","INTO","INTERR_NULLABLE","EXTERN_ALIAS","REFVALUE",
    "REFTYPE","MAKEREF","ASYNC","AWAIT","INTERR_OPERATOR","WHEN",
    "INTERPOLATED_STRING","INTERPOLATED_STRING_END","GET","SET",
    "LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","XNOR",
    "NOR","NAND","INTERR","DOUBLE_COLON","OP_INC","OP_DEC",
    "OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ","OP_NE",
    "OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN","OP_MOD_ASSIGN",
    "OP_ADD_ASSIGN","OP_SUB_ASSIGN","OP_SHIFT_LEFT_ASSIGN",
    "OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN","OP_XOR_ASSIGN",
    "OP_OR_ASSIGN","OP_NAND_ASSIGN","OP_XNOR_ASSIGN","OP_POWER_ASSIGN",
    "OP_NOR_ASSIGN","OP_PTR","OP_COALESCING","OP_GENERICS_LT",
    "OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL","IDENTIFIER",
    "OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST","GENERIC_DIMENSION",
    "DEFAULT_COLON","OPEN_BRACKET_EXPR","EVAL_STATEMENT_PARSER",
    "EVAL_COMPILATION_UNIT_PARSER","EVAL_USING_DECLARATIONS_UNIT_PARSER",
    "DOC_SEE","GENERATE_COMPLETION","COMPLETE_COMPLETION","BITWISE_NOR",
    "BITWISE_NAND","POWER","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 408 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 411 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
#line 418 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }
  break;
case 7:
#line 428 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Attributes attrs = (Attributes) yyVals[0+yyTop];
		if (attrs != null) {
			foreach (var a in attrs.Attrs) {
				if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
					continue;

				if (a.ExplicitTarget == null)
					report.Error (-1671, a.Location, "Global attributes must have attribute target specified");
			}
		}

		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
#line 443 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }
  break;
case 13:
#line 463 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }
  break;
case 14:
#line 484 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
#line 496 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 18:
#line 504 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		UsingClause uc;
		if (yyVals[-2+yyTop] != null) {
			if (lang_version <= LanguageVersion.V_5)
				FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "using static");

			uc = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
			lbag.AddLocation (uc, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			uc = new UsingNamespace ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
			lbag.AddLocation (uc, GetLocation (yyVals[0+yyTop]));
		}

		current_namespace.AddUsing (uc);
	  }
  break;
case 19:
#line 520 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		if (yyVals[-4+yyTop] != null) {
			report.Error (8085, GetLocation (yyVals[-4+yyTop]), "A `using static' directive cannot be used to declare an alias");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 20:
#line 537 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }
  break;
case 23:
#line 555 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
	  }
  break;
case 24:
#line 583 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 25:
#line 588 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }
  break;
case 26:
#line 597 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

		var name = (MemberName) yyVals[0+yyTop];		
		var ns = new NamespaceContainer (name, current_namespace);
		lbag.AddLocation (ns, GetLocation (yyVals[-1+yyTop]));
		current_namespace.AddTypeContainer (ns);
	  }
  break;
case 29:
#line 611 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 30:
#line 619 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 31:
#line 624 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 32:
#line 630 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }
  break;
case 45:
#line 668 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }
  break;
case 46:
#line 687 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 47:
#line 690 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }
  break;
case 55:
#line 723 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }
  break;
case 56:
#line 728 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }
  break;
case 57:
#line 741 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	PushLocation (GetLocation (yyVals[0+yyTop]));
		lexer.parsing_attribute_section = true;
	  }
  break;
case 58:
#line 746 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 59:
#line 754 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }
  break;
case 60:
#line 761 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }
  break;
case 61:
#line 779 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];

		lbag.InsertLocation (yyVal, 0, PopLocation ());
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (yyVal, GetLocation(yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (yyVal, GetLocation(yyVals[0+yyTop]));
		}
	  }
  break;
case 62:
#line 790 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<Attribute> () {
			new Attribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }
  break;
case 63:
#line 801 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }
  break;
case 64:
#line 811 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	  }
  break;
case 65:
#line 815 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = "event"; }
  break;
case 66:
#line 816 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = "ret"; }
  break;
case 67:
#line 821 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 68:
#line 825 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		if (attrs != null) {
			attrs.Add ((Attribute) yyVals[0+yyTop]);
	  		lbag.AppendTo (attrs, GetLocation (yyVals[-1+yyTop]));
	  	}

		yyVal = attrs;
	  }
  break;
case 69:
#line 838 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 70:
#line 842 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }
  break;
case 72:
#line 859 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 73:
#line 861 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 74:
#line 868 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 75:
#line 870 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }
  break;
case 76:
#line 876 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }
  break;
case 77:
#line 882 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }
  break;
case 78:
#line 896 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }
  break;
case 79:
#line 908 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 81:
#line 913 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 82:
#line 921 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 83:
#line 925 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	--lexer.parsing_block;
	  	var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }
  break;
case 84:
#line 935 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }
  break;
case 86:
#line 954 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 87:
#line 956 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 88:
#line 960 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 91:
#line 972 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 92:
#line 977 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 106:
#line 998 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 107:
#line 1008 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_local_parameters = current_type.PrimaryConstructorParameters;
		if (current_local_parameters == null) {
			report.Error (9010, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
			current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 108:
#line 1019 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_local_parameters = null;
		var t = current_type as ClassOrStruct;
		if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (8041, b.StartLocation, "Primary constructor already has a body");
			} else {
				t.PrimaryConstructorBlock = b;
			}
		}
	  }
  break;
case 109:
#line 1038 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  }
  break;
case 110:
#line 1041 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 111:
#line 1049 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 112:
#line 1067 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 113:
#line 1072 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 114:
#line 1078 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }
  break;
case 115:
#line 1087 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 116:
#line 1096 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }
  break;
case 117:
#line 1109 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }
  break;
case 118:
#line 1122 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }
  break;
case 121:
#line 1136 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 122:
#line 1140 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 123:
#line 1147 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 124:
#line 1156 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 125:
#line 1160 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 126:
#line 1165 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 129:
#line 1180 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }
  break;
case 130:
#line 1195 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }
  break;
case 131:
#line 1208 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_type.AddField (current_field);
	  }
  break;
case 132:
#line 1219 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }
  break;
case 133:
#line 1234 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 135:
#line 1242 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 136:
#line 1248 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }
  break;
case 139:
#line 1264 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 140:
#line 1268 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 141:
#line 1275 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 142:
#line 1281 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 143:
#line 1285 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 146:
#line 1300 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 147:
#line 1304 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 148:
#line 1311 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 149:
#line 1320 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 150:
#line 1324 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 151:
#line 1330 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }
  break;
case 154:
#line 1340 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 155:
#line 1349 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }
  break;
case 156:
#line 1356 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 157:
#line 1387 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 158:
#line 1391 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-6+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = method;

		lexer.ConstraintsParsing = true;
	  }
  break;
case 159:
#line 1413 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null) {
			var method = (Method) yyVals[-1+yyTop];
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		}

		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 160:
#line 1427 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 161:
#line 1432 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 162:
#line 1437 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 163:
#line 1441 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }
  break;
case 164:
#line 1472 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 165:
#line 1493 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 169:
#line 1517 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 170:
#line 1522 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.V_6) {
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "expression bodied members");
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 171:
#line 1531 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_block = 0;
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		var b = end_block (GetLocation (yyVals[0+yyTop]));
		b.IsCompilerGenerated = true;
		yyVal = b;
	 }
  break;
case 172:
#line 1541 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 174:
#line 1547 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }
  break;
case 175:
#line 1552 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }
  break;
case 176:
#line 1559 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 177:
#line 1565 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }
  break;
case 178:
#line 1572 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 179:
#line 1582 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }
  break;
case 180:
#line 1588 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 181:
#line 1597 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 182:
#line 1601 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 183:
#line 1605 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 184:
#line 1613 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }
  break;
case 185:
#line 1622 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 186:
#line 1646 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 187:
#line 1654 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 188:
#line 1660 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }
  break;
case 189:
#line 1669 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }
  break;
case 190:
#line 1679 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 191:
#line 1683 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 192:
#line 1722 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 194:
#line 1728 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 195:
#line 1732 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 196:
#line 1756 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }
  break;
case 197:
#line 1763 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }
  break;
case 198:
#line 1770 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("self", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }
  break;
case 199:
#line 1783 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 200:
#line 1788 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }
  break;
case 201:
#line 1795 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Attributes) yyVals[-3+yyTop], Location.Null);
	  }
  break;
case 202:
#line 1804 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }
  break;
case 203:
#line 1809 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }
  break;
case 204:
#line 1818 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 205:
#line 1825 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }
  break;
case 206:
#line 1836 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }
  break;
case 207:
#line 1842 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }
  break;
case 208:
#line 1856 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.PropertyParsing = false;

		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
	  }
  break;
case 209:
#line 1863 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		lexer.parsing_modifiers = true;
	  }
  break;
case 210:
#line 1868 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_property = null;
	  }
  break;
case 211:
#line 1875 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 212:
#line 1882 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		var property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);

		property.Get = new Property.GetMethod (property, Modifiers.COMPILER_GENERATED, null, property.Location);
		property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];

		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, property.Get.Block.StartLocation,
				"`{0}': interface members cannot have a definition", property.GetSignatureForError ());
		}

		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());

		if (doc_support)
			property.DocComment = ConsumeStoredComment ();

		current_type.AddMember (property);

		current_local_parameters = null;
	  }
  break;
case 214:
#line 1910 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 215:
#line 1916 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_block;
		((Property)current_property).Initializer = (Expression) yyVals[-1+yyTop];
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		end_block (GetLocation (yyVals[0+yyTop]));
		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 218:
#line 1936 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 219:
#line 1940 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
	  }
  break;
case 220:
#line 1966 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
 		lexer.PropertyParsing = false;
		current_local_parameters = null;

		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		current_property = null;		
	  }
  break;
case 221:
#line 1982 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lbag.AppendToMember (current_property, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 222:
#line 1986 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_property.Get = new Indexer.GetIndexerMethod (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);
		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];
	  }
  break;
case 227:
#line 1998 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }
  break;
case 228:
#line 2012 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }
  break;
case 229:
#line 2034 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 230:
#line 2055 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }
  break;
case 231:
#line 2082 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 233:
#line 2104 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		/* TODO: lbag*/
	  	yyVal = null;
	  }
  break;
case 234:
#line 2109 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }
  break;
case 235:
#line 2120 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  }
  break;
case 236:
#line 2123 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }
  break;
case 237:
#line 2130 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 238:
#line 2144 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 239:
#line 2150 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }
  break;
case 240:
#line 2159 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 243:
#line 2171 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 244:
#line 2176 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 245:
#line 2184 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 246:
#line 2188 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 251:
#line 2196 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 252:
#line 2200 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 253:
#line 2204 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 254:
#line 2211 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  }
  break;
case 255:
#line 2214 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }
  break;
case 257:
#line 2243 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 258:
#line 2251 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
		if ((Operator.OpType) yyVals[-1+yyTop] == Operator.OpType.Is)
			valid_param_mod |= ParameterModifierType.Out;
	  }
  break;
case 259:
#line 2257 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else if (op == Operator.OpType.Is) {
			/* TODO: Special checks for is operator*/
		} else {
			if (p_count == 1) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 261:
#line 2303 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 262:
#line 2304 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 263:
#line 2305 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 264:
#line 2306 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 265:
#line 2307 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 266:
#line 2308 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 267:
#line 2310 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 268:
#line 2311 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 269:
#line 2313 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 270:
#line 2314 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Power; }
  break;
case 271:
#line 2315 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseXnor; }
  break;
case 272:
#line 2316 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseNor; }
  break;
case 273:
#line 2317 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseNand; }
  break;
case 274:
#line 2318 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 275:
#line 2319 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 276:
#line 2320 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 277:
#line 2321 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 278:
#line 2322 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 279:
#line 2323 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 280:
#line 2324 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 281:
#line 2325 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 282:
#line 2326 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 283:
#line 2327 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 284:
#line 2328 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 285:
#line 2329 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 286:
#line 2330 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 287:
#line 2332 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "is user operator");

		yyVal = Operator.OpType.Is;
	  }
  break;
case 288:
#line 2342 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 289:
#line 2346 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `implicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 290:
#line 2365 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 291:
#line 2369 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `explicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 292:
#line 2388 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 293:
#line 2394 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 294:
#line 2404 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 295:
#line 2421 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 296:
#line 2430 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
		var lt = (LocatedToken) yyVals[-4+yyTop];
		var mods = (Modifiers) yyVals[-5+yyTop];
		var c = new Constructor (current_type, lt.Value, mods, (Attributes) yyVals[-6+yyTop], current_local_parameters, lt.Location);

		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if (!current_local_parameters.IsEmpty) {
				report.Error (132, c.Location, "`{0}': The static constructor must be parameterless",
					c.GetSignatureForError ());
			}

			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		} else {
			if (current_type.Kind == MemberKind.Struct && current_local_parameters.IsEmpty) {
				report.Error (568, c.Location, "Structs cannot contain explicit parameterless constructors");
			}
		}

		current_type.AddConstructor (c);
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }
  break;
case 297:
#line 2468 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			var c = (Constructor) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 299:
#line 2486 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 302:
#line 2496 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 303:
#line 2500 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 304:
#line 2506 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 305:
#line 2510 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 306:
#line 2516 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorThisInitializer (null, GetLocation (yyVals[0+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 307:
#line 2522 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 308:
#line 2530 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 309:
#line 2539 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }
  break;
case 310:
#line 2564 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }
  break;
case 311:
#line 2578 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }
  break;
case 312:
#line 2591 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }
  break;
case 313:
#line 2599 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }
  break;
case 314:
#line 2606 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }
  break;
case 315:
#line 2619 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }
  break;
case 317:
#line 2629 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 318:
#line 2633 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 321:
#line 2646 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 322:
#line 2650 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 323:
#line 2657 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 324:
#line 2663 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 325:
#line 2667 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 326:
#line 2676 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }
  break;
case 327:
#line 2688 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 330:
#line 2697 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 331:
#line 2702 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 332:
#line 2707 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }
  break;
case 333:
#line 2715 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }
  break;
case 334:
#line 2727 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 335:
#line 2743 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }
  break;
case 336:
#line 2755 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 337:
#line 2771 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 339:
#line 2780 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }
  break;
case 340:
#line 2791 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1519, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");
 
		lexer.putback ('}');

	  	lexer.parsing_generic_declaration = false;
		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], MemberName.Null, (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }
  break;
case 341:
#line 2809 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }
  break;
case 342:
#line 2814 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }
  break;
case 343:
#line 2826 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 344:
#line 2834 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 346:
#line 2851 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 347:
#line 2855 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }
  break;
case 350:
#line 2865 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 352:
#line 2873 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 353:
#line 2881 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 354:
#line 2894 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }
  break;
case 355:
#line 2902 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }
  break;
case 356:
#line 2916 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 358:
#line 2939 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 359:
#line 2943 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 360:
#line 2958 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 361:
#line 2962 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }
  break;
case 363:
#line 2981 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 365:
#line 2992 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 366:
#line 3000 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 368:
#line 3012 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 369:
#line 3018 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 370:
#line 3027 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 371:
#line 3032 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 373:
#line 3044 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 374:
#line 3051 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 375:
#line 3059 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 376:
#line 3065 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 377:
#line 3077 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 378:
#line 3081 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 379:
#line 3090 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }
  break;
case 381:
#line 3101 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }
  break;
case 382:
#line 3110 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 383:
#line 3115 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 384:
#line 3123 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 385:
#line 3129 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 386:
#line 3137 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 388:
#line 3147 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 389:
#line 3158 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }
  break;
case 390:
#line 3164 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 391:
#line 3174 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (VarianceDecl) yyVals[-1+yyTop]);
  	  }
  break;
case 392:
#line 3179 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, null);
  	  }
  break;
case 394:
#line 3195 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 395:
#line 3202 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 401:
#line 3223 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 403:
#line 3232 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 404:
#line 3239 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }
  break;
case 405:
#line 3251 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 407:
#line 3259 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 408:
#line 3267 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 409:
#line 3272 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 410:
#line 3276 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 411:
#line 3283 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 412:
#line 3289 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 413:
#line 3298 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 414:
#line 3311 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 415:
#line 3312 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 416:
#line 3313 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 417:
#line 3314 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 418:
#line 3315 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Complex, GetLocation (yyVals[0+yyTop])); }
  break;
case 419:
#line 3316 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.VLong, GetLocation (yyVals[0+yyTop])); }
  break;
case 420:
#line 3317 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Quad, GetLocation (yyVals[0+yyTop])); }
  break;
case 421:
#line 3318 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Date, GetLocation (yyVals[0+yyTop])); }
  break;
case 422:
#line 3319 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Time, GetLocation (yyVals[0+yyTop])); }
  break;
case 423:
#line 3320 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.IntPtr, GetLocation (yyVals[0+yyTop])); }
  break;
case 424:
#line 3321 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UIntPtr, GetLocation (yyVals[0+yyTop])); }
  break;
case 425:
#line 3323 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 426:
#line 3324 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 428:
#line 3329 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 429:
#line 3330 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 430:
#line 3331 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 431:
#line 3332 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 432:
#line 3333 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 433:
#line 3334 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 434:
#line 3335 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 435:
#line 3336 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 436:
#line 3337 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 459:
#line 3371 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }
  break;
case 463:
#line 3381 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 464:
#line 3385 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 465:
#line 3386 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 466:
#line 3391 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[-2+yyTop], (List<Expression>) yyVals[-1+yyTop], (StringLiteral) yyVals[0+yyTop]);
	  }
  break;
case 467:
#line 3395 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[0+yyTop], null, null);
	  }
  break;
case 468:
#line 3402 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var list = new List<Expression> ();
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 469:
#line 3408 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((StringLiteral) yyVals[-1+yyTop]);
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 470:
#line 3418 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 471:
#line 3422 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-2+yyTop]) {
			Alignment = (Expression)yyVals[0+yyTop]
		};
	  }
  break;
case 472:
#line 3428 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 473:
#line 3432 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-3+yyTop]) {
			Format = (string)yyVals[0+yyTop]
		};
	  }
  break;
case 474:
#line 3440 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 475:
#line 3444 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-5+yyTop]) {
			Alignment = (Expression)yyVals[-3+yyTop],
			Format = (string) yyVals[0+yyTop]
		};
	  }
  break;
case 480:
#line 3477 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 481:
#line 3482 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 482:
#line 3489 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 483:
#line 3495 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 484:
#line 3501 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 485:
#line 3510 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 486:
#line 3516 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 487:
#line 3522 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SimpleName ("await", ((LocatedToken) yyVals[-3+yyTop]).Location), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 488:
#line 3528 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 489:
#line 3536 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 490:
#line 3543 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 491:
#line 3546 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }
  break;
case 492:
#line 3551 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 493:
#line 3554 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }
  break;
case 494:
#line 3562 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 495:
#line 3567 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 496:
#line 3574 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 497:
#line 3583 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 499:
#line 3589 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (GetLocation (yyVals[-2+yyTop]));
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	}
 		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 500:
#line 3598 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 501:
#line 3605 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 502:
#line 3607 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 503:
#line 3614 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 504:
#line 3620 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 505:
#line 3625 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 506:
#line 3633 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 507:
#line 3639 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-2+yyTop]);
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 508:
#line 3645 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 509:
#line 3648 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }
  break;
case 510:
#line 3656 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] == null)
			yyVal = new CollectionElementInitializer (GetLocation (yyVals[-2+yyTop]));
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));

		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 511:
#line 3665 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "dictionary initializer");

		yyVal = new DictionaryElementInitializer ((Arguments)yyVals[-3+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 512:
#line 3673 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 515:
#line 3686 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 517:
#line 3692 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 518:
#line 3698 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 519:
#line 3707 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }
  break;
case 520:
#line 3721 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 521:
#line 3728 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }
  break;
case 522:
#line 3736 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 526:
#line 3749 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 527:
#line 3754 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
	  }
  break;
case 528:
#line 3758 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 529:
#line 3763 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
	  }
  break;
case 530:
#line 3767 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 531:
#line 3772 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 532:
#line 3780 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 533:
#line 3797 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }
  break;
case 534:
#line 3807 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "declaration expression");

		var lt = (LocatedToken) yyVals[-2+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-3+yyTop], lv) {
			Initializer = (Expression) yyVals[0+yyTop]
		};
	  }
  break;
case 536:
#line 3826 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 537:
#line 3831 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.V_6)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "null propagating operator");

		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};

		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 538:
#line 3842 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 539:
#line 3847 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 540:
#line 3855 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 541:
#line 3861 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 542:
#line 3870 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 543:
#line 3876 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }
  break;
case 544:
#line 3888 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 546:
#line 3896 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 547:
#line 3903 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 548:
#line 3908 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 549:
#line 3916 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 550:
#line 3923 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 551:
#line 3930 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 552:
#line 3943 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 553:
#line 3955 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 554:
#line 3963 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 555:
#line 3970 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 556:
#line 3977 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 557:
#line 3982 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 558:
#line 3990 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 559:
#line 3994 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 560:
#line 4002 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 561:
#line 4012 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 564:
#line 4023 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 566:
#line 4029 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 567:
#line 4035 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 568:
#line 4041 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new EmptyCompletion ();
	  }
  break;
case 569:
#line 4045 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 570:
#line 4052 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
#line 4058 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }
  break;
case 572:
#line 4064 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }
  break;
case 573:
#line 4069 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }
  break;
case 577:
#line 4084 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 578:
#line 4092 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 579:
#line 4097 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 580:
#line 4105 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 581:
#line 4109 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 582:
#line 4116 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 583:
#line 4120 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 584:
#line 4127 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }
  break;
case 585:
#line 4134 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }
  break;
case 586:
#line 4148 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 587:
#line 4154 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 588:
#line 4163 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 590:
#line 4172 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }
  break;
case 591:
#line 4180 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }
  break;
case 592:
#line 4190 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }
  break;
case 593:
#line 4201 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 594:
#line 4206 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 595:
#line 4216 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 596:
#line 4221 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 597:
#line 4230 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 598:
#line 4235 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 599:
#line 4244 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 600:
#line 4252 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 601:
#line 4256 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 602:
#line 4260 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 603:
#line 4264 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 604:
#line 4271 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 606:
#line 4279 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 607:
#line 4283 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 608:
#line 4291 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 610:
#line 4303 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 611:
#line 4307 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 612:
#line 4311 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 613:
#line 4316 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method != null) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else if (interactive_async != null) {
				current_block.Explicit.RegisterAsyncAwait ();
				interactive_async = true;
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 614:
#line 4338 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 615:
#line 4344 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 616:
#line 4350 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 617:
#line 4357 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Await (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 619:
#line 4371 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 620:
#line 4375 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 621:
#line 4379 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 622:
#line 4383 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 623:
#line 4387 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 624:
#line 4391 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 625:
#line 4395 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		Error_SyntaxError (yyToken);

	  	yyVal = new Unary (Unary.Operator.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 626:
#line 4401 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 627:
#line 4407 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 628:
#line 4413 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 629:
#line 4419 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Indirection (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 630:
#line 4425 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 632:
#line 4435 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Power, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 633:
#line 4440 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Power, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 635:
#line 4453 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 636:
#line 4458 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 637:
#line 4463 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 638:
#line 4468 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 639:
#line 4475 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 640:
#line 4482 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 642:
#line 4493 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 643:
#line 4498 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 644:
#line 4503 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 645:
#line 4510 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 646:
#line 4517 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 647:
#line 4521 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var is_expr = new Is ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] != null) {
			if (lang_version != LanguageVersion.Experimental)
				FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "type pattern matching");

			var lt = (LocatedToken) yyVals[0+yyTop];
			is_expr.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (is_expr.Variable);
		}

		yyVal = is_expr;
	  }
  break;
case 648:
#line 4535 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var is_expr = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "pattern matching");

		yyVal = is_expr;
	  }
  break;
case 649:
#line 4543 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new As ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 650:
#line 4549 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Is ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 651:
#line 4555 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Is (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 652:
#line 4560 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new As (new SimpleName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 655:
#line 4573 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 656:
#line 4577 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 659:
#line 4583 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 660:
#line 4588 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new WildcardPattern (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 663:
#line 4597 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new RecursivePattern ((ATypeNameExpression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 664:
#line 4604 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new PropertyPattern ((ATypeNameExpression) yyVals[-3+yyTop], (List<PropertyPatternMember>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 665:
#line 4611 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var list = new List<PropertyPatternMember> ();
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 666:
#line 4617 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var list = (List<PropertyPatternMember>) yyVals[-2+yyTop];
		list.Add ((PropertyPatternMember) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 667:
#line 4626 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new PropertyPatternMember (lt.Value, (Expression) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 669:
#line 4635 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] != null) {
			var lt = (LocatedToken) yyVals[0+yyTop];
			var variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (variable);
		}
	  }
  break;
case 670:
#line 4646 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Arguments (0);
	  }
  break;
case 672:
#line 4654 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 673:
#line 4660 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);

		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 674:
#line 4672 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 675:
#line 4676 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 677:
#line 4685 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 678:
#line 4690 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 679:
#line 4695 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 680:
#line 4702 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 682:
#line 4713 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 683:
#line 4718 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 684:
#line 4723 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 685:
#line 4728 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 686:
#line 4733 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 687:
#line 4740 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 688:
#line 4747 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 689:
#line 4754 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 691:
#line 4765 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 692:
#line 4770 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 693:
#line 4775 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 694:
#line 4782 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 696:
#line 4793 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 697:
#line 4798 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 699:
#line 4809 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 700:
#line 4814 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 702:
#line 4825 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseNor, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 703:
#line 4830 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseNor, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 705:
#line 4841 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseXnor, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 706:
#line 4846 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseXnor, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 708:
#line 4856 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseNand, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 709:
#line 4861 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseNand, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 711:
#line 4871 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 712:
#line 4876 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 714:
#line 4887 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 715:
#line 4892 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 717:
#line 4903 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 718:
#line 4908 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 720:
#line 4919 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 722:
#line 4931 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 723:
#line 4936 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 724:
#line 4942 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 725:
#line 4949 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (Token.CLOSE_BRACE);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		lexer.putback ('}');
	  }
  break;
case 726:
#line 4960 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 727:
#line 4965 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 728:
#line 4970 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 729:
#line 4975 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 730:
#line 4980 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 731:
#line 4985 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 732:
#line 4990 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 733:
#line 4995 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 734:
#line 5000 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 735:
#line 5005 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 736:
#line 5010 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 737:
#line 5015 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.BitwiseNand, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 738:
#line 5020 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.BitwiseNor, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 739:
#line 5025 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.BitwiseXnor, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 740:
#line 5030 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new CompoundAssign (Binary.Operator.Power, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 741:
#line 5038 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }
  break;
case 742:
#line 5045 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }
  break;
case 743:
#line 5059 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }
  break;
case 744:
#line 5065 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }
  break;
case 745:
#line 5071 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }
  break;
case 746:
#line 5076 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[0+yyTop]);
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }
  break;
case 747:
#line 5083 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 748:
#line 5084 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }
  break;
case 749:
#line 5091 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 750:
#line 5095 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }
  break;
case 752:
#line 5103 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 754:
#line 5117 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 755:
#line 5125 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }
  break;
case 756:
#line 5131 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 757:
#line 5136 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) Error_AwaitAsIdentifier (yyVals[-1+yyTop]);
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }
  break;
case 758:
#line 5142 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 759:
#line 5147 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }
  break;
case 760:
#line 5153 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 761:
#line 5158 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 762:
#line 5162 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 763:
#line 5167 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 764:
#line 5172 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 765:
#line 5176 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }
  break;
case 766:
#line 5181 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 772:
#line 5197 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 773:
#line 5204 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 774:
#line 5209 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 775:
#line 5214 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }
  break;
case 777:
#line 5226 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 778:
#line 5233 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 780:
#line 5241 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];

		/* Cannot use opt_formal_parameter_list because it can be shared instance for empty parameters*/
	  	lbag.AppendToMember (current_container, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));

		if (lang_version != LanguageVersion.Experimental)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "primary constructor");
	  }
  break;
case 781:
#line 5254 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 782:
#line 5258 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 783:
#line 5262 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 784:
#line 5266 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 785:
#line 5270 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 786:
#line 5275 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
		current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }
  break;
case 787:
#line 5292 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  }
  break;
case 788:
#line 5295 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;

		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }
  break;
case 789:
#line 5308 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 790:
#line 5327 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 791:
#line 5333 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }
  break;
case 792:
#line 5345 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 793:
#line 5347 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 794:
#line 5352 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }
  break;
case 795:
#line 5358 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 797:
#line 5366 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }
  break;
case 798:
#line 5385 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }
  break;
case 799:
#line 5393 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 800:
#line 5398 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 801:
#line 5403 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 802:
#line 5408 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 803:
#line 5413 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 804:
#line 5418 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 805:
#line 5423 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 806:
#line 5428 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 807:
#line 5433 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 808:
#line 5438 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 809:
#line 5443 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 810:
#line 5448 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 811:
#line 5453 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 812:
#line 5460 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.SYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	
	  }
  break;
case 813:
#line 5466 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 816:
#line 5479 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 817:
#line 5483 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }
  break;
case 819:
#line 5493 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 820:
#line 5500 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 821:
#line 5506 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 822:
#line 5525 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 823:
#line 5531 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 824:
#line 5541 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 825:
#line 5547 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 826:
#line 5573 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 827:
#line 5580 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 828:
#line 5585 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 829:
#line 5589 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 830:
#line 5596 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 831:
#line 5600 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 832:
#line 5610 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Covariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 833:
#line 5614 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new VarianceDecl (Variance.Contravariant, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 834:
#line 5634 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 835:
#line 5639 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 836:
#line 5646 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 837:
#line 5651 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }
  break;
case 838:
#line 5660 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 839:
#line 5665 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 844:
#line 5683 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 845:
#line 5687 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 847:
#line 5692 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 850:
#line 5711 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 851:
#line 5715 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 892:
#line 5768 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 893:
#line 5773 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 894:
#line 5778 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 895:
#line 5786 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }
  break;
case 896:
#line 5794 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }
  break;
case 899:
#line 5807 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 900:
#line 5823 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			if (expr.Name == "var" && expr is SimpleName)
				yyVal = new VarExpr (expr.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		}
	  }
  break;
case 901:
#line 5849 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var expr = (ATypeNameExpression) yyVals[-1+yyTop];
		yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 905:
#line 5860 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 906:
#line 5868 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 908:
#line 5876 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = Error_AwaitAsIdentifier (yyVals[0+yyTop]);
	  }
  break;
case 909:
#line 5883 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 910:
#line 5890 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
		if (yyVals[-2+yyTop] != null)
			lbag.AddLocation (yyVal, PopLocation (), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 911:
#line 5899 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 912:
#line 5906 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 914:
#line 5916 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		PushLocation (GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }
  break;
case 915:
#line 5922 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }
  break;
case 919:
#line 5940 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }
  break;
case 922:
#line 5955 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 923:
#line 5964 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 924:
#line 5976 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 925:
#line 5980 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 930:
#line 5997 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 932:
#line 6010 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 933:
#line 6015 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }
  break;
case 934:
#line 6023 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 935:
#line 6027 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 936:
#line 6029 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }
  break;
case 937:
#line 6037 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 938:
#line 6038 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 939:
#line 6047 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			var expr = yyVals[0+yyTop] as Expression;
			yyVal = new StatementErrorExpression (expr);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }
  break;
case 940:
#line 6060 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
		yyVal = new StatementExpression (new OptionalAssign (expr, lexer.Location));
	  }
  break;
case 941:
#line 6065 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 944:
#line 6079 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 945:
#line 6088 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 946:
#line 6098 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 947:
#line 6108 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 948:
#line 6112 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 949:
#line 6118 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 950:
#line 6128 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 954:
#line 6138 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 956:
#line 6149 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
		current_block.AddStatement (label);
	  }
  break;
case 957:
#line 6155 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 958:
#line 6162 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 959:
#line 6167 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 960:
#line 6184 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 966:
#line 6199 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 967:
#line 6207 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-2+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop],(Statement) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 968:
#line 6217 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 969:
#line 6224 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-4+yyTop], null,null,GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]));
	  }
  break;
case 970:
#line 6235 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Loop ((Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]),(Expression) yyVals[-2+yyTop]);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 971:
#line 6243 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	
	  }
  break;
case 972:
#line 6245 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Loop ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 973:
#line 6253 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 974:
#line 6258 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }
  break;
case 975:
#line 6263 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 976:
#line 6273 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }
  break;
case 977:
#line 6281 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 978:
#line 6289 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		((For) yyVals[-2+yyTop]).Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (yyVals[-2+yyTop]);
	  }
  break;
case 979:
#line 6297 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-5+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 980:
#line 6310 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }
  break;
case 981:
#line 6318 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }
  break;
case 982:
#line 6322 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 983:
#line 6328 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 984:
#line 6337 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 985:
#line 6342 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 987:
#line 6352 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { lexer.putback ('}'); }
  break;
case 988:
#line 6356 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 990:
#line 6362 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 991:
#line 6369 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = current_variable;
		if (yyVals[-1+yyTop] != null)
			lbag.AddLocation (current_variable, PopLocation ());

		current_variable = null;
	  }
  break;
case 993:
#line 6380 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = null; }
  break;
case 995:
#line 6385 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 999:
#line 6396 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }
  break;
case 1000:
#line 6412 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1001:
#line 6425 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1002:
#line 6442 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }
  break;
case 1003:
#line 6452 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }
  break;
case 1011:
#line 6475 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new AssertStatement ((Expression)yyVals[-3+yyTop], (Expression)yyVals[-1+yyTop],GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 1012:
#line 6482 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1013:
#line 6490 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1014:
#line 6495 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1015:
#line 6503 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1016:
#line 6509 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1017:
#line 6514 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1018:
#line 6522 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1019:
#line 6527 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1020:
#line 6532 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1021:
#line 6540 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1022:
#line 6545 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1023:
#line 6550 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1024:
#line 6558 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1025:
#line 6574 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1026:
#line 6592 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1029:
#line 6614 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 1030:
#line 6618 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1031:
#line 6623 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1032:
#line 6628 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 1033:
#line 6636 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 1034:
#line 6643 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }
  break;
case 1037:
#line 6664 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	var c = new Catch ((ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	c.Filter = (CatchFilterExpression) yyVals[-1+yyTop];
	  	yyVal = c;
	  }
  break;
case 1038:
#line 6670 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch ((ExplicitBlock) current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
		lexer.parsing_catch_when = true;
	  }
  break;
case 1039:
#line 6686 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	((Catch) yyVals[-1+yyTop]).Filter = (CatchFilterExpression) yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1040:
#line 6691 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1041:
#line 6705 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1042:
#line 6709 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		end_block (Location.Null);
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 1043:
#line 6717 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 1044:
#line 6721 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 1045:
#line 6725 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.V_5)
			FeatureIsNotAvailable (GetLocation (yyVals[-4+yyTop]), "exception filter");

		yyVal = new CatchFilterExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1046:
#line 6736 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1047:
#line 6743 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1048:
#line 6750 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1049:
#line 6753 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1050:
#line 6760 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-5+yyTop] == null || yyVals[-1+yyTop] == null)
			yyVal = new GroupAssign (GetLocation (yyVals[-6+yyTop]));
		else
	  		yyVal = new GroupAssign ((List<Expression>)yyVals[-5+yyTop],(List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-6+yyTop]));

		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1051:
#line 6771 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1052:
#line 6779 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1053:
#line 6790 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Safe ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1054:
#line 6797 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {

		yyVal = new Safe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1055:
#line 6806 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_anonymous (false,ParametersCompiled.Undefined, false, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1056:
#line 6810 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {

		yyVal = new AsyncSt (end_anonymous ((ParametersBlock) yyVals[0+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1057:
#line 6818 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	
	  }
  break;
case 1058:
#line 6820 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new AsmInline ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

	  }
  break;
case 1059:
#line 6827 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		start_anonymous (false,ParametersCompiled.Undefined, false, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 1060:
#line 6831 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {

		yyVal = new Sync ((Expression)yyVals[-3+yyTop],end_anonymous ((ParametersBlock) yyVals[0+yyTop]), GetLocation (yyVals[-5+yyTop]));
	  }
  break;
case 1061:
#line 6840 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Restrict ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1062:
#line 6848 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Restrict ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1063:
#line 6859 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 1064:
#line 6869 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
	  }
  break;
case 1065:
#line 6874 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1066:
#line 6887 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 1067:
#line 6897 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = current_variable;	  
		current_variable = null;
	  }
  break;
case 1068:
#line 6902 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1069:
#line 6911 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 1070:
#line 6919 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1072:
#line 6930 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }
  break;
case 1073:
#line 6938 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 1074:
#line 6942 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }
  break;
case 1075:
#line 6953 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 1076:
#line 6965 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 1077:
#line 6976 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 1078:
#line 6983 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 1079:
#line 6992 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }
  break;
case 1080:
#line 7002 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }
  break;
case 1081:
#line 7017 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }
  break;
case 1082:
#line 7027 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var clause = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (clause, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (clause);
	  }
  break;
case 1083:
#line 7042 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1084:
#line 7046 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1085:
#line 7058 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1086:
#line 7062 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 1087:
#line 7081 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }
  break;
case 1088:
#line 7096 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }
  break;
case 1090:
#line 7109 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1091:
#line 7114 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 1092:
#line 7122 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1093:
#line 7126 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 1094:
#line 7133 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }
  break;
case 1095:
#line 7141 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1096:
#line 7148 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var obj = (object[]) yyVals[0+yyTop];

		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-2+yyTop], linq_clause_blocks.Pop (), (Expression)obj[0], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, (Location) obj[1]);
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 1097:
#line 7161 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	yyVal = new object[] { yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]) };
	  }
  break;
case 1098:
#line 7165 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new object[2] { null, Location.Null };
	  }
  break;
case 1100:
#line 7174 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1106:
#line 7190 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1107:
#line 7194 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 1108:
#line 7209 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1109:
#line 7213 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 1110:
#line 7223 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 1111:
#line 7231 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 1112:
#line 7239 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1113:
#line 7247 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }
  break;
case 1114:
#line 7285 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 1115:
#line 7293 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 1116:
#line 7301 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1117:
#line 7309 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }
  break;
case 1119:
#line 7354 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 1120:
#line 7361 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1121:
#line 7365 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 1123:
#line 7376 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1124:
#line 7383 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }
  break;
case 1126:
#line 7392 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }
  break;
case 1127:
#line 7399 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }
  break;
case 1128:
#line 7407 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1129:
#line 7411 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1130:
#line 7416 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1131:
#line 7424 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1132:
#line 7428 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1133:
#line 7433 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 1135:
#line 7443 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }
  break;
case 1136:
#line 7459 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }
  break;
case 1139:
#line 7486 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  { 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		var method = new InteractiveMethod (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			pars);
			
		current_type.AddMember (method);			
		oob_stack.Push (method);

		interactive_async = false;

		++lexer.parsing_block;
		start_block (lexer.Location);
	  }
  break;
case 1140:
#line 7514 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		--lexer.parsing_block;
		var method = (InteractiveMethod) oob_stack.Pop ();
		method.Block = (ToplevelBlock) end_block(lexer.Location);

		if (interactive_async == true) {
			method.ChangeToAsync ();
		}

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }
  break;
case 1148:
#line 7549 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 1149:
#line 7556 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 1150:
#line 7560 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }
  break;
case 1151:
#line 7566 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }
  break;
case 1152:
#line 7572 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }
  break;
case 1153:
#line 7579 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1154:
#line 7583 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1155:
#line 7587 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1156:
#line 7592 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }
  break;
case 1157:
#line 7600 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }
  break;
case 1158:
#line 7608 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var p = (List<DocumentationParameter>)yyVals[0+yyTop];
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }
  break;
case 1160:
#line 7619 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 1162:
#line 7627 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1163:
#line 7631 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1164:
#line 7638 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 1166:
#line 7646 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }
  break;
case 1167:
#line 7652 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }
  break;
case 1168:
#line 7661 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   16,   16,   20,   21,   18,   18,   23,   23,   23,   19,
   19,   19,   24,   24,   25,   25,    7,    7,    6,    6,
   22,   22,    8,    8,   26,   26,   26,   27,   27,   27,
   27,   27,    9,    9,   10,   10,   35,   33,   38,   34,
   34,   34,   34,   36,   36,   36,   37,   37,   42,   39,
   40,   41,   41,   43,   43,   43,   43,   43,   44,   44,
   44,   48,   45,   47,   51,   50,   50,   50,   53,   53,
   54,   54,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   69,   64,   74,   76,
   79,   80,   81,   29,   29,   84,   56,   56,   85,   85,
   86,   86,   87,   89,   83,   83,   88,   88,   94,   57,
   98,   57,   57,   93,  101,   93,   95,   95,  102,  102,
  103,  104,  103,   99,   99,  105,  105,  106,  107,   97,
   97,  100,  100,  100,  110,   58,  113,  114,  108,  115,
  116,  117,  108,  108,  108,  109,  109,  119,  119,  122,
  120,  112,  112,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  124,  124,  127,  127,  127,  127,  130,
  127,  128,  128,  131,  131,  132,  132,  132,  125,  125,
  125,  133,  133,  133,  126,  135,  137,  138,  140,   59,
  141,   59,  139,  143,  139,  142,  142,  145,  147,   61,
  146,  146,  136,  136,  136,  136,  136,  151,  148,  152,
  149,  150,  150,  150,  153,  154,  155,  157,   30,   30,
  156,  156,  158,  158,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  161,   62,  162,  162,  165,  160,  160,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  167,  166,  168,
  166,  166,  166,   63,  171,  173,  169,  170,  170,  172,
  172,  177,  175,  178,  175,  175,  175,  179,   65,  181,
   60,  184,  185,   60,   60,  180,  187,  180,  182,  182,
  188,  188,  189,  190,  189,  191,  186,  183,  183,  183,
  183,  183,  195,  192,  196,  193,  194,  194,   66,   67,
  198,  200,  201,   31,  197,  197,  197,  199,  199,  199,
  202,  202,  203,  204,  203,  203,  203,  205,  206,  207,
   32,  208,  208,   17,   17,   17,  209,  209,  209,  213,
  213,  211,  211,  211,  214,  214,  216,   73,  134,  111,
  111,  144,  144,  217,  217,  217,  215,  215,  218,  218,
  219,  219,  221,  221,   92,   82,   82,   96,   96,  129,
  129,  163,  163,  223,  223,  223,  222,  226,  226,  226,
  228,  228,  229,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  227,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  232,  232,  232,
  233,  233,  233,  254,  254,  252,  252,  255,  255,  256,
  256,  257,  256,  258,  256,  259,  259,  260,  260,  235,
  235,  253,  253,  253,  253,  253,  253,  253,  253,  253,
  253,  253,  253,  237,  237,  237,  262,  262,  263,  263,
  264,  264,  266,  266,  266,  267,  267,  267,  267,  267,
  267,  267,  268,  268,  176,  176,  261,  261,  261,  261,
  261,  273,  273,  272,  272,  274,  274,  274,  274,  274,
  274,  276,  276,  276,  275,  238,  238,  238,  238,  271,
  271,  278,  278,  279,  279,  239,  240,  240,  241,  242,
  243,  243,  234,  234,  234,  234,  234,  284,  280,  244,
  244,  285,  285,  286,  286,  287,  287,  287,  287,  288,
  288,  288,  288,  281,  281,  224,  224,  283,  283,  289,
  289,  282,  282,   91,   91,  290,  290,  245,  291,  291,
  212,  210,  246,  246,  247,  247,  248,  248,  249,  293,
  250,  294,  250,  292,  292,  296,  295,  236,  297,  297,
  297,  297,  297,  297,  297,  297,  297,  298,  298,  298,
  298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
  299,  299,  299,  300,  300,  300,  300,  300,  300,  300,
  301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
  301,  301,  302,  304,  304,  304,  304,  304,  304,  304,
  304,  304,  305,  306,  308,  308,  309,  310,  310,  307,
  307,  311,  311,  312,  312,  313,  313,  313,  313,  313,
  314,  314,  314,  314,  314,  314,  314,  314,  314,  315,
  315,  315,  315,  315,  316,  316,  316,  317,  317,  317,
  318,  318,  318,  319,  319,  319,  320,  320,  320,  321,
  321,  321,  322,  322,  322,  323,  323,  323,  324,  324,
  325,  325,  325,  325,  325,  326,  326,  326,  326,  326,
  326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
  327,  327,  328,  328,  328,  328,  329,  329,  331,  330,
  330,  330,   52,   52,  333,  332,  334,  332,  335,  332,
  336,  337,  332,  338,  339,  332,   46,   46,  269,  269,
  269,  269,  251,  251,  251,   90,  341,   75,   75,  342,
  343,  343,  343,  343,  345,  343,  346,  347,  348,  349,
   28,   72,   72,   71,   71,  118,  118,  350,  350,  350,
  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
  350,  350,  350,   77,   77,  344,  344,   78,   78,  351,
  351,  352,  352,  353,  353,  354,  354,  354,  354,  220,
  220,  355,  355,  356,  121,   70,   70,  357,  174,   68,
   68,  358,  358,  359,  359,  359,  359,  363,  363,  364,
  364,  364,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  365,  365,  365,  365,  365,  365,  365,  365,  365,
  365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
  385,  385,  385,  385,  366,  386,  362,  277,  277,  387,
  387,  387,  387,  225,  225,  388,   49,   49,  390,  360,
  393,  360,  389,  389,  389,  391,  391,  397,  397,  396,
  396,  398,  398,  392,  392,  394,  394,  399,  399,  400,
  395,  395,  395,  367,  367,  367,  384,  384,  401,  402,
  402,  368,  368,  403,  403,  403,  406,  404,  404,  405,
  405,  407,  407,  407,  408,  409,  409,  410,  410,  410,
  369,  369,  369,  369,  369,  411,  411,  411,  411,  413,
  416,  413,  412,  412,  412,  418,  414,  421,  417,  417,
  424,  420,  420,  423,  423,  425,  425,  419,  419,  428,
  427,  427,  422,  422,  426,  426,  430,  429,  429,  415,
  415,  431,  415,  370,  370,  370,  370,  370,  370,  370,
  438,  432,  433,  433,  434,  434,  434,  435,  435,  435,
  436,  436,  436,  437,  437,  437,  439,  439,  371,  371,
  371,  371,  440,  440,  303,  303,  441,  444,  441,  441,
  443,  443,  442,  445,  442,  372,  373,  446,  380,  383,
  374,  374,  376,  376,  447,  381,  448,  378,  449,  377,
  375,  375,  451,  452,  382,  454,  455,  379,  379,  379,
  453,  453,  450,  450,  340,  340,  340,  340,  456,  456,
  458,  458,  460,  459,  461,  459,  457,  457,  457,  457,
  457,  465,  463,  466,  468,  463,  467,  467,  462,  462,
  469,  469,  469,  469,  469,  474,  470,  475,  471,  476,
  477,  478,  472,  480,  481,  482,  472,  479,  479,  484,
  473,  483,  487,  483,  486,  489,  486,  485,  485,  485,
  488,  488,  488,  464,  490,  464,    3,    3,  491,    3,
    3,  492,  492,  270,  270,  265,  265,    5,  493,  493,
  493,  493,  493,  497,  493,  493,  493,  493,  494,  494,
  495,  498,  495,  496,  496,  499,  499,  500,
  };
   static  short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    4,    6,    2,
    0,    1,    0,    0,   11,    3,    0,    1,    1,    1,
    3,    1,    0,    1,    0,    1,    0,    1,    0,    1,
    0,    1,    1,    2,    1,    1,    2,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    0,    3,    0,    6,
    3,    2,    1,    1,    1,    1,    1,    3,    0,    3,
    1,    0,    3,    0,    1,    1,    3,    3,    1,    1,
    1,    0,    4,    4,    1,    0,    1,    1,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    4,    0,    0,
    0,    0,    0,   17,    5,    0,    9,    5,    0,    1,
    1,    2,    3,    0,    3,    1,    1,    1,    0,    8,
    0,    9,    6,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    0,    1,    1,    2,    3,    0,    4,
    2,    1,    1,    1,    0,    3,    0,    0,   10,    0,
    0,    0,   12,    8,    5,    1,    1,    1,    1,    0,
    4,    0,    1,    1,    3,    3,    3,    5,    3,    5,
    1,    1,    1,    1,    3,    4,    6,    2,    4,    0,
    7,    0,    1,    1,    2,    1,    1,    1,    4,    6,
    4,    1,    2,    2,    1,    0,    0,    0,    0,   12,
    0,    6,    0,    0,    4,    1,    1,    0,    0,   10,
    3,    1,    1,    2,    1,    2,    1,    0,    5,    0,
    5,    1,    1,    1,    0,    0,    0,    0,   15,    5,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    5,    1,    1,    0,    7,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    7,    0,
    7,    2,    2,    2,    0,    0,    9,    1,    1,    0,
    1,    0,    6,    0,    6,    2,    1,    0,    8,    0,
    9,    0,    0,   10,    5,    0,    0,    3,    0,    1,
    1,    2,    2,    0,    5,    0,    2,    2,    2,    1,
    1,    1,    0,    5,    0,    5,    1,    1,    2,    4,
    0,    0,    0,   12,    0,    2,    2,    0,    1,    2,
    1,    3,    2,    0,    5,    3,    1,    0,    0,    0,
   13,    0,    1,    1,    3,    3,    1,    4,    4,    2,
    2,    0,    3,    2,    1,    3,    0,    3,    1,    1,
    3,    1,    2,    3,    4,    4,    0,    3,    1,    3,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    1,    1,    2,    2,    2,
    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    1,    1,    3,    1,
    3,    0,    4,    0,    6,    1,    1,    1,    1,    3,
    3,    4,    4,    5,    4,    4,    4,    3,    3,    3,
    4,    3,    4,    4,    4,    3,    0,    1,    3,    4,
    0,    1,    1,    3,    2,    3,    3,    1,    2,    3,
    5,    2,    1,    1,    0,    1,    1,    3,    3,    3,
    2,    1,    1,    1,    1,    2,    2,    2,    2,    4,
    3,    3,    2,    4,    1,    4,    5,    4,    3,    1,
    3,    1,    3,    1,    1,    1,    4,    3,    2,    2,
    6,    3,    7,    4,    3,    7,    3,    0,    2,    4,
    3,    1,    2,    0,    1,    1,    3,    1,    2,    3,
    1,    1,    1,    0,    1,    1,    2,    2,    3,    1,
    2,    0,    1,    2,    4,    1,    3,    4,    1,    1,
    1,    2,    4,    4,    4,    2,    4,    2,    4,    0,
    4,    0,    5,    0,    1,    0,    4,    4,    1,    2,
    2,    4,    2,    2,    2,    4,    2,    1,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    1,    3,    3,    1,    3,    3,    3,    3,    3,    3,
    1,    3,    3,    3,    3,    3,    4,    3,    3,    3,
    3,    3,    1,    1,    2,    2,    1,    1,    4,    1,
    1,    1,    4,    4,    1,    3,    3,    1,    2,    0,
    1,    1,    3,    1,    3,    1,    3,    3,    3,    3,
    1,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    3,    3,    3,    3,    1,    3,    3,    1,    3,    3,
    1,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    1,    5,    4,    5,    5,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    3,    3,    2,    1,    1,    0,    1,    0,    2,
    1,    1,    1,    1,    0,    4,    0,    4,    0,    5,
    0,    0,    7,    0,    0,    8,    1,    1,    1,    1,
    1,    1,    6,    4,    4,    1,    1,    0,    1,    3,
    0,    1,    1,    2,    0,    6,    0,    0,    0,    0,
   15,    0,    1,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    1,    2,    3,    0,    1,    1,
    2,    4,    3,    1,    3,    1,    3,    1,    1,    0,
    1,    1,    1,    0,    4,    1,    1,    0,    4,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    4,    1,    2,    2,
    2,    1,    1,    1,    2,    1,    1,    1,    0,    6,
    0,    7,    0,    2,    1,    0,    1,    0,    1,    1,
    2,    2,    4,    0,    2,    0,    1,    1,    2,    4,
    1,    5,    2,    2,    2,    2,    2,    2,    1,    1,
    1,    1,    1,    5,    7,    4,    0,    8,    4,    0,
    1,    1,    2,    1,    2,    1,    2,    3,    3,    1,
    1,    1,    1,    1,    1,    5,    7,    4,    7,    5,
    0,    3,    7,    3,    6,    0,    4,    0,    5,    1,
    0,    4,    2,    2,    2,    1,    1,    0,    1,    0,
    5,    1,    0,    1,    0,    1,    1,    1,    3,    4,
    5,    0,    9,    1,    1,    1,    1,    1,    1,    1,
    5,    2,    2,    2,    3,    4,    3,    3,    3,    2,
    3,    3,    2,    4,    4,    3,    0,    1,    3,    4,
    5,    3,    1,    2,    0,    1,    3,    0,    7,    3,
    2,    1,    0,    0,    5,    2,    2,    0,    3,    7,
    5,    4,    5,    2,    0,    3,    0,    3,    0,    6,
    5,    4,    0,    0,   10,    0,    0,    9,    5,    4,
    2,    1,    0,    2,    2,    2,    2,    2,    4,    5,
    4,    5,    0,    5,    0,    6,    3,    2,    2,    2,
    1,    0,    3,    0,    0,    5,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    0,    5,    0,    3,    0,
    0,    0,   12,    0,    0,    0,   13,    0,    2,    0,
    3,    1,    0,    4,    1,    0,    4,    1,    2,    2,
    1,    2,    2,    0,    0,    4,    2,    3,    0,    4,
    2,    2,    3,    0,    1,    1,    1,    2,    2,    2,
    2,    4,    3,    0,    7,    4,    4,    3,    1,    3,
    0,    0,    4,    0,    1,    1,    3,    2,
  };
   static  short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0, 1137,    0,    0, 1141,    0,
    0,   15,   17,  416,  429,  436,  417,  418,  419,  421,
  422,  420,  423,  424,  426,    0,  425,    0,  432,  434,
  414,    0,  428,  430,  415,  433,  435,  431,    0,  377,
 1159,    0,  427, 1148,    0,   10,    1,    0,    0,    0,
   12,    0,  941,    0,    0,    0,    0,    0,    0,    0,
    0,  465,    0,    0,    0,    0,    0,    0,    0, 1057,
    0,    0, 1055,    0,    0,  463,    0,    0,    0,  546,
    0,  464,    0,    0,    0, 1048,    0,    0,    0,    0,
  772,    0,    0,    0,    0,    0,    0,    0,    0,  467,
  834,    0,  895,    0,    0,    0,    0,    0,    0,    0,
    0,  462,    0,  761,    0,  940,    0,  872,    0,  458,
  903,  902,    0,    0,    0,  438,  439,  440,  441,  442,
  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,
  453,  454,  455,  456,  457,  460,  461,  768,    0,  618,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  769,  767,  770,  771,
  850,  852,    0,  848,  851,  873,  875,  876,  877,  878,
  879,  880,  881,  882,  883,  884,  885,  886,  887,  888,
  889,  890,  874,    0,    0,  942,  943,  961,  962,  963,
  964,  965, 1004, 1005, 1006, 1007, 1008, 1009, 1010,    0,
    0,    0,   20,   22,    0, 1145,   16, 1138,    0,    0,
  266,  287,  265,  262,  267,  268,  261,  284,  283,  276,
  277,  269,  275,  274,  278,  271,  272,  273,  263,  264,
  279,  280,  286,  285,  281,  282,  270,    0, 1162, 1151,
    0,    0, 1150,    0, 1149,    3,   57,    0,    0,    0,
   46,   43,   45,   48,   49,   50,   51,   52,   55,   13,
    0,    0,    0, 1012,  596,  476,  477, 1046,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1014, 1013,    0,
  606,  600,  605,  894,  939,  853,  892,  891,  893,  854,
  855,  856,  857,  858,  859,  860,  861,  862,  863,  864,
  865,  866,  867,  868,  869,  870,  871,    0,    0,    0,
  976,    0,    0,    0,  908,  907,    0,    0,    0,    0,
    0,    0,    0,  437,    0,    0, 1054,    0,    0,    0,
    0,    0,    0,    0,    0, 1020,    0,    0,    0,    0,
 1023,    0,    0,    0,    0,  598, 1047,    0,    0,    0,
  906,  410,    0,    0,    0,    0,    0,    0,    0,    0,
  396,  364,    0,  367,  397,    0,  406,    0,    0,    0,
    0,    0,    0,    0,  764,    0,  617,    0,    0,  757,
    0,    0,  613,    0,    0,  468,    0,  754,    0,  540,
    0,  615,  611,  625,  619,  626,  620,  614,  610,  630,
  624,  629,  623,  627,  621,  628,  622,  755,  592,    0,
  591,  459,  370,  371,    0,    0,    0,    0,    0,  896,
    0,  363,    0,  408,  409,    0,    0,  549,  550,    0,
    0,    0,  900,  901,  909,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1140,  849,  899,    0,
  937,  938, 1091, 1108,    0,    0, 1092, 1094,    0, 1120,
 1077, 1075, 1101,    0,    0, 1099, 1102, 1103, 1104, 1105,
 1078, 1076,    0,    0,    0,    0,    0,    0, 1158,    0,
    0,  378,    0,    0, 1160,    0,    0,   44,  803,  809,
  801,  812,    0,  798,  808,  802,  800,  799,  806,  804,
  805,  811,  807,  810,  813,    0,    0,  796,   47,   56,
  548,    0,  544,  545,    0,    0,  542,    0,    0,  911,
    0,    0,    0,  974,    0,  936,  934,  935,    0,    0,
    0,  776,    0, 1017, 1015,  777,    0,    0,    0, 1058,
    0,    0, 1056,    0,  573,    0,    0,  561,  568,    0,
    0,    0,  562,    0,    0,  578,  580,    0,  557,    0,
    0,    0,    0,    0,  552,    0,  555,  559,  399,  398,
 1019, 1018,    0,    0, 1022, 1021, 1032,    0,    0,    0,
 1033,  590,    0,  393,  589,    0,    0, 1049,    0,    0,
  905,    0,    0,  972,    0,  404,  405,    0,    0,    0,
  403,    0,    0,    0,  631,    0,    0,  602,    0,  759,
  652,  651,    0,    0,    0,  472,    0,  466,  847,    0,
    0,  842,  844,  845,  846,  480,  481,    0,    0,    0,
  374,  375,    0,  197,  196,  198,    0,  746,    0,    0,
    0,  400,    0,  741,    0,    0, 1026,    0,    0,    0,
  488,  489,    0,  492,    0,    0,    0,    0,  490,    0,
    0,  539,    0,  496,    0,    0,    0,    0,  522,  525,
    0,    0,  517,  524,  523,    0,  726,  727,  728,  729,
  730,  731,  732,  733,  734,  736,  735,  737,  739,  740,
  738,  633,  632,  638,    0,  640,    0,  639,    0,  649,
  646,  650,    0,    0,  660,    0,    0,    0,    0,    0,
  653,    0,  648,  661,  662,  644,    0,  645,    0,  679,
    0,    0,  680,    0,  686,    0,  687,    0,  688,    0,
  689,    0,  693,    0,  694,    0,  697,    0,  700,    0,
  703,    0,  706,    0,  709,    0,  712,    0,  715,    0,
  718,    0,  720,    0,  577,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1090, 1089,    0, 1100,    0, 1088,
    0,   18, 1156, 1157,    0,    0,  194,    0,    0, 1166,
  392,    0,    0,    0,  389, 1152, 1154,   63,   65,   66,
    0,    0,   58,    0,    0,   67,   69,   32,   30,    0,
    0,    0,  793,    0,  797,  486,    0,  547,    0,  595,
    0,  608,  183,  205,    0,    0,    0,  173,    0,    0,
    0,  184,  601,    0, 1063,  980,    0,  998,  977,    0,
  989,    0, 1000,    0, 1016,  946,    0, 1052,    0,    0,
 1059,    0, 1062,    0,    0,  560,    0,  569,  579,  581,
    0,    0,    0,    0,  508,    0,    0,  503,    0,    0,
  753,    0,  583,  554,    0,    0,  154,  584,  152,  153,
  586,    0,  594,  593,  949,    0, 1044,    0,    0, 1030,
    0, 1034,  588,  597, 1070,    0, 1066,  968,    0,    0,
    0, 1081,    0,  365,  366, 1079,    0,    0,  774,  775,
    0,    0,    0,  752,  751,  758,    0,  487,    0,    0,
  469,  836,  837,  835,  843,    0,  541,  756,    0,  373,
  744,    0,    0,    0,  616,  612, 1025, 1024,  897,  493,
  485,    0,    0,  491,  482,  483,  599,  538,  536,    0,
  535,  528,  529,    0,  526,  527,    0,  521,  478,  479,
  494,  495,    0,  915,    0,    0,  655,  656,    0,    0,
    0, 1036,  647,  723,    0, 1109, 1083,    0, 1110,    0,
 1093, 1095, 1106,    0, 1121,    0, 1087, 1135,    0, 1168,
  195, 1163,    0,  833,  832,    0,  831,    0,  388,    0,
   62,   59,    0,    0,    0,    0,    0,    0,  395,    0,
  787,    0,    0,   88,   87,    0,  543,    0,    0,    0,
    0,    0,  188,  607,    0,    0,    0,    0,    0,  990,
  978,    0, 1001,    0,    0, 1051, 1011,    0, 1053, 1061,
  570,  567,    0,  512,    0,    0,    0, 1146, 1147,  499,
  505,    0,  509,    0,    0,    0,    0,    0,  947,    0,
 1040,    0, 1037, 1031, 1069,    0,    0,  970,  368,  369,
 1082, 1080,    0,  603,    0,  760,  750,  474,  473,    0,
  376,  743,  742,  762,  484,  537,    0,    0,  531,    0,
  520,  519,  518,    0,  931,  914,    0,    0,    0,  920,
    0,    0,    0,  665,    0,    0,  668,    0,  674,    0,
  672,  724,  725,  722,    0, 1085,    0, 1114,    0,    0,
 1129, 1130, 1123,    0,   19, 1167,  391,  390,    0,    0,
   68,   61,    0,   70,   31,   24,    0,    0,  341,    0,
  240,    0,  115,    0,   84,   85,  925,  127,  128,    0,
    0,    0,  928,  203,  204,    0,    0,    0,    0,  176,
  185,  177,  179,  975,    0,    0,    0,    0,    0,  999,
    0,    0, 1060,  513,  514,  507,  510,  506,    0,  500,
  504,    0,  575,    0,  551,  498,  587,  585,    0,    0,
    0, 1072,    0,    0,    0,  773,  765,    0,    0,    0,
  532,    0,  530,    0,    0,  910,  921,  659,    0,  664,
    0,    0,  669,  663,    0, 1084,    0,    0,    0, 1098,
    0, 1096, 1107,    0, 1136, 1155,    0,   81,    0,    0,
   75,   76,   79,   80,    0,  358,  347,  346,    0,  788,
  236,  110,    0,  912,  929,  189,    0,  201,    0,    0,
    0,  973, 1074,    0,    0,    0,  994,    0,    0, 1002,
  945,    0,  556,  553,  954,    0,  960,    0,    0,  952,
    0,  956,    0, 1038, 1071, 1067,  894,  967,    0,  475,
 1050,  763,  534,    0,    0,  667,  666,  675,  673, 1086,
 1111,    0, 1097,    0,    0, 1125,    0,   82,   73,    0,
    0,    0,  342,    0,    0,    0,    0,    0,  190,    0,
  180,  178, 1064,  991,  979,  987,  986,  981,  983,    0,
  511,    0,  948,  953,    0,  957, 1045,    0,    0,  766,
    0,  923,    0, 1115, 1132, 1133, 1126,   60,    0,   77,
   78,    0,    0,    0,    0,    0,    0,    0,  782,    0,
  815,    0,  779,  930,  187,    0,  200,    0,    0, 1003,
  959,  958, 1042,    0, 1039, 1068,  932,    0,    0,    0,
   83,    0,    0,  359,    0,    0,  357,  343,    0,  351,
    0,  413,    0,  411,    0,    0,  789,    0,  820,  237,
    0,  191, 1065,  982,    0,    0,  996,  838, 1041, 1112,
    0, 1127,    0,    0,    0,  339,    0,    0,  780,  817,
    0,  785,    0,    0,  821,    0,  111,  985,  984,    0,
    0, 1116,   29,   28,   25,  360,  356,    0,    0,  352,
  412,    0,  823,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   34,  344,    0,  828,    0,  829,  826,    0,
  824,  106,  107,    0,  103,    0,    0,   91,   93,   94,
   95,   96,   97,   98,   99,  100,  101,  102,  104,  105,
  155,    0,    0,  253,  245,  246,  247,  248,  249,  250,
  251,  252,    0,    0,  243,  112,  839,    0, 1113,    0,
  361,  355,  786,    0,    0,    0,    0,  790,   92,    0,
  299,  294,  298,    0,  238,  244,    0, 1119, 1117,  827,
  825,    0,    0,    0,    0,    0,    0,    0,    0,  308,
    0,    0,  254,    0,    0,  260,    0,  170,  169,  156,
  166,  167,  168,    0,    0,    0,  108,    0,    0,  293,
    0,    0,  292,    0,  160,    0,    0,  382,  340,    0,
  380,    0,    0,    0,    0,    0,    0,    0,    0,  791,
    0,  239,  113,  118,  116,  315,    0,  379,    0,    0,
    0,    0,  131,    0,    0,    0,    0,    0,    0,  165,
  157,    0,    0,    0,  218,    0,  383,    0,  255,    0,
    0,    0,    0,  312,    0,  290,  133,    0,  288,    0,
    0,    0,  135,    0,  384,    0,    0,  207,  212,    0,
    0,    0,  381,  258,  171,  114,  126,  124,    0,    0,
  317,    0,    0,    0,    0,    0,  161,    0,  296,    0,
    0,    0,    0,  139,    0,    0,    0,    0,  385,  386,
    0,    0,    0,    0,    0,  121,  332,    0,  313,    0,
    0,  326,    0,    0,    0,  321,    0,  151,    0,    0,
    0,    0,  146,    0,    0,  309,    0,  136,    0,  130,
  140,  158,  164,  227,    0,  208,    0,    0,  219,    0,
  125,    0,  117,  122,    0,    0,    0,  328,    0,  329,
  318,    0,    0,  311,  322,  291,    0,    0,  132,  147,
  289,    0,  307,    0,  297,  301,  142,    0,    0,    0,
  224,  226,    0,  259,  123,  333,  335,  314,    0,    0,
  327,  324,  150,  148,  162,  306,    0,    0,    0,  159,
  228,  230,  209,    0,  222,  220,    0,    0,  326,    0,
  302,  304,  143,    0,    0,    0,    0,  337,  338,  334,
  336,  325,  163,    0,    0,  234,  233,  232,  229,  231,
  214,  210,  221,    0,    0,    0,  303,  305,  216,  217,
    0,  215,
  };
  protected static  short [] yyDgoto  = {             7,
    8,   57,    9,   58,   10,   11,   59,  268,  865,  866,
   12,   13,   60,   22,   23,  225,  378,  271,  850, 1047,
 1275, 1413, 1465, 1788, 1044,  272,  273,  274,  275,  276,
  277,  278,  279,  843,  536,  844,  845, 1170,  846,  847,
 1174, 1045, 1270, 1271, 1272,  305,  720, 1379,  127, 1056,
 1185,  410, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
 1504, 1505, 1506, 1507, 1508, 1509, 1510,  670, 1536,  964,
  556,  854, 1591, 1184, 1392, 1346, 1390, 1427, 1477, 1547,
 1632, 1422, 1659, 1633, 1684, 1685, 1686, 1187, 1682, 1188,
  920, 1048, 1644, 1618, 1672,  618, 1665, 1638, 1701, 1135,
 1670, 1673, 1674, 1769, 1702, 1703, 1699, 1511, 1570, 1540,
 1592,  867, 1646, 1748, 1615, 1705, 1780,  557, 1571, 1572,
  306, 1601,  868,  869,  870,  871,  872,  825,  690, 1396,
  826,  827, 1062, 1594, 1623, 1716, 1677, 1750, 1802, 1786,
 1624, 1811, 1806, 1595, 1650, 1776, 1753, 1717, 1718, 1799,
 1784, 1785, 1182, 1345, 1456, 1523, 1575, 1524, 1525, 1563,
 1598, 1564,  381,  258, 1681, 1566, 1666, 1663, 1512, 1542,
 1587, 1745, 1707, 1439, 1746,  721, 1794, 1795, 1586, 1662,
 1635, 1694, 1689, 1660, 1726, 1731, 1692, 1695, 1696, 1779,
 1732, 1690, 1691, 1790, 1777, 1778, 1179, 1279, 1418, 1384,
 1447, 1419, 1420, 1468, 1342, 1444, 1481,  444,  382,  129,
  433,  434,  130,  683,  532,  261, 1610,  834,  835, 1036,
 1049,  131,  386,  499,  372,  387,  343, 1423, 1424,   53,
  134,  344,  136,  137,  138,  139,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
  154,  155,  156,  157,  405,  406,  960, 1238,  289, 1001,
  916, 1225, 1215,  906, 1090,  907,  908, 1216,  158,  228,
  411,  723,  724,  725,  992,  993,  159,  566,  567,  353,
 1224,  914,  500,  355,  602,  603,  604,  605,  608,  922,
  636,  302,  573,  951,  303,  572,  160,  161,  162,  163,
  164, 1146, 1013, 1147,  764,  765, 1148, 1143, 1144, 1149,
 1150, 1151,  165,  166,  167,  168,  169,  170,  171,  172,
  173,  174,  175,  176,  177,  178,  693,  694,  695,  956,
  957,  179,  680,  663,  953,  435, 1240,  659, 1319,  180,
  587, 1387, 1388, 1391, 1472, 1180, 1344, 1454, 1567,  558,
 1428, 1429, 1490, 1491, 1037,  407, 1460,  671,  672,  307,
  308,  309,  183,  184,  185,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  203,  328,  700,  204,  373, 1006,  726,
 1138, 1059,  861, 1191, 1136, 1139, 1295, 1140, 1192, 1193,
  329,  205,  206,  207, 1308, 1229, 1309, 1310, 1311, 1312,
  208,  209,  210,  211,  212,  376,  879,  580,  880, 1298,
 1209, 1299, 1434, 1399, 1359, 1435,  881, 1208,  882, 1437,
 1360,  213,  214,  215,  216,  217,  218,  219,  358,  630,
  631,  929, 1405, 1368, 1100,  369,  349,  345, 1078, 1207,
 1069, 1398, 1234, 1106, 1369,  220,  512,  221,  513, 1155,
 1257,  514,  515,  820,  811,  812, 1262, 1159,  516,  517,
  518,  519,  520, 1160,  806, 1157, 1373, 1461, 1529, 1259,
 1409, 1480, 1025,  814, 1026, 1335, 1264, 1336, 1410, 1164,
   17,   19,   54,   55,  260,  828, 1040,  530,  829,  830,
  };
  protected static  short [] yySindex = {         -104,
    0, -183,  -93, -247, -177,22739,    0,  130,    0,    0,
 -177, -247,    0,    0,  -43,    0, 9918, -177,    0, -157,
   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  120,    0,  142,    0,    0,
    0,23266,    0,    0,    0,    0,    0,    0,   28,    0,
    0,  545,    0,    0,  877,    0,    0,  130,   67, -177,
    0,  206,    0,  428,  274, -158,21852,  -75,  329,  337,
10073,    0,  329,  329,  329,   43,  329,  329,20619,    0,
  329,  455,    0,  329,  882,    0,12290,  329,  329,    0,
12436,    0,  454,  329,  -78,    0,  329,  492,  329,  329,
    0,22868,22868,  567,  329,  329,  199,12582,20619,    0,
    0,12728,    0,13604,13750,13896,14042,14188,14334,14480,
14626,    0,  360,    0,23041,    0,  350,    0,  112,    0,
    0,    0,  670,  656, -250,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  112,    0,
 3106,  666,  851,  356,  837,  718,  842,  658,  736,  801,
  784,  807,  824,  811, -282,  831,    0,    0,    0,    0,
    0,    0, 6988,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  858,  237,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -151,
  256,   67,    0,    0,  839,    0,    0,    0,23041,23041,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
  795,  843,    0,  132,    0,    0,    0,   67,23788,  931,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1039,  112,20765,    0,    0,    0,    0,    0,20619, -178,
 -144, 1015,  914,20619,  609,  656,  112,    0,    0,23041,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -165, -285,21852,
    0,23041,20619,  929,    0,    0,  933,20619,20619,12582,
  360,  947,  960,    0,  454,20619,    0,20619,  454,20619,
 8039,  565, -191,  935,23041,    0, 1083,  962,23041,20619,
    0, 1103,  969,  636, 2668,    0,    0,20619,  454,20035,
    0,    0,  492,20619,20619,  454,  581,  701, 1060,  112,
    0,    0,  938,    0,    0,  858,    0, -250, 1070,  112,
20619,20619,20619,  337,    0, 1016,    0,23041,23041,    0,
13458,  112,    0,  951,  965,    0,10228,    0, -294,    0,
  880,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,18488,
    0,    0,    0,    0,22484,  581,  993, 1001,20619,    0,
  141,    0,  211,    0,    0,  386,  326,    0,    0,  955,
12874,10684,    0,    0,    0,20619,20619,20619,20619,20619,
20619,20619,20619,20619,20619,20619,20619,20619,20619,20619,
14772,14918,15064,15210,18571,18130,15356,15502,15648,15794,
15940,16086,16232,16378,16524,16670,16816,16962,17108,17254,
17400,17546,17692,17838,21203,20619,    0,    0,    0,  858,
    0,    0,    0,    0,22868,22868,    0,    0,  112,    0,
    0,    0,    0,  269, 1038,    0,    0,    0,    0,    0,
    0,    0,   67,  931,  480,  754,   28,   28,    0,  687,
  115,    0,   28, 1022,    0, -131,23788,    0,    0,    0,
    0,    0, -149,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  131, 1751,    0,    0,    0,
    0,  975,    0,    0, 1023,  606,    0, 1025, -294,    0,
 1029,  171,  454,    0,  329,    0,    0,    0,  112,11560,
 -196,    0, 1026,    0,    0,    0,  113,  173,20619,    0,
 1031, 1032,    0,  174,    0,  914,  609,    0,    0, 1027,
    0, 1044,    0, 1033,  970,    0,    0,  711,    0,10976,
  762,12728,  935,19889,    0,11122,    0,    0,    0,    0,
    0,    0,  176,  200,    0,    0,    0,  335,  454,  447,
    0,    0,  492,    0,    0, 1041, 1042,    0,  215,  112,
    0,  217, 1043,    0,  992,    0,    0,20619, 1136,  141,
    0,20619, 1137, 1046,    0, 1051, 1054,    0,22484,    0,
    0,    0,  155,  975,20619,    0,20619,    0,    0, -263,
10228,    0,    0,    0,    0,    0,    0, 1048,12728,  155,
    0,    0,  275,    0,    0,    0,  492,    0,  581,  112,
23085,    0, 1058,    0, 1061,17984,    0, 1198, 1062,10228,
    0,    0, 1004,    0,  975,  112,20765, 1005,    0,  141,
  975,    0,  100,    0,20181,20181, 1074, 1210,    0,    0,
 -288, -137,    0,    0,    0, -122,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  666,    0,  666,    0,  666,    0,
    0,    0,21349,21349,    0,23041,  603,    0,    0,    0,
    0,  112,    0,    0,    0,    0,  851,    0,  851,    0,
13312,  356,    0,  356,    0,  837,    0,  837,    0,  837,
    0,  837,    0,  718,    0,  718,    0,  842,    0,  658,
    0,  736,    0,  801,    0,  784,    0,  807,    0,  824,
    0,  811,    0, -155,    0,12728, 1167,  112, 1168,  112,
12728,12728, 1071,20619,    0,    0, 1038,    0,  112,    0,
 1028,    0,    0,    0,23085,  687,    0, 1079, 1082,    0,
    0,  780,   67,  368,    0,    0,    0,    0,    0,    0,
 -176, 1084,    0, 1085, 1088,    0,    0,    0,    0, 1091,
23129, 1052,    0,  479,    0,    0,  564,    0,20765,    0,
 1086,    0,    0,    0,  792,  167, 1094,    0, 1095, 1102,
 1105,    0,    0,20619,    0,    0,  112,    0,    0, 1092,
    0, 1108,    0,  467,    0,    0,10073,    0,10073, 1109,
    0,10073,    0,10073,11706,    0,18364,    0,    0,    0,
11852,11998,  339,19889,    0,  -24,  104,    0, 1050, 1057,
    0,  776,    0,    0, 1116, 1115,    0,    0,    0,    0,
    0, 1117,    0,    0,    0, 1123,    0,18660,  454,    0,
  454,    0,    0,    0,    0,10073,    0,    0,10073,10073,
  141,    0,20619,    0,    0,    0,20619,23041,    0,    0,
  454, 1121,  155,    0,    0,    0,20619,    0, 1119, 1075,
    0,    0,    0,    0,    0, 1124,    0,    0,23041,    0,
    0,  112,22484, 1159,    0,    0,    0,    0,    0,    0,
    0,  975,  783,    0,    0,    0,    0,    0,    0,20181,
    0,    0,    0,  112,    0,    0,19743,    0,    0,    0,
    0,    0,11268,    0,11414, 1129,    0,    0, 1133,  112,
21495,    0,    0,    0,12144,    0,    0, 1224,    0, 1226,
    0,    0,    0,  979,    0, 1135,    0,    0,  796,    0,
    0,    0,  687,    0,    0, 1087,    0,  115,    0,  687,
    0,    0, 1028, 1144, 1145, 1090, 1150, 1052,    0, 1146,
    0, 1283, 1287,    0,    0,12728,    0,20327, 1151,  792,
23085,23041,    0,    0,  664, 1289, 1291,  221, 1148,    0,
    0,20619,    0,20619, 1263,    0,    0,  454,    0,    0,
    0,    0,20473,    0, -231,20473,  794,    0,    0,    0,
    0,10830,    0, 1295,  858, 1173,11706, 1166,    0,  329,
    0,  112,    0,    0,    0, -109, 1267,    0,    0,    0,
    0,    0, 1170,    0, 1202,    0,    0,    0,    0,12728,
    0,    0,    0,    0,    0,    0, 1171, 1172,    0,  884,
    0,    0,    0,23041,    0,    0,  112, 1175, 1129,    0,
21349, 1266,  443,    0,  468,  112,    0, 1183,    0, 1182,
    0,    0,    0,    0,12728,    0,12728,    0,  116,12728,
    0,    0,    0,  651,    0,    0,    0,    0, 1188, 1028,
    0,    0,13020,    0,    0,    0, 1189,18704,    0, 1052,
    0, 1052,    0, 1052,    0,    0,    0,    0,    0,  112,
 1185, 1151,    0,    0,    0, -169, -148, 1192, 1193,    0,
    0,    0,    0,    0, 1186,11706, 1129, -122,20619,    0,
 1187,10073,    0,    0,    0,    0,    0,    0, 1195,    0,
    0, 1200,    0,  935,    0,    0,    0,    0, -172,20619,
 1196,    0, 1129, 1201,10383,    0,    0, 1153,  885,  155,
    0,20619,    0, 1152, 1197,    0,    0,    0,21631,    0,
  112,21631,    0,    0,21495,    0,12728, 1231,12728,    0,
12728,    0,    0,20619,    0,    0, 1088,    0,  418,  888,
    0,    0,    0,    0, -247,    0,    0,    0, 1213,    0,
    0,    0, 1204,    0,    0,    0,  471,    0, 1205, 1344,
 1346,    0,    0, 1129, 1215, 1129,    0,10073,  660,    0,
    0,20473,    0,    0,    0,20619,    0, 1220, -168,    0,
 9763,    0, 1217,    0,    0,    0,    0,    0,  155,    0,
    0,    0,    0,20619,11414,    0,    0,    0,    0,    0,
    0, 1250,    0,  981, 1222,    0, 1228,    0,    0,13020,
 -177,  171,    0,  800, 1225, 1234,20327, 1229,    0,20619,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10073,
    0, -111,    0,    0,10228,    0,    0,  322,10073,    0,
 1232,    0,12728,    0,    0,    0,    0,    0,20619,    0,
    0,   67, 1235,   67,  171,23041, 1225, 1274,    0, 1274,
    0, 1225,    0,    0,    0,20619,    0,10073,20619,    0,
    0,    0,    0, 1242,    0,    0,    0, 1272,12728,20619,
    0,   67, 1249,    0, 1194,  966,    0,    0, 1236,    0,
 1246,    0,  160,    0, 1251, 1203,    0, 1274,    0,    0,
 1274,    0,    0,    0,  809, 1108,    0,    0,    0,    0,
 1276,    0,   59, 1274, 1384,    0, 1255,   67,    0,    0,
23041,    0,   -9, 1259,    0, 1260,    0,    0,    0,10228,
12728,    0,    0,    0,    0,    0,    0, 1248, 1254,    0,
    0,19889,    0,22824,  263,   67, 1264, 1265, 1280,12728,
 1261,20619,    0,    0, 1268,    0, 1273,    0,    0, 1262,
    0,    0,    0, 1751,    0, 1270,  263,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  614, 1751,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1275,   67,    0,    0,    0,  112,    0, 1280,
    0,    0,    0, 1281,22824,10228,22144,    0,    0,  556,
    0,    0,    0,22229,    0,    0,  263,    0,    0,    0,
    0, -263,23041,23041,  349,23041,  430,  492, 1303,    0,
  581,19584,    0, 1349,    0,    0, 1254,    0,    0,    0,
    0,    0,    0,19629, 1254, 1286,    0, -138, -126,    0,
23041, -116,    0,23041,    0, 1230, 1285,    0,    0,  543,
    0,  105,19665,    0, 1288, 1233,  241,  556,23266,    0,
20619,    0,    0,    0,    0,    0,  543,    0, 1292, 1237,
 1290, 1284,    0, 1293, 1240, 1296,  171, 1294, 1297,    0,
    0, 1300, 1299, 1333,    0,  975,    0,  937,    0, 1306,
 1298, 1254,  -56,    0, 1302,    0,    0, 1309,    0, 1308,
 1323, 1325,    0, 1307,    0,  171,  171,    0,    0,  171,
 1327, 1330,    0,    0,    0,    0,    0,    0, 1332,  283,
    0, 1335,  171, 1443, 1337,  171,    0,  706,    0,11706,
 1282, 1339, 1307,    0, 1347, 1350,  315, 1351,    0,    0,
  171,20327, 1301, 1353, 1332,    0,    0, 1751,    0,   67,
   67,    0, 1311, 1355, 1335,    0, 1360,    0,20619, 1314,
 1358, 1337,    0, 1373,  171,    0,   30,    0, 1365,    0,
    0,    0,    0,    0, 1751,    0,  315,  315,    0, 1375,
    0,  -56,    0,    0,  135, 1357, 1751,    0, 1751,    0,
    0,11706, 1369,    0,    0,    0, 1381, 1309,    0,    0,
    0, 1382,    0,  127,    0,    0,    0, 1274,  984, 1385,
    0,    0,  678,    0,    0,    0,    0,    0, 1414, 1513,
    0,    0,    0,    0,    0,    0, 1389, 1390,11706,    0,
    0,    0,    0,  315,    0,    0,  721,  721,    0, 1274,
    0,    0,    0,  216,  216, 1387, 1403,    0,    0,    0,
    0,    0,    0,19889,19889,    0,    0,    0,    0,    0,
    0,    0,    0, 1400, 1401,20327,    0,    0,    0,    0,
 1398,    0,
  };
  protected static  short [] yyRindex = {         2153,
    0,    0,10538, 2153,    0,    0,    0, 1796,    0,    0,
 2843, 1632,    0,    0,    0,    0,    0, 2843,    0, 1356,
   53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1799,    0,
    0, 1799,    0,    0, 1799,    0,    0, 1796, 2247, 2580,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1415,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,23173,    0, 1407,    0,    0,    0,
 1407,    0,    0,    0,    0,    0,    0, 4183,    0, 1419,
    0,    0,    0,    0,    0,    0,    0,  373,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 6432,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7521, 6360, 6617,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6717, 7616, 8257, 4984, 5539, 8041, 8719, 8849, 8979, 9109,
 6279, 9304, 9434, 9538, 1670, 1342,    0,    0,    0,    0,
    0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8136,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4462,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1799,    0,    0,
  106,    0,    0,    0,    0,    0,    0, 4518,  576, 4588,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5065,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5250,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1422,    0,    0,    0,    0,    0, 1416,    0,    0,    0,
    0, 1416,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3631,    0,    0,    0,  208, 3799,    0,    0,
    0,    0,    0,    0,    0, 3967,    0, 3799,    0,    0,
    0,    0,    0, 1415,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  999,    0,    0,  239,    0, 1417,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1421, 4062,    0,    0, 1407,    0,
 5065,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2919,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1935,    0,    0,    0,    0,    0,
    0,    0, 4648, 4692,  810,    0, 1799, 1799,    0,22912,
 -215,    0, 1799, 1813,    0,    0,   52,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  485,21767,    0,    0,    0,
    0, 5065,    0,    0,    0,    0,    0,    0,    0,    0,
    0,22314,    0,    0,    0,    0,    0,    0,    0, 1423,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  254, 1176,    0,    0, -272,
 1370,    0,    0, 1427,  760,    0,    0,    0,    0,  258,
    0,    0, 5805, 1426,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1434,    0, 2431,
    0,    0,  364,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3463,
    0,    0,    0,    0,    0,    0,    0,    0, 1421,    0,
    0,    0,20911, 5065,    0,    0,    0,    0,    0,    0,
  308,    0,    0,    0,    0,    0,    0,    0,    0,20911,
    0,    0,    0,    0,    0,    0,  -11,    0,  639,    0,
    0,    0, 1430,    0,    0,    0,    0, 1416,    0,    0,
    0,    0, 4880,    0, 5065,    0,    0, 4694,    0, 5065,
 5990,    0,    0,    0,    0,    0, -188,    0,    0,    0,
    0,  319,    0,    0,    0,  887,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 7695,    0, 7790,    0, 7869,    0,
    0,    0,    0,    0,    0,    0, 7089, 7184, 7305, 7400,
    0, 8336,    0,    0,    0,    0, 8431,    0, 8510,    0,
    0, 5169,    0, 5354,    0, 5724,    0, 5909,    0, 6094,
    0, 6542,    0, 8589,    0, 8654,    0, 8784,    0, 8914,
    0, 9044,    0, 9174,    0, 9239,    0, 9369,    0, 9473,
    0, 9577,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1935,    0,    0,    0,
    0,    0,    0,    0,    0,23217,    0,    0,  895,    0,
    0, 1378,18793,    0,    0,    0,    0,    0,    0,    0,
  781,  771,    0,    0, 1435,    0,    0,    0,    0, 1899,
    0,    0,    0,    0,    0,    0,13166,    0,    0,    0,
  898,    0,    0,    0,23261,22569,    0,    0,  899,  905,
  909,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1428,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1440,    0,    0,    0,
    0,    0, 6802,    0,    0,    0,  309,    0,  137, 5435,
    0,    0,    0,    0,    0, 1437,    0,    0,    0,    0,
    0, 1442,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3463,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,20911,    0,    0,    0,    0,    0, 1013,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 5065,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1431,    0,    0,    0,    0,
 1441,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -174,    0,  369,    0,    0,    0,    0,
    0,    0,23261,    0,    0,    0,    0, -215,    0,22997,
    0,    0, 1446,    0,  845,    0,    0,    0,    0, 1445,
    0, 1395, 1397,    0,    0,    0,    0,    0, 1447,23305,
    0,    0,    0,    0,22654,    0,    0,    0,  912,    0,
    0,    0,    0,    0, 3114,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5620, 6175, 1457,    0,    0,    0,
    0, 1454,    0,    0,    0,  912, 3307,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -166,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1451,    0,
    0,    0,    0,    0,  997,  691,    0,    0,    0, 1458,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  920,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1455,    0,    0,    0,    0,    0,  925,  926,    0,
    0,    0,    0,    0,    0,    0, 1460,  887,  744,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5805,    0,    0,    0,    0, 1465,    0,
    0,    0, 1460,    0,    0,    0,    0,    0,    0,20911,
    0,    0,    0,  786,  789,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1435,    0, 4772,    0,
    0,    0,    0,    0,23418,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  817,    0,  838,    0,
    0,    0,    0, 1462,    0, 1431,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1467,    0,
    0,    0,    0,    0,    0,    0,    0,    0,20911,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,  382,    0,    0,    0,    0,    0,
23462,22314,    0,  359,  466,  553,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -154,    0,    0, 1434,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,23532,    0,  400,22314,    0,  592, 1469,    0, 1469,
    0,  466,    0,    0,    0,    0,    0,    0,  848,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,23576,    0,    0,    0,19168,    0,    0, 1471,    0,
    0,    0,  578,    0,  621,    0,    0,  590,    0,    0,
 1469,    0,    0,    0,    0,  854,    0,    0,    0,    0,
    0,    0, 2753, 1461,  734,    0,    0,  409,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1472,
    0,    0,    0,    0,    0,    0,    0,    0, 4374,    0,
    0, 1426,    0,    0,18918,19271,    0,    0,  535,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  619,
    0,    0,    0,21971,    0,    0,19043,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,22059,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,19389,    0,    0,    0,    0,    0,  535,
    0,    0,    0,    0,    0,  239,  485,    0,    0,    0,
    0,    0,    0,  485,    0,    0,18918,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,19484,  487,    0,
19439,    0,    0,    0,19534,    0, 4374,    0,    0,    0,
    0,    0,    0,    0, 4374,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
    0,  679,    0,  700,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  722,    0,  733,    0,
    0,    0,    0,    0,    0,    0,22314,  927,    0,    0,
    0,    0,    0,    0,    0, 1468,    0,  288,    0,    0,
    0, 4374,    0,    0,  936,    0,    0,    0,    0,    0,
    0,    0,    0, 1466,    0,22314,22314,    0,    0,22399,
    0,    0,    0,    0,    0,    0,    0,    0, 1470,23744,
    0, 1473,22314,21057, 1475,22314,    0,    0,    0,    0,
    0,    0, 1476,    0,    0,    0, 8259,    0,    0,    0,
22314,    0,    0,    0, 1477,    0,    0,  377,    0,23652,
23688,    0,    0,    0, 1478,    0,    0,    0,    0,    0,
    0, 1480,    0,    0,22314,    0,  737,    0,  941,    0,
    0,    0,    0,    0, 1014,    0,18567,23612,    0,    0,
    0,    0,    0,    0,    0,    0, 1534,    0, 1600,    0,
    0,    0,  945,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  638,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8259,    0,    0, 1169, 2202,    0,  638,
    0,    0,    0,    0,    0,18275,    0,    0,    0,    0,
    0,    0,    0, 1426, 1426,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
  };
  protected static  short [] yyGindex = {            0,
    0, 1806,    0,    0,    0,   -3,  -15, -214,  -57,  -47,
    0, 1854, 1862,  717,    0,    0, -211,    0,    0,    0,
    0,    0,    0,-1049, -871, -253, -755,    0,    0,    0,
    0,    0, -259,    0,    0,    0,  707,    0,  833,    0,
    0,    0,    0,  539,  540,  -17, -245,    0,  -48,    0,
    0, -570,  334,    0,  385, -663, -649, -648, -629, -626,
 -608, -607, -606,    0,    0, -916,    0,-1367,    0,  331,
-1350,    0,   37,    0,    0,    0,  493,-1311,    0,    0,
    0,  604,  164,    0,    0,    0,  202,-1298,    0, -324,
 -350, -392,    0,    0,    0,-1089,  150,    0,    0, -603,
    0,    0,  218,    0,    0,  188,    0,    0,  294,    0,
 -592,-1112,    0,    0,    0,    0,    0, -630,  226,-1549,
  -10,    0,    0,    0,  830,  832,  835, 1036, -651,    0,
    0, -400,  836,  323,    0, -892,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  118,
    0,    0,    0,    0,    0,    0,    0,    0,  374,    0,
    0,    0, -289,  307,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  395,    0, -609,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  129,    0,    0,  220,    0,
    0,  219,  222,  133,    0,    0,    0,    0,    0,    0,
    0,    0,  461,    0,    0,    0,    0,  -94,    0, 1439,
 -412, -393, 1618,    0,  285,    0, -486,    0,  879,    0,
 1554,  554, -349, -329,  -91,  151,  867,    0,  470,    0,
  -51,  894, -451,    0,    0, -450,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -443,    0,    0,    0,    0,
    0,    0, -315,    0,    0, 1257,    0,    0,   54,    0,
 -413,    0, -331,    0,    0,    0,  840,-1028, -360, -153,
 -575,    0,  922,    0, 1206, -653,  -40, -384, 1068,    0,
    0,  709, 1845,    0,    0,    0,    0, 1034,    0,    0,
    0, 1540,    0,    0,    0,    0,    0, 2154,  787,  930,
  934, 1463, -179, 1482,    0,    0,    0,    0,  686,  -29,
    0,  683,  768,  919, 1456, 1479, 1453, 1459, 1474, 1484,
 1481, 1485,    0, 1464,    0,    0,    0,  978, 1304, -646,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -354,  602,    0,-1207,    0,    0,    0,    0,    0, -540,
    0,  525,    0,  425,    0,    0,    0,  650, -639,   -7,
 -386,    1,    0, 1781,    0,   60,    0,   71,   77,  122,
  169,  181,  190,  198,  203,  207,  209,  214,  223,  234,
  245,  302,  324,    0, -823,    0,    0,    0,  761,    0,
  674,    0,    0,    0,  646, -390,  739,-1050,    0,  788,
 -561,    0,    0,    0,    0,    0,    0,  676,    0,  675,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  588,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -45,    0,
 1361,  620,    0,    0,    0,    0,    0,    0,    0,  886,
    0,    0,    0,    0,    0,    0, -198,    0,    0,    0,
    0,    0, 1483, 1177,    0,    0,    0,    0, 1486,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  460,    0,
    0,    0,    0,    0,    0,    0,    0,  583,    0,    0,
    0,    0,    0,    0,   -5,  956,    0,    0,    0,  971,
  };
  protected static  short [] yyTable = {           126,
   18,  269,  222,  617,  915,  620,  128,  523,  583,  181,
  560,  270,  921,  526,  538,  296,  855,  182,  878,  642,
  674,  615,  522,  613,  758,  759,  297,  337,  701,  497,
  654,  965,  760,  968,  691,  601,  912,  564,  722,  972,
  453,  445,   51,  454, 1244,  363,  263,  702, 1394,  265,
 1098,    6, 1144,  379,  389,  288,  651, 1218,  396,  883,
  979,  342,  996, 1075,  609, 1076,  713,  772, 1079,  357,
 1080,  347,   14,  362, 1649,  634,  186,  285, 1430, 1041,
  441, 1128,  364, 1305,  367,   53, 1286,  187, 1247,  533,
  574,  404, 1478,  188,  409, 1306,  676,  285,  223, 1306,
 1014,  576,  999,   53,  503,  387,  848, 1288,  967,  577,
  455,  366, 1105,  955,  571, 1107, 1108, 1604, 1002, 1457,
  571,  442,  300,  962,  838,    2,  330,  331,  332, 1606,
  338,  339, 1466, 1004,  346,  348, 1389,  350,  189, 1612,
  494,  359,  360, 1537, 1401,  692, 1232,  365,  368,  856,
  370,    1,  374,  375,  371, 1217,  495,  839,  392,  393,
  677,  679, 1544,   16,  269,  126, 1000,  132, 1552,  578,
  805,   20,  128, 1030,  524,  181,  224,  366, 1128, 1425,
  298,  335,  571,  182, 1128,  190, 1128,  452,  575, 1128,
 1128,  963, 1128, 1128,  610,  840,  611,  191,  286, 1657,
  772,  504,  772, 1775,  772,  564,  192,  505,  335,  506,
  537,  286,  507,  508,  193,  509,  510,  132, 1128,  194,
  524,  132,  533,  195,  533,  196,  533,  111,   53, 1383,
  197,  286,  955,  562,  565, 1016,  429,  944, 1015,  198,
 1021, 1022,  186, 1247,  401,  286, 1473,  336,  570,  909,
  199,  958,  529,  187,  287, 1003,  945,  612,  691,  188,
   15,  200,  913,  430,  560,  563,  772,  287,    2,  538,
  431,  568, 1421, 1361,  336, 1307,  569, 1005,  296, 1307,
 1128,  641, 1402,  646,  674, 1743,  647,  287,  533,  579,
 1206, 1081,  981,  955,  849, 1289,  445,  985,  987,  296,
  535,  287,  600,  511,  189, 1605, 1116,  111,    6, 1144,
  333,  286,  841,  674, 1463,  582,  986, 1607,  201,  299,
  586,  588,  983,  794,  842,  334, 1085, 1613,  591,  640,
  592,  649,  594,  132,  590,  794, 1127, 1725,  593,  794,
  202,  653,  624, 1658,  368,    3,    4,    5,    6,  452,
  637,  190,  639,  664,  794,  988,  586,  643,  638, 1091,
 1620,  387, 1088,  191, 1749,  644,  401,  287,  886,  692,
  831, 1260,  192,   20,  656,  657, 1759,  401, 1760,  401,
  193,  401, 1766, 1721, 1474,  194,   56,  794, 1301,  195,
 1767,  196, 1144,  699,  705, 1337,  197, 1756,  710,  673,
   62,  692,  565,  565, 1131,  198,  614,  675,  794, 1196,
  954, 1318,  377,  515,  851, 1450,  199,  259,  852, 1484,
  335,  698, 1063, 1744,  296, 1031,  863,  200,  888,  893,
 1089,  923,  401,  563,  719,  761, 1770,  229,  727,  728,
  729,  730,  731,  732,  733,  734,  735,  736,  737,  738,
  739,  740,  741, 1464,  267,  925,  807,  809,  387,  230,
  813,  564, 1757,  387, 1768,  269, 1582, 1417, 1793,  534,
  935, 1796,  938,  832, 1355,  524, 1204,  515,  804,  226,
  132, 1261,  394,  833,  201, 1186,  336,  853,  989,  335,
 1087,  387,  859, 1227, 1621,  387, 1092,  387,  387,  387,
  387, 1131,  267,  887, 1642,  387,  202, 1131,  907, 1131,
 1210,  503, 1131, 1131,  377, 1131, 1131, 1600, 1492, 1068,
  132,  823,  824, 1144,  815, 1602,  864,  836, 1109, 1144,
  875, 1417,  884, 1675, 1676,  692, 1400, 1678, 1687,  877,
  111, 1131,  377,  387, 1239, 1406,  377, 1110,  372,  129,
 1697,  129, 1451, 1704,  267,  336,  129,  132,  267,  758,
  759,  634,  873,  889,  894,  565,  924,  760, 1720, 1125,
 1714,  890,  691,  560, 1433,   50,  335, 1403, 1627,  372,
  430,  601, 1656, 1130, 1256,  372, 1258,  431,  335, 1263,
  926,  937, 1742, 1322,  911,  372,  719,  377,  919,  372,
  280,  111, 1293, 1131, 1580,  936,  560,  939,  504, 1029,
 1797, 1205,  372,  564,  505,  438,  506,  475,  930,  507,
  508,  504,  509,  510, 1122,  840,  132,  505,  874,  506,
  942,  501,  507,  508,  946,  509,  510, 1124,  908,  794,
  908,  971,  336,  395,  501,  387,  908,  959, 1493,  404,
  267,  372,  955,  908,  703,  385,  385,  982,  565, 1194,
  476,  911,  453,  673,  704,  454, 1581,  969,  284,  955,
  267,  675, 1370,  387,  994,  994,  439,  387,  385,  372,
  387,  928,  387,  692, 1628, 1583, 1330,  387, 1332,  563,
 1333,  502,  673,  840,  841,  502,  428,  991,  991,  908,
  675,  927,  267,  335,  794,  380,  390, 1189,  908,  516,
  521,  781,  501, 1012,  927,  628,  970,  428,  286, 1495,
 1514, 1122, 1073,  816,  286,  965,  301, 1122,  437, 1122,
  132,  909, 1122, 1122, 1124, 1122, 1122,  227, 1086,  931,
 1124, 1495, 1124,  440,  781, 1124, 1124, 1584, 1124, 1124,
 1051,  429,  477,  478,  394, 1093,  792, 1132,  793, 1018,
 1038, 1020,  841,  502, 1226, 1223,  908, 1074, 1514,  708,
 1028,  692,  429,  516,  287,  428,  227,  706,  430,  709,
  287, 1052,  385,  385,  620,  431,  348,  792,  911,  793,
 1118, 1495,  432,  911,  911,  350, 1024,  758,  759,  430,
  758,  759, 1408,  758,  759,  760,  431,  394,  760, 1039,
  565,  760, 1515,  432, 1053,  281, 1294, 1338,  814,  282,
  792,  132,  793, 1122, 1751, 1752, 1516, 1517, 1070, 1250,
  429,  842,  527,  528,  707, 1251, 1124,  878, 1441,  111,
  111,  563, 1294,   53,  286,  296, 1518,  794,  600, 1519,
  132,  814,   53,  385, 1297,  565,  586,  430, 1348,  794,
 1515, 1252, 1485,  794,  431,  132,  132, 1520, 1521, 1522,
 1349,  432,   52,  913, 1516, 1517,  283,  919,  794,  821,
  429, 1787, 1054,  133,  911,  385,  719, 1118, 1050, 1055,
 1479,  627,  429, 1118, 1518, 1118,  371, 1519, 1118, 1118,
  287, 1118, 1118,  571,  628,  778,  503,  430,  619, 1530,
  135,  794,  385, 1568,  431, 1520, 1521, 1522, 1103,  430,
 1104,  432, 1231, 1122,  674, 1111,  431, 1274,  629, 1112,
  816, 1593,  794,  133,  259,  581,  262,  133,  778, 1117,
 1114,  111,  955, 1593,  783, 1128,  778,  819,  565,  994,
 1569,  385,  385,  606,  565,  429,  391,  607,  842,  296,
  135, 1142,  623,  816,  135, 1265, 1253,  816,  388,  388,
  761,  822,  569,  784,  442,  819,  822,  783,  674,  719,
  832, 1362,  430,  385,  819,  719, 1608,  919, 1010, 1118,
  833,  388, 1011,  429,  858,  818, 1189, 1154,  859, 1438,
 1622,  661,  662,  504,  822,  684,  784,  371, 1541,  505,
  372,  506,  685,  822,  507,  508,  372,  509,  510, 1198,
  430,  429, 1640,  818,  686, 1397,  372,  431,  385,  745,
  372,  745,  818,  682,  446, 1568,  379,  132,  911,  132,
  582,  442,  132,  372,  132,  286, 1356,  447,  430,  133,
 1357,  267,  855, 1012, 1358,  431, 1211,  211,  385,  385,
  487,  443,  432, 1774,  379, 1214, 1708, 1213, 1214,  448,
  449, 1432,  442,  674,  371, 1597,  135, 1035,  751,  919,
 1034, 1035,  372, 1035, 1177,  206,  132, 1597, 1245,  132,
  132,  111,  645,  450, 1274,  388,  388, 1012, 1035,  899,
 1569,  287,  911,  900,  451,  371,  111,  377,  808,  810,
  684,  377, 1060,  372,  377, 1483,  377,  685,  481,  482,
  353,  377,  300,  471,  565,  310,  353,  310, 1761,  686,
  993,  300,  310,  354,  993,  483,  484,  911,  993,  911,
  132, 1283,  911,  488, 1562,  645,  566, 1287,  822,  674,
  910, 1574,  566, 1230,  607, 1273,  560, 1532,  538,   71,
   71,  132,  377,   71, 1095, 1783,  388, 1412,  679,  372,
  372, 1126,  372,  372,   64,  859,  933, 1619,  933,  922,
  933,  922, 1219,  922, 1804, 1805, 1003,  645,  919, 1385,
 1165,  586,  490, 1386, 1619, 1458,  133,  296,  388, 1459,
  296,  372, 1142,  296,  372,  186,  620,  186,  761,  186,
  489,  761, 1313, 1651,  761, 1652, 1280,  491, 1281, 1326,
 1282,  388, 1328,  135, 1323,  388,  199,  492,  199,  955,
  199,  388,  493,   72,  995,  531,  133,   72,  995,  911,
  997,  911,  496,  911,  997,  352, 1334, 1565,  776,  778,
  780,  782,  479,  480, 1565,  472,  473,  474,  745,  747,
  749,  485,  486,  135,  388,  388,  259,  351,  264,  352,
  678, 1341,  679,  133, 1243, 1321, 1003,  679, 1339,  913,
 1340,  913,  525, 1165, 1214, 1165,  533,  174,  582,  174,
  924,  565,  924,  181,  561,  181,  388,  182,  394,  182,
  135,  388, 1073,  673, 1073,  402, 1371,  919,  955,  385,
   74,  675,   74,  205,  175,  205,  175,  559,  267,  134,
  616,  134, 1273,  584,  269, 1382, 1415,  585,  316,  582,
  316, 1189,  582,  141,  524,  141, 1416,  323,  621,  323,
  589,  388,  133,  665,  666,  667,  668, 1161, 1162, 1375,
 1376,  443, 1446,  267,  269,  911,  622,  673,  625, 1009,
  648, 1411,  132,  626,  524,  675, 1771, 1772,  372,  757,
  652,  388,  388,  660,  372,  372,  430,  531,  582,  470,
  470,  650,  372,  696,  372,  132,  372,  372,  372,  372,
 1415,  911, 1334,  471,  471,  697,  794,  794,  711,  132,
 1416,  372,  132,  784,  786,  132,  767,  769,  819,  837,
  372,  372,  772,  774,  430,  860,  857, 1494, 1513,  862,
  885,  891,  892,  565,  898,  897,  895, 1416,  833,   33,
  896,  933,  934,  940,  372,  941,  943,  947,  948, 1494,
  372,  949,  372,  911,  950,  372,  133,  966,  132, 1416,
  973,  974,  673,  977,  719, 1810,  978,  980,  984,   33,
  675,  132,  911,  997,  582,  998, 1513, 1017, 1019, 1032,
 1023,  436,   33,  135, 1033,  645,  833,   33, 1042, 1548,
 1043,  385, 1046,   33, 1064, 1058, 1071, 1065,   33, 1494,
   33,   33,   33,   33, 1066,   50,   33, 1067,   33, 1416,
 1072,  385,   33, 1077,  226, 1094, 1096, 1003, 1099, 1097,
  132, 1115, 1118, 1120,   33,  132, 1124, 1119,   33,  132,
   33, 1137,  385, 1141, 1156,  388, 1158, 1163,  673, 1573,
 1167, 1102, 1172, 1175, 1173, 1176,  675,  133, 1181, 1178,
  383,  383, 1183, 1190, 1202,   33, 1203, 1206,  132, 1212,
 1222, 1113, 1228, 1235,  372,   33,   33,  388,  610, 1237,
 1236, 1241,  907,  383,  135,  372,  133,  372,  907, 1246,
 1249, 1242, 1121, 1254, 1255,  907, 1266, 1300, 1276, 1284,
 1292,  133,  133, 1631, 1290, 1291, 1314, 1573, 1303,  372,
  372, 1316, 1331,  135, 1302, 1320, 1325,  721, 1343, 1351,
 1324, 1352, 1688, 1347, 1350, 1353, 1363, 1367,  135,  135,
  132, 1374,  833,  372, 1377,  385, 1378, 1395, 1386, 1715,
 1407,  372,  388, 1385,  372, 1414, 1426, 1438, 1448,  833,
  907,   40, 1727, 1729, 1440, 1443, 1449, 1445, 1462, 1467,
 1452, 1469,  833,  833, 1475, 1476, 1453, 1482, 1483, 1526,
 1528, 1527,  919, 1585, 1535, 1531, 1538, 1573, 1533, 1715,
 1715, 1545, 1534,  383,  582, 1197, 1599,  383,  383,  833,
  833, 1550, 1603, 1616, 1617, 1625, 1626, 1634, 1637, 1636,
 1628, 1737, 1639, 1607, 1648, 1641,  132,  619, 1645, 1647,
 1568,  388, 1655, 1643,  721, 1654, 1664, 1667, 1698, 1671,
  721, 1661,  721,  721,  721,  721,  721,  721,  721,  721,
  721,  721,  721, 1668,  919, 1669, 1715,  388, 1679,  384,
  384, 1680,  721,  721, 1683, 1709,  833, 1693,  721, 1700,
  721,  385,  721, 1710,  721,  721,  721, 1712,  383, 1719,
 1713, 1757,  384, 1758, 1722,  565,  565, 1723,  460, 1734,
 1736,  919, 1739,  133, 1733,  133,  572, 1738,  133,  460,
  133,  460,  572, 1741, 1747, 1754, 1789, 1789, 1762, 1763,
  383, 1773, 1765, 1798, 1798, 1756,  719,  719, 1781, 1782,
  135, 1278,  135,  460,  460,  135, 1801,  135, 1809, 1803,
 1807, 1808, 1812,  383,  388,    9,  721,  383, 1161,   21,
  604, 1027,  133,  383,  971,  133,  133,  460,  564,  753,
 1028,  747, 1153,  565,  388,  460,  515,  988,  460, 1043,
  748,  830,  992,   35,  572,  916,  563,  516,   35,  135,
  345,  670,  135,  135,   36,  388,  383,  383,  235,  388,
  109,  926,  384,   36, 1035,  917,  384,  384,  671,  927,
  918,  950,  919,  951,  818,  818,  133,  349,  840,  372,
  137,  794,  794,  266,  119,   61,   21,  319,  383,  144,
  138,  120,  320,  383,  145, 1171, 1267,  133, 1380, 1381,
 1576, 1539, 1577,  135, 1431, 1755, 1724, 1764,   40, 1740,
 1711, 1629,   40, 1706, 1199, 1195, 1200, 1546,   26, 1201,
 1061, 1609, 1800,   40,  757, 1630, 1543, 1792, 1470, 1730,
 1791, 1728, 1653,  383, 1735,   40, 1168,  384,  635,   40,
 1471,  995,   40,  961, 1133,  719, 1057,  388,  388,  354,
 1082, 1221, 1304,  658,   40,   40, 1327, 1329,  762,  385,
   40,  792,  788,  383,  383,   40,   40, 1393,  794,  384,
 1123,   40, 1455,   40,   40,   40,   40,  763,  803, 1551,
 1365,   40,  952,  498,  796,   40,  790,   40, 1296, 1354,
 1372, 1315,  384,  800,  383,  798,  384,   40,  802, 1285,
   40,   40,  384,   40, 1364, 1366, 1436, 1404,   40, 1549,
  932, 1233, 1442, 1027,    0, 1169,  817,    0,    0,  818,
  388,    0,    0, 1166,  385,    0,    0,    0,   40,    0,
    0,  539,    0,    0,    0,  384,  384,    0,   40,   40,
    0,    0,  719,    0,    0,    0,    0,  385,  719,    0,
  719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
  719,  540,    0,    0,  388,    0,    0,  384,    0,    0,
  719,  719,  384,    0,  541,    0,  719,    0,  719,  542,
  719,    0,  719,  719,  719,  544,    0,    0,    0,    0,
  545,    0,  546,  547,  548,  549,    0, 1489,  133,    0,
  550,  719,    0,    0,  551,    0,    0,    0,  385,    0,
    0,    0,  384,    0,    0,    0,  552,  383,    0,    0,
  553,  133,  554,    0,    0,  135,  385,  385,    0,  619,
    0,    0,    0,    0,    0,  133,    0,    0,  133,    0,
    0,  133,  384,  384,  719,    0,    0,  555,  135,  383,
    0,    0,    0,    0,  385,    0,    0,  385, 1489,    0,
    0,    0,  757,    0,    0,  757,    0,    0,  757,    0,
    0,    0,   39,  384,    0,   26, 1578, 1579,    0,   26,
    0,    0,    0,    0,  133,    0,    0,    0,    0,    0,
   26,    0,    0,    0,    0,    0,    0,  133,    0,    0,
    0,    0,   26,    0, 1611,    0,   26, 1614,    0,   26,
 1134,  135,    0,    0,  383,    0,    0,    0,    0,    0,
    0,   26,   26,    0,  135,    0,    0,   26,    0,    0,
    0,    0,   26,   26,    0,    0,    0,    0,   26,    0,
   26,   26,   26,   26,    0,    0,  133,    0,   26,    0,
    0,  133,   26,    0,   26,  133,    0,    0,    0,    0,
    0,    0,    0,    0,   26,    0,    5,    0,   26,    0,
   26,    0,  388,  135,    0,   26,    0,    0,  135,  383,
    0,  403,  135,  383,  133,    0,    0,  413,  415,  417,
  419,  421,  423,  425,  427,   26,  384,    0,    0,    0,
    0,    0,    0,    0,   23,   26,   26, 1134,    0,  383,
    0,  135,    0, 1134,    0, 1134, 1134, 1134, 1134, 1134,
 1134, 1134, 1134, 1134, 1134,    0,    0,    0,  384,    0,
    0,    0,    0,    0,    0, 1134, 1134,  388,    0,    0,
    0, 1134,    0, 1134,    0, 1134,  133, 1134, 1134, 1134,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  388,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  135,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  383,    0,    0,    0,
    0,    0,    0,  384,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  383,    0,    0, 1134,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  388,  133,  388,    0,    0,    0,  383,    0,   39,
  388,  383,    0,   39,    0,    0,    0,    0,    0,  388,
  388,    0,  388,    0,   39,    0,    0,    0,    0,  135,
 1029,    0,    0,    0,    0,    0,   39,    0,  384,    0,
   39,    0,  384,   39,    0,    0,    0,  388,    0,    0,
  388,    0,    0,    0,    0,   39,   39,    0,    0,    0,
    0,   39,   33,    0,   33,    0,   39,   39,  384,    0,
    0,    0,   39,    0,   39,   39,   39,   39,    0,    0,
    0,  383,   39,    0,    0,    0,   39,    0,   39,    0,
    0,    0,   33,  403,    0,    0,    0,    0,   39,  383,
  383,   39,   39,    5,   39,   33,    0,   53,    0,   39,
   33,    0,    0,    0,    0,    0,   33,    0,   53,    0,
    0,   33,    0,   33,   33,   33,   33,    0,    0,   39,
   53,   33,    0,    0,   53,   33,    0,   53,    0,    0,
   39,    0,    0,    0,  655,  384,    0,   33,    0,   53,
   53,   33,    0,   33,  403,   53,    0,    0,    0,    0,
   53,   53,    0,    0,    0,  384,   53,    0,   53,   53,
   53,   53,  383,    0,    0,    0,   53,    0,   33,   38,
   53,    0,   53,    0,    0,    0,  384,    0,   33,   33,
  384,    0,   53,    0,    0,    0,   53,    0,   53,    0,
    0,    0,    0,   53,    0,    0,    0,    0,  383,    0,
    0,    0,    0,    0,    0,    0,  383,    0,    0,    0,
    0,    0,    0,   53,  743,  655,  655,  655,    0,    0,
  655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
  655,  655,  655,  655,  655,  655,  655,  655,  655,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  384,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  384,  384,
    0,    0,    0,    0,    0,    0, 1029, 1029,    0,    0,
    0,    0,    0,    0, 1029, 1029, 1029, 1029, 1029,    0,
 1029, 1029,    0, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,    0,    0,
    0,    0, 1029,    0, 1029, 1029, 1029, 1029, 1029, 1029,
    0,    0, 1029,    0,    0,    0, 1029, 1029, 1029, 1029,
 1029, 1029, 1029, 1029,    0, 1029, 1029, 1029,    0,    0,
    0,  384,   27,    0,    0,    0,    0, 1029,    0, 1029,
    0, 1029, 1029,  655,    0, 1029,    0, 1029, 1029, 1029,
 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,    0,
    0, 1029,    0,    0, 1029, 1029, 1029,  384,    0, 1029,
 1029,    0,    0,    0,    0,  384,    0,    0,    0,    0,
    0,    0,    0,    0, 1029, 1029, 1029, 1029, 1029,    0,
    0, 1029, 1029,    0,    0,    0, 1029, 1029,    0,    0,
 1029,    0,    0,    0,  383, 1029, 1029, 1029, 1029, 1029,
    0,    0,    0, 1029,    0, 1029,   38,    0,    0,    0,
   38,    0,   37,    0, 1029, 1029,    0,    0,    0,  976,
    0,   38,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,   38,    0,    0,
   38,    0,    0, 1029, 1029, 1029, 1029,    0, 1029,    0,
    0,    0,   38,   38,    0, 1029,    0,    0,   38,  383,
    0,    0,    0,   38,   38,    0,    0,    0,    0,   38,
    0,   38,   38,   38,   38,    0, 1007, 1008,    0,   38,
    0,    0,  383,   38,    0,   38,    0,    0,  576,    0,
    0,    0,    0,  632,  403,   38,    0,    0,    0,   38,
    0,   38,   24,    0,   25,    0,   38,   26,    0,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
    0,    0,    0,   35,    0,    0,   38,    0,    0,    0,
    0,    0,   37,    0,    0,    0,   38,   38,    0,   39,
    0,    0,    0,  383,    0,  383,    0,    0,    0,    0,
   40,    0,  383,    0,   41,    0,    0,    0,    0,    0,
    0,  383,  383,    0,  383,    0,   43,    0,   44,    0,
 1596,    0,   45,  384,    0,    0,    0,    0,    0,   27,
   46,   47, 1596,   27,   48,    0,    0, 1596,  633,  383,
    0,    0,  383,    0,   27,    0,    0,    0,    0,    0,
    0, 1596,    0,    0,    0,    0,   27,    0,    0,    0,
   27,    0,    0,   27,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1596,  403,   27,   27,    0,    0,    0,
    0,   27,    0,    0,    0,    0,   27,   27,  384,    0,
    0,    0,   27,    0,   27,   27,   27,   27,    0,    0,
    0,    0,   27,    0,    0,    0,   27,    0,   27,    0,
    0,  384,    0,    0,    0,    0,    0,    0,   27,   37,
    0,    0,   27,   37,   27,    0,    0,    0,    0,   27,
    0,  436,    0,  944,   37,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,    0,   27,
   37,    0,    0,   37,    0,    0,    0,    0,    0,   27,
   27,    0,    0,    0,    0,   37,   37,    0,    0,    0,
    0,   37,  384,    0,  384,    0,   37,   37,    0,    0,
    0,  384,   37,    0,   37,   37,   37,   37,    0,    0,
  384,  384,   37,  384,  576,    0,   37,    0,   37,  576,
  576,    0,    0,    0,    0,    0,    0,    0,   37,    0,
    0,    0,   37,    0,   37,    0,    0,    0,  384,   37,
    0,  384,    0,    0,    0,    0,    0,    0,    0,  576,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,    0,  576,  576,    0,    0,    0,  576,    0,    0,
   37,    0,    0,  576,    0,    0,  576,    0,  576,    0,
  576,  576,  576,  576,    0,  655,    0,    0,  576,    0,
    0,    0,  576,    0,    0,    0,  576,    0,    0,    0,
    0,    0,    0,    0,  576,    0,    0,    0,  576,    0,
  576,  576,    0,    0,    0,    0,  576,  576,    0,  576,
  576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
    0,    0,    0,    0, 1248,  576,  576,  576,    0,  576,
  576,    0,    0,    0,  576,  576,  966,  576,  576,  576,
  576,  576,  576,  576,    0,  576,  576,    0,  576,  576,
  576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
  576,    0,  576,  576,  576,  576,  576,  576,  576,  576,
  576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
  576,  576,  576,  576,  576,  576,  576,  576,    0,    0,
  576,    0,  576,    0,  576,    0,    0,  576,    0,  944,
  944,    0,    0,  576,    0,    0,  576,  944,  944,  944,
  944,  944,    0,  944,  944,    0,  944,  944,  944,  944,
  944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
    0,    0,    0,    0,    0,  944,    0,  944,  944,  944,
  944,  944,  944,    0,    0,  944,    0,    0,    0,  944,
  944,  944,  944,  944,  944,  944,  944,    0,  944,  944,
  944,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  944,    0,  944,    0,  944,  944,    0,    0,  944,    0,
  944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
  944,  944,  372,    0,  944,    0,    0,  944,  944,  944,
    0,    0,  944,  944,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  944,  944,  944,
  944,  944,    0,    0,  944,  944,    0,    0,    0,  944,
  944,    0,    0,  944,    0,  456,    0,    0,  944,  944,
  944,  944,  944,    0,    0,    0,  944,    0,  944,    0,
    0,    0,    0,    0,    0,    0,    0,  944,  944,  457,
  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
  468,  469,  470,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  944,  944,  944,  944,
    0,  944,  966,  966,    0,    0,    0,    0,  944,    0,
  966,  966,  966,  966,  966,    0,  966,  966,    0,  966,
  966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
  966,  966,  966,    0,    0,    0,    0,    0,  966,    0,
  966,  966,  966,  966,  966,  966,    0,    0,  966,    0,
    0,    0,  966,  966,  966,  966,  966,  966,  966,  966,
    0,  966,  966,  966,    0,    0,    0,    0,    0,    0,
  904,    0,    0,  966,    0,  966,    0,  966,  966,    0,
    0,  966,    0,  966,  966,  966,  966,  966,  966,  966,
  966,  966,  966,  966,  966,    0,    0,  966,    0,    0,
  966,  966,  966,    0,    0,  966,  966,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  966,  966,  966,  966,  966,    0,    0,  966,  966,    0,
    0,    0,  966,  966,    0,    0,  966,    0,    0,    0,
    0,  966,  966,  966,  966,  966,    0,    0,    0,  966,
    0,  966,    0,    0,    0,    0,    0,    0,  372,    0,
  966,  966,    0,  372,  372,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  966,
  966,  966,  966,  372,  966,    0,    0,    0,    0,    0,
    0,  966,    0,    0,    0,    0,  372,  372,    0,    0,
    0,  372,    0,    0,    0,    0,    0,  372,    0,    0,
  372,    0,  372,    0,  372,  372,  372,  372,    0,    0,
    0,    0,  372,    0,    0,    0,  372,    0,  362,    0,
  372,    0,    0,    0,    0,    0,    0,    0,  372,    0,
    0,    0,  372,    0,  372,  372,    0,    0,    0,    0,
  372,  372,    0,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,    0,    0,    0,    0,  372,
  372,    0,    0,  372,  372,    0,    0,    0,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,    0,  372,
  372,    0,    0,  372,  372,  372,  372,  372,    0,    0,
  372,  372,  372,  372,  372,    0,    0,    0,  372,  372,
  372,  372,  372,  372,  372,  372,  904,    0,    0,    0,
    0,  904,  904,    0,    0,    0,    0,    0,    0,    0,
    0,  372,    0,    0,  372,    0,  372,    0,  372,    0,
    0,  372,    0,    0,    0,    0,    0,  372,    0,    0,
    0,  904,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  904,  904,    0,    0,    0,  904,
    0,    0,    0,    0,    0,  904,    0,    0,  904,    0,
  904,    0,  904,  904,  904,  904,    0,    0,    0,    0,
  904,    0,    0,    0,  904,    0,  402,    0,  904,    0,
    0,    0,    0,    0,    0,    0,  904,    0,    0,    0,
  904,    0,  904,  904,    0,    0,    0,    0,  904,  904,
    0,  904,  904,  904,  904,  904,  904,  904,  904,  904,
  904,  904,    0,    0,    0,    0,    0,  904,  904,    0,
    0,  904,  904,    0,    0,    0,  904,  904,  904,  904,
  904,  904,    0,  904,  904,  904,    0,  904,  904,    0,
    0,  904,  904,  904,  904,    0,    0,    0,  904,  904,
  904,  904,  904,    0,    0,    0,  904,  904,  904,  904,
  904,  904,  904,  904,  362,    0,    0,    0,    0,  362,
  362,  372,    0,    0,    0,    0,    0,    0,    0,  904,
    0,    0,  904,    0,  904,    0,  904,    0,    0,  904,
    0,    0,    0,    0,    0,  904,    0,    0,    0,  362,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  362,  362,    0,    0,    0,  362,    0,    0,
    0,    0,    0,  362,    0,    0,  362,    0,  362,    0,
  362,  362,  362,  362,    0,    0,    0,    0,  362,    0,
    0,    0,  362,    0,    0,    0,  362,    0,    0,    0,
    0,    0,    0,    0,  362,    0,    0,    0,  362,    0,
  362,  362,    0,    0,    0,    0,  362,  362,    0,  362,
  362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
    0,    0,    0,    0,    0,  362,  362,    0,    0,  362,
  362,    0,  407,    0,  362,  362,  362,  362,  362,  362,
    0,  362,  362,  362,    0,  362,  362,    0,    0,  362,
  362,  362,  362,    0,    0,    0,  362,  362,  362,  362,
  362,    0,    0,    0,  362,  362,  362,  362,  362,  362,
  362,  362,  402,    0,    0,    0,    0,  402,  402,    0,
    0,    0,    0,    0,    0,    0,    0,  362,    0,    0,
  362,    0,  362,    0,  362,    0,    0,  362,    0,    0,
    0,    0,    0,  362,    0,    0,    0,  402,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  402,  402,    0,    0,    0,  402,    0,    0,    0,    0,
    0,  402,    0,    0,  402,    0,  402,    0,  402,  402,
  402,  402,    0,    0,    0,    0,  402,    0,    0,    0,
  402,    0,    0,    0,  402,    0,    0,    0,    0,    0,
    0,    0,  402,    0,    0,    0,  402,  372,  402,  402,
    0,    0,    0,  372,  402,  402,    0,  402,  402,  402,
  402,  402,  402,  402,  402,  402,  402,  402,    0,    0,
    0,    0,    0,  402,  402,    0,    0,  402,  402,    0,
    0,    0,  402,  402,    0,  402,  402,  402,    0,  402,
  402,  402,    0,  402,  402,    0,  372,  402,  402,  402,
  402,    0,    0,   33,  402,  402,  402,  402,  402,    0,
    0,    0,  402,  402,  402,  402,  402,  402,  402,  402,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  402,    0,    0,  402,    0,
  402,    0,    0,    0,  372,    0,    0,    0,    0,  372,
  372,  402,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,    0,    0,    0,    0,  407,  372,
    0,    0,  372,  372,  407,    0,    0,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,    0,  372,  372,
    0, 1142,  372,  372,  372,  372,  372,    0,    0,  372,
  372,  372,  372,  372,    0,    0,    0,  372,  372,  372,
  372,  372,  372,  372,  372,    0,    0,  407,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  372,    0,    0,  372,    0,  372,    0,  372,    0,    0,
  372,    0,    0,    0,    0,    0,  372,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  407,    0,    0,    0,    0,
  407,  407,    0,  407,  407,  407,  407,  407,  407,  407,
  407,  407,  407,  407,    0,    0,    0,    0,    0,    0,
  407,    0,    0,  407,  407,    0,    0,    0,  407,  407,
  407,  407,  407,  407,    0,  407,  407,  407,    0,  407,
  407,    0,    0,  407,  407,  407,  407,    7,    0,    0,
  407,  407,  407,  407,  407,    0,    0,    0,  407,  407,
  407,  407,  407,  407,  407,  407,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  407,    0,    0,  407,    0,  407,    0,  407,   33,
   33,  407,    0,    0,   33,    0,    0,  407,   33,    0,
   33,    0,    0,   33,    0,   33,   33, 1143,   33,   33,
   33,   33,   33,   33,   33,   33,    0,   33,    0,   33,
    0,   33,   33,   33,   33,    0,    0,   33,   33,    0,
    0,    0,    0,   33,    0,   33,   33,   33,    0,    0,
    0,    0,   33,    0,    0,    0,   33,   33,   33,    0,
   33,   54,    0,   33,    0,   33,   33,   33,   33,    0,
    0,    0,   33,   33,   33,    0,    0,   33,   33,   33,
    0,    0,    0,    0,    0,    0,   33,   33, 1142,   33,
   33,    0,   53,   33,   33,   33,    0,    0,    0,    0,
   33,    0,    0,   53,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   53,    0,    0,    0,   53,
   33,    0,   53,    0,    0,    0,    0,    0,    0,   33,
   33,   33,    0,    0,   53,   53,    0,    0,    0,   33,
   53,    0,    0,    0,   53,   53,   53,    0,   53,    0,
    0,   53,    0,   53,   53,   53,   53,    0,    0,   53,
    0,   53,    0,    0,    0,   53,    0,   53,    0,    0,
    0,   53,    0,    0,    0,   53,    0,   53,   53,    0,
    0,   53,    0,   53,    0,    0,    0,   33,   53,    0,
   53,   53,    0,    0,    0,    0,   53,    0,    0,    0,
    0,   53,   53,    0,    0,    0,    0,   53,   53,   53,
   53,   53,   53,    0,    7,    0,    0,   53,   54,    0,
    0,   53,    0,   53,    0,    0,    0,    0,    0,   54,
    0,    0,    0,   53,    0,    0,    0,   53,    0,   53,
    0,   54,    0,    0,   53,   54,    0,    0,   54,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   54,   54,    0,    0,   53,    0,   54,    0,    0,    0,
    0,   54,   54,    0, 1143,    0,    0,   54,   53,   54,
   54,   54,   54,    0,    0,    0,    0,   54,    0,   53,
    0,   54,    0,   54,    0,    0,    0,    0,    0,    0,
    0,   53,    0,   54,    0,   53,    0,   54,   53,   54,
    0,    0,    0,    0,   54,    0,    0,    0,   54,  907,
   53,   53,   54,    0,    0,  907,   53,    0,    0,    0,
    0,   53,   53,   54,   54,    0,    0,   53,    0,   53,
   53,   53,   53,    0,    0,   54,    0,   53,    0,   54,
    0,   53,   54,   53,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   53,   54,   54,    0,   53,  907,   53,
   54,    0,    0,    0,   53,   54,   54,    0,    0,    0,
    0,   54,    0,   54,   54,   54,   54,    0,    0,    0,
    0,   54,    0,    0,   53,   54,    0,   54,    0,    0,
    0,    0,    0,  372,    0,    0,    0,   54,    0,    0,
    0,   54,    0,   54,    0,    0,  907,    0,   54,    0,
    0,    0,  907,    0,  907,  907,  907,  907,  907,  907,
  907,  907,  907,  907,  907,  907,    0,    0,   54,    0,
    0,  907,  907,    0,  907,  907,  372,    0,    0,  907,
  907,  907,  907,  907,  907,  907,  907,  907,  907,    0,
  907,  907,    0,  907,  907,  907,  907,  907,  907,  907,
  907,  907,  907,  907,  907,  907,    0,  907,  907,  907,
  907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
  907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
  907,  907,  907,  907,    0,  907,    0,  907,    0,  907,
  907,  907,  907,    0,    0,    0,    0,    0,  907,    0,
  372,  907,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  372,  372,  372,  372,  907,    0,    0,  372,  372,
    0,    0,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  907,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,    0,    0,    0,    0,    0,    0,  372,    0,    0,
  372,    0,    0,    0,    0,    0,    0,    0,    0,  372,
    0,    0,  907,    0,    0,    0,    0,    0,  907,  676,
  907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
  907,  907,    0,    0,    0,    0,    0,  907,  907,    0,
  907,  907,    0,    0,    0,  907,  907,  907,  907,  907,
  907,  907,  907,  907,  907,    0,  907,  907,    0,  907,
  907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
  907,  907,    0,  907,  907,  907,  907,  907,  907,  907,
  907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
  907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
  372,    0,    0,  907,    0,  907,  372,    0,  907,    0,
    0,    0,    0,    0,  907,    0,  676,  907,    0,    0,
    0,    0,  676,    0,  676,  676,  676,  676,  676,  676,
  676,  676,  676,  676,  676,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  676,  676,    0,    0,    0,  372,
  676,    0,  676,    0,  676,    0,  676,  676,  676,    0,
    0,    0,    0,    0,  676,  676,  676,  676,    0,    0,
    0,  676,  676,  676,  676,  676,    0,    0,    0,  676,
  676,  676,  676,  676,  676,  676,  676,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  372,    0,    0,
    0,    0,  676,  372,  677,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,    0,  676,    0,
    0,    0,  372,  372,    0,  372,  372,    0,    0,    0,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
    0,  372,  372,    0,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,    0,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,    0,  372,    0,    0,  372,    0,
  372,  372,    0,  372,    0,    0,    0,    0,    0,  372,
    0,  677,  372,    0,    0,    0,    0,  677,    0,  677,
  677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  677,
  677,    0,    0,    0,  372,  677,    0,  677,    0,  677,
    0,  677,  677,  677,    0,    0,    0,    0,    0,  677,
  677,  677,  677,    0,    0,    0,  677,  677,  677,  677,
  677,    0,    0,    0,  677,  677,  677,  677,  677,  677,
  677,  677,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  372,    0,    0,    0,    0,  677,  372,  678,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,    0,  677,    0,    0,    0,  372,  372,    0,
  372,  372,    0,    0,    0,    0,  372,  372,  372,  372,
  372,  372,  372,  372,  372,    0,  372,  372,    0,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,    0,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,    0,
  578,    0,    0,  372,    0,  372,  578,    0,  372,    0,
    0,    0,    0,    0,  372,    0,  678,  372,    0,    0,
    0,    0,  678,    0,  678,  678,  678,  678,  678,  678,
  678,  678,  678,  678,  678,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  678,  678,    0,    0,    0,  578,
  678,    0,  678,    0,  678,    0,  678,  678,  678,    0,
    0,    0,    0,    0,  678,  678,  678,  678,    0,    0,
    0,  678,  678,  678,  678,  678,    0,    0,    0,  678,
  678,  678,  678,  678,  678,  678,  678,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  578,    0,    0,
    0,    0,  678,  578,  681,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,  578,    0,    0,  678,    0,
    0,    0,    0,  578,    0,  578,  578,    0,    0,    0,
  578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
    0,  578,  578,    0,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,  578,  578,    0,  578,  578,
  578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,    0,  574,    0,    0,    0,    0,
  578,  574,    0,    0,    0,    0,    0,    0,    0,  578,
    0,  681,  578,    0,    0,    0,    0,  681,    0,  681,
  681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  681,
  681,    0,    0,    0,  574,  681,    0,  681,    0,  681,
    0,  681,  681,  681,    0,    0,    0,    0,    0,  681,
  681,  681,  681,    0,    0,    0,  681,  681,  681,  681,
  681,    0,    0,    0,    0,    0,  681,  681,  681,  681,
  681,  681,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  574,    0,    0,    0,    0,  681,  574,  682,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,    0,    0,  681,    0,    0,    0,    0,  574,    0,
  574,  574,    0,    0,    0,  574,  574,    0,  574,  574,
  574,  574,  574,  574,  574,    0,  574,  574,    0,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,    0,  574,  574,  574,  574,  574,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,  574,    0,
  582,    0,    0,    0,    0,  574,  582,    0,  574,    0,
    0,    0,    0,    0,  574,    0,  682,  574,    0,    0,
    0,    0,  682,    0,  682,  682,  682,  682,  682,  682,
  682,  682,  682,  682,  682,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  682,  682,    0,    0,    0,  582,
  682,    0,  682,    0,  682,    0,  682,  682,  682,    0,
    0,    0,    0,    0,  682,  682,  682,  682,    0,    0,
    0,  682,  682,  682,  682,  682,    0,    0,    0,    0,
    0,  682,  682,  682,  682,  682,  682,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  582,    0,    0,
    0,    0,  682,  582,  683,  582,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,    0,    0,  682,    0,
    0,    0,    0,  582,    0,  582,  582,    0,    0,    0,
    0,  582,    0,  582,  582,  582,  582,  582,  582,  582,
    0,  582,  582,    0,  582,  582,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,  582,    0,  582,  582,
  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
  582,  582,  582,  582,    0,  372,    0,    0,    0,    0,
  582,  372,    0,  582,    0,    0,    0,    0,    0,  582,
    0,  683,  582,    0,    0,    0,    0,  683,    0,  683,
  683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  683,
  683,    0,    0,    0,  372,  683,    0,  683,    0,  683,
    0,  683,  683,  683,    0,    0,    0,    0,    0,  683,
  683,  683,  683,    0,    0,    0,  683,  683,  683,  683,
  683,    0,    0,    0,    0,    0,  683,  683,  683,  683,
  683,  683,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  372,    0,    0,    0,    0,  683,  372,  684,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,    0,    0,  683,    0,    0,    0,    0,  372,    0,
  372,  372,    0,    0,    0,    0,  372,    0,  372,  372,
  372,  372,  372,  372,  372,    0,  372,  372,    0,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,    0,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,    0,
  497,    0,    0,    0,    0,  372,  497,    0,  372,    0,
    0,    0,    0,    0,  372,    0,  684,  372,    0,    0,
    0,    0,  684,    0,  684,  684,  684,  684,  684,  684,
  684,  684,  684,  684,  684,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  684,  684,    0,    0,    0,  497,
  684,    0,  684,    0,  684,    0,  684,  684,  684,    0,
    0,    0,    0,    0,  684,  684,  684,  684,    0,    0,
    0,  684,  684,  684,  684,  684,    0,    0,    0,    0,
    0,  684,  684,  684,  684,  684,  684,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,    0,    0,
    0,    0,  684,  497,  707,  497,  497,  497,  497,  497,
  497,  497,  497,  497,  497,  497,    0,    0,  684,    0,
    0,    0,    0,  497,    0,  497,  497,    0,    0,    0,
    0,  497,    0,  497,  497,  497,  497,  497,  497,  497,
    0,  497,  497,    0,  497,  497,  497,  497,  497,  497,
  497,  497,  497,  497,  497,  497,  497,    0,  497,  497,
  497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
  497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
  497,  497,  497,  497,    0,  609,    0,    0,    0,    0,
  497,  609,    0,  497,    0,    0,    0,    0,    0,  497,
    0,  707,  497,    0,    0,    0,    0,  707,    0,  707,
  707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  707,
  707,    0,    0,    0,  609,  707,    0,  707,    0,  707,
    0,  707,  707,  707,    0,    0,    0,    0,    0,    0,
    0,    0,  707,    0,    0,    0,    0,  372,    0,  707,
  707,    0,    0,  372,    0,    0,    0,  907,    0,    0,
  707,  707,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  609,    0,    0,    0,    0,  707,  609,    0,
  609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
  609,    0,    0,  707,    0,    0,  372,    0,    0,    0,
  609,  609,    0,    0,    0,    0,  609,    0,  609,    0,
  609,    0,  609,  609,  609,    0,  609,  609,  907,  609,
  609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
  609,  609,    0,    0,    0,  609,  609,  609,  609,  609,
  609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
  609,  609,  609,  609,  609,  609,  609,  685,  609,    0,
    0,    0,    0,  372,    0,    0,    0,    0,    0,  372,
  372,    0,    0,    0,  609,    0,    0,  609,  372,  372,
  372,  372,  372,  372,  372,  907,  372,    0,  372,  372,
    0,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,    0,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
  372,    0,  437,    0,    0,  372,    0,  372,  437,    0,
  372,    0,    0,    0,    0,    0,  372,    0,    0,  372,
    0,    0,    0,    0,  685,    0,    0,    0,    0,    0,
  685,    0,  685,  685,  685,  685,  685,  685,  685,  685,
  685,  685,  685,    0,    0,    0,    0,    0,    0,    0,
    0,  437,  685,  685,    0,    0,    0,    0,  685,    0,
  685,    0,  685,    0,  685,  685,  685,    0,    0,    0,
    0,    0,  685,  685,  685,  685,    0,    0,    0,  685,
  685,  685,  685,  685,    0,    0,    0,    0,    0,  685,
  685,  685,  685,  685,  685,    0,    0,    0,    0,    0,
    0,    0,  631,    0,    0,    0,    0,    0,  631,    0,
  685,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  362,  437,  685,    0,    0,    0,
    0,    0,    0,  437,  362,  437,  437,  437,  437,  437,
    0,  437,    0,  437,  437,    0,  437,  437,  437,  437,
  437,  631,  437,  437,  437,  437,  437,  437,  437,    0,
  437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
  437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
  437,  437,  437,  437,  437,  437,    0,  372,    0,    0,
  362,    0,  437,  372,    0,  437,    0,    0,    0,  631,
    0,  437,    0,    0,  437,  631,    0,  631,  631,  631,
  631,  631,  631,  631,  631,  631,  631,  631,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  631,  631,    0,
    0,    0,    0,  631,    0,  631,  372,  631,    0,  631,
  631,  631,    0,  631,  631,    0,    0,  631,  631,  631,
  631,  631,  631,  631,  631,  631,  631,  631,  631,    0,
    0,    0,  631,  631,  631,  631,  631,  631,  631,  631,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  631,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  631,    0,    0,  631,    0,    0,    0,    0,    0,
  372,    0,    0,    0,    0,    0,    0,    0,  372,    0,
    0,  372,    0,  372,  372,    0,    0,    0,  372,  372,
    0,    0,  372,  372,  372,  372,  372,  372,  372,  372,
  372,  372,  372,  372,    0,  372,  372,  372,  372,  372,
  372,  372,  372,  372,  372,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  372,
  372,    0,    0,   63,    0,    0,    0,  372,    0,    0,
  372,   64,   24,   65,   25,    0,  372,   26,   66,  372,
   67,   68,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,   71,   35,    0,    0,    0,    0,    0,   72,
    0,   73,   37,   74,   75,   76,   77,    0,    0,   39,
    0,    0,    0,   78,   79,   80,   81,   82,   83,   84,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   87,    0,   43,    0,   44,   88,
    0,    0,   45,    0,   89,   90,   91,   92,   93,   94,
   46,   47,   95,   96,   48,   97,    0,    0,   98,    0,
    0,   99,  100,  101,  362,    0,  102,  103,    0,    0,
  362,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  107,  108,    0,    0,  109,  110,
    0,    0,    0,  111,    0,    0,    0,  112,    0,    0,
    0,    0,  113,  114,  115,  116,  117,    0,    0,    0,
  118,    0,  119,  362,    0,    0,    0,    0,    0,    0,
    0,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  122,  123,  124,  125,    0,    0,    0,    0,    0,  654,
    0,  362,  226,    0,    0,  654,    0,  362,    0,  362,
  362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
    0,    0,    0,    0,    0,    0,  362,  437,    0,  362,
  362,    0,    0,    0,    0,  362,  362,  362,    0,  362,
  437,  362,  362,  362,    0,  362,  362,    0,  654,  362,
  362,  362,  362,    0,    0,    0,  362,  362,  362,  362,
  362,    0,  437,  437,  362,  362,  362,  362,  362,  362,
  362,  362,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  437,  362,    0,    0,
    0,    0,  362,    0,  437,    0,  654,  437,    0,    0,
    0,    0,  654,  362,  654,  654,  654,  654,  654,  654,
  654,  654,  654,  654,  654,    0,    0,    0,    0,    0,
  658,    0,  438,    0,  654,  654,  658,    0,    0,    0,
  654,    0,  654,  438,  654,  438,  654,  654,  654,    0,
  654,  654,    0,    0,  654,  654,  654,  654,    0,    0,
    0,  654,  654,  654,  654,  654,    0,  438,  438,  654,
  654,  654,  654,  654,  654,  654,  654,    0,    0,  658,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  438,  654,    0,    0,    0,    0,    0,    0,  438,
    0,    0,  438,    0,    0,    0,    0,    0,  654,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  657,    0,  658,    0,    0,
    0,  657,    0,  658,    0,  658,  658,  658,  658,  658,
  658,  658,  658,  658,  658,  658,    0,    0,    0,    0,
    0,    0,    0,  441,    0,  658,  658,    0,    0,    0,
    0,  658,    0,  658,  441,  658,  441,  658,  658,  658,
    0,  658,  658,    0,  657,  658,  658,  658,  658,    0,
    0,    0,  658,  658,  658,  658,  658,    0,  441,  441,
  658,  658,  658,  658,  658,  658,  658,  658,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  441,  658,    0,    0,    0,    0,    0,    0,
  441,    0,  657,  441,    0,    0,    0,    0,  657,  658,
  657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
  657,    0,    0,    0,    0,    0,  362,    0,  451,    0,
  657,  657,  362,    0,    0,    0,  657,    0,  657,  451,
  657,  451,  657,  657,  657,    0,  657,  657,    0,    0,
  657,  657,  657,  657,    0,    0,    0,  657,  657,  657,
  657,  657,    0,  451,  451,  657,  657,  657,  657,  657,
  657,  657,  657,    0,    0,  362,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  451,  657,    0,
    0,    0,    0,    0,    0,  451,    0,    0,  451,    0,
    0,    0,    0,    0,  657,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  634,    0,  362,    0,    0,    0,  634,    0,  362,
    0,  362,  362,  362,  362,  362,  362,  362,  362,  362,
  362,  362,    0,    0,    0,    0,    0,    0,  362,    0,
    0,  362,  362,    0,    0,    0,    0,  362,  362,  362,
    0,  362,    0,  362,  362,  362,    0,  362,  362,    0,
  634,  362,  362,  362,  362,    0,    0,    0,  362,  362,
  362,  362,  362,    0,    0,    0,  362,  362,  362,  362,
  362,  362,  362,  362,    0,    0,    0,    0,    0,    0,
  635,    0,    0,    0,    0,    0,  635,    0,    0,  362,
    0,    0,    0,    0,  362,    0,    0,    0,  634,    0,
    0,    0,    0,    0,  634,  362,  634,  634,  634,  634,
  634,  634,  634,  634,  634,  634,  634,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  634,  634,    0,  635,
    0,    0,  634,    0,  634,    0,  634,    0,  634,  634,
  634,    0,  634,  634,    0,    0,  634,  634,  634,  634,
  634,  634,  634,  634,  634,  634,  634,  634,    0,    0,
    0,  634,  634,  634,  634,  634,  634,  634,  634,    0,
    0,    0,    0,    0,    0,  637,    0,  635,    0,    0,
    0,  637,    0,  635,  634,  635,  635,  635,  635,  635,
  635,  635,  635,  635,  635,  635,    0,    0,    0,    0,
  634,    0,    0,    0,    0,  635,  635,    0,    0,    0,
    0,  635,    0,  635,    0,  635,    0,  635,  635,  635,
    0,  635,  635,    0,  637,  635,  635,  635,  635,  635,
  635,  635,  635,  635,  635,  635,  635,    0,    0,    0,
  635,  635,  635,  635,  635,  635,  635,  635,    0,    0,
    0,    0,    0,    0,  636,    0,    0,    0,    0,    0,
  636,    0,    0,  635,    0,    0,    0,    0,    0,    0,
    0,    0,  637,    0,    0,    0,    0,    0,  637,  635,
  637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
  637,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  637,  637,    0,  636,    0,    0,  637,    0,  637,    0,
  637,    0,  637,  637,  637,    0,  637,  637,    0,    0,
  637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
  637,  637,    0,    0,    0,  637,  637,  637,  637,  637,
  637,  637,  637,    0,    0,    0,    0,    0,    0,    0,
    0,  636,    0,    0,    0,    0,    0,  636,  637,  636,
  636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
    0,    0,    0,    0,  637,    0,    0,    0,    0,  636,
  636,    0,    0,    0,    0,  636,    0,  636,    0,  636,
    0,  636,  636,  636,    0,  636,  636,    0,    0,  636,
  636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
  636,    0,    0,    0,  636,  636,  636,  636,  636,  636,
  636,  636,    0,    0,  595,    0,  690,    0,    0,    0,
    0,    0,   64,   24,    0,   25,    0,  636,   26,  290,
    0,    0,    0,   27,   28,   29,   30,   31,   32,   33,
   34,   69,   70,  636,   35,    0,    0,    0,    0,    0,
   72,    0,    0,   37,    0,    0,    0,    0,    0,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   40,    0,   85,   86,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   44,
   88,    0,    0,   45,    0,    0,   90,    0,   92,    0,
   94,   46,   47,  291,    0,   48,    0,    0,    0,    0,
    0,  898,    0,  690,    0,    0,    0,  898,    0,  690,
    0,  690,  690,  690,  690,  690,  690,  690,  690,  690,
  690,  690,  104,  105,  106,  292,  596,    0,    0,  109,
  110,  690,  690,    0,    0,    0,    0,  690,  294,  690,
    0,  690,    0,  690,  690,  690,    0,    0,    0,    0,
  898,    0,    0,  690,  690,    0,    0,    0,  690,  690,
  690,  690,  690,    0,    0,    0,    0,    0,    0,    0,
  690,  690,  690,  690,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  690,
    0,  122,  597,    0,    0,    0,    0,    0,  898,    0,
    0,    0,  598,  599,  898,  690,  898,  898,  898,  898,
  898,  898,  898,  898,  898,  898,  898,    0,    0,    0,
    0,    0,  641,  898,    0,    0,  898,  898,  641,   53,
    0,    0,  898,    0,  898,    0,  898,    0,  898,  898,
  898,    0,  898,  898,    0,    0,  898,  898,  898,  898,
    0,    0,    0,  898,  898,  898,  898,  898,    0,   53,
    0,  898,  898,  898,  898,  898,  898,  898,  898,    0,
    0,  641,   53,    0,    0,    0,    0,   53,    0,    0,
    0,    0,    0,   53,  898,    0,    0,    0,   53,  898,
   53,   53,   53,   53,    0,    0,    0,    0,   53,    0,
  898, 1035,   53,    0,    0,    0,    0, 1035,    0,    0,
    0,    0,    0,    0,   53,    0,    0,    0,   53,  641,
   53,    0,    0,    0,    0,  641,    0,  641,  641,  641,
  641,  641,  641,  641,  641,  641,  641,  641,    0,    0,
    0,    0,    0,    0,    0,   53,    0,  641,  641,    0,
 1035,   53,   53,  641,    0,  641,    0,  641,    0,  641,
  641,  641,    0,  641,  641,    0,    0,  641,  641,  641,
  641,    0,    0,    0,  641,  641,  641,  641,  641,    0,
    0,    0,  641,  641,  641,  641,  641,  641,  641,  641,
    0,    0,    0,    0,    0,    0,  642,    0, 1035,    0,
    0,    0,  642,    0, 1035,  641, 1035, 1035, 1035, 1035,
 1035, 1035, 1035, 1035, 1035, 1035, 1035,    0,    0,    0,
    0,  641,    0,    0,    0,    0, 1035, 1035,    0,    0,
    0,    0, 1035,    0, 1035,    0, 1035,    0, 1035, 1035,
 1035,    0, 1035, 1035,    0,  642, 1035, 1035, 1035, 1035,
    0,    0,    0, 1035, 1035, 1035, 1035, 1035,    0,    0,
    0, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,    0,
    0,    0,    0,    0,    0,  643,    0,    0,    0,    0,
    0,  643,    0,    0, 1035,    0,    0,    0,    0,    0,
    0,    0,    0,  642,    0,    0,    0,    0,    0,  642,
 1035,  642,  642,  642,  642,  642,  642,  642,  642,  642,
  642,  642,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  642,  642,    0,  643,    0,    0,  642,    0,  642,
    0,  642,    0,  642,  642,  642,    0,  642,  642,    0,
    0,  642,  642,  642,  642,    0,    0,    0,  642,  642,
  642,  642,  642,    0,  691,    0,  642,  642,  642,  642,
  642,  642,  642,  642,    0,    0,    0,    0,    0,    0,
    0,    0,  643,    0,    0,    0,    0,    0,  643,  642,
  643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
  643,    0,    0,    0,    0,  642,    0,    0,    0,    0,
  643,  643,    0,    0,    0,    0,  643,    0,  643,    0,
  643,    0,  643,  643,  643,    0,  643,  643,    0,  692,
  643,  643,  643,  643,    0,    0,    0,  643,  643,  643,
  643,  643,    0,    0,    0,  643,  643,  643,  643,  643,
  643,  643,  643,    0,    0,    0,    0,    0,    0,    0,
    0,  691,    0,    0,    0,    0,    0,  691,  643,  691,
  691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
    0,    0,    0,    0,  643,    0,    0,    0,    0,  691,
  691,    0,    0,    0,  695,  691,    0,  691,    0,  691,
    0,  691,  691,  691,    0,    0,    0,    0,    0,    0,
    0,  691,  691,    0,    0,    0,  691,  691,  691,  691,
  691,    0,    0,    0,    0,    0,  692,    0,  691,  691,
  691,  691,  692,    0,  692,  692,  692,  692,  692,  692,
  692,  692,  692,  692,  692,    0,    0,  691,    0,    0,
    0,    0,    0,    0,  692,  692,    0,    0,    0,  696,
  692,    0,  692,  691,  692,    0,  692,  692,  692,    0,
    0,    0,    0,    0,    0,    0,  692,  692,    0,    0,
    0,  692,  692,  692,  692,  692,    0,    0,    0,    0,
    0,  695,    0,  692,  692,  692,  692,  695,    0,  695,
  695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
    0,    0,  692,    0,    0,    0,    0,    0,    0,  695,
  695,    0,    0,    0,  698,  695,    0,  695,  692,  695,
    0,  695,  695,  695,    0,    0,    0,    0,    0,    0,
    0,  695,  695,    0,    0,    0,  695,  695,  695,  695,
  695,    0,    0,    0,    0,    0,  696,    0,    0,    0,
  695,  695,  696,    0,  696,  696,  696,  696,  696,  696,
  696,  696,  696,  696,  696,    0,    0,  695,    0,    0,
    0,    0,    0,    0,  696,  696,    0,    0,    0,  699,
  696,    0,  696,  695,  696,    0,  696,  696,  696,    0,
    0,    0,    0,    0,    0,    0,  696,  696,    0,    0,
    0,  696,  696,  696,  696,  696,    0,    0,    0,    0,
    0,  698,    0,    0,    0,  696,  696,  698,    0,  698,
  698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
    0,    0,  696,    0,    0,    0,    0,    0,    0,  698,
  698,    0,    0,    0,  701,  698,    0,  698,  696,  698,
    0,  698,  698,  698,    0,    0,    0,    0,    0,    0,
    0,    0,  698,    0,    0,    0,  698,  698,  698,  698,
  698,    0,    0,    0,    0,    0,  699,    0,    0,    0,
  698,  698,  699,    0,  699,  699,  699,  699,  699,  699,
  699,  699,  699,  699,  699,    0,    0,  698,    0,    0,
    0,    0,    0,    0,  699,  699,    0,    0,    0,  702,
  699,    0,  699,  698,  699,    0,  699,  699,  699,    0,
    0,    0,    0,    0,    0,    0,    0,  699,    0,    0,
    0,  699,  699,  699,  699,  699,    0,    0,    0,    0,
    0,  701,    0,    0,    0,  699,  699,  701,    0,  701,
  701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
    0,    0,  699,    0,    0,    0,    0,    0,    0,  701,
  701,    0,    0,    0,  704,  701,    0,  701,  699,  701,
    0,  701,  701,  701,    0,    0,    0,    0,    0,    0,
    0,    0,  701,    0,    0,    0,    0,  701,  701,  701,
  701,    0,    0,    0,    0,    0,  702,    0,    0,    0,
  701,  701,  702,    0,  702,  702,  702,  702,  702,  702,
  702,  702,  702,  702,  702,    0,    0,  701,    0,    0,
    0,    0,    0,    0,  702,  702,    0,    0,    0,  705,
  702,    0,  702,  701,  702,    0,  702,  702,  702,    0,
    0,    0,    0,    0,    0,    0,    0,  702,    0,    0,
    0,    0,  702,  702,  702,  702,    0,    0,    0,    0,
    0,  704,    0,    0,    0,  702,  702,  704,    0,  704,
  704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
    0,    0,  702,    0,    0,    0,    0,    0,    0,  704,
  704,    0,    0,    0,  708,  704,    0,  704,  702,  704,
    0,  704,  704,  704,    0,    0,    0,    0,    0,    0,
    0,    0,  704,    0,    0,    0,    0,  704,    0,  704,
  704,    0,    0,    0,    0,    0,  705,    0,    0,    0,
  704,  704,  705,    0,  705,  705,  705,  705,  705,  705,
  705,  705,  705,  705,  705,    0,    0,  704,    0,    0,
    0,    0,    0,    0,  705,  705,    0,    0,    0,  710,
  705,    0,  705,  704,  705,    0,  705,  705,  705,    0,
    0,    0,    0,    0,    0,    0,    0,  705,    0,    0,
    0,    0,  705,    0,  705,  705,    0,    0,    0,    0,
    0,  708,    0,    0,    0,  705,  705,  708,    0,  708,
  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
    0,    0,  705,    0,    0,    0,    0,    0,    0,  708,
  708,    0,    0,    0,  711,  708,    0,  708,  705,  708,
    0,  708,  708,  708,    0,    0,    0,    0,    0,    0,
    0,    0,  708,    0,    0,    0,    0,    0,    0,  708,
  708,    0,    0,    0,    0,    0,  710,    0,    0,    0,
  708,  708,  710,    0,  710,  710,  710,  710,  710,  710,
  710,  710,  710,  710,  710,    0,    0,  708,    0,    0,
    0,    0,    0,    0,  710,  710,    0,    0,    0,  713,
  710,    0,  710,  708,  710,    0,  710,  710,  710,    0,
    0,    0,    0,    0,    0,    0,    0,  710,    0,    0,
    0,    0,    0,    0,    0,  710,    0,    0,    0,    0,
    0,  711,    0,    0,    0,  710,  710,  711,  714,  711,
  711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
    0,    0,  710,    0,    0,    0,    0,    0,    0,  711,
  711,    0,    0,    0,    0,  711,    0,  711,  710,  711,
    0,  711,  711,  711,    0,    0,    0,    0,    0,    0,
    0,    0,  711,    0,    0,    0,    0,    0,    0,    0,
  711,    0,    0,    0,    0,    0,  713,    0,    0,    0,
  711,  711,  713,  716,  713,  713,  713,  713,  713,  713,
  713,  713,  713,  713,  713,    0,    0,  711,    0,    0,
    0,    0,    0,    0,  713,  713,    0,    0,    0,    0,
  713,    0,  713,  711,  713,  714,  713,  713,  713,    0,
    0,  714,  717,  714,  714,  714,  714,  714,  714,  714,
  714,  714,  714,  714,    0,  713,    0,    0,    0,    0,
    0,    0,    0,  714,  714,  713,  713,    0,    0,  714,
    0,  714,    0,  714,    0,  714,  714,  714,    0,    0,
    0,    0,  713,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  714,    0,    0,    0,  713,    0,
  716,    0,    0,    0,  714,  714,  716,    0,  716,  716,
  716,  716,  716,  716,  716,  716,  716,  716,  716,    0,
    0,  714,    0,    0,    0,    0,    0,    0,  716,  716,
    0,    0,    0,    0,  716,    0,  716,  714,  716,  717,
  716,  716,  716,    0,    0,  717,    0,  717,  717,  717,
  717,  717,  717,  717,  717,  717,  717,  717,    0,  716,
    0,    0,    0,    0,    0,    0,    0,  717,  717,    0,
  716,    0,    0,  717,    0,  717,    0,  717,    0,  717,
  717,  717,    0,    0,    0,    0,  716,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  717,    0,
    0,    0,  716,    0,    0,    0,    0,    0,    0,  717,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  717,    0,    0,  669,    0,
    0,    0,    0,    0,    0,    0,   64,   24,   65,   25,
 1306,  717,   26,   66,    0,   67,   68,   27,   28,   29,
   30,   31,   32,   33,   34,   69,   70,   71,   35,    0,
    0,    0,    0,    0,   72,    0,   73,   37,   74,   75,
   76,   77,    0,    0,   39,    0,    0,    0,   78,   79,
   80,   81,   82,   83,   84,   40,    0,   85,   86,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
    0,   43,    0,   44,   88,    0,    0,   45,    0,   89,
   90,   91,   92,   93,   94,   46,   47,   95,   96,   48,
   97,    0,    0,   98,    0,    0,   99,  100,  101,    0,
    0,  102,  103,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  104,  105,  106,  107,
  108,    0,    0,  109,  110,    0,    0,    0,  111,    0,
    0,    0,  112,    0,    0,    0,    0,  113,  114,  115,
  116,  117,    0,    0,    0,  118,    0,  119,    0,    0,
    0,    0,    0,   63,    0,    0,  120,  121,    0,    0,
    0,   64,   24,   65,   25,    0,    0,   26,   66,    0,
   67,   68,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,   71,   35,    0,  122,  123,  124,  125,   72,
 1307,   73,   37,   74,   75,   76,   77,    0,    0,   39,
    0,    0,    0,   78,   79,   80,   81,   82,   83,   84,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   87,    0,   43,    0,   44,   88,
    0,    0,   45,    0,   89,   90,   91,   92,   93,   94,
   46,   47,   95,   96,   48,   97,    0,    0,   98,    0,
    0,   99,  100,  101,    0,    0,  102,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  107,  108,    0,    0,  109,  110,
    0,    0,    0,  111,    0,    0,    0,  112,    0,    0,
    0,    0,  113,  114,  115,  116,  117,    0,    0,    0,
  118,    0,  119,    0,    0,    0,    0,    0,  304,    0,
    0,  120,  121,    0,    0,    0,   64,   24,   65,   25,
    0,    0,   26,   66,    0,   67,   68,   27,   28,   29,
   30,   31,   32,   33,   34,   69,   70,   71,   35,    0,
  122,  123,  124,  125,   72,    0,   73,   37,   74,   75,
   76,   77,    0,    0,   39,    0,    0,    0,   78,   79,
   80,   81,   82,   83,   84,   40,    0,   85,   86,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
    0,   43,    0,   44,   88,    0,    0,   45,    0,   89,
   90,   91,   92,   93,   94,   46,   47,   95,   96,   48,
   97,    0,    0,   98,    0,    0,   99,  100,  101,    0,
    0,  102,  103,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  104,  105,  106,  107,
  108,    0,    0,  109,  110,    0,    0,    0,  111,    0,
    0,    0,  112,    0,    0,    0,    0,  113,  114,  115,
  116,  117,    0,    0,    0,  118,    0,  119,    0,    0,
    0,    0,    0,  669,    0,    0,  120,  121,    0,    0,
    0,   64,   24,   65,   25,    0,    0,   26,   66,    0,
   67,   68,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,   71,   35,    0,  122,  123,  124,  125,   72,
    0,   73,   37,   74,   75,   76,   77,    0,    0,   39,
    0,    0,    0,   78,   79,   80,   81,   82,   83,   84,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   87,    0,   43,    0,   44,   88,
    0,    0,   45,    0,   89,   90,   91,   92,   93,   94,
   46,   47,   95,   96,   48,   97,    0,    0,   98,    0,
    0,   99,  100,  101,    0,    0,  102,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  107,  108,    0,    0,  109,  110,
    0,    0,    0,  111,    0,    0,    0,  112,    0,    0,
    0,    0,  113,  114,  115,  116,  117,    0,    0,    0,
  118,    0,  119,    0,    0,    0,    0,    0, 1317,    0,
    0,  120,  121,    0,    0,    0,   64,   24,   65,   25,
    0,    0,   26,   66,    0,   67,   68,   27,   28,   29,
   30,   31,   32,   33,   34,   69,   70,   71,   35,    0,
  122,  123,  124,  125,   72,    0,   73,   37,   74,   75,
   76,   77,    0,    0,   39,    0,    0,    0,   78,   79,
   80,   81,   82,   83,   84,   40,    0,   85,   86,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
    0,   43,    0,   44,   88,    0,    0,   45,    0,   89,
   90,   91,   92,   93,   94,   46,   47,   95,   96,   48,
   97,    0,    0,   98,    0,    0,   99,  100,  101,    0,
    0,  102,  103,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  104,  105,  106,  107,
  108,    0,    0,  109,  110,    0,    0,    0,  111,    0,
    0,    0,  112,    0,    0,    0,    0,  113,  114,  115,
  116,  117,    0,    0,    0,  118,    0,  119,    0,    0,
    0,    0,    0, 1139,    0,    0,  120,  121,    0,    0,
    0, 1139, 1139, 1139, 1139,    0,    0, 1139, 1139,    0,
 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
 1139, 1139, 1139, 1139,    0,  122,  123,  124,  125, 1139,
    0, 1139, 1139, 1139, 1139, 1139, 1139,    0,    0, 1139,
    0,    0,    0, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
 1139,    0, 1139, 1139, 1139,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1139,    0, 1139,    0, 1139, 1139,
    0,    0, 1139,    0, 1139, 1139, 1139, 1139, 1139, 1139,
 1139, 1139, 1139, 1139, 1139, 1139,    0,    0, 1139,    0,
    0, 1139, 1139, 1139,    0,    0, 1139, 1139,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1139, 1139, 1139, 1139, 1139,    0,    0, 1139, 1139,
    0,    0,    0, 1139,    0,    0,    0, 1139,    0,    0,
    0,    0, 1139, 1139, 1139, 1139, 1139,    0,    0,  714,
 1139,    0, 1139,    0,    0,    0,    0,   64,   24,    0,
   25, 1139, 1139,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
 1139, 1139, 1139, 1139,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,  715,    0,    0,    0,    0,    0,    0,  716,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,  717,
    0,    0,  102,  103,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  107,  108,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,  718,    0,    0,  114,
  115,  116,  117,    0,    0,    0,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  123,  124,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,  101,    0,    0,  102,  103,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  107,  901,    0,    0,
  109,  110,    0,    0,    0,  902, 1220,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,    0,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  903,  124,  125,    0,   39,  904,    0,
    0,    0,    0,  905,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,  101,    0,    0,  102,  103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  107,  901,    0,    0,  109,  110,    0,    0,
    0,  902,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  917,  118,    0,
  119,    0,    0,    0,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  903,
  124,  125,    0,   39,  904,    0,    0,    0,    0,  905,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,  101,    0,    0,
  102,  103,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  107,  340,
    0,    0,  109,  110,    0,    0,    0,  616,  918,    0,
    0,  294,    0,    0,    0,    0,    0,  114,  115,  116,
  117,    0,    0, 1131,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  341,  124,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,  715,    0,    0,    0,
    0,    0,    0,  716,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,  717,    0,    0,  102,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  107,  108,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  917,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  123,  124,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88, 1134,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,  101,
    0,    0,  102,  103,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  107,  340,    0,    0,  109,  110,    0,    0,    0,  616,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  876,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  341,  124,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
   98,    0,    0,    0,    0,  101,    0,    0,  102,  103,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  107,  340,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,  917,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  341,  124,  125,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,  101,    0,    0,  102,  103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  107,  340,    0,    0,  109,  110,    0,    0,
    0,  616,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  397,  118,    0,
  119,    0,    0,  398,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  341,
  124,  125,    0,   39,    0,    0,  399,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  400,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  401,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,  402,    0,    0,    0,  114,  115,  116,
  117, 1083,    0,  408,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,  101,    0,    0,  102,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  107,  340,    0,    0,  109,  110,
    0,    0,    0,    0, 1084,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0, 1152,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  341,  124,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,  101,
    0,    0,  102,  103,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  107,  340,    0,    0,  109,  110,    0,    0,    0,    0,
 1153,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  356,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  341,  124,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,  101,    0,    0,  102,  103,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  107,  340,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,  361,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  341,  124,  125,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,  101,    0,    0,  102,  103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  107,  340,    0,    0,  109,  110,    0,    0,
    0,    0,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  397,  118,    0,
  119,    0,    0,  398,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  341,
  124,  125,    0,   39,    0,    0,  399,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  400,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  401,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,  402,    0,    0,    0,  114,  115,  116,
  117,    0,    0,  408,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,  101,    0,    0,  102,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  107,  340,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  712,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  341,  124,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,  101,
    0,    0,  102,  103,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  107,  108,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0, 1268,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  123,  124,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,  101,    0,    0,  102,  103,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  107,  108,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,   86,  118,    0,  119,    0,    0,    0,    0,   86,
   86,    0,   86,  120,  121,   86,   86,    0,    0,    0,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
    0,   86,    0,    0,    0,    0,    0,   86,    0,    0,
   86,    0,  122, 1269,  124,  125,    0,   86,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   86,    0,
   86,   86,   86,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   86,    0,   86,   86,    0,    0,
   86,    0,    0,   86,    0,   86,    0,   86,   86,   86,
   86,    0,   86,    0,    0,    0,    0,    0,    0,    0,
    0,   86,    0,    0,   86,   86,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
   86,   86,   86,   86,    0,    0,   86,   86,    0,    0,
    0,    0,    0,    0,    0,   86,    0,    0,    0,    0,
    0,   86,   86,   86,   86,    0,    0,  397,   86,    0,
   86,    0,    0,  398,    0,   64,   24,    0,   25,   86,
   86,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,   86,   86,
   86,   86,    0,   39,    0,    0,  399,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  401,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,  402,    0,    0,    0,  114,  115,  116,
  117,    0,    0,  397,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  292,  401,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,  402,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  412,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  295,    0,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  292,  401,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  414,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  295,    0,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  292,  401,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,  416,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  295,    0,  125,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  292,  401,    0,    0,  109,  110,    0,    0,
    0,    0,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  418,  118,    0,
  119,    0,    0,    0,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  295,
    0,  125,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  401,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,    0,    0,    0,    0,  114,  115,  116,
  117,    0,    0,  420,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  292,  401,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  422,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  295,    0,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  292,  401,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  424,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  295,    0,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  292,  401,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,  426,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  295,    0,  125,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  292,  401,    0,    0,  109,  110,    0,    0,
    0,    0,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  742,  118,    0,
  119,    0,    0,    0,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  295,
    0,  125,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  401,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,    0,    0,    0,    0,  114,  115,  116,
  117,    0,    0,  744,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  292,  401,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  746,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  295,    0,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  292,  401,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  748,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  295,    0,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  292,  401,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,  766,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  295,    0,  125,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  292,  401,    0,    0,  109,  110,    0,    0,
    0,    0,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  768,  118,    0,
  119,    0,    0,    0,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  295,
    0,  125,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  401,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,    0,    0,    0,    0,  114,  115,  116,
  117,    0,    0,  770,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  292,  771,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  773,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  295,    0,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  292,  771,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  775,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  295,    0,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  292,  771,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,  777,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  295,    0,  125,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  292,  771,    0,    0,  109,  110,    0,    0,
    0,    0,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  779,  118,    0,
  119,    0,    0,    0,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  295,
    0,  125,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  771,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,    0,    0,    0,    0,  114,  115,  116,
  117,    0,    0,  781,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  292,  771,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  783,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  295,    0,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  292,  771,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  785,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  295,    0,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  292,  771,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,  787,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  295,    0,  125,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  292,  771,    0,    0,  109,  110,    0,    0,
    0,    0,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  789,  118,    0,
  119,    0,    0,    0,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  295,
    0,  125,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  771,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,    0,    0,    0,    0,  114,  115,  116,
  117,    0,    0,  791,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  292,  771,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  793,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  295,    0,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  292,  771,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  795,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  295,    0,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  292,  771,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,  114,  115,  116,  117,    0,
    0,  797,  118,    0,  119,    0,    0,    0,    0,   64,
   24,    0,   25,  120,  121,   26,  290,    0,    0,    0,
   27,   28,   29,   30,   31,   32,   33,   34,   69,   70,
    0,   35,    0,    0,    0,    0,    0,   72,    0,    0,
   37,    0,  122,  295,    0,  125,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
   85,   86,   41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   44,   88,    0,    0,
   45,    0,    0,   90,    0,   92,    0,   94,   46,   47,
  291,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
  105,  106,  292,  771,    0,    0,  109,  110,    0,    0,
    0,    0,    0,    0,    0,  294,    0,    0,    0,    0,
    0,  114,  115,  116,  117,    0,    0,  799,  118,    0,
  119,    0,    0,    0,    0,   64,   24,    0,   25,  120,
  121,   26,  290,    0,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,  122,  295,
    0,  125,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  771,
    0,    0,  109,  110,    0,    0,    0,    0,    0,    0,
    0,  294,    0,    0,    0,    0,    0,  114,  115,  116,
  117,    0,    0,  801,  118,    0,  119,    0,    0,    0,
    0,   64,   24,    0,   25,  120,  121,   26,  290,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
   69,   70,    0,   35,    0,    0,    0,    0,    0,   72,
    0,    0,   37,    0,  122,  295,    0,  125,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,   85,   86,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,   88,
    0,    0,   45,    0,    0,   90,    0,   92,    0,   94,
   46,   47,  291,    0,   48,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,  105,  106,  292,  771,    0,    0,  109,  110,
    0,    0,    0,    0,    0,    0,    0,  294,    0,    0,
    0,    0,    0,  114,  115,  116,  117,    0,    0,  975,
  118,    0,  119,    0,    0,    0,    0,   64,   24,    0,
   25,  120,  121,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,    0,    0,    0,    0,   72,    0,    0,   37,    0,
  122,  295,    0,  125,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  292,  401,    0,    0,  109,  110,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,  114,
  115,  116,  117,    0,    0,  752,  118,    0,  119,    0,
    0,    0,    0,   64,   24,    0,   25,  120,  121,   26,
  290,    0,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,   69,   70,    0,   35,    0,    0,    0,    0,
    0,   72,    0,    0,   37,    0,  122,  295,    0,  125,
    0,   39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   40,    0,   85,   86,   41,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   44,   88,    0,    0,   45,    0,    0,   90,    0,   92,
    0,   94,   46,   47,  291,    0,   48,    0,    0,    0,
   98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  105,  106,  292,  293,    0,    0,
  109,  110,    0,    0,    0,    0,    0,    0,    0,  294,
    0,    0,    0,    0,    0,    0,  753,  754,    0,    0,
  213,    0,    0,    0,  755,  213,    0,    0,    0,  213,
    0,  213,    0,    0,  213,    0,  213,  213,    0,  213,
  213,  213,  213,  213,  213,  213,  213,    0,  213,    0,
  213,    0,  213,  213,  213,  213,    0,    0,  213,  213,
    0,    0,  122,  295,  213,  756,  213,  213,  213,    0,
    0,    0,    0,  213,    0,    0,    0,  213,    0,  213,
    0,  213,    0,    0,  213,    0,  213,  213,  213,  213,
    0,    0,    0,  213,  213,  213,    0,    0,  213,  213,
  213,    0,    0,    0,    0,    0,    0,  213,  213,  595,
  213,  213,    0,    0,  213,  213,  213,   64,   24,    0,
   25,  213,    0,   26,  290,    0,    0,    0,   27,   28,
   29,   30,   31,   32,   33,   34,   69,   70,    0,   35,
    0,  213,    0,    0,    0,   72,    0,    0,   37,    0,
  213,  213,  213,    0,    0,   39,    0,    0,    0,    0,
  213,    0,    0,    0,    0,    0,   40,    0,   85,   86,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,   88,    0,    0,   45,    0,
    0,   90,    0,   92,    0,   94,   46,   47,  291,    0,
   48,    0,    0,    0,    0,    0,    0,    0,  213,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  105,  106,
  292,  596,    0,  681,  109,  110,    0,    0,    0,    0,
    0,    0,   24,  294,   25,    0,    0,   26,    0,    0,
    0,    0,   27,   28,   29,   30,   31,   32,   33,   34,
    0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,    0,    0,    0,    0,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,    0,    0,   41,    0,  122,  597,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,   44,    0,
    0,    0,   45,    0,    0,    0,  750,   53,    0,    0,
   46,   47,    0,    0,   48,   24,    0,   25,   98,    0,
   26,    0,    0,    0,    0,   27,   28,   29,   30,   31,
   32,   33,   34,    0,    0,    0,   35,   53,    0,    0,
    0,    0,    0,    0,    0,   37,    0,    0,    0,    0,
   53,    0,   39,    0,    0,   53,    0,    0,    0,    0,
    0,   53,    0,   40,    0,    0,   53,   41,   53,   53,
   53,   53,    0,    0,    0,    0,   53,    0,    0,   43,
   53,   44,    0,    0,    0,   45,    0,    0,    0,    0,
    0,    0,   53,   46,   47, 1101,   53,   48,   53,    0,
    0,   98,    0,    0,   24,    0,   25,    0,    0,   26,
    0,  436,    0,    0,   27,   28,   29,   30,   31,   32,
   33,   34,    0,   53,    0,   35,    0,    0,    0,   53,
   53,    0,    0,  223,   37,    0,    0,    0,    0, 1277,
    0,   39,    0,    0,    0,    0,    0,    0,   24,    0,
   25,    0,   40,   26,    0,    0,   41,    0,   27,   28,
   29,   30,   31,   32,   33,   34,    0,    0,   43,   35,
   44,    0,    0,    0,   45,    0,    0,    0,   37,    0,
    0,    0,   46,   47,    0,   39,   48,    0,    0,    0,
   98,    0,    0,    0,  436,    0,   40,    0,    0,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,    0,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,   46,   47,    0,    0,
   48,    0,    0,   54,   98,   54,    0,   54,    0,   54,
    0,    0,   54,    0,   54,   54,    0,   54,   54,   54,
   54,   54,   54,   54,   54,    0,   54,    0,   54,    0,
   54,   54,   54,   54,    0,    0,   54,   54,    0,    0,
    0,    0,   54,   54,   54,   54,   54,    0,    0,    0,
    0,   54,    0,  436,    0,   54,    0,   54,    0,   54,
    0,   54,   54,    0,   54,   54,   54,   54,    0,    0,
   54,   54,   54,   54,    0,    0,   54,   54,   54,    0,
    0,    0,    0,    0,    0,   54,   54,    0,   54,   54,
    0,    0,   54,   54,   54,    0,    0,  436,    0,   54,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
    0,    0,    0,    0,    0,   54,   54,    0,   53,    0,
    0,    0,   53,    0,   53,    0,    0,   53,    0,   53,
   53,    0,   53,   53,   53,   53,   53,   53,   53,   53,
    0,   53,    0,   53,    0,   53,   53,   53,   53,    0,
    0,   53,   53,    0,    0,    0,    0,   53,    0,   53,
   53,   53,    0,    0,    0,    0,   53,    0,    0,    0,
   53,    0,   53,    0,   53,    0,   54,   53,    0,   53,
   53,   53,   53,    0,    0,    0,   53,   53,   53,    0,
    0,   53,   53,   53,    0,    0,    0,    0,    0,    0,
   53,   53,    0,   53,   53,    0,    0,   53,   53,   53,
    0,    0,    0,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,   53,   89,    0,    0,   53,    0,   53,
    0,    0,   53,   53,   53,   53,    0,   53,   53,   53,
   53,   53,   53,   53,   53,    0,   53,    0,   53,    0,
   53,   53,   53,   53,    0,    0,   53,   53,    0,    0,
    0,    0,   53,    0,   53,   53,   53,    0,    0,    0,
    0,   53,    0,    0,    0,   53,    0,   53,    0,   53,
    0,   53,   53,    0,   53,   53,   53,   53,    0,    0,
    0,   53,   53,   53,    0,    0,   53,   53,   53,    0,
    0,    0,    0,    0,    0,   53,   53,    0,   53,   53,
    0,    0,   53,   53,   53,    0,    0,    0,    0,   53,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,    0,    0,    0,    0,    0,    0,    0,   54,   90,
    0,    0,   54,    0,   54,    0,    0,   54,   53,   54,
   54,    0,   54,   54,   54,   54,   54,   54,   54,   54,
    0,   54,    0,   54,    0,   54,   54,   54,   54,    0,
    0,   54,   54,    0,    0,    0,    0,   54,    0,   54,
   54,   54,    0,    0,    0,    0,   54,    0,    0,    0,
   54,    0,   54,    0,   54,    0,   53,   54,    0,   54,
   54,   54,   54,    0,    0,    0,   54,   54,   54,    0,
    0,   54,   54,   54,    0,    0,    0,    0,    0,    0,
   54,   54,    0,   54,   54,    0,    0,   54,   54,   54,
    0,    0,    0,    0,   54,    0,    0,    0,    0,    0,
    0,   53,    0,    0,    0,   53,    0,   53,    0,    0,
   53,    0,   53,   53,   54,   53,   53,   53,   53,   53,
   53,   53,   53,    0,   53,    0,   53,    0,   53,   53,
   53,   53,    0,   54,   53,   53,    0,    0,    0,    0,
   53,    0,   53,   53,   53,    0,    0,    0,    0,   53,
    0,    0,    0,   53,    0,   53,    0,   53,    0,    0,
   53,    0,   53,   53,   53,   53,    0,    0,    0,   53,
   53,   53,    0,    0,   53,   53,   53,    0,    0,    0,
    0,   54,    0,   53,   53,    0,   53,   53,    0,    0,
   53,   53,   53,    0,    0,    0,    0,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   53,    0,   53,
    0,    0,    0,   53,    0,   53,    0,  241,   53,    0,
   53,   53,    0,   53,   53,   53,   53,   53,   53,   53,
   53,    0,   53,    0,   53,    0,   53,   53,   53,   53,
    0,    0,   53,   53,    0,    0,    0,    0,   53,    0,
   53,   53,   53,    0,    0,    0,    0,   53,    0,  372,
    0,   53,    0,   53,    0,   53,    0,    0,   53,    0,
   53,   53,   53,   53,   53,    0,    0,   53,   53,   53,
    0,    0,   53,   53,   53,    0,    0,    0,    0,  372,
    0,   53,   53,    0,   53,   53,    0,    0,   53,   53,
   53,    0,  372,    0,  394,   53,    0,  372,    0,    0,
    0,    0,    0,  372,    0,    0,  372,    0,  372,    0,
  372,  372,  372,  372,    0,   53,    0,    0,  372,    0,
    0,    0,  372,    0,  394,  242,  372,    0,    0,    0,
    0,    0,    0,    0,  372,    0,    0,  394,  372,    0,
  372,    0,  394,    0,  393,    0,    0,    0,  394,    0,
    0,  257,    0,  394,    0,  394,  394,  394,  394,    0,
  372,    0,    0,  394,    0,  372,    0,  394,    0,    0,
    0,  394,    0,    0,  393,  372,  372,    0,  295,  394,
  372,    0,   53,  394,    0,  394,    0,  393,    0,    0,
    0,    0,  393,  372,  539,    0,    0,    0,  393,    0,
    0,  256,    0,  393,    0,  393,  393,  393,  393,    0,
  394,    0,    0,  393,    0,    0,    0,  393,    0,    0,
  394,  393,    0,    0,  540,    0,    0,    0,    0,  393,
    0,    0,  372,  393,    0,  393,    0,  541,    0,  539,
    0,    0,  542,    0,    0,    0,    0,    0,  544,    0,
    0,    0,    0,  545,    0,  546,  547,  548,  549,    0,
  393,    0,    0,  550,    0,    0,    0,  551,    0,  540,
  393, 1588,    0,    0,    0,  539,    0,  394,    0,  552,
    0,    0,  541,  553,    0,  554,    0,  542,    0,    0,
    0,    0,    0,  544,    0,    0,    0,    0,  545,    0,
  546,  547,  548,  549,    0,  540,    0,    0,  550,    0,
  555,    0,  551,    0,    0,    0, 1588,    0,  541,    0,
 1589,    0,    0,  542,  552,    0,    0,  393,  553,  544,
  554,    0,    0,    0,  545,    0,  546,  547,  548,  549,
    0,    0,    0,    0,  550,    0,    0,    0,  551,    0,
    0,    0,    0,    0,    0,  555,   64,   24,    0,   25,
  552,    0,   26,  290,  553,    0,  554,   27,   28,   29,
   30,   31,   32,   33,   34,   69,   70, 1590,   35,    0,
    0,    0,    0,    0,   72,    0,    0,   37,    0,    0,
    0,  555,    0,    0,   39,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,    0,   85,   86,   41,
    0,  715,    0,    0,    0,    0,    0,    0,  716,    0,
    0,   43, 1590,   44,   88,    0,    0,   45,    0,    0,
   90,    0,   92,    0,   94,   46,   47,  291,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,  717,    0,
    0,  102,  103,    0,    0,    0,    0,    0, 1607,    0,
    0,    0,    0,    0,    0,    0,  104,  105,  106,  107,
  108,    0,    0,  109,  110,    0,    0,    0,    0,    0,
    0,    0,  294, 1129,    0,  718,    0,    0,  114,  115,
  116,  117,    0,    0,    0,  118,    0,  119,    0,    0,
    0,    0,   64,   24,    0,   25,  120,  121,   26,  290,
    0,    0,    0,   27,   28,   29,   30,   31,   32,   33,
   34,   69,   70,    0,   35,    0,    0,    0,    0,    0,
   72,    0,    0,   37,    0,  122,  123,  124,  125,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   40,    0,   85,   86,   41,    0,  715,    0,    0,
    0,    0,    0,    0,  716,    0,    0,   43,    0,   44,
   88,    0,    0,   45,    0,    0,   90,    0,   92,    0,
   94,   46,   47,  291,    0,   48,    0,    0,    0,    0,
    0,    0,    0,    0,  717,    0,    0,  102,  103,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  104,  105,  106,  107,  108,    0,    0,  109,
  110,    0,    0,    0,    0,    0,    0,    0,  294,    0,
    0,  718,    0,    0,  114,  115,  116,  117,    0,    0,
    0,  118,    0,  119,    0,    0,    0,    0,   64,   24,
    0,   25,  120,  121,   26,  290,    0,    0,    0,   27,
   28,   29,   30,   31,   32,   33,   34,   69,   70,    0,
   35,    0,    0,    0,    0,    0,   72,    0,    0,   37,
    0,  122,  123,  124,  125,    0,   39,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   40,    0,   85,
   86,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,    0,   44,   88,    0,    0,   45,
    0,    0,   90,    0,   92,    0,   94,   46,   47,  291,
    0,   48,    0,    0,    0,   98,    0,    0,    0,    0,
  101,    0,    0,  102,  103,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  104,  105,
  106,  107,  340,    0,    0,  109,  110,    0,    0,    0,
    0,    0,    0,    0,  294,    0,    0,    0,    0,    0,
  114,  115,  116,  117,    0,    0,    0,  118,    0,  119,
    0,    0,    0,    0,   64,   24,    0,   25,  120,  121,
   26,  290,    0,    0,    0,   27,   28,   29,   30,   31,
   32,   33,   34,   69,   70,    0,   35,    0,    0,    0,
    0,    0,   72,    0,    0,   37,    0,  122,  341,  124,
  125,    0,   39,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   40,    0,   85,   86,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
    0,   44,   88,    0,    0,   45,    0,    0,   90,    0,
   92,    0,   94,   46,   47,  291,    0,   48,    0,    0,
    0,   98,    0,    0,    0,    0,  101,    0,    0,  102,
  103,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  104,  105,  106,  107,  340,    0,
    0,  109,  110,    0,    0,    0,    0,    0,    0,    0,
  990,    0,    0,    0,    0,    0,  114,  115,  116,  117,
    0,    0,    0,  118,    0,  119,    0,    0,    0,    0,
   64,   24,    0,   25,  120,  121,   26,  290,    0,    0,
    0,   27,   28,   29,   30,   31,   32,   33,   34,   69,
   70,    0,   35,    0,    0,    0,    0,    0,   72,    0,
    0,   37,    0,  122,  341,  124,  125,    0,   39,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
    0,   85,   86,   41,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   43,    0,   44,   88,    0,
    0,   45,    0,    0,   90,    0,   92,    0,   94,   46,
   47,  291,    0,   48,    0,    0,    0,    0,    0,    0,
    0,    0,  101,    0,    0,  102,  103,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  104,  105,  106,  107,  340,    0,    0,  109,  110,    0,
    0,    0,  616,    0,    0,    0,  294,    0,    0,    0,
    0,    0,  114,  115,  116,  117,    0,    0,    0,  118,
    0,  119,    0,    0,    0,    0,   64,   24,    0,   25,
  120,  121,   26,  290,    0,    0,    0,   27,   28,   29,
   30,   31,   32,   33,   34,   69,   70,    0,   35,    0,
    0,    0,    0,    0,   72,    0,    0,   37,    0,  122,
  341,  124,  125,    0,   39,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,    0,   85,   86,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   43,    0,   44,   88,    0,    0,   45,    0,    0,
   90,    0,   92,    0,   94,   46,   47,  291,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,  101,    0,
    0,  102,  103,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  104,  105,  106,  107,
  340,    0,    0,  109,  110,    0,    0,    0,  610,    0,
    0,    0,  294,    0,    0,    0,    0,    0,  114,  115,
  116,  117,    0,    0,    0,  118,    0,  119,    0,    0,
    0,    0,   64,   24,    0,   25,  120,  121,   26,  290,
    0,    0,    0,   27,   28,   29,   30,   31,   32,   33,
   34,   69,   70,    0,   35,    0,    0,    0,    0,    0,
   72,    0,    0,   37,    0,  122,  341,  124,  125,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   40,    0,   85,   86,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   44,
   88,    0,    0,   45,    0,    0,   90,    0,   92,    0,
   94,   46,   47,  291,    0,   48,    0,    0,    0,    0,
    0,    0,    0,    0,  101,    0,    0,  102,  103,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  104,  105,  106,  107,  340,    0,    0,  109,
  110,    0,    0,    0,    0,    0,    0,    0,  294,    0,
    0,    0,    0,    0,  114,  115,  116,  117,    0,    0,
    0,  118,    0,  119,    0,    0,    0,    0,   64,   24,
    0,   25,  120,  121,   26,  290,    0,    0,    0,   27,
   28,   29,   30,   31,   32,   33,   34,   69,   70,    0,
   35,    0,    0,    0,    0,    0,   72,    0,    0,   37,
    0,  122,  341,  124,  125,    0,   39,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   40,    0,   85,
   86,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,    0,   44,   88,    0,    0,   45,
    0,    0,   90,    0,   92,    0,   94,   46,   47,  291,
    0,   48,    0,    0,    0,    0,    0,    0,    0,    0,
  101,    0,    0,  102,  103,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  104,  105,
  106,  107,  108,    0,    0,  109,  110,    0,    0,    0,
    0,    0,    0,    0,  294,    0,    0,    0,    0,    0,
  114,  115,  116,  117,    0,    0,    0,  118,    0,  119,
    0,    0,    0,    0,  749,  749,    0,  749,  120,  121,
  749,  749,    0,    0,    0,  749,  749,  749,  749,  749,
  749,  749,  749,  749,  749,    0,  749,    0,    0,    0,
    0,    0,  749,    0,    0,  749,    0,  122,  123,  124,
  125,    0,  749,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  749,    0,  749,  749,  749,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  749,
    0,  749,  749,    0,    0,  749,    0,    0,  749,    0,
  749,    0,  749,  749,  749,  749,    0,  749,    0,    0,
    0,    0,    0,    0,    0,    0,  749,    0,    0,  749,
  749,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  749,  749,  749,  749,  749,    0,
    0,  749,  749,    0,    0,    0,    0,    0,    0,    0,
  749,    0,    0,    0,    0,    0,  749,  749,  749,  749,
    0,    0,    0,  749,    0,  749,    0,    0,    0,    0,
  149,  149,    0,  149,  749,  749,  149,  149,    0,    0,
    0,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,    0,  149,    0,    0,    0,    0,    0,  149,    0,
    0,  149,    0,  749,  749,  749,  749,    0,  149,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  149,
    0,  149,  149,  149,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  149,    0,  149,  149,    0,
    0,  149,    0,    0,  149,    0,  149,    0,  149,  149,
  149,  149,    0,  149,    0,    0,    0,    0,    0,    0,
    0,    0,  149,    0,    0,  149,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  149,  149,  149,  149,  149,    0,    0,  149,  149,    0,
    0,    0,    0,    0,    0,    0,  149,    0,    0,    0,
    0,    0,  149,  149,  149,  149,    0,    0,    0,  149,
    0,  149,    0,    0,    0,    0,   64,   24,    0,   25,
  149,  149,   26,  290,    0,    0,    0,   27,   28,   29,
   30,   31,   32,   33,   34,   69,   70,    0,   35,    0,
    0,    0,    0,    0,   72,    0,    0,   37,    0,  149,
  149,  149,  149,    0,   39,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,    0,   85,   86,   41,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   43,    0,   44,   88,    0,    0,   45,    0,    0,
   90,    0,   92,    0,   94,   46,   47,  291,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  104,  105,  106,  292,
  771,    0,    0,  109,  110,    0,    0,    0,    0,    0,
    0,    0,  294,    0,    0,    0,    0,    0,  114,  115,
  116,  117,    0,    0,    0,  118,    0,  119,    0,    0,
    0,    0,   64,   24,    0,   25,  120,  121,   26,  290,
    0,    0,    0,   27,   28,   29,   30,   31,   32,   33,
   34,   69,   70,    0,   35,    0,    0,    0,    0,    0,
   72,    0,    0,   37,    0,  122,  295,    0,  125,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   40,    0,   85,   86,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   44,
   88,    0,    0,   45,    0,    0,   90,    0,   92,    0,
   94,   46,   47,  291,    0,   48,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  104,  105,  106,  292,  401,    0,    0,  109,
  110,    0,    0,    0,    0,    0,    0,    0,  294,    0,
    0,    0,    0,    0,  114,  115,  116,  117,    0,    0,
    0,  118,    0,  119,    0,    0,    0,    0,   64,   24,
    0,   25,  120,  121,   26,  290,    0,    0,    0,   27,
   28,   29,   30,   31,   32,   33,   34,   69,   70,    0,
   35,    0,    0,    0,    0,    0,   72,    0,    0,   37,
    0,  122,  295,    0,  125,    0,   39,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   40,    0,   85,
   86,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,    0,   44,   88,    0,    0,   45,
    0,    0,   90,    0,   92,    0,   94,   46,   47,  291,
    0,   48,    0,    0,    0,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  104,  105,
  106,  292,  293,    0,    0,  109,  110,    0,    0,    0,
    0,    0,    0,    0,  294,    0,    0,    0,    0,    0,
    0,  753,  754,    0,   64,   24,    0,   25,    0,  755,
   26,  290,    0,    0,    0,   27,   28,   29,   30,   31,
   32,   33,   34,   69,   70,    0,   35,    0,    0,    0,
    0,    0,   72,    0,    0,   37,    0,    0,    0,    0,
    0,    0,   39,    0,    0,    0,    0,  122, 1145,    0,
  756,    0,    0,   40,    0,   85,   86,   41,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
    0,   44,   88,    0,    0,   45,    0,    0,   90,    0,
   92,    0,   94,   46,   47,  291,    0,   48,    0,    0,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  104,  105,  106,  292,  293,    0,
    0,  109,  110,    0,    0,    0,    0,    0,    0,    0,
  294,    0,    0,    0,    0,    0,    0,  753,  754,  795,
    0,  795,    0,  795,    0,  755,  795,    0,  795,  795,
    0,  795,  795,  795,  795,  795,  795,  795,  795,    0,
  795,    0,  795,    0,  795,  795,  795,    0,    0,    0,
  795,  795,    0,    0,    0,    0,  795,    0,  795,  795,
    0,    0,    0,  122,  295,    0,  756,    0,    0,  795,
    0,    0,    0,  795,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  795,  795,    0,  795,    0,    0,
    0,  795,  795,    0,    0,    0,    0,    0,    0,  795,
  795,    0,    0,  795,    0,   64,   24,  795,   25,    0,
    0,   26,  290,  795,    0,    0,   27,   28,   29,   30,
   31,   32,   33,   34,   69,   70,    0,   35,    0,    0,
    0,    0,    0,   72,    0,    0,   37,    0,    0,  795,
  795,    0,    0,   39,    0,    0,    0,    0,    0,    0,
    0,    0,  795,    0,   40,    0,   85,   86,   41,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   44,   88,    0,    0,   45,    0,    0,   90,
    0,   92,    0,   94,   46,   47,  291,    0,   48,    0,
    0,    0,   98,    0,    0,    0,    0,    0,    0,    0,
  795,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  104,  105,  106,  292,  293,
    0,    0,  109,  110,    0,  794,    0,  794,    0,    0,
  794,  294,  794,  794,    0,  794,  794,  794,  794,  794,
  794,  794,  794,    0,  794,    0,  794,    0,  794,  794,
  794,    0,    0,    0,  794,  794,    0,    0,    0,    0,
  794,    0,  794,  794,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  794,    0,    0,    0,  794,    0,    0,
    0,    0,    0,    0,  122,  295,    0,    0,    0,  794,
    0,  794,    0,    0,    0,  794,  794,    0,    0,    0,
    0,    0,    0,  794,  794,    0,    0,  794,    0,    0,
    0,  794,    0,  794,    0,  794,    0,  794,  794,    0,
  794,  794,    0,  794,  794,  794,  794,  794,  794,  794,
  794,    0,  794,    0,  794,    0,  794,  794,  794,    0,
    0,    0,  794,  794,    0,    0,    0,    0,  794,    0,
  794,  794,    0,    0,    0,    0,  794,    0,    0,    0,
    0,  794,    0,    0,    0,  794,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  794,    0,  794,
    0,    0,    0,  794,  794,    0,    0,    0,    0,    0,
    0,  794,  794,    0,    0,  794,    0,    0,   24,  794,
   25,    0,    0,   26,  794,  794, 1553,    0,   27,   28,
   29,   30,   31,   32,   33,   34,    0,  851,    0,   35,
    0,  852, 1554, 1555,    0,    0,    0, 1556,   37,    0,
    0,    0,    0, 1557,    0,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,    0,    0,
   41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,    0,   44,    0,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,   46,   47,    0,    0,
   48,    0,    0,   24, 1558,   25,    0,    0,   26,    0,
 1559, 1553,  794,   27,   28,   29,   30,   31,   32,   33,
   34,    0,  851,    0,   35,    0,  852, 1554, 1555,    0,
    0,    0, 1556,   37,    0,    0,    0,    0, 1557,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0, 1560,
    0,   40,    0,    0,    0,   41,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   44,
    0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,   46,   47,    0,    0,   48,    0,    0,   53, 1558,
   53,    0,    0,   53,    0, 1559,    0, 1561,   53,   53,
   53,   53,   53,   53,   53,   53,    0,    0,    0,   53,
    0,    0,    0,    0,    0,    0,    0,    0,   53,    0,
    0,    0,    0,    0,    0,   53,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   53,    0,    0,    0,
   53,    0,   53,    0,   53,    0,    0,    0,    0,   53,
    0,    0,   53,    0,   53,    0,    0,    0,   53,    0,
    0,   53,    0,    0,    0,    0,   53,   53,    0,    0,
   53,    0,    0,   53,   53,   53,    0,    0,   53,    0,
    0,    0, 1561,   53,   53,   53,   53,   53,   53,   53,
   53,    0,    0,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,   53,    0,    0,    0,    0,    0,    0,
   53,    0,    0,    0,  172,    0,    0,    0,    0,    0,
    0,   53,    0,    0,    0,   53,    0,   53,    0,   53,
    0,    0,    0,    0,   53,    0,    0,   53,    0,   53,
    0,    0,    0,   53,    0,    0,   53,    0,    0,    0,
    0,   53,   53,    0,    0,   53,    0,    0,   24,   53,
   25,    0,    0,   26,    0,    0,    0,   53,   27,   28,
   29,   30,   31,   32,   33,   34,    0,    0,    0,   35,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
    0,    0,    0,    0,    0,   39,    0,  172,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,    0,    0,
   41,    0,  684,    0,    0,    0,    0,    0,    0,  685,
    0,    0,   43,    0,   44,    0,    0,    0,   45,    0,
    0,  686,    0,    0,    0,    0,   46,   47,    0,    0,
   48,    0,    0,   54,  687,   54,    0,    0,   54,    0,
    0,    0,   53,   54,   54,   54,   54,   54,   54,   54,
   54,    0,    0,    0,   54,    0,    0,    0,    0,    0,
    0,  688,    0,   54,    0,    0,    0,    0,    0,    0,
   54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   54,    0,    0,    0,   54,    0,   54,    0,   54,
    0,    0,    0,    0,   54,    0,    0,   54,    0,   54,
    0,    0,    0,   54,    0,    0,   54,    0,    0,    0,
    0,   54,   54,    0,    0,   54,    0,    0,   53,   54,
   53,    0,    0,   53,    0,    0,    0,  689,   53,   53,
   53,   53,   53,   53,   53,   53,    0,    0,    0,   53,
    0,    0,    0,    0,    0,    0,    0,    0,   53,    0,
    0,    0,    0,    0,    0,   53,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   53,    0,    0,    0,
   53,    0,   53,    0,   53,    0,    0,    0,    0,   53,
    0,    0,   53,    0,   53,    0,    0,    0,   53,    0,
    0,   53,    0,    0,    0,    0,   53,   53,    0,    0,
   53,    0,    0,   24,   53,   25,    0,    0,   26,    0,
    0,    0,   54,   27,   28,   29,   30,   31,   32,   33,
   34,    0,    0,    0,   35,    0,    0,    0,   36,    0,
    0,    0,    0,   37,    0,    0,    0,    0,   38,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   40,    0,    0,    0,   41,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   44,
    0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,   46,   47,    0,    0,   48,    0,    0,   24,   49,
   25,    0,    0,   26,    0, 1486,    0,   53,   27,   28,
   29,   30,   31,   32,   33,   34,    0,    0,    0,   35,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
    0,    0,    0,    0,    0,   39,    0,    0,    0,    0,
    0,    0,   24,    0,   25,    0,   40,   26, 1487,    0,
   41,    0,   27,   28,   29,   30,   31,   32,   33,   34,
    0,    0,   43,   35,   44,    0,    0,    0,   45, 1488,
    0,    0,   37,    0,    0,    0,   46,   47,    0,   39,
   48,    0,    0,    0,   98,    0,  192,    0,  192,    0,
   40,  192,   50,    0,   41,    0,  192,  192,  192,  192,
  192,  192,  192,  192,    0,    0,   43,  192,   44,    0,
    0,    0,   45,    0,    0,    0,  192,    0,    0,    0,
   46,   47,    0,  192,   48,    0,    0,    0,   98,    0,
    0,    0,    0,    0,  192,    0,    0,    0,  192,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  192,    0,  192,    0,    0,  335,  192,    0,    0,    0,
    0,    0,    0,    0,  192,  192,    0,    0,  192,    0,
    0,  192,  192,  192,    0,    0,  192,  436,    0,    0,
    0,  192,  192,  192,  192,  192,  192,  192,  192,    0,
    0,    0,  192,    0,    0,    0,    0,    0,    0,    0,
    0,  192,    0,    0,    0,    0,    0,    0,  192,    0,
    0,    0, 1164,    0,    0,   24,    0,   25,    0,  192,
   26,  377,    0,  192,    0,   27,   28,   29,   30,   31,
   32,   33,   34,    0,    0,  192,   35,  192,    0,    0,
    0,  192,    0,    0,    0,   37,    0,    0,    0,  192,
  192,    0,   39,  192,    0,    0,    0,  192,    0,   24,
    0,   25,    0,   40,   26,  192,    0,   41,    0,   27,
   28,   29,   30,   31,   32,   33,   34,    0,    0,   43,
   35,   44,    0,    0,    0,   45,    0,    0,    0,   37,
    0,    0,    0,   46,   47, 1164,   39,   48,    0,    0,
    0,   98,    0,   24,    0,   25,    0,   40,   26,    0,
    0,   41,    0,   27,   28,   29,   30,   31,   32,   33,
   34,    0,    0,   43,   35,   44,    0,    0,    0,   45,
    0,    0,    0,   37,    0,    0,    0,   46,   47,    0,
   39,   48,    0,    0,    0,  687,    0,  558,    0,  558,
  192,   40,  558,    0,    0,   41,    0,  558,  558,  558,
  558,  558,  558,  558,  558,    0,    0,   43,  558,   44,
    0,    0,    0,   45,    0,    0,    0,  558,    0,    0,
    0,   46,   47,    0,  558,   48,    0,    0,    0,  633,
    0,  193,    0,  193,  436,  558,  193,    0,    0,  558,
    0,  193,  193,  193,  193,  193,  193,  193,  193,    0,
    0,  558,  193,  558,    0,    0,    0,  558,    0,    0,
    0,  193,    0,    0,    0,  558,  558,    0,  193,  558,
    0,    0,    0,  558,    0,  192,    0,  192,  436,  193,
  192,    0,    0,  193,    0,  192,  192,  192,  192,  192,
  192,  192,  192,    0,    0,  193,  192,  193,    0,    0,
    0,  193,    0,    0,    0,  192,    0,  231,    0,  193,
  193,    0,  192,  193,    0,    0,    0,  193,    0,  202,
  232,  202,  436,  192,  202,    0,    0,  192,    0,  202,
  202,  202,  202,  202,  202,  202,  202,    0,    0,  192,
  202,  192,    0,    0,    0,  192,    0,    0,    0,  202,
    0,    0,    0,  192,  192,  233,  202,  192,    0,    0,
    0,  192,    0,    0,    0,    0,  558,  202,    0,    0,
    0,  202,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  202,    0,  202,    0,    0,    0,  202,
    0,    0,    0,    0,    0,    0,    0,  202,  202,    0,
    0,  202,    0,    0,    0,  202,    0,    0,    0,    0,
  193,  234,  235,  236,  237,    0,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,    0,   39,  249,
  250,  251,  252,  253,  254,  255,  256,    0,    0,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   39,    0,    0,  192,   39,    0,    0,   39,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   39,   39,   37,  257,    0,    0,   39,    0,    0,    0,
    0,   39,   39,   37,    0,    0,    0,   39,    0,   39,
   39,   39,   39,    0,    0,   37,    0,   39,  202,   37,
    0,   39,   37,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   39,   37,   37,   39,   39,    0,   39,
   37,    0,    0,    0,   39,   37,   37,    0,    0,    0,
    0,   37,    0,   37,   37,   37,   37,    0,    0,    0,
    0,   37,   53,    0,   39,   37,    0,   37,    0,    0,
    0,    0,    0,   53,   39,   39,    0,   37,    0,    0,
    0,   37,    0,   37,    0,   53,    0,    0,   37,   53,
    0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   53,   53,   53,    0,   37,    0,
   53,    0,    0,    0,    0,   53,   53,   53,   37,   37,
    0,   53,    0,   53,   53,   53,   53,    0,    0,   53,
    0,   53,    0,   53,    0,   53,   53,   53,    0,    0,
    0,    0,   53,    0,    0,    0,    0,   53,   53,   53,
    0,   53,    0,   53,   53,    0,    0,    0,   53,   53,
   53,    0,    0,    0,    0,   53,    0,   53,   53,   53,
   53,    0,   53,    0,    0,   53,    0,    0,   53,   53,
    0,   53,   53,    0,    0,   53,    0,    0,   41,    0,
   53,   53,    0,    0,    0,   53,   53,   53,    0,    0,
    0,   53,   53,   53,   53,   53,   53,    0,    0,    0,
    0,   53,   53,    0,    0,   53,    0,    0,   53,    0,
   53,    0,   53,    0,    0,   53,    0,   53,    0,    0,
   53,   53,   42,   53,    0,    0,   53,    0,    0,    0,
    0,   53,    0,   53,   53,   53,   53,    0,   53,   53,
    0,   53,    0,    0,    0,   53,    0,    0,   53,    0,
    0,   53,    0,    0,   53,   53,   53,   53,  225,    0,
    0,   53,   53,   53,   53,    0,   53,   53,    0,   53,
   53,   53,   53,    0,    0,    0,    0,   53,    0,    0,
    0,   53,    0,    0,    0,    0,    0,    0,   53,    0,
    0,    0,    0,   53,   53,    0,    0,   53,  330,   53,
    0,    0,    0,    0,    0,    0,    0,   53,  539,    0,
    0,    0,   53,    0,    0,    0,    0,    0,   53,    0,
    0,    0,    0,   53,   53,   53,   53,   53,   53,    0,
    0,   53,    0,   53,  331,    0,    0,   53,  540,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,  541,    0,   53,    0,   53,  542,    0,    0,    0,
    0,  543,  544,    0,    0,    0,    0,  545,    0,  546,
  547,  548,  549,    0,    0,    0,    0,  550,    0,    0,
   53,  551,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  552,    0,    0,    0,  553,    0,  554,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  555,
  };
  protected static  short [] yyCheck = {            17,
    4,   59,   18,  354,  614,  355,   17,  222,  333,   17,
  270,   59,  616,  225,  268,   67,  557,   17,  580,  374,
  407,  353,  221,  353,  476,  476,   67,   76,  441,  183,
  391,  671,  476,  680,  435,  351,  612,  283,  452,  691,
  135,  133,    6,  135, 1134,   91,   52,  441, 1347,   55,
  922,    0,    0,  102,  103,   66,  386, 1086,  107,  256,
  700,   79,  716,  887,  256,  889,  451,  256,  892,   87,
  894,   82,  256,   91, 1624,  365,   17,  256, 1390,  256,
  129,  256,   93,  256,   95,  301,  256,   17, 1139,  256,
  256,  109, 1460,   17,  112,  268,  391,  256,  256,  268,
  256,  387,  391,  319,  256,    0,  256,  256,  679,  395,
  159,  256,  936,  268,  387,  939,  940,  256,  256, 1431,
  393,  372,   69,  387,  256,  373,   73,   74,   75,  256,
   77,   78, 1444,  256,   81,   82, 1344,   84,   17,  256,
  423,   88,   89, 1494,  256,  435,  256,   94,   95,  562,
   97,  256,   99,  100,  405,  387,  439,  289,  105,  106,
  455,  393, 1513,  257,  222,  183,  455,   17, 1536,  455,
  500,  349,  183,  825,  222,  183,  334,  256,  353, 1387,
  256,  378,  455,  183,  359,   17,  361,  134,  354,  364,
  365,  455,  367,  368,  386,  327,  388,   17,  390,  256,
  389,  353,  391, 1753,  393,  451,   17,  359,  378,  361,
  268,  390,  364,  365,   17,  367,  368,   67,  393,   17,
  268,   71,  389,   17,  391,   17,  393,  386,  444, 1342,
   17,  390,  387,  282,  283,  806,  413,  650,  394,   17,
  811,  812,  183, 1294,  256,  390,  256,  444,  297,  610,
   17,  664,  258,  183,  446,  393,  650,  449,  659,  183,
  444,   17,  613,  440,  524,  283,  455,  446,  373,  523,
  447,  289, 1385, 1302,  444,  448,  294,  400,  330,  448,
  455,  373,  394,  378,  671,  256,  378,  446,  455,  330,
  400,  895,  705,  448,  444,  444,  388,  710,  711,  351,
  264,  446,  351,  455,  183,  444,  953,  386,  257,  257,
  268,  390,  444,  700,  256,  333,  710,  444,   17,  395,
  338,  339,  707,  272,  536,  283,  902,  444,  346,  370,
  348,  380,  350,  183,  345,  284,  990, 1688,  349,  288,
   17,  390,  360,  400,  291,  450,  451,  452,  453,  296,
  368,  183,  370,  402,  303,  256,  374,  375,  369,  256,
  256,  256,  387,  183, 1715,  376,  378,  446,  256,  659,
  256,  256,  183,  349,  392,  393, 1727,  389, 1729,  391,
  183,  393,  256, 1682,  394,  183,  257,  336, 1212,  183,
  264,  183,  256,  439,  443, 1267,  183,  263,  447,  407,
  444,  691,  451,  452,  256,  183,  353,  407,  357, 1061,
  256, 1235,  256,  391,  284,  256,  183,  390,  288, 1469,
  378,  439,  256,  394,  476,  826,  256,  183,  256,  256,
  455,  256,  444,  451,  452,  476, 1748,  318,  456,  457,
  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
  468,  469,  470,  395,  388,  256,  505,  506,  353,  318,
  509,  707,  328,  358,  338,  523, 1556, 1384, 1780,  338,
  256,  256,  256,  531, 1298,  523,  256,  455,  496,  455,
  330,  366,  284,  531,  183, 1056,  444,  357,  389,  378,
  904,  386,  393, 1097,  390,  390,  393,  392,  393,  394,
  395,  353,  388,  391, 1617,  400,  183,  359,  301,  361,
 1072,  256,  364,  365,  358,  367,  368, 1567,  256,  874,
  370,  527,  528,  387,  256, 1575,  356,  533,  941,  393,
  579, 1448,  581, 1646, 1647,  825, 1360, 1650,  256,  580,
  386,  393,  386,  256, 1120, 1369,  390,  941,  392,  393,
 1663,  395,  393, 1666,  388,  444,  400,  407,  388, 1011,
 1011,  851,  573,  391,  391,  614,  391, 1011, 1681,  982,
  256,  589,  973,  833, 1398,  444,  378,  256,  338,  372,
  440,  897, 1632,  997, 1155,  378, 1157,  447,  378, 1160,
  391,  640, 1705, 1240,  612,  388,  614,  441,  616,  392,
  395,  386, 1206,  455,  256,  391,  866,  391,  353,  821,
  395,  391,  405,  859,  359,  266,  361,  262,  629,  364,
  365,  353,  367,  368,  256,  387,  476,  359,  575,  361,
  648,  395,  364,  365,  652,  367,  368,  256,  266,  263,
  387,  690,  444,  445,  387,  358,  393,  665,  386,  667,
  388,  444,  663,  400,  444,  102,  103,  706,  707, 1060,
  305,  679,  757,  671,  454,  757,  318,  393,  395,  680,
  388,  671, 1319,  386,  715,  716,  327,  390,  125,  392,
  393,  628,  395,  973,  444,  256, 1257,  400, 1259,  707,
 1261,  455,  700,  455,  387,  387,  358,  715,  716,  327,
  700,  380,  388,  378,  328,  102,  103, 1058,  455,  391,
  455,  353,  455,  762,  380,  269,  442,  358,  390, 1475,
 1476,  353,  256,  455,  390, 1365,  390,  359,  125,  361,
  580, 1092,  364,  365,  353,  367,  368,   21,  400,  293,
  359, 1497,  361,  394,  386,  364,  365,  318,  367,  368,
  272,  413,  397,  398,  391,  909,  272, 1003,  272,  808,
  393,  810,  455,  455, 1096, 1095,  394,  301, 1524,  444,
  819, 1061,  413,  455,  446,  358,   60,  392,  440,  454,
  446,  303,  229,  230, 1134,  447,  387,  303,  806,  303,
  256, 1547,  454,  811,  812,  387,  814, 1249, 1249,  440,
 1252, 1252, 1373, 1255, 1255, 1249,  447,  444, 1252,  442,
  859, 1255, 1476,  454,  336,  388, 1207,  400,  353,  392,
  336,  671,  336,  455, 1717, 1718, 1476, 1476,  877,  387,
  413, 1043,  229,  230,  449,  393,  455, 1399, 1409,  386,
  386,  859, 1233,  444,  390,  897, 1476,  272,  897, 1476,
  700,  386,  444,  300, 1209,  904,  874,  440,  388,  284,
 1524,  394, 1472,  288,  447,  715,  716, 1476, 1476, 1476,
  400,  454,    6, 1224, 1524, 1524,  449,  895,  303,  400,
  413, 1774,  319,   17,  902,  332,  904,  353,  852,  326,
 1461,  256,  413,  359, 1524,  361,  405, 1524,  364,  365,
  446,  367,  368,  300,  269,  353,  256,  440,  355, 1480,
   17,  336,  359,  358,  447, 1524, 1524, 1524,  929,  440,
  931,  454, 1102,  972, 1311,  943,  447, 1173,  293,  947,
  353, 1562,  357,   67,  390,  332,  392,   71,  386,  957,
  951,  386,  953, 1574,  353,  994,  394,  358,  997,  990,
  395,  398,  399,  389, 1003,  413,  390,  393, 1170, 1011,
   67, 1010,  359,  386,   71, 1164, 1146,  390,  102,  103,
 1011,  353,  990,  353,  372,  386,  358,  386, 1365,  997,
 1038, 1306,  440,  430,  395, 1003, 1579, 1005,  386,  455,
 1038,  125,  390,  413,  389,  358, 1347, 1015,  393,  386,
 1593,  398,  399,  353,  386,  319,  386,  405,  395,  359,
  372,  361,  326,  395,  364,  365,  378,  367,  368,  356,
  440,  413, 1615,  386,  338, 1350,  388,  447,  475,  391,
  392,  393,  395,  430,  379,  358,  358,  887, 1056,  889,
 1058,  372,  892,  405,  894,  390,  387,  392,  440,  183,
  391,  388, 1593, 1102,  395,  447, 1074,  358,  505,  506,
  403,  392,  454,  386,  386, 1083, 1670, 1078, 1086,  414,
  415, 1396,  372, 1460,  405, 1562,  183,  387,  475, 1097,
  301,  391,  444,  393, 1048,  386,  936, 1574, 1137,  939,
  940,  386,  392,  438, 1340,  229,  230, 1146,  319,  389,
  395,  446, 1120,  393,  449,  405,  386,  386,  505,  506,
  319,  390,  321,  392,  393,  395,  395,  326,  401,  402,
  387,  400,  386,  458, 1173,  393,  393,  395, 1732,  338,
  387,  395,  400,  400,  391,  418,  419, 1155,  395, 1157,
  990, 1190, 1160,  408, 1537,  392,  387, 1196,  395, 1536,
  389, 1544,  393, 1100,  393, 1173, 1416, 1482, 1412,  389,
  390, 1011,  441,  393,  389, 1769,  300, 1382,  393,  389,
  390,  389,  392,  393,  394,  393,  391, 1590,  393,  391,
  395,  393,  389,  395, 1794, 1795,  393,  392, 1206,  390,
  395, 1209,  409,  394, 1607,  387,  330, 1249,  332,  391,
 1252,  392, 1251, 1255,  395,  389, 1556,  391, 1249,  393,
  410, 1252, 1230, 1626, 1255, 1628, 1180,  411, 1182, 1249,
 1184,  355, 1252,  330, 1242,  359,  389,  404,  391, 1240,
  393,  365,  422,  389,  387,  441,  370,  393,  391, 1257,
  387, 1259,  412, 1261,  391,  388, 1264, 1537,  481,  482,
  483,  484,  416,  417, 1544,  405,  406,  407,  472,  473,
  474,  420,  421,  370,  398,  399,  390,  386,  392,  388,
  391, 1275,  393,  407,  391,  391,  393,  393,  391,  393,
  393,  395,  444,  389, 1302,  391,  444,  389, 1306,  391,
  393, 1340,  395,  389,  256,  391,  430,  389,  284,  391,
  407,  435,  391, 1311,  393,  392, 1324, 1325, 1319,  756,
  391, 1311,  393,  389,  389,  391,  391,  387,  388,  393,
  386,  395, 1340,  395, 1382, 1341, 1384,  395,  393, 1347,
  395, 1682, 1350,  393, 1382,  395, 1384,  393,  256,  395,
  394,  475,  476,  393,  394,  381,  382,  369,  370,  369,
  370,  392,  387,  388, 1412, 1373,  395, 1365,  256,  756,
  301, 1379, 1212,  395, 1412, 1365,  383,  384,  372,  476,
  301,  505,  506,  358,  378,  379,  440,  441, 1396,  381,
  382,  444,  386,  391,  388, 1235,  390,  391,  392,  393,
 1448, 1409, 1410,  381,  382,  395,  383,  384,  444, 1249,
 1448,  405, 1252,  485,  486, 1255,  477,  478,  371,  388,
  414,  415,  479,  480,  440,  391,  394, 1475, 1476,  391,
  395,  391,  391, 1472,  455,  393,  400, 1475, 1476,  261,
  387,  391,  391,  391,  438,  444,  301,  301,  393, 1497,
  444,  391,  446, 1461,  391,  449,  580,  400, 1298, 1497,
  393,  391, 1460,  256, 1472, 1806,  395,  454,  454,  291,
 1460, 1311, 1480,  390, 1482,  256, 1524,  301,  301,  391,
  400,  444,  304,  580,  393,  392, 1524,  309,  394, 1528,
  393,  928,  392,  315,  391,  400,  395,  393,  320, 1547,
  322,  323,  324,  325,  393,  444,  328,  393,  330, 1547,
  393,  948,  334,  395,  455,  449,  391,  393,  386,  393,
 1360,  391,  394,  390,  346, 1365,  358,  443,  350, 1369,
  352,  393,  969,  391,  301,  659,  301,  393, 1536, 1540,
  444,  928,  389,  444,  390,  386, 1536,  671,  256,  394,
  102,  103,  256,  393,  256,  377,  256,  400, 1398,  287,
  256,  948,  387,  287,  379,  387,  388,  691,  386,  358,
  391,  391,  387,  125,  671,  390,  700,  392,  393,  395,
  305,  400,  969,  391,  393,  400,  389,  391,  390,  395,
  395,  715,  716, 1601,  393,  393,  391, 1598,  389,  414,
  415,  391,  362,  700,  400,  443,  400,  256,  386,  256,
  449,  256, 1660,  400,  400,  391,  387,  391,  715,  716,
 1460,  362, 1660,  438,  393, 1062,  389,  389,  394, 1677,
  389,  446,  756,  390,  449,  391,  353,  386,  393, 1677,
  455,    0, 1690, 1691,  363,  387,  391,  444,  363,  256,
  390,  387, 1690, 1691,  386,  386,  444,  400,  395,  386,
  371,  387, 1670,  351,  393,  395,  387, 1668,  391, 1717,
 1718,  387,  390,  225, 1682, 1062,  318,  229,  230, 1717,
 1718,  391,  387,  444,  390,  388,  444,  386,  395,  390,
  444, 1699,  390,  444,  386,  390, 1536, 1134,  392,  390,
  358,  825,  395,  400,  353,  390,  388,  390,  256,  393,
  359,  400,  361,  362,  363,  364,  365,  366,  367,  368,
  369,  370,  371,  391, 1732,  391, 1774,  851,  392,  102,
  103,  392,  381,  382,  393,  444, 1774,  393,  387,  393,
  389, 1178,  391,  395,  393,  394,  395,  391,  300,  389,
  391,  328,  125,  387,  444, 1794, 1795,  395,  379,  395,
  391, 1769,  395,  887,  444,  889,  387,  444,  892,  390,
  894,  392,  393,  391,  400,  391, 1777, 1778,  400,  389,
  332,  387,  391, 1784, 1785,  263, 1794, 1795,  390,  390,
  887, 1178,  889,  414,  415,  892,  400,  894, 1806,  387,
  391,  391,  395,  355,  928,    0,  455,  359,    0,  444,
  386,  395,  936,  365,  386,  939,  940,  438,  387,  393,
  395,  391,    0,  387,  948,  446,  391,  395,  449,  386,
  391,  444,  395,  389,  455,  395,  387,  391,  387,  936,
  386,  391,  939,  940,  389,  969,  398,  399,  444,  973,
  444,  395,  225,  387,  391,  395,  229,  230,  391,  395,
  391,  387,  391,  387,  386,  395,  990,  387,  387,  392,
  395,  328,  263,   58,  395,   12,    5,  395,  430,  395,
  395,  395,  395,  435,  395, 1043, 1170, 1011, 1340, 1340,
 1547, 1497, 1552,  990, 1392, 1722, 1685, 1738,  257, 1702,
 1673, 1598,  261, 1668, 1065, 1060, 1065, 1524,    0, 1065,
  865, 1579, 1785,  272, 1011, 1599, 1512, 1779, 1448, 1691,
 1778, 1690, 1628,  475, 1695,  284, 1038,  300,  365,  288,
 1451,  716,  291,  667, 1003,  256,  859, 1061, 1062,   85,
  897, 1092, 1224,  394,  303,  304, 1251, 1255,  476, 1386,
  309,  489,  487,  505,  506,  314,  315, 1346,  490,  332,
  973,  320, 1428,  322,  323,  324,  325,  476,  495, 1535,
 1311,  330,  659,  183,  491,  334,  488,  336, 1208, 1296,
 1325, 1233,  355,  493,  536,  492,  359,  346,  494, 1192,
  349,  350,  365,  352, 1309, 1311, 1399, 1368,  357, 1530,
  630, 1106, 1410,  817,   -1, 1040,  514,   -1,   -1,  514,
 1134,   -1,   -1, 1033, 1451,   -1,   -1,   -1,  377,   -1,
   -1,  261,   -1,   -1,   -1,  398,  399,   -1,  387,  388,
   -1,   -1,  353,   -1,   -1,   -1,   -1, 1474,  359,   -1,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,  291,   -1,   -1, 1178,   -1,   -1,  430,   -1,   -1,
  381,  382,  435,   -1,  304,   -1,  387,   -1,  389,  309,
  391,   -1,  393,  394,  395,  315,   -1,   -1,   -1,   -1,
  320,   -1,  322,  323,  324,  325,   -1, 1474, 1212,   -1,
  330,  412,   -1,   -1,  334,   -1,   -1,   -1, 1535,   -1,
   -1,   -1,  475,   -1,   -1,   -1,  346,  659,   -1,   -1,
  350, 1235,  352,   -1,   -1, 1212, 1553, 1554,   -1, 1556,
   -1,   -1,   -1,   -1,   -1, 1249,   -1,   -1, 1252,   -1,
   -1, 1255,  505,  506,  455,   -1,   -1,  377, 1235,  691,
   -1,   -1,   -1,   -1, 1581,   -1,   -1, 1584, 1535,   -1,
   -1,   -1, 1249,   -1,   -1, 1252,   -1,   -1, 1255,   -1,
   -1,   -1,    0,  536,   -1,  257, 1553, 1554,   -1,  261,
   -1,   -1,   -1,   -1, 1298,   -1,   -1,   -1,   -1,   -1,
  272,   -1,   -1,   -1,   -1,   -1,   -1, 1311,   -1,   -1,
   -1,   -1,  284,   -1, 1581,   -1,  288, 1584,   -1,  291,
  256, 1298,   -1,   -1,  756,   -1,   -1,   -1,   -1,   -1,
   -1,  303,  304,   -1, 1311,   -1,   -1,  309,   -1,   -1,
   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,  320,   -1,
  322,  323,  324,  325,   -1,   -1, 1360,   -1,  330,   -1,
   -1, 1365,  334,   -1,  336, 1369,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  346,   -1,    0,   -1,  350,   -1,
  352,   -1, 1386, 1360,   -1,  357,   -1,   -1, 1365,  821,
   -1,  108, 1369,  825, 1398,   -1,   -1,  114,  115,  116,
  117,  118,  119,  120,  121,  377,  659,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  386,  387,  388,  353,   -1,  851,
   -1, 1398,   -1,  359,   -1,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,   -1,   -1,   -1,  691,   -1,
   -1,   -1,   -1,   -1,   -1,  381,  382, 1451,   -1,   -1,
   -1,  387,   -1,  389,   -1,  391, 1460,  393,  394,  395,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
 1474,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1, 1460,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  928,   -1,   -1,   -1,
   -1,   -1,   -1,  756,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  948,   -1,   -1,  455,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1, 1535, 1536, 1537,   -1,   -1,   -1,  969,   -1,  257,
 1544,  973,   -1,  261,   -1,   -1,   -1,   -1,   -1, 1553,
 1554,   -1, 1556,   -1,  272,   -1,   -1,   -1,   -1, 1536,
    0,   -1,   -1,   -1,   -1,   -1,  284,   -1,  821,   -1,
  288,   -1,  825,  291,   -1,   -1,   -1, 1581,   -1,   -1,
 1584,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,
   -1,  309,  261,   -1,  263,   -1,  314,  315,  851,   -1,
   -1,   -1,  320,   -1,  322,  323,  324,  325,   -1,   -1,
   -1, 1043,  330,   -1,   -1,   -1,  334,   -1,  336,   -1,
   -1,   -1,  291,  340,   -1,   -1,   -1,   -1,  346, 1061,
 1062,  349,  350,  257,  352,  304,   -1,  261,   -1,  357,
  309,   -1,   -1,   -1,   -1,   -1,  315,   -1,  272,   -1,
   -1,  320,   -1,  322,  323,  324,  325,   -1,   -1,  377,
  284,  330,   -1,   -1,  288,  334,   -1,  291,   -1,   -1,
  388,   -1,   -1,   -1,  391,  928,   -1,  346,   -1,  303,
  304,  350,   -1,  352,  401,  309,   -1,   -1,   -1,   -1,
  314,  315,   -1,   -1,   -1,  948,  320,   -1,  322,  323,
  324,  325, 1134,   -1,   -1,   -1,  330,   -1,  377,    0,
  334,   -1,  336,   -1,   -1,   -1,  969,   -1,  387,  388,
  973,   -1,  346,   -1,   -1,   -1,  350,   -1,  352,   -1,
   -1,   -1,   -1,  357,   -1,   -1,   -1,   -1, 1170,   -1,
   -1,   -1,   -1,   -1,   -1,   -1, 1178,   -1,   -1,   -1,
   -1,   -1,   -1,  377,  471,  472,  473,  474,   -1,   -1,
  477,  478,  479,  480,  481,  482,  483,  484,  485,  486,
  487,  488,  489,  490,  491,  492,  493,  494,  495,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
 1043,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1061, 1062,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,  266,  267,  268,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,   -1,   -1,
   -1,   -1,  292,   -1,  294,  295,  296,  297,  298,  299,
   -1,   -1,  302,   -1,   -1,   -1,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,  316,  317,   -1,   -1,
   -1, 1134,    0,   -1,   -1,   -1,   -1,  327,   -1,  329,
   -1,  331,  332,  610,   -1,  335,   -1,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,   -1,
   -1,  351,   -1,   -1,  354,  355,  356, 1170,   -1,  359,
  360,   -1,   -1,   -1,   -1, 1178,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,
   -1,  381,  382,   -1,   -1,   -1,  386,  387,   -1,   -1,
  390,   -1,   -1,   -1, 1386,  395,  396,  397,  398,  399,
   -1,   -1,   -1,  403,   -1,  405,  257,   -1,   -1,   -1,
  261,   -1,    0,   -1,  414,  415,   -1,   -1,   -1,  696,
   -1,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,   -1,   -1,   -1,  288,   -1,   -1,
  291,   -1,   -1,  443,  444,  445,  446,   -1,  448,   -1,
   -1,   -1,  303,  304,   -1,  455,   -1,   -1,  309, 1451,
   -1,   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,  320,
   -1,  322,  323,  324,  325,   -1,  753,  754,   -1,  330,
   -1,   -1, 1474,  334,   -1,  336,   -1,   -1,    0,   -1,
   -1,   -1,   -1,  256,  771,  346,   -1,   -1,   -1,  350,
   -1,  352,  265,   -1,  267,   -1,  357,  270,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,   -1,   -1,  286,   -1,   -1,  377,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  387,  388,   -1,  302,
   -1,   -1,   -1, 1535,   -1, 1537,   -1,   -1,   -1,   -1,
  313,   -1, 1544,   -1,  317,   -1,   -1,   -1,   -1,   -1,
   -1, 1553, 1554,   -1, 1556,   -1,  329,   -1,  331,   -1,
 1562,   -1,  335, 1386,   -1,   -1,   -1,   -1,   -1,  257,
  343,  344, 1574,  261,  347,   -1,   -1, 1579,  351, 1581,
   -1,   -1, 1584,   -1,  272,   -1,   -1,   -1,   -1,   -1,
   -1, 1593,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
  288,   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1, 1615,  901,  303,  304,   -1,   -1,   -1,
   -1,  309,   -1,   -1,   -1,   -1,  314,  315, 1451,   -1,
   -1,   -1,  320,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,  330,   -1,   -1,   -1,  334,   -1,  336,   -1,
   -1, 1474,   -1,   -1,   -1,   -1,   -1,   -1,  346,  257,
   -1,   -1,  350,  261,  352,   -1,   -1,   -1,   -1,  357,
   -1,  444,   -1,    0,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,  377,
  288,   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,
   -1,  309, 1535,   -1, 1537,   -1,  314,  315,   -1,   -1,
   -1, 1544,  320,   -1,  322,  323,  324,  325,   -1,   -1,
 1553, 1554,  330, 1556,  256,   -1,  334,   -1,  336,  261,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  346,   -1,
   -1,   -1,  350,   -1,  352,   -1,   -1,   -1, 1581,  357,
   -1, 1584,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,   -1,  304,  305,   -1,   -1,   -1,  309,   -1,   -1,
  388,   -1,   -1,  315,   -1,   -1,  318,   -1,  320,   -1,
  322,  323,  324,  325,   -1, 1092,   -1,   -1,  330,   -1,
   -1,   -1,  334,   -1,   -1,   -1,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  346,   -1,   -1,   -1,  350,   -1,
  352,  353,   -1,   -1,   -1,   -1,  358,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1, 1141,  377,  378,  379,   -1,  381,
  382,   -1,   -1,   -1,  386,  387,    0,  389,  390,  391,
  392,  393,  394,  395,   -1,  397,  398,   -1,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,   -1,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
  432,  433,  434,  435,  436,  437,  438,  439,   -1,   -1,
  442,   -1,  444,   -1,  446,   -1,   -1,  449,   -1,  256,
  257,   -1,   -1,  455,   -1,   -1,  458,  264,  265,  266,
  267,  268,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,  294,  295,  296,
  297,  298,  299,   -1,   -1,  302,   -1,   -1,   -1,  306,
  307,  308,  309,  310,  311,  312,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  327,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,    0,   -1,  351,   -1,   -1,  354,  355,  356,
   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,
  387,   -1,   -1,  390,   -1,  400,   -1,   -1,  395,  396,
  397,  398,  399,   -1,   -1,   -1,  403,   -1,  405,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,  415,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
  435,  436,  437,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  443,  444,  445,  446,
   -1,  448,  256,  257,   -1,   -1,   -1,   -1,  455,   -1,
  264,  265,  266,  267,  268,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,
  294,  295,  296,  297,  298,  299,   -1,   -1,  302,   -1,
   -1,   -1,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,  327,   -1,  329,   -1,  331,  332,   -1,
   -1,  335,   -1,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,   -1,   -1,  351,   -1,   -1,
  354,  355,  356,   -1,   -1,  359,  360,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,
   -1,   -1,  386,  387,   -1,   -1,  390,   -1,   -1,   -1,
   -1,  395,  396,  397,  398,  399,   -1,   -1,   -1,  403,
   -1,  405,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
  414,  415,   -1,  261,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  443,
  444,  445,  446,  291,  448,   -1,   -1,   -1,   -1,   -1,
   -1,  455,   -1,   -1,   -1,   -1,  304,  305,   -1,   -1,
   -1,  309,   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,
  318,   -1,  320,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,   -1,  330,   -1,   -1,   -1,  334,   -1,    0,   -1,
  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  346,   -1,
   -1,   -1,  350,   -1,  352,  353,   -1,   -1,   -1,   -1,
  358,  359,   -1,  361,  362,  363,  364,  365,  366,  367,
  368,  369,  370,  371,  372,   -1,   -1,   -1,   -1,  377,
  378,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,  387,
  388,  389,  390,  391,  392,  393,  394,  395,   -1,  397,
  398,   -1,   -1,  401,  402,  403,  404,  405,   -1,   -1,
  408,  409,  410,  411,  412,   -1,   -1,   -1,  416,  417,
  418,  419,  420,  421,  422,  423,  256,   -1,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  439,   -1,   -1,  442,   -1,  444,   -1,  446,   -1,
   -1,  449,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,
   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  304,  305,   -1,   -1,   -1,  309,
   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,   -1,
  320,   -1,  322,  323,  324,  325,   -1,   -1,   -1,   -1,
  330,   -1,   -1,   -1,  334,   -1,    0,   -1,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  346,   -1,   -1,   -1,
  350,   -1,  352,  353,   -1,   -1,   -1,   -1,  358,  359,
   -1,  361,  362,  363,  364,  365,  366,  367,  368,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,   -1,
   -1,  381,  382,   -1,   -1,   -1,  386,  387,  388,  389,
  390,  391,   -1,  393,  394,  395,   -1,  397,  398,   -1,
   -1,  401,  402,  403,  404,   -1,   -1,   -1,  408,  409,
  410,  411,  412,   -1,   -1,   -1,  416,  417,  418,  419,
  420,  421,  422,  423,  256,   -1,   -1,   -1,   -1,  261,
  262,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  439,
   -1,   -1,  442,   -1,  444,   -1,  446,   -1,   -1,  449,
   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,   -1,  291,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  304,  305,   -1,   -1,   -1,  309,   -1,   -1,
   -1,   -1,   -1,  315,   -1,   -1,  318,   -1,  320,   -1,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,  330,   -1,
   -1,   -1,  334,   -1,   -1,   -1,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  346,   -1,   -1,   -1,  350,   -1,
  352,  353,   -1,   -1,   -1,   -1,  358,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,   -1,   -1,  381,
  382,   -1,    0,   -1,  386,  387,  388,  389,  390,  391,
   -1,  393,  394,  395,   -1,  397,  398,   -1,   -1,  401,
  402,  403,  404,   -1,   -1,   -1,  408,  409,  410,  411,
  412,   -1,   -1,   -1,  416,  417,  418,  419,  420,  421,
  422,  423,  256,   -1,   -1,   -1,   -1,  261,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  439,   -1,   -1,
  442,   -1,  444,   -1,  446,   -1,   -1,  449,   -1,   -1,
   -1,   -1,   -1,  455,   -1,   -1,   -1,  291,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  304,  305,   -1,   -1,   -1,  309,   -1,   -1,   -1,   -1,
   -1,  315,   -1,   -1,  318,   -1,  320,   -1,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,  330,   -1,   -1,   -1,
  334,   -1,   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  346,   -1,   -1,   -1,  350,  256,  352,  353,
   -1,   -1,   -1,  262,  358,  359,   -1,  361,  362,  363,
  364,  365,  366,  367,  368,  369,  370,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,   -1,   -1,  381,  382,   -1,
   -1,   -1,  386,  387,   -1,  389,  390,  391,   -1,  393,
  394,  395,   -1,  397,  398,   -1,  305,  401,  402,  403,
  404,   -1,   -1,    0,  408,  409,  410,  411,  412,   -1,
   -1,   -1,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  439,   -1,   -1,  442,   -1,
  444,   -1,   -1,   -1,  353,   -1,   -1,   -1,   -1,  358,
  359,  455,  361,  362,  363,  364,  365,  366,  367,  368,
  369,  370,  371,  372,   -1,   -1,   -1,   -1,  256,  378,
   -1,   -1,  381,  382,  262,   -1,   -1,  386,  387,  388,
  389,  390,  391,  392,  393,  394,  395,   -1,  397,  398,
   -1,    0,  401,  402,  403,  404,  405,   -1,   -1,  408,
  409,  410,  411,  412,   -1,   -1,   -1,  416,  417,  418,
  419,  420,  421,  422,  423,   -1,   -1,  305,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  439,   -1,   -1,  442,   -1,  444,   -1,  446,   -1,   -1,
  449,   -1,   -1,   -1,   -1,   -1,  455,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,   -1,
  358,  359,   -1,  361,  362,  363,  364,  365,  366,  367,
  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,
  378,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  395,   -1,  397,
  398,   -1,   -1,  401,  402,  403,  404,    0,   -1,   -1,
  408,  409,  410,  411,  412,   -1,   -1,   -1,  416,  417,
  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  439,   -1,   -1,  442,   -1,  444,   -1,  446,  256,
  257,  449,   -1,   -1,  261,   -1,   -1,  455,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,  273,    0,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,  284,   -1,  286,
   -1,  288,  289,  290,  291,   -1,   -1,  294,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,   -1,   -1,  313,  314,  315,   -1,
  317,    0,   -1,  320,   -1,  322,  323,  324,  325,   -1,
   -1,   -1,  329,  330,  331,   -1,   -1,  334,  335,  336,
   -1,   -1,   -1,   -1,   -1,   -1,  343,  344,  257,  346,
  347,   -1,  261,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,   -1,   -1,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,  288,
  377,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,  386,
  387,  388,   -1,   -1,  303,  304,   -1,   -1,   -1,  396,
  309,   -1,   -1,   -1,  257,  314,  315,   -1,  261,   -1,
   -1,  320,   -1,  322,  323,  324,  325,   -1,   -1,  272,
   -1,  330,   -1,   -1,   -1,  334,   -1,  336,   -1,   -1,
   -1,  284,   -1,   -1,   -1,  288,   -1,  346,  291,   -1,
   -1,  350,   -1,  352,   -1,   -1,   -1,  444,  357,   -1,
  303,  304,   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,
   -1,  314,  315,   -1,   -1,   -1,   -1,  320,  377,  322,
  323,  324,  325,   -1,  257,   -1,   -1,  330,  261,   -1,
   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,   -1,  272,
   -1,   -1,   -1,  346,   -1,   -1,   -1,  350,   -1,  352,
   -1,  284,   -1,   -1,  357,  288,   -1,   -1,  291,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  303,  304,   -1,   -1,  377,   -1,  309,   -1,   -1,   -1,
   -1,  314,  315,   -1,  257,   -1,   -1,  320,  261,  322,
  323,  324,  325,   -1,   -1,   -1,   -1,  330,   -1,  272,
   -1,  334,   -1,  336,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,   -1,  346,   -1,  288,   -1,  350,  291,  352,
   -1,   -1,   -1,   -1,  357,   -1,   -1,   -1,  257,  256,
  303,  304,  261,   -1,   -1,  262,  309,   -1,   -1,   -1,
   -1,  314,  315,  272,  377,   -1,   -1,  320,   -1,  322,
  323,  324,  325,   -1,   -1,  284,   -1,  330,   -1,  288,
   -1,  334,  291,  336,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  346,  303,  304,   -1,  350,  305,  352,
  309,   -1,   -1,   -1,  357,  314,  315,   -1,   -1,   -1,
   -1,  320,   -1,  322,  323,  324,  325,   -1,   -1,   -1,
   -1,  330,   -1,   -1,  377,  334,   -1,  336,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,  346,   -1,   -1,
   -1,  350,   -1,  352,   -1,   -1,  353,   -1,  357,   -1,
   -1,   -1,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,  372,   -1,   -1,  377,   -1,
   -1,  378,  379,   -1,  381,  382,  305,   -1,   -1,  386,
  387,  388,  389,  390,  391,  392,  393,  394,  395,   -1,
  397,  398,   -1,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,   -1,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,
  437,  438,  439,  440,   -1,  256,   -1,  444,   -1,  446,
  447,  262,  449,   -1,   -1,   -1,   -1,   -1,  455,   -1,
  379,  458,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,  391,  392,  393,  394,   -1,   -1,  397,  398,
   -1,   -1,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  305,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
  439,   -1,   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,
  449,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  458,
   -1,   -1,  353,   -1,   -1,   -1,   -1,   -1,  359,  256,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,   -1,
  381,  382,   -1,   -1,   -1,  386,  387,  388,  389,  390,
  391,  392,  393,  394,  395,   -1,  397,  398,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,
  256,   -1,   -1,  444,   -1,  446,  262,   -1,  449,   -1,
   -1,   -1,   -1,   -1,  455,   -1,  353,  458,   -1,   -1,
   -1,   -1,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  305,
  387,   -1,  389,   -1,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,  401,  402,  403,  404,   -1,   -1,
   -1,  408,  409,  410,  411,  412,   -1,   -1,   -1,  416,
  417,  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,
   -1,   -1,  439,  359,  256,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,  371,  372,   -1,  455,   -1,
   -1,   -1,  378,  379,   -1,  381,  382,   -1,   -1,   -1,
  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
   -1,  397,  398,   -1,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,   -1,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,   -1,  256,   -1,   -1,  444,   -1,
  446,  262,   -1,  449,   -1,   -1,   -1,   -1,   -1,  455,
   -1,  353,  458,   -1,   -1,   -1,   -1,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  305,  387,   -1,  389,   -1,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,  401,
  402,  403,  404,   -1,   -1,   -1,  408,  409,  410,  411,
  412,   -1,   -1,   -1,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,   -1,   -1,   -1,  439,  359,  256,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,  372,   -1,  455,   -1,   -1,   -1,  378,  379,   -1,
  381,  382,   -1,   -1,   -1,   -1,  387,  388,  389,  390,
  391,  392,  393,  394,  395,   -1,  397,  398,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  438,  439,   -1,
  256,   -1,   -1,  444,   -1,  446,  262,   -1,  449,   -1,
   -1,   -1,   -1,   -1,  455,   -1,  353,  458,   -1,   -1,
   -1,   -1,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  305,
  387,   -1,  389,   -1,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,  401,  402,  403,  404,   -1,   -1,
   -1,  408,  409,  410,  411,  412,   -1,   -1,   -1,  416,
  417,  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,
   -1,   -1,  439,  359,  256,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,  371,   -1,   -1,  455,   -1,
   -1,   -1,   -1,  379,   -1,  381,  382,   -1,   -1,   -1,
  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
   -1,  397,  398,   -1,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,   -1,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,   -1,  256,   -1,   -1,   -1,   -1,
  446,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,
   -1,  353,  458,   -1,   -1,   -1,   -1,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  305,  387,   -1,  389,   -1,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,  401,
  402,  403,  404,   -1,   -1,   -1,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,   -1,   -1,   -1,  439,  359,  256,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,   -1,   -1,  455,   -1,   -1,   -1,   -1,  379,   -1,
  381,  382,   -1,   -1,   -1,  386,  387,   -1,  389,  390,
  391,  392,  393,  394,  395,   -1,  397,  398,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  438,  439,   -1,
  256,   -1,   -1,   -1,   -1,  446,  262,   -1,  449,   -1,
   -1,   -1,   -1,   -1,  455,   -1,  353,  458,   -1,   -1,
   -1,   -1,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  305,
  387,   -1,  389,   -1,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,  401,  402,  403,  404,   -1,   -1,
   -1,  408,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,
   -1,   -1,  439,  359,  256,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,  371,   -1,   -1,  455,   -1,
   -1,   -1,   -1,  379,   -1,  381,  382,   -1,   -1,   -1,
   -1,  387,   -1,  389,  390,  391,  392,  393,  394,  395,
   -1,  397,  398,   -1,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,   -1,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,   -1,  256,   -1,   -1,   -1,   -1,
  446,  262,   -1,  449,   -1,   -1,   -1,   -1,   -1,  455,
   -1,  353,  458,   -1,   -1,   -1,   -1,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  305,  387,   -1,  389,   -1,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,  401,
  402,  403,  404,   -1,   -1,   -1,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,   -1,   -1,   -1,  439,  359,  256,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,   -1,   -1,  455,   -1,   -1,   -1,   -1,  379,   -1,
  381,  382,   -1,   -1,   -1,   -1,  387,   -1,  389,  390,
  391,  392,  393,  394,  395,   -1,  397,  398,   -1,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  438,  439,   -1,
  256,   -1,   -1,   -1,   -1,  446,  262,   -1,  449,   -1,
   -1,   -1,   -1,   -1,  455,   -1,  353,  458,   -1,   -1,
   -1,   -1,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  305,
  387,   -1,  389,   -1,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,  401,  402,  403,  404,   -1,   -1,
   -1,  408,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  418,  419,  420,  421,  422,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,
   -1,   -1,  439,  359,  256,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,  371,   -1,   -1,  455,   -1,
   -1,   -1,   -1,  379,   -1,  381,  382,   -1,   -1,   -1,
   -1,  387,   -1,  389,  390,  391,  392,  393,  394,  395,
   -1,  397,  398,   -1,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,   -1,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,   -1,  256,   -1,   -1,   -1,   -1,
  446,  262,   -1,  449,   -1,   -1,   -1,   -1,   -1,  455,
   -1,  353,  458,   -1,   -1,   -1,   -1,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  305,  387,   -1,  389,   -1,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  404,   -1,   -1,   -1,   -1,  256,   -1,  411,
  412,   -1,   -1,  262,   -1,   -1,   -1,  266,   -1,   -1,
  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,   -1,   -1,   -1,  439,  359,   -1,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,   -1,   -1,  455,   -1,   -1,  305,   -1,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,  387,   -1,  389,   -1,
  391,   -1,  393,  394,  395,   -1,  397,  398,  327,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,   -1,   -1,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  256,  439,   -1,
   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,  378,
  379,   -1,   -1,   -1,  455,   -1,   -1,  458,  387,  388,
  389,  390,  391,  392,  393,  394,  395,   -1,  397,  398,
   -1,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,   -1,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
  439,   -1,  256,   -1,   -1,  444,   -1,  446,  262,   -1,
  449,   -1,   -1,   -1,   -1,   -1,  455,   -1,   -1,  458,
   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,   -1,   -1,
  359,   -1,  361,  362,  363,  364,  365,  366,  367,  368,
  369,  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  305,  381,  382,   -1,   -1,   -1,   -1,  387,   -1,
  389,   -1,  391,   -1,  393,  394,  395,   -1,   -1,   -1,
   -1,   -1,  401,  402,  403,  404,   -1,   -1,   -1,  408,
  409,  410,  411,  412,   -1,   -1,   -1,   -1,   -1,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,
  439,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  378,  379,  455,   -1,   -1,   -1,
   -1,   -1,   -1,  387,  388,  389,  390,  391,  392,  393,
   -1,  395,   -1,  397,  398,   -1,  400,  401,  402,  403,
  404,  305,  406,  407,  408,  409,  410,  411,  412,   -1,
  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
  434,  435,  436,  437,  438,  439,   -1,  256,   -1,   -1,
  444,   -1,  446,  262,   -1,  449,   -1,   -1,   -1,  353,
   -1,  455,   -1,   -1,  458,  359,   -1,  361,  362,  363,
  364,  365,  366,  367,  368,  369,  370,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,  382,   -1,
   -1,   -1,   -1,  387,   -1,  389,  305,  391,   -1,  393,
  394,  395,   -1,  397,  398,   -1,   -1,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,   -1,
   -1,   -1,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  439,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  455,   -1,   -1,  458,   -1,   -1,   -1,   -1,   -1,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  387,   -1,
   -1,  390,   -1,  392,  393,   -1,   -1,   -1,  397,  398,
   -1,   -1,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,   -1,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,
  439,   -1,   -1,  256,   -1,   -1,   -1,  446,   -1,   -1,
  449,  264,  265,  266,  267,   -1,  455,  270,  271,  458,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
   -1,   -1,   -1,  306,  307,  308,  309,  310,  311,  312,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  327,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,   -1,   -1,  351,   -1,
   -1,  354,  355,  356,  256,   -1,  359,  360,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,  386,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,  395,  396,  397,  398,  399,   -1,   -1,   -1,
  403,   -1,  405,  305,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  414,  415,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  443,  444,  445,  446,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  353,  455,   -1,   -1,  262,   -1,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,   -1,   -1,  378,  379,   -1,  381,
  382,   -1,   -1,   -1,   -1,  387,  388,  389,   -1,  391,
  392,  393,  394,  395,   -1,  397,  398,   -1,  305,  401,
  402,  403,  404,   -1,   -1,   -1,  408,  409,  410,  411,
  412,   -1,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  438,  439,   -1,   -1,
   -1,   -1,  444,   -1,  446,   -1,  353,  449,   -1,   -1,
   -1,   -1,  359,  455,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,   -1,
  256,   -1,  379,   -1,  381,  382,  262,   -1,   -1,   -1,
  387,   -1,  389,  390,  391,  392,  393,  394,  395,   -1,
  397,  398,   -1,   -1,  401,  402,  403,  404,   -1,   -1,
   -1,  408,  409,  410,  411,  412,   -1,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,   -1,   -1,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  438,  439,   -1,   -1,   -1,   -1,   -1,   -1,  446,
   -1,   -1,  449,   -1,   -1,   -1,   -1,   -1,  455,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  353,   -1,   -1,
   -1,  262,   -1,  359,   -1,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  379,   -1,  381,  382,   -1,   -1,   -1,
   -1,  387,   -1,  389,  390,  391,  392,  393,  394,  395,
   -1,  397,  398,   -1,  305,  401,  402,  403,  404,   -1,
   -1,   -1,  408,  409,  410,  411,  412,   -1,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  438,  439,   -1,   -1,   -1,   -1,   -1,   -1,
  446,   -1,  353,  449,   -1,   -1,   -1,   -1,  359,  455,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,   -1,   -1,   -1,   -1,   -1,  256,   -1,  379,   -1,
  381,  382,  262,   -1,   -1,   -1,  387,   -1,  389,  390,
  391,  392,  393,  394,  395,   -1,  397,  398,   -1,   -1,
  401,  402,  403,  404,   -1,   -1,   -1,  408,  409,  410,
  411,  412,   -1,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,   -1,   -1,  305,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  438,  439,   -1,
   -1,   -1,   -1,   -1,   -1,  446,   -1,   -1,  449,   -1,
   -1,   -1,   -1,   -1,  455,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,  353,   -1,   -1,   -1,  262,   -1,  359,
   -1,  361,  362,  363,  364,  365,  366,  367,  368,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,  378,   -1,
   -1,  381,  382,   -1,   -1,   -1,   -1,  387,  388,  389,
   -1,  391,   -1,  393,  394,  395,   -1,  397,  398,   -1,
  305,  401,  402,  403,  404,   -1,   -1,   -1,  408,  409,
  410,  411,  412,   -1,   -1,   -1,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,  439,
   -1,   -1,   -1,   -1,  444,   -1,   -1,   -1,  353,   -1,
   -1,   -1,   -1,   -1,  359,  455,  361,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  381,  382,   -1,  305,
   -1,   -1,  387,   -1,  389,   -1,  391,   -1,  393,  394,
  395,   -1,  397,  398,   -1,   -1,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,   -1,   -1,
   -1,  416,  417,  418,  419,  420,  421,  422,  423,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  353,   -1,   -1,
   -1,  262,   -1,  359,  439,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,  371,   -1,   -1,   -1,   -1,
  455,   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,
   -1,  387,   -1,  389,   -1,  391,   -1,  393,  394,  395,
   -1,  397,  398,   -1,  305,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,   -1,   -1,   -1,
  416,  417,  418,  419,  420,  421,  422,  423,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,   -1,   -1,   -1,   -1,  359,  455,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  381,  382,   -1,  305,   -1,   -1,  387,   -1,  389,   -1,
  391,   -1,  393,  394,  395,   -1,  397,  398,   -1,   -1,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,   -1,   -1,   -1,  416,  417,  418,  419,  420,
  421,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  353,   -1,   -1,   -1,   -1,   -1,  359,  439,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,  455,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,   -1,  387,   -1,  389,   -1,  391,
   -1,  393,  394,  395,   -1,  397,  398,   -1,   -1,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,   -1,   -1,   -1,  416,  417,  418,  419,  420,  421,
  422,  423,   -1,   -1,  256,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,  439,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,  455,  286,   -1,   -1,   -1,   -1,   -1,
  292,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,
  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,
  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,
   -1,  256,   -1,  353,   -1,   -1,   -1,  262,   -1,  359,
   -1,  361,  362,  363,  364,  365,  366,  367,  368,  369,
  370,  371,  374,  375,  376,  377,  378,   -1,   -1,  381,
  382,  381,  382,   -1,   -1,   -1,   -1,  387,  390,  389,
   -1,  391,   -1,  393,  394,  395,   -1,   -1,   -1,   -1,
  305,   -1,   -1,  403,  404,   -1,   -1,   -1,  408,  409,
  410,  411,  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  439,
   -1,  443,  444,   -1,   -1,   -1,   -1,   -1,  353,   -1,
   -1,   -1,  454,  455,  359,  455,  361,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371,   -1,   -1,   -1,
   -1,   -1,  256,  378,   -1,   -1,  381,  382,  262,  261,
   -1,   -1,  387,   -1,  389,   -1,  391,   -1,  393,  394,
  395,   -1,  397,  398,   -1,   -1,  401,  402,  403,  404,
   -1,   -1,   -1,  408,  409,  410,  411,  412,   -1,  291,
   -1,  416,  417,  418,  419,  420,  421,  422,  423,   -1,
   -1,  305,  304,   -1,   -1,   -1,   -1,  309,   -1,   -1,
   -1,   -1,   -1,  315,  439,   -1,   -1,   -1,  320,  444,
  322,  323,  324,  325,   -1,   -1,   -1,   -1,  330,   -1,
  455,  256,  334,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,  346,   -1,   -1,   -1,  350,  353,
  352,   -1,   -1,   -1,   -1,  359,   -1,  361,  362,  363,
  364,  365,  366,  367,  368,  369,  370,  371,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,   -1,  381,  382,   -1,
  305,  383,  384,  387,   -1,  389,   -1,  391,   -1,  393,
  394,  395,   -1,  397,  398,   -1,   -1,  401,  402,  403,
  404,   -1,   -1,   -1,  408,  409,  410,  411,  412,   -1,
   -1,   -1,  416,  417,  418,  419,  420,  421,  422,  423,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  353,   -1,
   -1,   -1,  262,   -1,  359,  439,  361,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371,   -1,   -1,   -1,
   -1,  455,   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,  387,   -1,  389,   -1,  391,   -1,  393,  394,
  395,   -1,  397,  398,   -1,  305,  401,  402,  403,  404,
   -1,   -1,   -1,  408,  409,  410,  411,  412,   -1,   -1,
   -1,  416,  417,  418,  419,  420,  421,  422,  423,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  353,   -1,   -1,   -1,   -1,   -1,  359,
  455,  361,  362,  363,  364,  365,  366,  367,  368,  369,
  370,  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  381,  382,   -1,  305,   -1,   -1,  387,   -1,  389,
   -1,  391,   -1,  393,  394,  395,   -1,  397,  398,   -1,
   -1,  401,  402,  403,  404,   -1,   -1,   -1,  408,  409,
  410,  411,  412,   -1,  256,   -1,  416,  417,  418,  419,
  420,  421,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,   -1,   -1,   -1,   -1,  359,  439,
  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
  371,   -1,   -1,   -1,   -1,  455,   -1,   -1,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,  387,   -1,  389,   -1,
  391,   -1,  393,  394,  395,   -1,  397,  398,   -1,  256,
  401,  402,  403,  404,   -1,   -1,   -1,  408,  409,  410,
  411,  412,   -1,   -1,   -1,  416,  417,  418,  419,  420,
  421,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  353,   -1,   -1,   -1,   -1,   -1,  359,  439,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,   -1,   -1,  455,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  256,  387,   -1,  389,   -1,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  403,  404,   -1,   -1,   -1,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,  353,   -1,  420,  421,
  422,  423,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,  439,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  256,
  387,   -1,  389,  455,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,   -1,   -1,
   -1,  408,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  353,   -1,  420,  421,  422,  423,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  256,  387,   -1,  389,  455,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  403,  404,   -1,   -1,   -1,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
  422,  423,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,  439,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  256,
  387,   -1,  389,  455,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,   -1,   -1,
   -1,  408,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  353,   -1,   -1,   -1,  422,  423,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  256,  387,   -1,  389,  455,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  404,   -1,   -1,   -1,  408,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
  422,  423,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,  439,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  256,
  387,   -1,  389,  455,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  404,   -1,   -1,
   -1,  408,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  353,   -1,   -1,   -1,  422,  423,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  256,  387,   -1,  389,  455,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  404,   -1,   -1,   -1,   -1,  409,  410,  411,
  412,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
  422,  423,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,  439,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  256,
  387,   -1,  389,  455,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  404,   -1,   -1,
   -1,   -1,  409,  410,  411,  412,   -1,   -1,   -1,   -1,
   -1,  353,   -1,   -1,   -1,  422,  423,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  256,  387,   -1,  389,  455,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  404,   -1,   -1,   -1,   -1,  409,   -1,  411,
  412,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
  422,  423,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,  439,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  256,
  387,   -1,  389,  455,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  404,   -1,   -1,
   -1,   -1,  409,   -1,  411,  412,   -1,   -1,   -1,   -1,
   -1,  353,   -1,   -1,   -1,  422,  423,  359,   -1,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,  256,  387,   -1,  389,  455,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  404,   -1,   -1,   -1,   -1,   -1,   -1,  411,
  412,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
  422,  423,  359,   -1,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,  439,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  256,
  387,   -1,  389,  455,  391,   -1,  393,  394,  395,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  404,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,  353,   -1,   -1,   -1,  422,  423,  359,  256,  361,
  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,
   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,  381,
  382,   -1,   -1,   -1,   -1,  387,   -1,  389,  455,  391,
   -1,  393,  394,  395,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  404,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
  422,  423,  359,  256,  361,  362,  363,  364,  365,  366,
  367,  368,  369,  370,  371,   -1,   -1,  439,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
  387,   -1,  389,  455,  391,  353,  393,  394,  395,   -1,
   -1,  359,  256,  361,  362,  363,  364,  365,  366,  367,
  368,  369,  370,  371,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  381,  382,  422,  423,   -1,   -1,  387,
   -1,  389,   -1,  391,   -1,  393,  394,  395,   -1,   -1,
   -1,   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  412,   -1,   -1,   -1,  455,   -1,
  353,   -1,   -1,   -1,  422,  423,  359,   -1,  361,  362,
  363,  364,  365,  366,  367,  368,  369,  370,  371,   -1,
   -1,  439,   -1,   -1,   -1,   -1,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,  387,   -1,  389,  455,  391,  353,
  393,  394,  395,   -1,   -1,  359,   -1,  361,  362,  363,
  364,  365,  366,  367,  368,  369,  370,  371,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,  382,   -1,
  423,   -1,   -1,  387,   -1,  389,   -1,  391,   -1,  393,
  394,  395,   -1,   -1,   -1,   -1,  439,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,   -1,
   -1,   -1,  455,   -1,   -1,   -1,   -1,   -1,   -1,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  439,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,  267,
  268,  455,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,   -1,  292,   -1,  294,  295,  296,  297,
  298,  299,   -1,   -1,  302,   -1,   -1,   -1,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,  316,  317,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,   -1,   -1,  351,   -1,   -1,  354,  355,  356,   -1,
   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,   -1,
   -1,   -1,  390,   -1,   -1,   -1,   -1,  395,  396,  397,
  398,  399,   -1,   -1,   -1,  403,   -1,  405,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  414,  415,   -1,   -1,
   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,   -1,  443,  444,  445,  446,  292,
  448,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
   -1,   -1,   -1,  306,  307,  308,  309,  310,  311,  312,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  327,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,   -1,   -1,  351,   -1,
   -1,  354,  355,  356,   -1,   -1,  359,  360,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,  386,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,  395,  396,  397,  398,  399,   -1,   -1,   -1,
  403,   -1,  405,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  414,  415,   -1,   -1,   -1,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  285,  286,   -1,
  443,  444,  445,  446,  292,   -1,  294,  295,  296,  297,
  298,  299,   -1,   -1,  302,   -1,   -1,   -1,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,  316,  317,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,   -1,   -1,  351,   -1,   -1,  354,  355,  356,   -1,
   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,   -1,
   -1,   -1,  390,   -1,   -1,   -1,   -1,  395,  396,  397,
  398,  399,   -1,   -1,   -1,  403,   -1,  405,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  414,  415,   -1,   -1,
   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,   -1,  443,  444,  445,  446,  292,
   -1,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
   -1,   -1,   -1,  306,  307,  308,  309,  310,  311,  312,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  327,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,   -1,   -1,  351,   -1,
   -1,  354,  355,  356,   -1,   -1,  359,  360,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,  386,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,  395,  396,  397,  398,  399,   -1,   -1,   -1,
  403,   -1,  405,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  414,  415,   -1,   -1,   -1,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  285,  286,   -1,
  443,  444,  445,  446,  292,   -1,  294,  295,  296,  297,
  298,  299,   -1,   -1,  302,   -1,   -1,   -1,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,  316,  317,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,   -1,   -1,  351,   -1,   -1,  354,  355,  356,   -1,
   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,   -1,
   -1,   -1,  390,   -1,   -1,   -1,   -1,  395,  396,  397,
  398,  399,   -1,   -1,   -1,  403,   -1,  405,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  414,  415,   -1,   -1,
   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,   -1,  443,  444,  445,  446,  292,
   -1,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
   -1,   -1,   -1,  306,  307,  308,  309,  310,  311,  312,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  327,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,   -1,   -1,  351,   -1,
   -1,  354,  355,  356,   -1,   -1,  359,  360,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,  386,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,  395,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,  445,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,  326,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,  393,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,   -1,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,  445,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,  360,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,  386,  387,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,   -1,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,  445,  446,   -1,  302,  449,   -1,
   -1,   -1,   -1,  454,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,  386,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
  445,  446,   -1,  302,  449,   -1,   -1,   -1,   -1,  454,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,
  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,  386,  387,   -1,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,  445,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,  319,   -1,   -1,   -1,
   -1,   -1,   -1,  326,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   -1,   -1,  359,  360,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,  445,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,  333,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,  445,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
  351,   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,  360,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,  445,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,  386,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,  262,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
  445,  446,   -1,  302,   -1,   -1,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,  396,  397,  398,
  399,  400,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   -1,   -1,  359,  360,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,  387,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,  445,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
  387,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,  445,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,  360,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,  445,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,  262,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
  445,  446,   -1,  302,   -1,   -1,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,   -1,   -1,  359,  360,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,  445,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,  445,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,  360,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,  445,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,  262,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
  445,  446,   -1,  302,   -1,   -1,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,  392,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  392,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,   -1,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,   -1,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,   -1,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,   -1,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,   -1,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,   -1,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,   -1,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,   -1,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,   -1,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,   -1,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,   -1,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,
   -1,  256,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,   -1,  443,  444,   -1,  446,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,
  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,
  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  396,  397,  398,  399,   -1,   -1,  256,  403,   -1,
  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,
  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,
   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,
  399,   -1,   -1,  256,  403,   -1,  405,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,  414,  415,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,
  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,  256,
  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  443,  444,   -1,  446,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,  398,  399,   -1,   -1,  256,  403,   -1,  405,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,
   -1,  292,   -1,   -1,  295,   -1,  443,  444,   -1,  446,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,
  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,   -1,   -1,  397,  398,   -1,   -1,
  256,   -1,   -1,   -1,  405,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,   -1,  284,   -1,
  286,   -1,  288,  289,  290,  291,   -1,   -1,  294,  295,
   -1,   -1,  443,  444,  300,  446,  302,  303,  304,   -1,
   -1,   -1,   -1,  309,   -1,   -1,   -1,  313,   -1,  315,
   -1,  317,   -1,   -1,  320,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,  329,  330,  331,   -1,   -1,  334,  335,
  336,   -1,   -1,   -1,   -1,   -1,   -1,  343,  344,  256,
  346,  347,   -1,   -1,  350,  351,  352,  264,  265,   -1,
  267,  357,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,  377,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,
  386,  387,  388,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  396,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,
   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,
  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,  256,  381,  382,   -1,   -1,   -1,   -1,
   -1,   -1,  265,  390,  267,   -1,   -1,  270,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,  317,   -1,  443,  444,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,   -1,
   -1,   -1,  335,   -1,   -1,   -1,  256,  261,   -1,   -1,
  343,  344,   -1,   -1,  347,  265,   -1,  267,  351,   -1,
  270,   -1,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,   -1,   -1,  286,  291,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  304,   -1,  302,   -1,   -1,  309,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  313,   -1,   -1,  320,  317,  322,  323,
  324,  325,   -1,   -1,   -1,   -1,  330,   -1,   -1,  329,
  334,  331,   -1,   -1,   -1,  335,   -1,   -1,   -1,   -1,
   -1,   -1,  346,  343,  344,  256,  350,  347,  352,   -1,
   -1,  351,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  444,   -1,   -1,  275,  276,  277,  278,  279,  280,
  281,  282,   -1,  377,   -1,  286,   -1,   -1,   -1,  383,
  384,   -1,   -1,  387,  295,   -1,   -1,   -1,   -1,  256,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,
  267,   -1,  313,  270,   -1,   -1,  317,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,  329,  286,
  331,   -1,   -1,   -1,  335,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  343,  344,   -1,  302,  347,   -1,   -1,   -1,
  351,   -1,   -1,   -1,  444,   -1,  313,   -1,   -1,   -1,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,   -1,   -1,   -1,  335,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,  344,   -1,   -1,
  347,   -1,   -1,  261,  351,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,   -1,  284,   -1,  286,   -1,
  288,  289,  290,  291,   -1,   -1,  294,  295,   -1,   -1,
   -1,   -1,  300,  301,  302,  303,  304,   -1,   -1,   -1,
   -1,  309,   -1,  444,   -1,  313,   -1,  315,   -1,  317,
   -1,  319,  320,   -1,  322,  323,  324,  325,   -1,   -1,
  328,  329,  330,  331,   -1,   -1,  334,  335,  336,   -1,
   -1,   -1,   -1,   -1,   -1,  343,  344,   -1,  346,  347,
   -1,   -1,  350,  351,  352,   -1,   -1,  444,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,   -1,   -1,   -1,   -1,  383,  384,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,  284,   -1,  286,   -1,  288,  289,  290,  291,   -1,
   -1,  294,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,
  313,   -1,  315,   -1,  317,   -1,  444,  320,   -1,  322,
  323,  324,  325,   -1,   -1,   -1,  329,  330,  331,   -1,
   -1,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,
  343,  344,   -1,  346,  347,   -1,   -1,  350,  351,  352,
   -1,   -1,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  261,  387,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,  396,  272,  273,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,   -1,  284,   -1,  286,   -1,
  288,  289,  290,  291,   -1,   -1,  294,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,  309,   -1,   -1,   -1,  313,   -1,  315,   -1,  317,
   -1,  444,  320,   -1,  322,  323,  324,  325,   -1,   -1,
   -1,  329,  330,  331,   -1,   -1,  334,  335,  336,   -1,
   -1,   -1,   -1,   -1,   -1,  343,  344,   -1,  346,  347,
   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,  387,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,  396,  272,
  273,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,  284,   -1,  286,   -1,  288,  289,  290,  291,   -1,
   -1,  294,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,
  313,   -1,  315,   -1,  317,   -1,  444,  320,   -1,  322,
  323,  324,  325,   -1,   -1,   -1,  329,  330,  331,   -1,
   -1,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,
  343,  344,   -1,  346,  347,   -1,   -1,  350,  351,  352,
   -1,   -1,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,  377,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,  284,   -1,  286,   -1,  288,  289,
  290,  291,   -1,  396,  294,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,   -1,   -1,  313,   -1,  315,   -1,  317,   -1,   -1,
  320,   -1,  322,  323,  324,  325,   -1,   -1,   -1,  329,
  330,  331,   -1,   -1,  334,  335,  336,   -1,   -1,   -1,
   -1,  444,   -1,  343,  344,   -1,  346,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,  261,
   -1,   -1,   -1,  265,   -1,  267,   -1,  387,  270,   -1,
  272,  273,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,  284,   -1,  286,   -1,  288,  289,  290,  291,
   -1,   -1,  294,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  261,
   -1,  313,   -1,  315,   -1,  317,   -1,   -1,  320,   -1,
  322,  323,  324,  325,  444,   -1,   -1,  329,  330,  331,
   -1,   -1,  334,  335,  336,   -1,   -1,   -1,   -1,  291,
   -1,  343,  344,   -1,  346,  347,   -1,   -1,  350,  351,
  352,   -1,  304,   -1,  261,  357,   -1,  309,   -1,   -1,
   -1,   -1,   -1,  315,   -1,   -1,  318,   -1,  320,   -1,
  322,  323,  324,  325,   -1,  377,   -1,   -1,  330,   -1,
   -1,   -1,  334,   -1,  291,  387,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  346,   -1,   -1,  304,  350,   -1,
  352,   -1,  309,   -1,  261,   -1,   -1,   -1,  315,   -1,
   -1,  318,   -1,  320,   -1,  322,  323,  324,  325,   -1,
  372,   -1,   -1,  330,   -1,  377,   -1,  334,   -1,   -1,
   -1,  338,   -1,   -1,  291,  387,  388,   -1,  390,  346,
  392,   -1,  444,  350,   -1,  352,   -1,  304,   -1,   -1,
   -1,   -1,  309,  405,  261,   -1,   -1,   -1,  315,   -1,
   -1,  318,   -1,  320,   -1,  322,  323,  324,  325,   -1,
  377,   -1,   -1,  330,   -1,   -1,   -1,  334,   -1,   -1,
  387,  338,   -1,   -1,  291,   -1,   -1,   -1,   -1,  346,
   -1,   -1,  444,  350,   -1,  352,   -1,  304,   -1,  261,
   -1,   -1,  309,   -1,   -1,   -1,   -1,   -1,  315,   -1,
   -1,   -1,   -1,  320,   -1,  322,  323,  324,  325,   -1,
  377,   -1,   -1,  330,   -1,   -1,   -1,  334,   -1,  291,
  387,  338,   -1,   -1,   -1,  261,   -1,  444,   -1,  346,
   -1,   -1,  304,  350,   -1,  352,   -1,  309,   -1,   -1,
   -1,   -1,   -1,  315,   -1,   -1,   -1,   -1,  320,   -1,
  322,  323,  324,  325,   -1,  291,   -1,   -1,  330,   -1,
  377,   -1,  334,   -1,   -1,   -1,  338,   -1,  304,   -1,
  387,   -1,   -1,  309,  346,   -1,   -1,  444,  350,  315,
  352,   -1,   -1,   -1,  320,   -1,  322,  323,  324,  325,
   -1,   -1,   -1,   -1,  330,   -1,   -1,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  377,  264,  265,   -1,  267,
  346,   -1,  270,  271,  350,   -1,  352,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  444,  286,   -1,
   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,   -1,
   -1,  377,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,
   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,
   -1,  329,  444,  331,  332,   -1,   -1,  335,   -1,   -1,
  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,   -1,
   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,  444,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  390,  391,   -1,  393,   -1,   -1,  396,  397,
  398,  399,   -1,   -1,   -1,  403,   -1,  405,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,
  292,   -1,   -1,  295,   -1,  443,  444,  445,  446,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,  315,  316,  317,   -1,  319,   -1,   -1,
   -1,   -1,   -1,   -1,  326,   -1,   -1,  329,   -1,  331,
  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,
  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,  360,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,
  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,
   -1,  393,   -1,   -1,  396,  397,  398,  399,   -1,   -1,
   -1,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,
   -1,  443,  444,  445,  446,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,
  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,
   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,
   -1,  347,   -1,   -1,   -1,  351,   -1,   -1,   -1,   -1,
  356,   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,   -1,   -1,   -1,  403,   -1,  405,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,  445,
  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,
   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,
  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,
   -1,  351,   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,
  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,
   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
   -1,   -1,   -1,  403,   -1,  405,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,
   -1,  295,   -1,  443,  444,  445,  446,   -1,  302,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,
   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,
  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,   -1,   -1,  359,  360,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,
   -1,   -1,  386,   -1,   -1,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,   -1,   -1,   -1,  403,
   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,   -1,
   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,
  444,  445,  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,
  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,   -1,
   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,   -1,
   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,   -1,   -1,   -1,  403,   -1,  405,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,
  292,   -1,   -1,  295,   -1,  443,  444,  445,  446,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,
  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,
  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,  360,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,
  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,
   -1,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,
   -1,  443,  444,  445,  446,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,
  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,
   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,
   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,   -1,   -1,  359,  360,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,
  396,  397,  398,  399,   -1,   -1,   -1,  403,   -1,  405,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,  414,  415,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,   -1,   -1,  295,   -1,  443,  444,  445,
  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,
   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,
  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,  359,
  360,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,
   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
   -1,   -1,   -1,  403,   -1,  405,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,  414,  415,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,
   -1,  295,   -1,  443,  444,  445,  446,   -1,  302,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,  332,   -1,
   -1,  335,   -1,   -1,  338,   -1,  340,   -1,  342,  343,
  344,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,   -1,   -1,  359,  360,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,  376,  377,  378,   -1,   -1,  381,  382,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,   -1,   -1,   -1,  403,
   -1,  405,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
  414,  415,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,   -1,  286,   -1,
   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,  443,
  444,  445,  446,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,  316,  317,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,
  338,   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
  378,   -1,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,   -1,   -1,   -1,  403,   -1,  405,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,  414,  415,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,
  292,   -1,   -1,  295,   -1,  443,  444,   -1,  446,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,  315,  316,  317,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,
  332,   -1,   -1,  335,   -1,   -1,  338,   -1,  340,   -1,
  342,  343,  344,  345,   -1,  347,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  374,  375,  376,  377,  378,   -1,   -1,  381,
  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,  398,  399,   -1,   -1,
   -1,  403,   -1,  405,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,  414,  415,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,   -1,
  286,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,
   -1,  443,  444,   -1,  446,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,
  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  329,   -1,  331,  332,   -1,   -1,  335,
   -1,   -1,  338,   -1,  340,   -1,  342,  343,  344,  345,
   -1,  347,   -1,   -1,   -1,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,   -1,   -1,  381,  382,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,
   -1,  397,  398,   -1,  264,  265,   -1,  267,   -1,  405,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,   -1,
   -1,   -1,  292,   -1,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,  302,   -1,   -1,   -1,   -1,  443,  444,   -1,
  446,   -1,   -1,  313,   -1,  315,  316,  317,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,
   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,   -1,
  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,   -1,
   -1,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,   -1,
   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  390,   -1,   -1,   -1,   -1,   -1,   -1,  397,  398,  263,
   -1,  265,   -1,  267,   -1,  405,  270,   -1,  272,  273,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,   -1,
  284,   -1,  286,   -1,  288,  289,  290,   -1,   -1,   -1,
  294,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
   -1,   -1,   -1,  443,  444,   -1,  446,   -1,   -1,  313,
   -1,   -1,   -1,  317,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  328,  329,   -1,  331,   -1,   -1,
   -1,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,  343,
  344,   -1,   -1,  347,   -1,  264,  265,  351,  267,   -1,
   -1,  270,  271,  357,   -1,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,   -1,  286,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,   -1,   -1,  383,
  384,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,   -1,  313,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,  332,   -1,   -1,  335,   -1,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,   -1,  347,   -1,
   -1,   -1,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  444,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,  378,
   -1,   -1,  381,  382,   -1,  265,   -1,  267,   -1,   -1,
  270,  390,  272,  273,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,  284,   -1,  286,   -1,  288,  289,
  290,   -1,   -1,   -1,  294,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,   -1,   -1,
   -1,   -1,   -1,   -1,  443,  444,   -1,   -1,   -1,  329,
   -1,  331,   -1,   -1,   -1,  335,  336,   -1,   -1,   -1,
   -1,   -1,   -1,  343,  344,   -1,   -1,  347,   -1,   -1,
   -1,  351,   -1,  265,   -1,  267,   -1,  357,  270,   -1,
  272,  273,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,  284,   -1,  286,   -1,  288,  289,  290,   -1,
   -1,   -1,  294,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,   -1,   -1,   -1,   -1,  396,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,  317,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,
   -1,   -1,   -1,  335,  336,   -1,   -1,   -1,   -1,   -1,
   -1,  343,  344,   -1,   -1,  347,   -1,   -1,  265,  351,
  267,   -1,   -1,  270,  444,  357,  273,   -1,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,  284,   -1,  286,
   -1,  288,  289,  290,   -1,   -1,   -1,  294,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,   -1,   -1,   -1,  335,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,  344,   -1,   -1,
  347,   -1,   -1,  265,  351,  267,   -1,   -1,  270,   -1,
  357,  273,  444,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,  284,   -1,  286,   -1,  288,  289,  290,   -1,
   -1,   -1,  294,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,
   -1,  313,   -1,   -1,   -1,  317,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,
   -1,   -1,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  343,  344,   -1,   -1,  347,   -1,   -1,  265,  351,
  267,   -1,   -1,  270,   -1,  357,   -1,  444,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
  317,   -1,  319,   -1,  321,   -1,   -1,   -1,   -1,  326,
   -1,   -1,  329,   -1,  331,   -1,   -1,   -1,  335,   -1,
   -1,  338,   -1,   -1,   -1,   -1,  343,  344,   -1,   -1,
  347,   -1,   -1,  265,  351,  267,   -1,   -1,  270,   -1,
   -1,   -1,  444,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,  317,   -1,  319,   -1,  321,
   -1,   -1,   -1,   -1,  326,   -1,   -1,  329,   -1,  331,
   -1,   -1,   -1,  335,   -1,   -1,  338,   -1,   -1,   -1,
   -1,  343,  344,   -1,   -1,  347,   -1,   -1,  265,  351,
  267,   -1,   -1,  270,   -1,   -1,   -1,  444,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,  389,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,  326,
   -1,   -1,  329,   -1,  331,   -1,   -1,   -1,  335,   -1,
   -1,  338,   -1,   -1,   -1,   -1,  343,  344,   -1,   -1,
  347,   -1,   -1,  265,  351,  267,   -1,   -1,  270,   -1,
   -1,   -1,  444,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,  378,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,  317,   -1,  319,   -1,  321,
   -1,   -1,   -1,   -1,  326,   -1,   -1,  329,   -1,  331,
   -1,   -1,   -1,  335,   -1,   -1,  338,   -1,   -1,   -1,
   -1,  343,  344,   -1,   -1,  347,   -1,   -1,  265,  351,
  267,   -1,   -1,  270,   -1,   -1,   -1,  444,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
  317,   -1,  319,   -1,  321,   -1,   -1,   -1,   -1,  326,
   -1,   -1,  329,   -1,  331,   -1,   -1,   -1,  335,   -1,
   -1,  338,   -1,   -1,   -1,   -1,  343,  344,   -1,   -1,
  347,   -1,   -1,  265,  351,  267,   -1,   -1,  270,   -1,
   -1,   -1,  444,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,  286,   -1,   -1,   -1,  290,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,  317,  318,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,
   -1,   -1,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  343,  344,   -1,   -1,  347,   -1,   -1,  265,  351,
  267,   -1,   -1,  270,   -1,  272,   -1,  444,  275,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,  265,   -1,  267,   -1,  313,  270,  315,   -1,
  317,   -1,  275,  276,  277,  278,  279,  280,  281,  282,
   -1,   -1,  329,  286,  331,   -1,   -1,   -1,  335,  336,
   -1,   -1,  295,   -1,   -1,   -1,  343,  344,   -1,  302,
  347,   -1,   -1,   -1,  351,   -1,  265,   -1,  267,   -1,
  313,  270,  444,   -1,  317,   -1,  275,  276,  277,  278,
  279,  280,  281,  282,   -1,   -1,  329,  286,  331,   -1,
   -1,   -1,  335,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  343,  344,   -1,  302,  347,   -1,   -1,   -1,  351,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,   -1,   -1,  378,  335,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  343,  344,   -1,   -1,  347,   -1,
   -1,  265,  351,  267,   -1,   -1,  270,  444,   -1,   -1,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,
   -1,   -1,  391,   -1,   -1,  265,   -1,  267,   -1,  313,
  270,  444,   -1,  317,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,   -1,  329,  286,  331,   -1,   -1,
   -1,  335,   -1,   -1,   -1,  295,   -1,   -1,   -1,  343,
  344,   -1,  302,  347,   -1,   -1,   -1,  351,   -1,  265,
   -1,  267,   -1,  313,  270,  444,   -1,  317,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,   -1,   -1,  329,
  286,  331,   -1,   -1,   -1,  335,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  343,  344,  389,  302,  347,   -1,   -1,
   -1,  351,   -1,  265,   -1,  267,   -1,  313,  270,   -1,
   -1,  317,   -1,  275,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,  329,  286,  331,   -1,   -1,   -1,  335,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  343,  344,   -1,
  302,  347,   -1,   -1,   -1,  351,   -1,  265,   -1,  267,
  444,  313,  270,   -1,   -1,  317,   -1,  275,  276,  277,
  278,  279,  280,  281,  282,   -1,   -1,  329,  286,  331,
   -1,   -1,   -1,  335,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  343,  344,   -1,  302,  347,   -1,   -1,   -1,  351,
   -1,  265,   -1,  267,  444,  313,  270,   -1,   -1,  317,
   -1,  275,  276,  277,  278,  279,  280,  281,  282,   -1,
   -1,  329,  286,  331,   -1,   -1,   -1,  335,   -1,   -1,
   -1,  295,   -1,   -1,   -1,  343,  344,   -1,  302,  347,
   -1,   -1,   -1,  351,   -1,  265,   -1,  267,  444,  313,
  270,   -1,   -1,  317,   -1,  275,  276,  277,  278,  279,
  280,  281,  282,   -1,   -1,  329,  286,  331,   -1,   -1,
   -1,  335,   -1,   -1,   -1,  295,   -1,  292,   -1,  343,
  344,   -1,  302,  347,   -1,   -1,   -1,  351,   -1,  265,
  305,  267,  444,  313,  270,   -1,   -1,  317,   -1,  275,
  276,  277,  278,  279,  280,  281,  282,   -1,   -1,  329,
  286,  331,   -1,   -1,   -1,  335,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  343,  344,  340,  302,  347,   -1,   -1,
   -1,  351,   -1,   -1,   -1,   -1,  444,  313,   -1,   -1,
   -1,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  329,   -1,  331,   -1,   -1,   -1,  335,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,  344,   -1,
   -1,  347,   -1,   -1,   -1,  351,   -1,   -1,   -1,   -1,
  444,  396,  397,  398,  399,   -1,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,   -1,  261,  414,
  415,  416,  417,  418,  419,  420,  421,   -1,   -1,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,   -1,   -1,  444,  288,   -1,   -1,  291,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  303,  304,  261,  458,   -1,   -1,  309,   -1,   -1,   -1,
   -1,  314,  315,  272,   -1,   -1,   -1,  320,   -1,  322,
  323,  324,  325,   -1,   -1,  284,   -1,  330,  444,  288,
   -1,  334,  291,  336,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  346,  303,  304,  349,  350,   -1,  352,
  309,   -1,   -1,   -1,  357,  314,  315,   -1,   -1,   -1,
   -1,  320,   -1,  322,  323,  324,  325,   -1,   -1,   -1,
   -1,  330,  261,   -1,  377,  334,   -1,  336,   -1,   -1,
   -1,   -1,   -1,  272,  387,  388,   -1,  346,   -1,   -1,
   -1,  350,   -1,  352,   -1,  284,   -1,   -1,  357,  288,
   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  303,  304,  261,   -1,  377,   -1,
  309,   -1,   -1,   -1,   -1,  314,  315,  272,  387,  388,
   -1,  320,   -1,  322,  323,  324,  325,   -1,   -1,  284,
   -1,  330,   -1,  288,   -1,  334,  291,  336,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,   -1,  346,  303,  304,
   -1,  350,   -1,  352,  309,   -1,   -1,   -1,  357,  314,
  315,   -1,   -1,   -1,   -1,  320,   -1,  322,  323,  324,
  325,   -1,  291,   -1,   -1,  330,   -1,   -1,  377,  334,
   -1,  336,  261,   -1,   -1,  304,   -1,   -1,  387,   -1,
  309,  346,   -1,   -1,   -1,  350,  315,  352,   -1,   -1,
   -1,  320,  357,  322,  323,  324,  325,   -1,   -1,   -1,
   -1,  330,  291,   -1,   -1,  334,   -1,   -1,  261,   -1,
  263,   -1,  377,   -1,   -1,  304,   -1,  346,   -1,   -1,
  309,  350,  387,  352,   -1,   -1,  315,   -1,   -1,   -1,
   -1,  320,   -1,  322,  323,  324,  325,   -1,  291,  328,
   -1,  330,   -1,   -1,   -1,  334,   -1,   -1,  377,   -1,
   -1,  304,   -1,   -1,  383,  384,  309,  346,  387,   -1,
   -1,  350,  315,  352,  261,   -1,  263,  320,   -1,  322,
  323,  324,  325,   -1,   -1,   -1,   -1,  330,   -1,   -1,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  377,   -1,
   -1,   -1,   -1,  346,  291,   -1,   -1,  350,  387,  352,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,  261,   -1,
   -1,   -1,  309,   -1,   -1,   -1,   -1,   -1,  315,   -1,
   -1,   -1,   -1,  320,  377,  322,  323,  324,  325,   -1,
   -1,  328,   -1,  330,  387,   -1,   -1,  334,  291,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  304,   -1,  350,   -1,  352,  309,   -1,   -1,   -1,
   -1,  314,  315,   -1,   -1,   -1,   -1,  320,   -1,  322,
  323,  324,  325,   -1,   -1,   -1,   -1,  330,   -1,   -1,
  377,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  346,   -1,   -1,   -1,  350,   -1,  352,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  377,
  };

#line 7670 "D:\Projects\Rava\mono\mcs\mcs\\cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

[System.Diagnostics.Conditional ("FULL_AST")]
void PushLocation (Location loc)
{
	if (location_stack == null)
		location_stack = new Stack<Location> ();

	location_stack.Push (loc);
}

Location PopLocation ()
{
	if (location_stack == null)
		return Location.Null;

	return location_stack.Pop ();
}

string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "sub";
	case Token.DECIMAL:
		return "decimal";
	case Token.COMPLEX:
		return "complex";
	case Token.VLONG:
		return "vlong";
			case Token.QUAD:
		return "quad";

		case Token.DATE:
		return "date";
			case Token.TIME:
		return "time";
				case Token.POINTER:
		return "pointer";
			case Token.UPOINTER:
		return "upointer";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";

	case Token.XNOR:
		return "!^";
	case Token.NOR:
		return "!|";
	case Token.NAND:
		return "!&";

	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";

	case Token.OP_NAND_ASSIGN:
		return "!&=";
	case Token.OP_XNOR_ASSIGN:
		return "!^=";
	case Token.OP_POWER_ASSIGN:
		return "**=";
	case Token.OP_NOR_ASSIGN:
		return "!|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "super";
	case Token.BREAK:
		return "leave";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "except";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "persist";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "native";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "jmp";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "friend";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.ASSERT:
		return "assert";
  case Token.ASM:
		return "asm";
  case Token.SAFE:
		return "safe";
case Token.SYM:
		return "sym";
  case Token.SYNC:
		return "sync";

	case Token.RESTRICT:
		return "restrict";
	case Token.NAMESPACE:
		return "program";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "ret";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "final";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "self";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.INCLUDE:
		return "include";
	case Token.VIRTUAL:
		return "virt";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.LOOP:
		return "loop";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "shared";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
	case Token.WHEN:
		return "when";
	case Token.INTERPOLATED_STRING_END:
		return "}";
	case Token.INTERPOLATED_STRING:
		return "${";

	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.NAND:
	case Token.NOR:
	case Token.XNOR:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.OP_NAND_ASSIGN:
	case Token.OP_XNOR_ASSIGN:
	case Token.OP_POWER_ASSIGN:
	case Token.OP_NOR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.COMPLEX:
	case Token.VLONG:
		case Token.QUAD:
			case Token.DATE:
		case Token.TIME:
				case Token.POINTER:
		case Token.UPOINTER:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int COMPLEX = 276;
  public const int VLONG = 277;
  public const int DATE = 278;
  public const int TIME = 279;
  public const int QUAD = 280;
  public const int POINTER = 281;
  public const int UPOINTER = 282;
  public const int DEFAULT = 283;
  public const int DELEGATE = 284;
  public const int DO = 285;
  public const int DOUBLE = 286;
  public const int ELSE = 287;
  public const int ENUM = 288;
  public const int EVENT = 289;
  public const int EXPLICIT = 290;
  public const int EXTERN = 291;
  public const int FALSE = 292;
  public const int FINALLY = 293;
  public const int FIXED = 294;
  public const int FLOAT = 295;
  public const int FOR = 296;
  public const int FOREACH = 297;
  public const int GOTO = 298;
  public const int IF = 299;
  public const int IMPLICIT = 300;
  public const int IN = 301;
  public const int INT = 302;
  public const int INTERFACE = 303;
  public const int INTERNAL = 304;
  public const int IS = 305;
  public const int LOCK = 306;
  public const int ASSERT = 307;
  public const int ASM = 308;
  public const int SYNC = 309;
  public const int SAFE = 310;
  public const int SYM = 311;
  public const int RESTRICT = 312;
  public const int LONG = 313;
  public const int NAMESPACE = 314;
  public const int NEW = 315;
  public const int NULL = 316;
  public const int OBJECT = 317;
  public const int OPERATOR = 318;
  public const int OUT = 319;
  public const int OVERRIDE = 320;
  public const int PARAMS = 321;
  public const int PRIVATE = 322;
  public const int PROTECTED = 323;
  public const int PUBLIC = 324;
  public const int READONLY = 325;
  public const int REF = 326;
  public const int RETURN = 327;
  public const int REMOVE = 328;
  public const int SBYTE = 329;
  public const int SEALED = 330;
  public const int SHORT = 331;
  public const int SIZEOF = 332;
  public const int STACKALLOC = 333;
  public const int STATIC = 334;
  public const int STRING = 335;
  public const int STRUCT = 336;
  public const int SWITCH = 337;
  public const int THIS = 338;
  public const int THROW = 339;
  public const int TRUE = 340;
  public const int TRY = 341;
  public const int TYPEOF = 342;
  public const int UINT = 343;
  public const int ULONG = 344;
  public const int UNCHECKED = 345;
  public const int UNSAFE = 346;
  public const int USHORT = 347;
  public const int USING = 348;
  public const int INCLUDE = 349;
  public const int VIRTUAL = 350;
  public const int VOID = 351;
  public const int VOLATILE = 352;
  public const int WHERE = 353;
  public const int WHILE = 354;
  public const int LOOP = 355;
  public const int ARGLIST = 356;
  public const int PARTIAL = 357;
  public const int ARROW = 358;
  public const int FROM = 359;
  public const int FROM_FIRST = 360;
  public const int JOIN = 361;
  public const int ON = 362;
  public const int EQUALS = 363;
  public const int SELECT = 364;
  public const int GROUP = 365;
  public const int BY = 366;
  public const int LET = 367;
  public const int ORDERBY = 368;
  public const int ASCENDING = 369;
  public const int DESCENDING = 370;
  public const int INTO = 371;
  public const int INTERR_NULLABLE = 372;
  public const int EXTERN_ALIAS = 373;
  public const int REFVALUE = 374;
  public const int REFTYPE = 375;
  public const int MAKEREF = 376;
  public const int ASYNC = 377;
  public const int AWAIT = 378;
  public const int INTERR_OPERATOR = 379;
  public const int WHEN = 380;
  public const int INTERPOLATED_STRING = 381;
  public const int INTERPOLATED_STRING_END = 382;
  public const int GET = 383;
  public const int SET = 384;
  public const int LAST_KEYWORD = 385;
  public const int OPEN_BRACE = 386;
  public const int CLOSE_BRACE = 387;
  public const int OPEN_BRACKET = 388;
  public const int CLOSE_BRACKET = 389;
  public const int OPEN_PARENS = 390;
  public const int CLOSE_PARENS = 391;
  public const int DOT = 392;
  public const int COMMA = 393;
  public const int COLON = 394;
  public const int SEMICOLON = 395;
  public const int TILDE = 396;
  public const int PLUS = 397;
  public const int MINUS = 398;
  public const int BANG = 399;
  public const int ASSIGN = 400;
  public const int OP_LT = 401;
  public const int OP_GT = 402;
  public const int BITWISE_AND = 403;
  public const int BITWISE_OR = 404;
  public const int STAR = 405;
  public const int PERCENT = 406;
  public const int DIV = 407;
  public const int CARRET = 408;
  public const int XNOR = 409;
  public const int NOR = 410;
  public const int NAND = 411;
  public const int INTERR = 412;
  public const int DOUBLE_COLON = 413;
  public const int OP_INC = 414;
  public const int OP_DEC = 415;
  public const int OP_SHIFT_LEFT = 416;
  public const int OP_SHIFT_RIGHT = 417;
  public const int OP_LE = 418;
  public const int OP_GE = 419;
  public const int OP_EQ = 420;
  public const int OP_NE = 421;
  public const int OP_AND = 422;
  public const int OP_OR = 423;
  public const int OP_MULT_ASSIGN = 424;
  public const int OP_DIV_ASSIGN = 425;
  public const int OP_MOD_ASSIGN = 426;
  public const int OP_ADD_ASSIGN = 427;
  public const int OP_SUB_ASSIGN = 428;
  public const int OP_SHIFT_LEFT_ASSIGN = 429;
  public const int OP_SHIFT_RIGHT_ASSIGN = 430;
  public const int OP_AND_ASSIGN = 431;
  public const int OP_XOR_ASSIGN = 432;
  public const int OP_OR_ASSIGN = 433;
  public const int OP_NAND_ASSIGN = 434;
  public const int OP_XNOR_ASSIGN = 435;
  public const int OP_POWER_ASSIGN = 436;
  public const int OP_NOR_ASSIGN = 437;
  public const int OP_PTR = 438;
  public const int OP_COALESCING = 439;
  public const int OP_GENERICS_LT = 440;
  public const int OP_GENERICS_LT_DECL = 441;
  public const int OP_GENERICS_GT = 442;
  public const int LITERAL = 443;
  public const int IDENTIFIER = 444;
  public const int OPEN_PARENS_LAMBDA = 445;
  public const int OPEN_PARENS_CAST = 446;
  public const int GENERIC_DIMENSION = 447;
  public const int DEFAULT_COLON = 448;
  public const int OPEN_BRACKET_EXPR = 449;
  public const int EVAL_STATEMENT_PARSER = 450;
  public const int EVAL_COMPILATION_UNIT_PARSER = 451;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 452;
  public const int DOC_SEE = 453;
  public const int GENERATE_COMPLETION = 454;
  public const int COMPLETE_COMPLETION = 455;
  public const int BITWISE_NOR = 456;
  public const int BITWISE_NAND = 457;
  public const int POWER = 458;
  public const int UMINUS = 459;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
