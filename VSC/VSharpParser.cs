// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using VSC.AST;
using VSC.Base;
using VSC.Context;
using VSC.TypeSystem;
using VSC.TypeSystem.Implementation;
using VSC.TypeSystem.Resolver;
namespace VSC
{
	/// <summary>
	///   V# Parser
	/// </summary>
	public class VSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			Self	= 1 << 3,
			Params	= 1 << 4,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | Self | Params | DefaultValue,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		PackageContainer current_package;
	    TypeContainer current_container;
		TypeDeclaration current_type;
		FieldDeclaration current_field;
		PropertyOrIndexer current_property;
		EventDeclaration current_event;
		EventFieldDeclaration current_event_field;
	

		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariable current_variable;

		DelegateDeclaration   current_delegate;
		
		//AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;


		bool? interactive_async;
		
		Stack<QueryBlock> linq_clause_blocks;

		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		Stack<Location> opt_intoStack = new Stack<Location> ();

		bool HadAttributeParens;
		List<Location> attributeArgumentCommas = new List<Location> ();
		List<Location> parameterListCommas = new List<Location> ();
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 4;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_import_directives",
    "outer_declaration : opt_import_directives package_or_type_declarations opt_attributes",
    "outer_declaration : opt_import_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "import_directives : import_directive",
    "import_directives : import_directives import_directive",
    "import_directive : import_package",
    "import_package : IMPORT package_or_type_expr SEMICOLON",
    "import_package : IMPORT IDENTIFIER ASSIGN package_or_type_expr SEMICOLON",
    "import_package : IMPORT error",
    "opt_static :",
    "opt_static : STATIC",
    "$$1 :",
    "$$2 :",
    "package_declaration : opt_attributes PACKAGE package_name $$1 OPEN_BRACE $$2 opt_import_directives opt_package_or_type_declarations CLOSE_BRACE opt_semicolon_error",
    "package_declaration : opt_attributes PACKAGE package_name",
    "opt_semicolon_error :",
    "opt_semicolon_error : SEMICOLON",
    "opt_semicolon_error : error",
    "package_name : IDENTIFIER",
    "package_name : package_name DOT IDENTIFIER",
    "package_name : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "opt_import_directives :",
    "opt_import_directives : import_directives",
    "opt_package_or_type_declarations :",
    "opt_package_or_type_declarations : package_or_type_declarations",
    "package_or_type_declarations : package_or_type_declaration",
    "package_or_type_declarations : package_or_type_declarations package_or_type_declaration",
    "package_or_type_declaration : type_declaration",
    "package_or_type_declaration : package_declaration",
    "package_or_type_declaration : attribute_sections CLOSE_BRACE",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$3 :",
    "attribute_section : OPEN_BRACKET $$3 attribute_section_cont",
    "$$4 :",
    "attribute_section_cont : attribute_target COLON $$4 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : IDENTIFIER error",
    "attribute_section_cont : error",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$5 :",
    "attribute : attribute_name $$5 opt_attribute_arguments",
    "attribute_name : package_or_type_expr",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "positional_or_named_argument : error",
    "$$6 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$6 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
    "named_argument_expr : expression_or_error",
    "named_argument_expr : declaration_expression",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : primary_constructor_body",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : attributes_without_members",
    "class_member_declaration : incomplete_member",
    "class_member_declaration : error",
    "$$7 :",
    "primary_constructor_body : OPEN_BRACE $$7 opt_statement_list block_end",
    "$$8 :",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$13 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
    "constant_declaration : opt_attributes opt_modifiers CONST type error",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$14 :",
    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$15 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$15 opt_field_initializer opt_field_declarators SEMICOLON",
    "opt_field_initializer :",
    "$$16 :",
    "opt_field_initializer : ASSIGN $$16 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$17 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$17 variable_initializer",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$18 :",
    "method_declaration : method_header $$18 method_body_expression_block",
    "$$19 :",
    "$$20 :",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$19 opt_formal_parameter_list CLOSE_PARENS $$20 opt_type_parameter_constraints_clauses",
    "$$21 :",
    "$$22 :",
    "$$23 :",
    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$21 method_declaration_name OPEN_PARENS $$22 opt_formal_parameter_list CLOSE_PARENS $$23 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
    "method_body_expression_block : method_body",
    "method_body_expression_block : expression_block",
    "method_body : block",
    "method_body : SEMICOLON",
    "$$24 :",
    "expression_block : ARROW $$24 expression SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : attribute_sections error",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$25 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$25 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : SELF",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "$$26 :",
    "$$27 :",
    "$$28 :",
    "$$29 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$26 OPEN_BRACE $$27 accessor_declarations $$28 CLOSE_BRACE $$29 opt_property_initializer",
    "$$30 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$30 expression_block",
    "opt_property_initializer :",
    "$$31 :",
    "opt_property_initializer : ASSIGN $$31 property_initializer SEMICOLON",
    "property_initializer : expression",
    "property_initializer : array_initializer",
    "$$32 :",
    "$$33 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$32 opt_formal_parameter_list CLOSE_BRACKET $$33 indexer_body",
    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
    "indexer_body : expression_block",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$34 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$34 accessor_body",
    "$$35 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$35 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$36 :",
    "$$37 :",
    "$$38 :",
    "$$39 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$36 type_declaration_name $$37 opt_class_base opt_type_parameter_constraints_clauses $$38 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$39 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$40 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$40 method_body_expression_block",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$41 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "overloadable_operator : IS",
    "$$42 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS",
    "$$43 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$43 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$44 :",
    "$$45 :",
    "constructor_declarator : opt_attributes opt_modifiers SELF $$44 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$45 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$46 :",
    "constructor_initializer : COLON SUPER OPEN_PARENS $$46 opt_argument_list CLOSE_PARENS",
    "$$47 :",
    "constructor_initializer : COLON SELF OPEN_PARENS $$47 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "constructor_initializer : error",
    "$$48 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$48 SELF OPEN_PARENS CLOSE_PARENS method_body",
    "$$49 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$49 opt_event_initializer opt_event_declarators SEMICOLON",
    "$$50 :",
    "$$51 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$50 event_accessor_declarations $$51 CLOSE_BRACE",
    "event_declaration : opt_attributes opt_modifiers EVENT type error",
    "opt_event_initializer :",
    "$$52 :",
    "opt_event_initializer : ASSIGN $$52 event_variable_initializer",
    "opt_event_declarators :",
    "opt_event_declarators : event_declarators",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_declarator : COMMA IDENTIFIER",
    "$$53 :",
    "event_declarator : COMMA IDENTIFIER ASSIGN $$53 event_variable_initializer",
    "$$54 :",
    "event_variable_initializer : $$54 variable_initializer",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$55 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$55 event_accessor_block",
    "$$56 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$56 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "attributes_without_members : attribute_sections CLOSE_BRACE",
    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
    "$$57 :",
    "$$58 :",
    "$$59 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$57 OPEN_BRACE $$58 opt_enum_member_declarations $$59 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$60 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$60 ASSIGN constant_expression",
    "enum_member_declaration : opt_attributes IDENTIFIER error",
    "enum_member_declaration : attributes_without_members",
    "$$61 :",
    "$$62 :",
    "$$63 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$61 opt_formal_parameter_list CLOSE_PARENS $$62 opt_type_parameter_constraints_clauses $$63 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "package_or_type_expr : member_name",
    "package_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "package_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
    "member_name : simple_name_expr",
    "member_name : package_or_type_expr DOT IDENTIFIER opt_type_argument_list",
    "member_name : package_or_type_expr DOT IDENTIFIER generic_dimension",
    "simple_name_expr : IDENTIFIER opt_type_argument_list",
    "simple_name_expr : IDENTIFIER generic_dimension",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$64 :",
    "type_declaration_name : IDENTIFIER $$64 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : SELF",
    "indexer_declaration_name : explicit_interface SELF",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : void_invalid",
    "simple_type : type_expression",
    "simple_type : void_invalid",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : package_or_type_expr opt_nullable",
    "type_expression : package_or_type_expr pointer_stars",
    "type_expression : builtin_type_expression",
    "void_invalid : VOID",
    "builtin_type_expression : builtin_types opt_nullable",
    "builtin_type_expression : builtin_types pointer_stars",
    "builtin_type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : type_name_expression",
    "primary_expression : literal",
    "primary_expression : array_creation_expression",
    "primary_expression : parenthesized_expression",
    "primary_expression : default_value_expression",
    "primary_expression : invocation_expression",
    "primary_expression : element_access",
    "primary_expression : self_access",
    "primary_expression : super_access",
    "primary_expression : post_increment_expression",
    "primary_expression : post_decrement_expression",
    "primary_expression : object_or_delegate_creation_expression",
    "primary_expression : anonymous_type_expression",
    "primary_expression : typeof_expression",
    "primary_expression : sizeof_expression",
    "primary_expression : checked_expression",
    "primary_expression : unchecked_expression",
    "primary_expression : pointer_member_access",
    "primary_expression : anonymous_method_expression",
    "primary_expression : interpolated_string",
    "type_name_expression : simple_name_expr",
    "type_name_expression : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "interpolated_string : INTERPOLATED_STRING interpolations INTERPOLATED_STRING_END",
    "interpolated_string : INTERPOLATED_STRING_END",
    "interpolations : interpolation",
    "interpolations : interpolations INTERPOLATED_STRING interpolation",
    "interpolation : expression",
    "interpolation : expression COMMA expression",
    "$$65 :",
    "interpolation : expression COLON $$65 LITERAL",
    "$$66 :",
    "interpolation : expression COMMA expression COLON $$66 LITERAL",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
    "member_access : SUPER DOT identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "invocation_expression : primary_expression open_parens_any argument_list error",
    "invocation_expression : primary_expression open_parens_any error",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA error",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : REF declaration_expression",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : OUT declaration_expression",
    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
    "declaration_expression : CHECKED open_parens_any declaration_expression CLOSE_PARENS",
    "declaration_expression : UNCHECKED open_parens_any declaration_expression CLOSE_PARENS",
    "declaration_expression : variable_type identifier_inside_body",
    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
    "element_access : primary_expression OPEN_BRACKET_EXPR error",
    "expression_list : expression_or_error",
    "expression_list : expression_list COMMA expression_or_error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "self_access : SELF",
    "super_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "super_access : SUPER OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$67 :",
    "new_expr_type : $$67 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
    "anonymous_type_parameter : identifier_inside_body",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : error",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "sizeof_expression : SIZEOF open_parens_any type error",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "checked_expression : CHECKED error",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED error",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$68 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$68 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$69 :",
    "anonymous_method_signature : OPEN_PARENS $$69 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : BANG error",
    "unary_expression : TILDE error",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "prefixed_unary_expression : PLUS error",
    "prefixed_unary_expression : MINUS error",
    "prefixed_unary_expression : OP_INC error",
    "prefixed_unary_expression : OP_DEC error",
    "prefixed_unary_expression : STAR error",
    "prefixed_unary_expression : BITWISE_AND error",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR error",
    "multiplicative_expression : multiplicative_expression DIV error",
    "multiplicative_expression : multiplicative_expression PERCENT error",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression PLUS error",
    "additive_expression : additive_expression MINUS error",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS pattern_expr",
    "additive_expression : additive_expression AS error",
    "additive_expression : additive_expression IS error",
    "pattern_type_expr : variable_type",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT error",
    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "relational_expression : relational_expression OP_LT error",
    "relational_expression : relational_expression OP_GT error",
    "relational_expression : relational_expression OP_LE error",
    "relational_expression : relational_expression OP_GE error",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "equality_expression : equality_expression OP_EQ error",
    "equality_expression : equality_expression OP_NE error",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "and_expression : and_expression BITWISE_AND error",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET error",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND error",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR error",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "conditional_expression : null_coalescing_expression INTERR expression error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON CLOSE_BRACE",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$70 :",
    "lambda_expression_body : $$70 expression",
    "lambda_expression_body : block",
    "lambda_expression_body : error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$71 :",
    "lambda_expression : IDENTIFIER ARROW $$71 lambda_expression_body",
    "$$72 :",
    "$$73 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$72 opt_lambda_parameter_list CLOSE_PARENS ARROW $$73 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : query_expression",
    "constant_expression : expression",
    "boolean_expression : expression",
    "opt_primary_parameters :",
    "opt_primary_parameters : primary_parameters",
    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "opt_primary_parameters_with_class_base :",
    "opt_primary_parameters_with_class_base : class_base",
    "opt_primary_parameters_with_class_base : primary_parameters",
    "opt_primary_parameters_with_class_base : primary_parameters class_base",
    "$$74 :",
    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$74 opt_argument_list CLOSE_PARENS",
    "$$75 :",
    "$$76 :",
    "$$77 :",
    "$$78 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$75 type_declaration_name $$76 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$77 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$78 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "opt_class_base :",
    "opt_class_base : class_base",
    "class_base : COLON type_list",
    "class_base : COLON type_list error",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "$$79 :",
    "block : OPEN_BRACE $$79 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$80 :",
    "block_prepared : OPEN_BRACE $$80 opt_statement_list CLOSE_BRACE",
    "block_prepared : CLOSE_BRACE",
    "$$81 :",
    "block_prepared_strict : OPEN_BRACE $$81 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : IDENTIFIER error",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : sync_statement",
    "valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : sync_statement",
    "interactive_valid_declaration_statement : using_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$82 :",
    "labeled_statement : identifier_inside_body COLON $$82 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : type_name_expression opt_nullable",
    "variable_type_simple : type_name_expression pointer_stars",
    "variable_type_simple : builtin_type_expression",
    "variable_type_simple : void_invalid",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "$$83 :",
    "block_variable_declaration : variable_type identifier_inside_body $$83 opt_local_variable_initializer opt_variable_declarators semicolon_or_handle_error_close_brace",
    "$$84 :",
    "block_variable_declaration : CONST variable_type identifier_inside_body $$84 const_variable_initializer opt_const_declarators SEMICOLON",
    "semicolon_or_handle_error_close_brace : SEMICOLON",
    "semicolon_or_handle_error_close_brace : CLOSE_BRACE",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "expression_statement : statement_expression CLOSE_BRACE",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "if_statement : IF open_parens_any boolean_expression error",
    "$$85 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$85 opt_switch_sections CLOSE_BRACE",
    "switch_statement : SWITCH open_parens_any expression error",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "switch_section : switch_labels statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : CASE constant_expression error",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "do_statement : DO embedded_statement error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
    "$$86 :",
    "for_statement : FOR open_parens_any $$86 for_statement_cont",
    "$$87 :",
    "for_statement_cont : opt_for_initializer SEMICOLON $$87 for_statement_condition",
    "for_statement_cont : opt_for_initializer CLOSE_PARENS",
    "$$88 :",
    "for_statement_condition : opt_for_condition SEMICOLON $$88 for_statement_end",
    "for_statement_condition : boolean_expression CLOSE_PARENS",
    "for_statement_end : opt_for_iterator CLOSE_PARENS embedded_statement",
    "for_statement_end : error",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$89 :",
    "for_initializer : variable_type identifier_inside_body $$89 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type error",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "$$90 :",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$90 embedded_statement",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "foreach_statement : FOREACH open_parens_any type error",
    "jump_statement : leave_statement",
    "jump_statement : persist_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "leave_statement : LEAVE SEMICOLON",
    "persist_statement : PERSIST SEMICOLON",
    "persist_statement : PERSIST error",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "return_statement : RETURN expression error",
    "return_statement : RETURN error",
    "throw_statement : THROW opt_expression SEMICOLON",
    "throw_statement : THROW expression error",
    "throw_statement : THROW error",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body RETURN expression error",
    "yield_statement : identifier_inside_body LEAVE SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block except_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block except_clauses FINALLY block",
    "try_statement : TRY block error",
    "except_clauses : except_clause",
    "except_clauses : except_clauses except_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "except_clause : EXCEPT opt_except_filter block",
    "$$91 :",
    "except_clause : EXCEPT open_parens_any type opt_identifier CLOSE_PARENS $$91 opt_except_filter_or_error",
    "except_clause : EXCEPT open_parens_any error",
    "opt_except_filter_or_error : opt_except_filter block_prepared",
    "opt_except_filter_or_error : error",
    "opt_except_filter :",
    "$$92 :",
    "opt_except_filter : WHEN $$92 open_parens_any expression CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "sync_statement : SYNC open_parens_any expression CLOSE_PARENS embedded_statement",
    "sync_statement : SYNC open_parens_any expression error",
    "$$93 :",
    "$$94 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$93 using_initialization CLOSE_PARENS $$94 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_statement : USING open_parens_any expression error",
    "using_initialization : using_variable_initializer opt_using_or_fixed_variable_declarators",
    "using_initialization : error",
    "using_variable_initializer :",
    "using_variable_initializer : ASSIGN variable_initializer",
    "query_expression : first_from_clause query_body",
    "query_expression : nested_from_clause query_body",
    "query_expression : first_from_clause COMPLETE_COMPLETION",
    "query_expression : nested_from_clause COMPLETE_COMPLETION",
    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
    "nested_from_clause : FROM identifier_inside_body IN expression",
    "nested_from_clause : FROM type identifier_inside_body IN expression",
    "$$95 :",
    "from_clause : FROM identifier_inside_body IN $$95 expression_or_error",
    "$$96 :",
    "from_clause : FROM type identifier_inside_body IN $$96 expression_or_error",
    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
    "query_body : select_or_group_clause opt_query_continuation",
    "query_body : query_body_clauses COMPLETE_COMPLETION",
    "query_body : query_body_clauses error",
    "query_body : error",
    "$$97 :",
    "select_or_group_clause : SELECT $$97 expression_or_error",
    "$$98 :",
    "$$99 :",
    "select_or_group_clause : GROUP $$98 expression_or_error $$99 by_expression",
    "by_expression : BY expression_or_error",
    "by_expression : error",
    "query_body_clauses : query_body_clause",
    "query_body_clauses : query_body_clauses query_body_clause",
    "query_body_clause : from_clause",
    "query_body_clause : let_clause",
    "query_body_clause : where_clause",
    "query_body_clause : join_clause",
    "query_body_clause : orderby_clause",
    "$$100 :",
    "let_clause : LET identifier_inside_body ASSIGN $$100 expression_or_error",
    "$$101 :",
    "where_clause : WHERE $$101 expression_or_error",
    "$$102 :",
    "$$103 :",
    "$$104 :",
    "join_clause : JOIN identifier_inside_body IN $$102 expression_or_error ON $$103 expression_or_error EQUALS $$104 expression_or_error opt_join_into",
    "$$105 :",
    "$$106 :",
    "$$107 :",
    "join_clause : JOIN type identifier_inside_body IN $$105 expression_or_error ON $$106 expression_or_error EQUALS $$107 expression_or_error opt_join_into",
    "opt_join_into :",
    "opt_join_into : INTO identifier_inside_body",
    "$$108 :",
    "orderby_clause : ORDERBY $$108 orderings",
    "orderings : order_by",
    "$$109 :",
    "orderings : order_by COMMA $$109 orderings_then_by",
    "orderings_then_by : then_by",
    "$$110 :",
    "orderings_then_by : orderings_then_by COMMA $$110 then_by",
    "order_by : expression",
    "order_by : expression ASCENDING",
    "order_by : expression DESCENDING",
    "then_by : expression",
    "then_by : expression ASCENDING",
    "then_by : expression DESCENDING",
    "opt_query_continuation :",
    "$$111 :",
    "opt_query_continuation : INTO identifier_inside_body $$111 query_body",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : VOID opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT SELF",
    "$$112 :",
    "doc_cref : doc_type_declaration_name DOT SELF OPEN_BRACKET $$112 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$113 :",
    "opt_doc_method_sig : OPEN_PARENS $$113 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","LEAVE","BYTE",
    "CASE","EXCEPT","CHAR","CHECKED","CLASS","CONST","PERSIST","DEFAULT",
    "DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT","EXTERN",
    "FALSE","FINALLY","FLOAT","FOR","FOREACH","GOTO","IF","IMPLICIT",
    "IMPORT","IN","INT","INTERFACE","INTERNAL","IS","SYNC","LONG",
    "PACKAGE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE","PARAMS",
    "PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN","REMOVE",
    "SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC","STRING",
    "STRUCT","SWITCH","SELF","THROW","TRUE","TRY","TYPEOF","UINT","ULONG",
    "UNCHECKED","USHORT","USING","VIRTUAL","VOID","WHERE","WHILE",
    "PARTIAL","ARROW","FROM","FROM_FIRST","JOIN","ON","EQUALS","SELECT",
    "GROUP","BY","LET","ORDERBY","ASCENDING","DESCENDING","INTO",
    "INTERR_NULLABLE","INTERR_OPERATOR","WHEN","INTERPOLATED_STRING",
    "INTERPOLATED_STRING_END","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS","close_brace_or_complete_completion",
    "pattern_expr",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 357 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 4:
#line 366 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			VSharpAttributes attrs = (VSharpAttributes) yyVals[0+yyTop];
			report.Error (42, attrs.Attrs [0].Location,
			"Assembly attributes must precede all other elements except import clauses");

		current_package.UnattachedAttributes = attrs;
		}
	  }
  break;
case 5:
#line 376 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_package.UnattachedAttributes = (VSharpAttributes) yyVals[0+yyTop];
	  }
  break;
case 6:
#line 380 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 11:
#line 397 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 12:
#line 405 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  TypeNameExpression texpr = (TypeNameExpression) yyVals[-1+yyTop];
	    texpr.lookupMode = NameLookupMode.TypeInUsingDeclaration;
		Import uc = new ImportPackage (texpr, GetLocation (yyVals[-2+yyTop]));
		current_package.AddImport (uc);
	  }
  break;
case 13:
#line 412 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
		 "An alias named `global' will not be used when resolving `global::'. The global package will be used instead");
	}
	  TypeNameExpression texpr = (TypeNameExpression) yyVals[-1+yyTop];
	  texpr.lookupMode = NameLookupMode.TypeInUsingDeclaration;
		var un = new ImportPackageAlias (new AliasIdentifier (lt.Value, lt.Location), texpr, GetLocation (yyVals[-4+yyTop]));
		current_package.AddImport (un);		
	  }
  break;
case 14:
#line 424 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }
  break;
case 17:
#line 442 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		VSharpAttributes attrs = (VSharpAttributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
		bool valid_global_attrs = true;
		if ((current_package.DeclarationFound || current_package != file.RootPackage)) {
				valid_global_attrs = false;
			} else {
		foreach (var a in attrs.Attrs) {
		    if (a.ExplicitTarget == "assembly")
				continue;
						
				valid_global_attrs = false;
					break;
			}
		}
		
		if (!valid_global_attrs)
			report.Error (43, name.Location, "A package declaration cannot have modifiers or attributes");
	}
		
		file.AddAttributes (attrs);
		
		var ns = PackageContainer.CreateContainers (current_package,name,  GetLocation (yyVals[-1+yyTop]),file);
		current_package = ns;
		current_container = ns.DefaultType;
		
	  }
  break;
case 18:
#line 471 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 19:
#line 476 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	    current_package = current_package.Parent;
		current_container =current_package.DefaultType; 
	  }
  break;
case 20:
#line 481 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	report.Error (44, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

	var name = (MemberName) yyVals[0+yyTop];		
	PackageContainer.CreateContainers (current_package,name,  GetLocation (yyVals[-1+yyTop]),file);

	  }
  break;
case 23:
#line 494 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 24:
#line 502 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 25:
#line 507 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 26:
#line 512 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }
  break;
case 37:
#line 546 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

	if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
			report.Error (45, ds.Location, 
		"Package elements cannot be explicitly declared as private, protected or protected internal");
		}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
		/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.Attributes != null) {
				ds.ConvertGlobalAttributes (ds, file);
			}
		}
	current_package.DeclarationFound = true;
	  }
  break;
case 38:
#line 566 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_package.DeclarationFound = true;
	  }
  break;
case 39:
#line 569 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	current_package.UnattachedAttributes = (VSharpAttributes) yyVals[-1+yyTop];
	report.Error (46, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
	lexer.putback ('}');
	  }
  break;
case 47:
#line 602 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var sect = (List<VSC.AST.VSharpAttribute>) yyVals[0+yyTop];
		yyVal = new VSharpAttributes (sect);
	  }
  break;
case 48:
#line 607 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		VSharpAttributes attrs = yyVals[-1+yyTop] as VSharpAttributes;
		var sect = (List<VSC.AST.VSharpAttribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new VSharpAttributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }
  break;
case 49:
#line 620 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 50:
#line 624 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 51:
#line 632 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }
  break;
case 52:
#line 639 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<VSC.AST.VSharpAttribute> (0);
		else
		yyVal = yyVals[-2+yyTop];
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }
  break;
case 53:
#line 649 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[-2+yyTop];	
	  }
  break;
case 54:
#line 653 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<VSC.AST.VSharpAttribute> () {
			new VSC.AST.VSharpAttribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }
  break;
case 55:
#line 664 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }
  break;
case 56:
#line 674 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	
	  }
  break;
case 57:
#line 679 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = "event"; }
  break;
case 58:
#line 680 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = "return";}
  break;
case 59:
#line 685 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new List<VSC.AST.VSharpAttribute> (4) { (VSC.AST.VSharpAttribute) yyVals[0+yyTop] };
	  }
  break;
case 60:
#line 689 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	var attrs = (List<VSC.AST.VSharpAttribute>) yyVals[-2+yyTop];
	if (attrs != null) 
		attrs.Add ((VSC.AST.VSharpAttribute) yyVals[0+yyTop]);


		yyVal = attrs;
	  }
  break;
case 61:
#line 701 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 62:
#line 705 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		
		var tne = (TypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) 
			report.Error (47, tne.Location, "Attributes cannot be generic");
		
		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];

		yyVal = new VSC.AST.VSharpAttribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	
	  }
  break;
case 64:
#line 724 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = null; HadAttributeParens = false;	  }
  break;
case 65:
#line 726 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		HadAttributeParens = true;
	  }
  break;
case 66:
#line 734 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 67:
#line 736 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }
  break;
case 68:
#line 742 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Arguments a = new Arguments (4);
	a.Add ((Argument) yyVals[0+yyTop]);  
	yyVal = new Arguments [] { null, a };
	  }
  break;
case 69:
#line 748 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
	if (o [1] != null) {
			report.Error (48, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
		o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
	args.Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 70:
#line 763 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 71:
#line 776 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 73:
#line 781 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 74:
#line 789 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 75:
#line 793 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
	  }
  break;
case 76:
#line 802 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {

	/* Avoid boxing in common case (no modifier)*/
	var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }
  break;
case 79:
#line 818 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 80:
#line 820 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 81:
#line 824 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 84:
#line 836 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 85:
#line 841 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 99:
#line 862 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (49, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
		GetSymbolName (yyToken));
	    yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 100:
#line 872 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	current_local_parameters = current_type.PrimaryConstructorParameters;
	if (current_local_parameters == null) {
			report.Error (50, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 101:
#line 883 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_local_parameters = null;
		var t = current_type as ClassOrStructDeclaration;
	if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (51, b.StartLocation, "Primary constructor already has a body");
			} else {
			t.PrimaryConstructorBlock = b;
			}
		}
	  }
  break;
case 102:
#line 902 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {

	  }
  break;
case 103:
#line 906 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new StructDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], GetLocation(yyVals[-2+yyTop]),file));
	
	  }
  break;
case 104:
#line 915 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

	if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

	if (doc_support)
			current_type.DocComment = Lexer.consume_doc_comment ();

		
		lexer.parsing_modifiers = true;
	  }
  break;
case 105:
#line 932 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 106:
#line 937 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 107:
#line 943 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	yyVal = pop_current_class ();
	  }
  break;
case 108:
#line 947 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 109:
#line 956 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new ConstantDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (52, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }
  break;
case 110:
#line 969 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
				foreach(var fdec in current_field.Declarators)
						fdec.DocComment = current_field.DocComment;
		Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.ConstantValue = (IConstantValue) yyVals[-2+yyTop];
		current_field = null;
	  }
  break;
case 111:
#line 983 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new ConstantDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-4+yyTop]));
	  }
  break;
case 116:
#line 1002 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var cfd = new ConstantDeclaration (current_field as ConstantDeclaration, new MemberName (lt.Value, lt.Location));
		cfd.ConstantValue = (IConstantValue) yyVals[0+yyTop];
		current_type.AddMember (cfd);
		current_field.Declarators.Add(cfd);
	  }
  break;
case 117:
#line 1013 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 118:
#line 1017 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 119:
#line 1022 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (53, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 122:
#line 1037 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (54, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FieldDeclaration (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-3+yyTop]);
		current_type.AddMember (current_field);
		yyVal = current_field;
	  }
  break;
case 123:
#line 1052 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			foreach(var fdec in current_field.Declarators)
						fdec.DocComment = current_field.DocComment;
					
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
	
		yyVal = current_field;
		current_field = null;
	  }
  break;
case 125:
#line 1070 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	 	start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 126:
#line 1076 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		current_field.ConstantValue = (IConstantValue) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }
  break;
case 131:
#line 1096 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		 var lt = (LocatedToken) yyVals[0+yyTop];
	  	var fd = new FieldDeclaration (current_field, new MemberName (lt.Value, lt.Location));
		current_type.AddMember (fd);
		current_field.Declarators.Add(fd);
	  }
  break;
case 132:
#line 1103 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 133:
#line 1107 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		 var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var fd = new FieldDeclaration (current_field, new MemberName (lt.Value, lt.Location));
		fd.ConstantValue = (IConstantValue) yyVals[-1+yyTop];
		current_type.AddMember (fd);
		current_field.Declarators.Add(fd);
	  }
  break;
case 136:
#line 1121 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 137:
#line 1131 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }
  break;
case 138:
#line 1138 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		MethodDeclaration method = (MethodDeclaration) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];

		
		if (method.Block == null) {
			method.ParameterInfo.CheckParameters ();
		} else {
			if (current_container.Kind is InterfaceDeclaration) {
				report.Error (55, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 139:
#line 1164 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 140:
#line 1168 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		var method = new MethodDeclaration  (current_type, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-6+yyTop],
				     name, current_local_parameters, (VSharpAttributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

	

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();


		yyVal = method;

		lexer.ConstraintsParsing = true;
	  }
  break;
case 141:
#line 1189 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null) {
			var method = (MethodDeclaration) yyVals[-1+yyTop];
			method.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);
		}

		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 142:
#line 1203 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 143:
#line 1208 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 144:
#line 1213 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 145:
#line 1217 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
	current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = new MethodDeclaration  (current_type, new TypeExpression (KnownTypeReference.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (VSharpAttributes) yyVals[-11+yyTop]);

		current_type.AddMember (method);


	if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

	
		yyVal = method;
	  }
  break;
case 146:
#line 1246 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (56, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = new MethodDeclaration  (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 147:
#line 1267 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = new MethodDeclaration (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
								name, current_local_parameters, (VSharpAttributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 151:
#line 1292 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = null;	 }
  break;
case 152:
#line 1297 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	++lexer.parsing_block;
	start_block (GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 153:
#line 1302 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_block = 0;
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		var b = end_block (GetLocation (yyVals[0+yyTop]));
		b.IsCompilerGenerated = true;
		yyVal = b;
	 }
  break;
case 154:
#line 1312 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters;}
  break;
case 156:
#line 1318 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	 	yyVal = new ParametersCompiled (pars_list.ToArray ());	
	  }
  break;
case 157:
#line 1323 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);
	
		yyVal = new ParametersCompiled (pars_list.ToArray ()); 

	  }
  break;
case 158:
#line 1331 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (57, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }
  break;
case 159:
#line 1338 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (57, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

	var pars_list = (List<Parameter>) yyVals[-4+yyTop];
	yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 160:
#line 1346 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 161:
#line 1350 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 162:
#line 1358 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		default_parameter_used = p.IsOptional;
		yyVal = parameters_bucket;
	  }
  break;
case 163:
#line 1366 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.IsSelf)
				report.Error (58, p.Location, "The parameter modifier `self' can only be used on the first parameter");
			else if (!p.IsOptional && default_parameter_used)
				report.Error (59, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.IsOptional;
			pars.Add (p);
			
		}
		
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 164:
#line 1389 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 165:
#line 1397 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (60, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (ParameterModifier) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 166:
#line 1403 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	 	Location l = GetLocation (yyVals[0+yyTop]);
	yyVal = new Parameter (null, null, ParameterModifier.None, (VSharpAttributes) yyVals[-1+yyTop], l);
	  }
  break;
case 167:
#line 1412 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], l);
	  }
  break;
case 168:
#line 1422 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 169:
#line 1426 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;

		ParameterModifier mod = (ParameterModifier) yyVals[-5+yyTop];
		if (mod != ParameterModifier.None) {
			switch (mod) {
			case ParameterModifier.Ref:
			case ParameterModifier.Out:
				report.Error (61, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
				Parameter.GetModifierSignature (mod));
				break;
				
			case ParameterModifier.Self:
				report.Error (61, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
				Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
		mod = ParameterModifier.None;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (62, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (VSharpAttributes) yyVals[-6+yyTop], lt.Location);
	
	if (yyVals[0+yyTop] != null)
		((Parameter) yyVal).DefaultValue = (IConstantValue) yyVals[0+yyTop];
	  }
  break;
case 170:
#line 1461 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = ParameterModifier.None; 
	}
  break;
case 172:
#line 1468 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 173:
#line 1472 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		ParameterModifier p2 = (ParameterModifier)yyVals[0+yyTop];
  		ParameterModifier mod = (ParameterModifier)yyVals[-1+yyTop] | p2;
  		if (((ParameterModifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~ParameterModifier.Self) {
  				case ParameterModifier.Ref:
					report.Error (63, lexer.Location, "The parameter modifiers `self' and `ref' cannot be used altogether");
  					break;
   				case ParameterModifier.Out:
				report.Error (64, lexer.Location, "The parameter modifiers `self' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (65, lexer.Location, "A parameter cannot have specified more than one modifier");
 				break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 174:
#line 1496 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));

	  	yyVal = ParameterModifier.Ref;
	  }
  break;
case 175:
#line 1503 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	 		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));

	 	yyVal = ParameterModifier.Out;
	  }
  break;
case 176:
#line 1510 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.Self) == 0)
	 		Error_ParameterModifierNotValid ("self", GetLocation (yyVals[0+yyTop]));


		yyVal = ParameterModifier.Self;
	  }
  break;
case 177:
#line 1521 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 178:
#line 1526 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (66, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (ParameterModifier) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 179:
#line 1533 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], GetLocation(yyVals[-2+yyTop]));
	  }
  break;
case 180:
#line 1541 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = ParameterModifier.Params;
	  }
  break;
case 181:
#line 1545 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		ParameterModifier mod = (ParameterModifier)yyVals[0+yyTop];
		if ((mod & ParameterModifier.Self) != 0) {
			report.Error (67, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `self' and `params' cannot be used altogether");
		} else {
			report.Error (68, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	mod |=  ParameterModifier.Params;
	  }
  break;
case 182:
#line 1555 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), ParameterModifier.Params);
	  }
  break;
case 183:
#line 1565 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }
  break;
case 184:
#line 1571 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new PropertyDeclaration (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (69, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		
		lexer.PropertyParsing = true;
	  }
  break;
case 185:
#line 1584 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }
  break;
case 186:
#line 1591 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 187:
#line 1595 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_property = null;
	  }
  break;
case 188:
#line 1602 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 189:
#line 1609 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		var property = new PropertyDeclaration (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);

		property.Getter = new GetterDeclaration (property, Modifiers.COMPILER_GENERATED, null, property.Location);
		(property.Getter  as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];

		if (current_container is InterfaceDeclaration) {
			report.Error (70, (property.Getter as MethodOrOperator).Block.StartLocation,
			"`{0}': interface members cannot have a definition", property.GetSignatureForError ());
		}

		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (71, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());

		current_type.AddMember (property);

		current_local_parameters = null;
	  }
  break;
case 191:
#line 1634 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 192:
#line 1640 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	((PropertyDeclaration)current_property).Initializer = (Expression) yyVals[-1+yyTop];

	end_block (GetLocation (yyVals[0+yyTop]));
		current_local_parameters = null;
	  }
  break;
case 195:
#line 1657 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 196:
#line 1661 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		IndexerDeclaration indexer = new IndexerDeclaration (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddMember (indexer);

		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (72, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (73, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
	  }
  break;
case 197:
#line 1686 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
 		lexer.PropertyParsing = false;
		current_local_parameters = null;

		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((IndexerDeclaration) current_property).ParameterInfo.CheckParameters ();
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
		
		current_property = null;		
	  }
  break;
case 198:
#line 1702 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {

	  }
  break;
case 199:
#line 1706 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_property.Getter = new IndexerGetterDeclaration (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);
		(current_property.Getter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
	  }
  break;
case 204:
#line 1718 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	if (yyToken == Token.CLOSE_BRACE) {
	 		report.Error (74, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (75, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (76, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }
  break;
case 205:
#line 1732 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	
	  
		if (current_property.Getter != null) {
			report.Error (77, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is IndexerDeclaration) {
			current_property.Getter = new IndexerGetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop], ((IndexerDeclaration)current_property).ParameterInfo.Clone (),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Getter = new GetterDeclaration (current_property,
				(Modifiers) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = (current_property.Getter as MethodOrOperator).ParameterInfo;	  
		lexer.PropertyParsing = false;
	  }
  break;
case 206:
#line 1751 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	if (yyVals[0+yyTop] != null) {
	  	 (current_property.Getter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container is InterfaceDeclaration) {
				report.Error (78,  (current_property.Getter as MethodOrOperator).Block.StartLocation,
					"`{0}': interface members cannot have a definition",  (current_property.Getter as MethodOrOperator).GetSignatureForError ());
			}

		} 
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 207:
#line 1773 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {

		if (current_property.Setter != null) {
			report.Error (77, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is IndexerDeclaration) {
			current_property.Setter = new IndexerSetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop],
			ParametersCompiled.MergeGenerated (compiler,
				((IndexerDeclaration)current_property).ParameterInfo, true, new Parameter (
				current_property.TypeExpression, "value", ParameterModifier.None, null, GetLocation (yyVals[0+yyTop]))),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Setter = new SetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = (current_property.Setter as MethodOrOperator).ParameterInfo;	
		lexer.PropertyParsing = false;
	  }
  break;
case 208:
#line 1795 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {		
			(current_property.Setter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
			report.Error (70, (current_property.Setter as MethodOrOperator).Block.StartLocation,
					"`{0}': interface members cannot have a definition", (current_property.Setter as MethodOrOperator).GetSignatureForError ());
		}
	}

		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 210:
#line 1818 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 211:
#line 1822 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }
  break;
case 212:
#line 1833 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {

	  }
  break;
case 213:
#line 1837 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;
		push_current_container (new InterfaceDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], GetLocation(yyVals[-2+yyTop]),file));
	  }
  break;
case 214:
#line 1843 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 215:
#line 1857 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;	  
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 216:
#line 1863 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 217:
#line 1867 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 220:
#line 1879 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 221:
#line 1884 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 222:
#line 1892 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	report.Error (78, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 223:
#line 1896 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (78, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 228:
#line 1904 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	report.Error (79, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 229:
#line 1908 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	report.Error (80, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 230:
#line 1912 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	report.Error (81, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 231:
#line 1919 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  }
  break;
case 232:
#line 1922 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		OperatorDeclarationInfo decl = (OperatorDeclarationInfo) yyVals[-2+yyTop];
		if (decl != null) {
			OperatorDeclaration op = new OperatorDeclaration (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (VSharpAttributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters ();

		if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddMember (op);


		
	}
		
		current_local_parameters = null;
	  }
  break;
case 234:
#line 1952 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (82, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 235:
#line 1960 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
		if ((VSC.TypeSystem.Resolver.OperatorType ) yyVals[-1+yyTop] ==VSC.TypeSystem.Resolver.OperatorType.Is)
			valid_param_mod |= ParameterModifierType.Out;
	  }
  break;
case 236:
#line 1966 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		VSC.TypeSystem.Resolver.OperatorType  op = (VSC.TypeSystem.Resolver.OperatorType ) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == VSC.TypeSystem.Resolver.OperatorType.Addition)
				op = VSC.TypeSystem.Resolver.OperatorType.UnaryPlus;
			else if (op == VSC.TypeSystem.Resolver.OperatorType.Subtraction)
			op = VSC.TypeSystem.Resolver.OperatorType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
			report.Error (83, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (84, loc, "Overloaded unary operator `{0}' takes one parameter",
					VSC.TypeSystem.Resolver.ResolveContext.GetMetadataName (op));
			}
		} else if (op ==VSC.TypeSystem.Resolver.OperatorType.Is) {
			/* TODO: Special checks for is operator*/
		} else {
		if (p_count == 1) {
				report.Error (85, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
			report.Error (86, loc, "Overloaded binary operator `{0}' takes two parameters",
					VSC.TypeSystem.Resolver.ResolveContext.GetMetadataName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclarationInfo (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
	  }
  break;
case 238:
#line 2011 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LogicalNot; }
  break;
case 239:
#line 2012 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.OnesComplement;  }
  break;
case 240:
#line 2013 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Increment;}
  break;
case 241:
#line 2014 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Decrement; }
  break;
case 242:
#line 2015 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.True; }
  break;
case 243:
#line 2016 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.False;}
  break;
case 244:
#line 2018 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Addition;  }
  break;
case 245:
#line 2019 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Subtraction; }
  break;
case 246:
#line 2021 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Multiply; 	 }
  break;
case 247:
#line 2022 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {  yyVal = VSC.TypeSystem.Resolver.OperatorType.Division; }
  break;
case 248:
#line 2023 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Modulus;  }
  break;
case 249:
#line 2024 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.BitwiseAnd; 	 }
  break;
case 250:
#line 2025 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.BitwiseOr; 	}
  break;
case 251:
#line 2026 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.ExclusiveOr;	 }
  break;
case 252:
#line 2027 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LeftShift; 	 }
  break;
case 253:
#line 2028 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.RightShift;  }
  break;
case 254:
#line 2029 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Equality;}
  break;
case 255:
#line 2030 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Inequality;	}
  break;
case 256:
#line 2031 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.GreaterThan;}
  break;
case 257:
#line 2032 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LessThan; 	 }
  break;
case 258:
#line 2033 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.GreaterThanOrEqual; 	 }
  break;
case 259:
#line 2034 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LessThanOrEqual; 	}
  break;
case 260:
#line 2036 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = VSC.TypeSystem.Resolver.OperatorType.Is;
	  }
  break;
case 261:
#line 2043 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 262:
#line 2047 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (87, loc, "Overloaded unary operator `implicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

	yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 263:
#line 2065 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 264:
#line 2069 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

	if (current_local_parameters.Count != 1) {
			report.Error (88, loc, "Overloaded unary operator `explicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
	}

		yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 265:
#line 2087 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 266:
#line 2093 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 267:
#line 2103 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		ConstructorDeclaration c = (ConstructorDeclaration) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 268:
#line 2120 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 269:
#line 2129 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
	
		var mods = (Modifiers) yyVals[-5+yyTop];
		string ctor_name = (current_container.IsStatic || ((mods & Modifiers.STATIC) != 0))?ConstructorDeclaration.TypeConstructorName : ConstructorDeclaration.ConstructorName;
		var c = new ConstructorDeclaration (current_type, ctor_name, mods, (VSharpAttributes) yyVals[-6+yyTop], current_local_parameters, GetLocation(yyVals[-4+yyTop]));

	 if ((mods & Modifiers.STATIC) != 0) {
		if (!current_local_parameters.IsEmpty) {
				report.Error (89, c.Location, "`{0}': The static constructor must be parameterless",
					c.GetSignatureForError ());
			}

			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (111, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		} else {
			if (current_type is StructDeclaration && current_local_parameters.IsEmpty) {
			
				if ((mods & Modifiers.PUBLIC) == 0) {
					report.Error (90, c.Location, "`{0}': Structs parameterless instance constructor must be public", c.GetSignatureForError ());
				}
		}
	}

	current_type.AddMember (c);
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
	/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }
  break;
case 270:
#line 2168 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			var c = (ConstructorDeclaration) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (91, c.Location,
					"`{0}': static constructor cannot have an explicit `self' or `super' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 272:
#line 2186 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { current_block = null; yyVal = null; 	}
  break;
case 275:
#line 2196 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 276:
#line 2200 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
	yyVal = new ConstructorSuperInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 277:
#line 2205 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 278:
#line 2209 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorSelfInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 279:
#line 2214 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorSelfInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 280:
#line 2219 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 281:
#line 2227 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
			}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 282:
#line 2236 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 if (!(current_container is ClassDeclaration)){
			report.Error (92, GetLocation(yyVals[-4+yyTop]), "Only class types can contain destructor");
		}
		
		DestructorDeclaration d = new DestructorDeclaration (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (VSharpAttributes) yyVals[-7+yyTop], GetLocation(yyVals[-4+yyTop]));
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);

		current_local_parameters = null;
	  }
  break;
case 283:
#line 2257 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_event_field = new EventFieldDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (VSharpAttributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (93, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }
  break;
case 284:
#line 2271 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support) {
				current_event_field.DocComment = Lexer.consume_doc_comment ();
				foreach(var evf_d in current_event_field.Declarators)
						evf_d.DocComment = current_event_field.DocComment;
					

			Lexer.doc_state = XmlCommentState.Allowed;
		}

		current_event_field = null;
	  }
  break;
case 285:
#line 2287 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_event = new EventDeclaration (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
	
		lexer.EventParsing = true;
	  }
  break;
case 286:
#line 2294 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (current_container is InterfaceDeclaration)
			report.Error (94, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }
  break;
case 287:
#line 2301 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		

	  	current_event = null;	
		current_local_parameters = null;
	  }
  break;
case 288:
#line 2314 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventFieldDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-4+yyTop]));
	  }
  break;
case 290:
#line 2324 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 291:
#line 2328 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 296:
#line 2346 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
	  	var evd = new EventFieldDeclaration (current_event_field, lt.Value,lt.Location);
		current_type.AddMember (evd);		
		current_event_field.Declarators.Add(evd);
	  }
  break;
case 297:
#line 2353 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 298:
#line 2357 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];	  
	    	var evd = new EventFieldDeclaration (current_event_field, lt.Value,lt.Location);
			evd.Initializer = (Expression)yyVals[0+yyTop];
			current_type.AddMember (evd);		
			current_event_field.Declarators.Add(evd);
	  }
  break;
case 299:
#line 2368 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (current_container is InterfaceDeclaration) {
			report.Error (95, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (96, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }
  break;
case 300:
#line 2380 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 303:
#line 2389 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (97, lexer.Location, "`{0}': event property must have add, remove and raise accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 304:
#line 2394 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (97, lexer.Location, "`{0}': event property must have add, remove and raise accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 305:
#line 2399 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		report.Error (98, GetLocation (yyVals[0+yyTop]), "An add, raise or remove accessor expected");
		yyVal = null;
	  }
  break;
case 306:
#line 2407 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  
	  	Modifiers mods = (Modifiers)yyVals[-1+yyTop];
	 	current_event.AddAccessor = new AddEventAccessor (current_event, mods,(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = (current_event.AddAccessor as MethodOrOperator).ParameterInfo;
		
	
		lexer.EventParsing = false;		
	  }
  break;
case 307:
#line 2417 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.EventParsing = true;
	  
		(current_event.AddAccessor as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
		report.Error (70, (current_event.AddAccessor as MethodOrOperator).Block.StartLocation,
			"`{0}': interface members cannot have a definition", (current_event.AddAccessor as MethodOrOperator).GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 308:
#line 2433 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {	
	   	Modifiers mods = (Modifiers)yyVals[-1+yyTop];
	  	current_event.RemoveAccessor = new RemoveEventAccessor(current_event, mods, (VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters =( current_event.RemoveAccessor as MethodOrOperator).ParameterInfo;

		lexer.EventParsing = false;		
	  }
  break;
case 309:
#line 2441 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.EventParsing = true;
	  
	 ( current_event.RemoveAccessor as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
			report.Error (70, ( current_event.RemoveAccessor as MethodOrOperator).Block.StartLocation,
				"`{0}': interface members cannot have a definition", ( current_event.RemoveAccessor as MethodOrOperator).GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 310:
#line 2457 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (99, lexer.Location, "An add, raise or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 312:
#line 2466 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_type.UnattachedAttributes = (VSharpAttributes) yyVals[-1+yyTop];
		report.Error (100, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }
  break;
case 313:
#line 2477 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (101, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");
		lexer.putback ('}');

	 	lexer.parsing_generic_declaration = false;
		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		current_field = new FieldDeclaration (current_type, type, (Modifiers) yyVals[-2+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-3+yyTop]);
		current_type.AddMember(current_field);
		yyVal = current_field;
	  }
  break;
case 314:
#line 2495 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }
  break;
case 315:
#line 2500 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (102, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new EnumDeclaration (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (VSharpAttributes) yyVals[-6+yyTop],file));
	
	  }
  break;
case 316:
#line 2513 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
	  
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 317:
#line 2521 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	
		
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

	/*		if (doc_support)*/
	/*				em.DocComment = ev.DocComment;*/

		yyVal = pop_current_class ();
	  }
  break;
case 319:
#line 2539 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 320:
#line 2543 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }
  break;
case 325:
#line 2558 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	yyVal = yyVals[0+yyTop];
  }
  break;
case 326:
#line 2565 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	var lt = (LocatedToken) yyVals[0+yyTop];
	 	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-1+yyTop]);
	  	((EnumDeclaration) current_type).AddMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 327:
#line 2578 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }
  break;
case 328:
#line 2586 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-4+yyTop]);
	  	em.ConstantValue = (IConstantValue) yyVals[0+yyTop];
	  	((EnumDeclaration) current_type).AddMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }
  break;
case 329:
#line 2600 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-2+yyTop]);
	  	((EnumDeclaration) current_type).AddMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 331:
#line 2623 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 332:
#line 2627 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];
		DelegateDeclaration del = new DelegateDeclaration (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (VSharpAttributes) yyVals[-8+yyTop],file);
		p.CheckParameters ();
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 333:
#line 2637 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 334:
#line 2641 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
		current_delegate.SetConstraints ((List<TypeParameterConstraints>) yyVals[-2+yyTop]);

		yyVal = current_delegate;

		current_delegate = null;
	  }
  break;
case 336:
#line 2659 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
  			yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 338:
#line 2667 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new QualifiedAlias(lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 339:
#line 2673 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
  	    var lt1 = (LocatedToken) yyVals[-2+yyTop];
    	var lt2 = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 341:
#line 2683 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	
	  }
  break;
case 342:
#line 2689 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 343:
#line 2697 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 344:
#line 2702 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 346:
#line 2714 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
			yyVal = yyVals[-1+yyTop];
	  }
  break;
case 347:
#line 2718 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 348:
#line 2726 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	
	  }
  break;
case 349:
#line 2733 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 350:
#line 2745 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 351:
#line 2749 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 352:
#line 2758 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	MemberName mn = (MemberName)yyVals[0+yyTop];
	 	if (mn.TypeParameters != null)
	 		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
				mn.GetSignatureForError ()));
	  }
  break;
case 354:
#line 2769 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (TypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }
  break;
case 355:
#line 2778 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDeclaration.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 356:
#line 2783 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDeclaration.DefaultIndexerName, null, (TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 357:
#line 2791 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	  }
  break;
case 358:
#line 2796 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
	  }
  break;
case 359:
#line 2803 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((TypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	
	  }
  break;
case 361:
#line 2813 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 362:
#line 2820 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var tparams = new TypeParameters ();
		tparams.Add ((UnresolvedTypeParameterSpec)yyVals[0+yyTop]);
		yyVal = tparams;
	  }
  break;
case 363:
#line 2826 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((UnresolvedTypeParameterSpec)yyVals[0+yyTop]);
		yyVal = tparams;
		
	  }
  break;
case 364:
#line 2836 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];

		yyVal = new UnresolvedTypeParameterSpec (SymbolKind.TypeDefinition,0,lt.Location,lt.Value);
		
  	  }
  break;
case 365:
#line 2843 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (103, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new UnresolvedTypeParameterSpec (SymbolKind.TypeDefinition, 0,Location.Null);
  	  }
  break;
case 367:
#line 2859 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new TypeExpression (KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 368:
#line 2866 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 374:
#line 2887 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	report.Error (104, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
	yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 376:
#line 2896 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ComposedType((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 377:
#line 2903 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) 
			yyVal = new ComposedType ((TypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		 else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarTypeExpression (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }
  break;
case 378:
#line 2915 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ComposedType ((TypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 380:
#line 2923 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error(112, GetLocation (yyVals[0+yyTop]), "Keyword `void' cannot be used in this context");
		yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 381:
#line 2931 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 382:
#line 2936 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 383:
#line 2940 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ComposedType (new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 384:
#line 2947 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 385:
#line 2953 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
	
		yyVal = types;
	  }
  break;
case 386:
#line 2963 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is ComposedType)
			report.Error (105, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedType)yyVals[0+yyTop]).GetSignatureForError ());
	
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 387:
#line 2976 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 388:
#line 2977 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 389:
#line 2978 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Boolean, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 390:
#line 2979 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Single, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 391:
#line 2980 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Double, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 393:
#line 2985 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.SByte, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 394:
#line 2986 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Byte, GetLocation (yyVals[0+yyTop]));	}
  break;
case 395:
#line 2987 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int16, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 396:
#line 2988 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt16, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 397:
#line 2989 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int32, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 398:
#line 2990 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt32, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 399:
#line 2991 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int64, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 400:
#line 2992 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt64, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 401:
#line 2993 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Char, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 426:
#line 3032 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		 yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 427:
#line 3038 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 	yyVal = new BoolLiteral (true, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 428:
#line 3039 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 	yyVal = new BoolLiteral (false, GetLocation (yyVals[0+yyTop]));	}
  break;
case 429:
#line 3044 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[-2+yyTop], (List<Expression>) yyVals[-1+yyTop], (StringLiteral) yyVals[0+yyTop]);
	  }
  break;
case 430:
#line 3048 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[0+yyTop], null, null);
	  }
  break;
case 431:
#line 3055 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var list = new List<Expression> ();
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 432:
#line 3061 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((StringLiteral) yyVals[-1+yyTop]);
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 433:
#line 3071 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 434:
#line 3075 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-2+yyTop]) {
			Alignment = (Expression)yyVals[0+yyTop]
		};
	  }
  break;
case 435:
#line 3081 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 436:
#line 3085 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-3+yyTop]) {
			Format = (string)yyVals[0+yyTop]
		};
	  }
  break;
case 437:
#line 3093 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 438:
#line 3097 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-5+yyTop]) {
			Alignment = (Expression)yyVals[-3+yyTop],
			Format = (string) yyVals[0+yyTop]
		};
	  }
  break;
case 443:
#line 3130 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 444:
#line 3134 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 445:
#line 3141 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 446:
#line 3146 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 447:
#line 3151 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 448:
#line 3156 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 449:
#line 3161 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SuperReference (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 450:
#line 3166 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAlias(lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location, NameLookupMode.Expression);
	  }
  break;
case 451:
#line 3173 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location, NameLookupMode.Expression);
	  }
  break;
case 452:
#line 3183 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 453:
#line 3187 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 454:
#line 3192 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Invocation ((Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 455:
#line 3199 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 	yyVal = null; 	}
  break;
case 457:
#line 3205 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (GetLocation (yyVals[-2+yyTop]));
	  	} else {
			yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	}

	  }
  break;
case 458:
#line 3214 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 459:
#line 3220 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {	 yyVal = null; 	}
  break;
case 460:
#line 3222 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {		yyVal = yyVals[0+yyTop];}
  break;
case 461:
#line 3227 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 462:
#line 3233 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 463:
#line 3238 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 464:
#line 3246 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 465:
#line 3251 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[-1+yyTop] == null)
			yyVal = new CollectionElementInitializer (GetLocation (yyVals[-2+yyTop]));
		else {
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		}
	  }
  break;
case 466:
#line 3259 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	report.Error (106, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 469:
#line 3271 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = null; 	 }
  break;
case 471:
#line 3277 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 472:
#line 3283 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 473:
#line 3292 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
		if (na != null && na.Name == a.Name)
				report.Error (107, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }
  break;
case 474:
#line 3306 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 475:
#line 3313 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	report.Error (108, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }
  break;
case 476:
#line 3321 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation(yyVals[0+yyTop]));
	  }
  break;
case 480:
#line 3334 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 481:
#line 3338 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 482:
#line 3342 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 483:
#line 3346 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 484:
#line 3353 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 485:
#line 3358 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 486:
#line 3362 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnCheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 487:
#line 3367 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }
  break;
case 488:
#line 3374 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
	var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-3+yyTop], lv) {
		Initializer = (Expression) yyVals[0+yyTop]
		};
	  }
  break;
case 490:
#line 3390 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 491:
#line 3394 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};
	  }
  break;
case 492:
#line 3400 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 493:
#line 3405 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 494:
#line 3413 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 495:
#line 3419 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 496:
#line 3428 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 497:
#line 3434 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Arguments args = (Arguments) yyVals[-2+yyTop];
	if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }
  break;
case 498:
#line 3446 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 500:
#line 3454 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new SelfReference (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 501:
#line 3461 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	yyVal = new ElementAccess (new SuperReference (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 502:
#line 3465 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 503:
#line 3473 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 504:
#line 3480 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 505:
#line 3487 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {			
			yyVal = new NewInitializeExpression ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new NewExpression ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
	  }
  break;
case 506:
#line 3496 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new NewInitializeExpression ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 507:
#line 3505 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 508:
#line 3512 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  if (yyVals[0+yyTop] == null)
	  		report.Error (109, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 509:
#line 3519 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 510:
#line 3523 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (110, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 511:
#line 3528 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new NewExpression ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 512:
#line 3536 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 513:
#line 3540 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 514:
#line 3548 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new NewAnonymousTypeExpression ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 517:
#line 3559 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 yyVal = null; 
	 }
  break;
case 519:
#line 3567 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 520:
#line 3573 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);

	  	yyVal = a;
	  }
  break;
case 521:
#line 3583 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  }
  break;
case 522:
#line 3588 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }
  break;
case 523:
#line 3594 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }
  break;
case 524:
#line 3599 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (113, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }
  break;
case 528:
#line 3614 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 529:
#line 3622 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		
	  }
  break;
case 530:
#line 3627 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 531:
#line 3634 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = 2;
	  }
  break;
case 532:
#line 3638 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 533:
#line 3645 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = null;
	  }
  break;
case 534:
#line 3649 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 535:
#line 3656 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		yyVal = ai;
	  }
  break;
case 536:
#line 3662 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
	
		yyVal = ai;
	  }
  break;
case 537:
#line 3672 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 538:
#line 3678 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 539:
#line 3687 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new TypeOfExpression ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 541:
#line 3695 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }
  break;
case 542:
#line 3703 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 543:
#line 3710 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = lt;		
	  }
  break;
case 544:
#line 3718 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		yyVal = new SizeOfExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 545:
#line 3722 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new SizeOfExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 546:
#line 3731 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 547:
#line 3735 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 548:
#line 3744 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnCheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 549:
#line 3748 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 550:
#line 3757 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new IndirectionExpression ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 551:
#line 3766 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	start_anonymous (false, (ParametersCompiled) $2, false, GetLocation ($1));*/
	  }
  break;
case 552:
#line 3770 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $4);*/
		/*if ((ParametersCompiled) $2 != ParametersCompiled.Undefined) {*/
		/*	lbag.AddLocation ($$, GetLocation ($1), PopLocation (), PopLocation ());*/
		/*} else {*/
		/*	lbag.AddLocation ($$, GetLocation ($1));*/
	/*	}*/
	  }
  break;
case 553:
#line 3782 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	$$ = ParametersCompiled.Undefined;*/
	  }
  break;
case 555:
#line 3790 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  /*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 556:
#line 3794 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/
	 /* 	$$ = $3;*/
	  /*	PushLocation (GetLocation ($3));*/
	 /* 	PushLocation (GetLocation ($1));*/
	
	  }
  break;
case 557:
#line 3805 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 559:
#line 3813 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3817 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3821 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CastExpression ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 562:
#line 3825 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 3830 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 564:
#line 3835 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new CastExpression ((FullNamedExpression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 566:
#line 3848 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
	 	yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 567:
#line 3852 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 568:
#line 3856 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 569:
#line 3860 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 570:
#line 3864 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new IndirectionExpression ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
#line 3868 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 572:
#line 3872 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		Error_SyntaxError (yyToken);

	  	yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
#line 3878 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		Error_SyntaxError (yyToken);

		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 574:
#line 3884 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 575:
#line 3890 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 576:
#line 3896 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new IndirectionExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 577:
#line 3902 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 579:
#line 3912 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 580:
#line 3916 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 581:
#line 3920 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 582:
#line 3924 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 583:
#line 3929 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 584:
#line 3935 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 586:
#line 3945 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);

	  }
  break;
case 587:
#line 3950 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 588:
#line 3954 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 589:
#line 3959 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 590:
#line 3964 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new AsExpression ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 591:
#line 3968 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var is_expr = new IsExpression ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		yyVal = is_expr;
	  }
  break;
case 592:
#line 3973 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new AsExpression ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 593:
#line 3978 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new IsExpression ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 596:
#line 3992 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 597:
#line 3996 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 598:
#line 4000 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 599:
#line 4006 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 601:
#line 4015 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	yyVal = new BinaryExpression (BinaryOperatorType.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 602:
#line 4019 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 603:
#line 4023 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 604:
#line 4027 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 605:
#line 4031 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		 yyVal = new BinaryExpression (BinaryOperatorType.LessThan, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 606:
#line 4037 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThan, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 607:
#line 4043 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 608:
#line 4049 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 610:
#line 4059 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 611:
#line 4063 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 612:
#line 4067 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Equality, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 613:
#line 4072 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Inequality, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 615:
#line 4082 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 616:
#line 4086 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 618:
#line 4096 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 619:
#line 4100 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 621:
#line 4110 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 622:
#line 4114 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 624:
#line 4124 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 625:
#line 4128 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 627:
#line 4138 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 628:
#line 4142 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LogicalOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 630:
#line 4152 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {		
		yyVal = new BinaryExpression (BinaryOperatorType.NullCoalescing, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 632:
#line 4160 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 633:
#line 4164 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		 yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 634:
#line 4170 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 635:
#line 4176 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (Token.CLOSE_BRACE);

		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lexer.putback ('}');
	  }
  break;
case 636:
#line 4186 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 637:
#line 4190 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 638:
#line 4194 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 639:
#line 4198 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 640:
#line 4202 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 641:
#line 4206 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 642:
#line 4210 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 643:
#line 4214 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 644:
#line 4218 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 645:
#line 4222 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 646:
#line 4226 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 647:
#line 4234 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/* var pars = new List<Parameter> (4);*/
	/*	pars.Add ((Parameter) $1);*/
	/*	parameterListCommas.Clear ();*/
	/*	$$ = pars;*/
	  }
  break;
case 648:
#line 4241 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	var pars = (List<Parameter>) $1;*/
	/*	Parameter p = (Parameter)$3;*/
	/*	if (pars[0].GetType () != p.GetType ()) {*/
	/*		report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");*/
	/*	}*/
		
	/*	pars.Add (p);*/
		/*parameterListCommas.Add (GetLocation ($2));*/

		/*$$ = pars;*/
	  }
  break;
case 649:
#line 4257 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $3;*/

	/*	$$ = new Parameter ((FullNamedExpression) $2, lt.Value, (Parameter.Modifier) $1, null, lt.Location);*/
	  }
  break;
case 650:
#line 4263 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;*/

	/*	$$ = new Parameter ((FullNamedExpression) $1, lt.Value, Parameter.Modifier.NONE, null, lt.Location);*/
	  }
  break;
case 651:
#line 4269 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*  	var lt = (LocatedToken) $1;*/
	/*	$$ = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
	  }
  break;
case 652:
#line 4276 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { /*$$ = ParametersCompiled.EmptyReadOnlyParameters; */
	}
  break;
case 653:
#line 4278 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
	/*	var pars_list = (List<Parameter>) $1;*/
	/*	$$ = new ParametersCompiled (pars_list.ToArray ());*/
	/*	lbag.AddLocation ($$, parameterListCommas);*/
	  }
  break;
case 654:
#line 4286 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	start_block (Location.Null);*/
	  }
  break;
case 655:
#line 4290 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	Block b = end_block (Location.Null);*/
	/*	b.IsCompilerGenerated = true;*/
	/*	b.AddStatement (new ContextualReturn ((Expression) $2));*/
	/*	$$ = b;*/
	  }
  break;
case 657:
#line 4298 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
	/*	Block b = end_block (Location.Null);*/
	/*	b.IsCompilerGenerated = true;*/

	/*	Error_SyntaxError (yyToken);*/
/*		$$ = null;*/
	  }
  break;
case 659:
#line 4312 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 660:
#line 4320 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;	*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
		/*start_anonymous (true, new ParametersCompiled (p), false, lt.Location);*/
	  }
  break;
case 661:
#line 4326 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $4);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 662:
#line 4331 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
/*	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 663:
#line 4335 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*  	valid_param_mod = 0;*/
	/*	start_anonymous (true, (ParametersCompiled) $3, false, GetLocation ($1));*/
	  }
  break;
case 664:
#line 4340 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $7);*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($4), GetLocation ($5));*/
	  }
  break;
case 671:
#line 4364 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 672:
#line 4371 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 674:
#line 4379 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 675:
#line 4386 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 676:
#line 4390 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = null;
	  }
  break;
case 677:
#line 4394 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 678:
#line 4398 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 679:
#line 4402 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 680:
#line 4407 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }
  break;
case 681:
#line 4423 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {

	  }
  break;
case 682:
#line 4427 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;

		ClassDeclaration c = new ClassDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop],GetLocation(yyVals[-2+yyTop]),file );		
		push_current_container (c);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }
  break;
case 683:
#line 4436 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

	if (yyVals[-1+yyTop] != null)
		current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 684:
#line 4454 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 685:
#line 4460 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	yyVal = pop_current_class ();
	  }
  break;
case 686:
#line 4467 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 687:
#line 4469 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = yyVals[0+yyTop];  }
  break;
case 688:
#line 4474 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }
  break;
case 689:
#line 4479 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 691:
#line 4487 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (114, lexer.Location - ModifiersExtensions.Name (m2).Length,
			"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
		((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (115, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }
  break;
case 692:
#line 4506 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.NEW;	
		/*if (current_container is D)
			report.Error (116, GetLocation ($1), "Keyword `new' is not allowed on package elements");*/
	  }
  break;
case 693:
#line 4512 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {	yyVal = Modifiers.PUBLIC;  }
  break;
case 694:
#line 4514 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.PROTECTED;
	
	  }
  break;
case 695:
#line 4519 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.INTERNAL;

	  }
  break;
case 696:
#line 4524 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.PRIVATE;
	  }
  break;
case 697:
#line 4528 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.ABSTRACT;
	  }
  break;
case 698:
#line 4532 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.SEALED;
	  }
  break;
case 699:
#line 4536 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.STATIC;
	  }
  break;
case 700:
#line 4540 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	yyVal = Modifiers.READONLY;
	  }
  break;
case 701:
#line 4544 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.VIRTUAL;
	  }
  break;
case 702:
#line 4548 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.OVERRIDE;
	  }
  break;
case 703:
#line 4552 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = Modifiers.EXTERN;
	  }
  break;
case 706:
#line 4564 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 707:
#line 4568 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }
  break;
case 709:
#line 4578 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 710:
#line 4585 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var constraints = new List<TypeParameterConstraints> (1);
		constraints.Add ((TypeParameterConstraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 711:
#line 4591 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var constraints = (List<TypeParameterConstraints>) yyVals[-1+yyTop];
		TypeParameterConstraints new_constraint = (TypeParameterConstraints)yyVals[0+yyTop];

		foreach (TypeParameterConstraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (117, new_constraint.Location,
				"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
		}
	}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 712:
#line 4610 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new TypeParameterConstraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	
	  }
  break;
case 713:
#line 4616 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new TypeParameterConstraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 714:
#line 4626 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 715:
#line 4632 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
	var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (118, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (119, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
		} else {
		 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (120, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);

		yyVal = constraints;
	  }
  break;
case 716:
#line 4659 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is ComposedType)
			report.Error (121, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedType)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 717:
#line 4666 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 718:
#line 4670 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 719:
#line 4674 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 720:
#line 4694 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 721:
#line 4699 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 722:
#line 4706 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 723:
#line 4711 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }
  break;
case 724:
#line 4720 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 725:
#line 4725 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 726:
#line 4729 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (122, GetLocation (yyVals[0+yyTop]), "Unexpected symbol '}', expected '{'");
		lexer.putback ('}');
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 727:
#line 4738 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 728:
#line 4743 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 733:
#line 4761 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 734:
#line 4765 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 736:
#line 4771 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		var lt =(LocatedToken) yyVals[-1+yyTop];
		var sn = new SimpleName (lt.Value, lt.Location);
		current_block.AddStatement(new StatementErrorExpression (sn));
		yyVal = null;
	}
  break;
case 737:
#line 4780 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 740:
#line 4799 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 741:
#line 4803 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 766:
#line 4840 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		  report.Error (123, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 767:
#line 4845 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		  report.Error (123, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 768:
#line 4850 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 769:
#line 4858 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }
  break;
case 770:
#line 4866 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }
  break;
case 773:
#line 4878 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[-1+yyTop] is VarTypeExpression)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarTypeExpression) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 774:
#line 4894 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
	
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use package_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		var expr = (TypeNameExpression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			if (expr.Name == "var" && expr is SimpleName)
				yyVal = new VarTypeExpression (expr.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else {
			yyVal = new ComposedType (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		}
	  }
  break;
case 775:
#line 4921 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var expr = (TypeNameExpression) yyVals[-1+yyTop];
		yyVal = new ComposedType (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 779:
#line 4932 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	 	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 780:
#line 4940 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 782:
#line 4951 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 783:
#line 4958 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
	  }
  break;
case 784:
#line 4963 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 785:
#line 4970 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = current_variable;;
		current_variable = null;
	  }
  break;
case 787:
#line 4978 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/* Redundant, but wont regress*/
		report.Error (124, lexer.Location, "Unexpected symbol }");
		lexer.putback ('}');
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 789:
#line 4989 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }
  break;
case 790:
#line 4994 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (125, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }
  break;
case 794:
#line 5012 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }
  break;
case 797:
#line 5027 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  }
  break;
case 798:
#line 5035 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);

	  }
  break;
case 799:
#line 5047 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (126, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 800:
#line 5051 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 805:
#line 5068 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  }
  break;
case 807:
#line 5080 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 808:
#line 5084 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (127, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }
  break;
case 809:
#line 5092 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 810:
#line 5095 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 811:
#line 5097 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		report.Error (128, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }
  break;
case 812:
#line 5105 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 813:
#line 5106 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 814:
#line 5115 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			var expr = yyVals[0+yyTop] as Expression;
			yyVal = new StatementErrorExpression (expr);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }
  break;
case 815:
#line 5128 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
		yyVal = new StatementExpression (new OptionalAssign (expr, lexer.Location));
	  }
  break;
case 816:
#line 5133 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 819:
#line 5147 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { 
  if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 820:
#line 5155 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
	
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 821:
#line 5165 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 822:
#line 5174 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 823:
#line 5178 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 824:
#line 5183 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
	  }
  break;
case 825:
#line 5192 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 829:
#line 5202 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 831:
#line 5213 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
	current_block.AddStatement (label);
	  }
  break;
case 832:
#line 5219 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 833:
#line 5226 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 }
  break;
case 834:
#line 5230 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 835:
#line 5235 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 840:
#line 5249 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 841:
#line 5256 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 842:
#line 5265 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 843:
#line 5269 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }
  break;
case 844:
#line 5274 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 845:
#line 5283 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }
  break;
case 846:
#line 5291 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 847:
#line 5299 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		For f =  (For) yyVals[-2+yyTop];
		f.Initializer = (Statement) yyVals[-1+yyTop];
		yyVal = f;
	  }
  break;
case 848:
#line 5305 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 849:
#line 5308 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (129, GetLocation (yyVals[0+yyTop]), "Unexpected symbol ')', expected ';'");
		For f =  (For) yyVals[-2+yyTop];
		f.Initializer = (Statement) yyVals[-1+yyTop];
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	}
  break;
case 850:
#line 5318 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		For f =  (For) yyVals[-2+yyTop];
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = f;
	  }
  break;
case 851:
#line 5324 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 852:
#line 5328 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
report.Error (129, GetLocation (yyVals[0+yyTop]), "Unexpected symbol ')', expected ';'");
		For f =  (For) yyVals[-2+yyTop];
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	}
  break;
case 853:
#line 5339 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		For f =  (For) yyVals[-3+yyTop];
		f.Iterator = (Statement) yyVals[-2+yyTop];
		
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		f.Statement = (Statement) yyVals[0+yyTop];

		yyVal = end_block (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 854:
#line 5351 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }
  break;
case 855:
#line 5358 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = new EmptyStatement (lexer.Location); 	}
  break;
case 857:
#line 5364 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 858:
#line 5371 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
	  }
  break;
case 860:
#line 5379 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = null;	 }
  break;
case 862:
#line 5384 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  { yyVal = new EmptyStatement (lexer.Location); 	}
  break;
case 866:
#line 5395 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	 	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		
	  	}
	  		
		yyVal = sl;
	  }
  break;
case 867:
#line 5410 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (130, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
	
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 868:
#line 5423 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 869:
#line 5439 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }
  break;
case 870:
#line 5449 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }
  break;
case 871:
#line 5459 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = yyVals[-1+yyTop] as LocatedToken;
		var li = lt != null ? new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location) : null;
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 872:
#line 5471 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		

		yyVal = f;
	  }
  break;
case 879:
#line 5491 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 880:
#line 5498 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 881:
#line 5502 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 882:
#line 5510 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
	
	  }
  break;
case 883:
#line 5516 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	
	  }
  break;
case 884:
#line 5521 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));

	  }
  break;
case 885:
#line 5529 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 886:
#line 5533 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 887:
#line 5538 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 888:
#line 5546 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	
	  }
  break;
case 889:
#line 5551 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 890:
#line 5556 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 891:
#line 5564 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (128, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (131, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);

	  }
  break;
case 892:
#line 5578 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (128, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (131, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
	
	  }
  break;
case 893:
#line 5594 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (128, lt.Location, "; expected");
		} 
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
	  }
  break;
case 896:
#line 5612 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Except>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 897:
#line 5616 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	
	  }
  break;
case 898:
#line 5621 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Except>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	
	  }
  break;
case 899:
#line 5626 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 900:
#line 5634 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var l = new List<Except> (2);

		l.Add ((Except) yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 901:
#line 5641 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var l = (List<Except>) yyVals[-1+yyTop];
		
		Except c = (Except) yyVals[0+yyTop];
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (132, c.loc, "Try statement already has an empty except block");
		}
		
		l.Add (c);
		yyVal = l;
	  }
  break;
case 904:
#line 5662 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	
	  	var c = new Except ((ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	c.Filter = (ExceptFilterExpression) yyVals[-1+yyTop];
	  	yyVal = c;
	  }
  break;
case 905:
#line 5669 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Except ((ExplicitBlock) current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		yyVal = c;
		lexer.parsing_catch_when = true;
	  }
  break;
case 906:
#line 5684 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	((Except) yyVals[-1+yyTop]).Filter = (ExceptFilterExpression) yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 907:
#line 5689 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (133, lexer.Location,
				"A type that derives from `Std.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Except (null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 908:
#line 5703 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 909:
#line 5707 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		end_block (Location.Null);
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 910:
#line 5715 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 911:
#line 5719 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 912:
#line 5723 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {


		yyVal = new ExceptFilterExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	
	  }
  break;
case 913:
#line 5733 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		  yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 914:
#line 5740 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 915:
#line 5747 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Sync ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 916:
#line 5754 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Sync ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 917:
#line 5765 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 918:
#line 5775 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = current_variable;	  
		current_variable = null;
	  }
  break;
case 919:
#line 5780 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 920:
#line 5789 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 921:
#line 5796 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 923:
#line 5806 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }
  break;
case 924:
#line 5814 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 925:
#line 5818 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }
  break;
case 926:
#line 5830 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		lexer.query_parsing = false;
			
		AQueryClause from = yyVals[-1+yyTop] as AQueryClause;
			
		from.Tail.Next = (AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 927:
#line 5842 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		AQueryClause from = yyVals[-1+yyTop] as AQueryClause;
			
		from.Tail.Next = (AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 928:
#line 5853 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 929:
#line 5860 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 930:
#line 5869 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block = new QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new RangeVariable (lt.Value, lt.Location);
		var clause = new QueryStartClause ((QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		yyVal = new QueryExpression (clause);
	  }
  break;
case 931:
#line 5878 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block = new QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new RangeVariable (lt.Value, lt.Location);
		var clause = new QueryStartClause ((QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		yyVal = new QueryExpression (clause);
	  }
  break;
case 932:
#line 5892 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block = new QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new RangeVariable (lt.Value, lt.Location);
		var clause = new QueryStartClause ((QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		yyVal = new QueryExpression (clause);
	  }
  break;
case 933:
#line 5901 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block = new QueryBlock (current_block, lexer.Location);
	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new RangeVariable (lt.Value, lt.Location);
		var clause = new QueryStartClause ((QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		yyVal = new QueryExpression (clause);
	  }
  break;
case 934:
#line 5915 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 935:
#line 5919 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new RangeVariable (lt.Value, lt.Location);
		yyVal = new SelectMany ((QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		((QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 936:
#line 5929 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 937:
#line 5933 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new RangeVariable (lt.Value, lt.Location);

		yyVal = new SelectMany ((QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((QueryBlock)current_block).AddRangeVariable (sn);
		

	  }
  break;
case 938:
#line 5952 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	AQueryClause head = (AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			AQueryClause clause = (AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }
  break;
case 939:
#line 5967 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	AQueryClause head = (AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			AQueryClause clause = (AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }
  break;
case 941:
#line 5980 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		report.Error (134, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 942:
#line 5985 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 943:
#line 5993 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 944:
#line 5997 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Select ((QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 945:
#line 6004 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<QueryBlock> ();
	  		
	  	current_block = new QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((QueryBlock)current_block);
	  }
  break;
case 946:
#line 6012 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 947:
#line 6019 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var obj = (object[]) yyVals[0+yyTop];

		yyVal = new GroupBy ((QueryBlock)current_block, (Expression)yyVals[-2+yyTop], linq_clause_blocks.Pop (), (Expression)obj[0], GetLocation (yyVals[-4+yyTop]));

		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 948:
#line 6032 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	yyVal = new object[] { yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]) };
	  }
  break;
case 949:
#line 6036 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new object[2] { null, Location.Null };
	  }
  break;
case 951:
#line 6045 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		((AQueryClause)yyVals[-1+yyTop]).Tail.Next = (AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 957:
#line 6061 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 958:
#line 6065 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var sn = new RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Let ((QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 959:
#line 6079 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	  	current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 960:
#line 6083 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new Where ((QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 961:
#line 6093 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<QueryBlock> ();
	  		
		current_block = new QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((QueryBlock) current_block);
	  }
  break;
case 962:
#line 6101 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((QueryBlock) current_block);
	  }
  break;
case 963:
#line 6109 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 964:
#line 6117 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (LocatedToken) yyVals[-10+yyTop];	
		var sn = new RangeVariable (lt.Value, lt.Location);
		RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));

		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new RangeVariable (lt.Value, lt.Location);

			yyVal = new GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
		
		}

		current_block = block.Parent;
		((QueryBlock)current_block).AddRangeVariable (into);
	  }
  break;
case 965:
#line 6155 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<QueryBlock> ();
	  		
		current_block = new QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((QueryBlock) current_block);
	  }
  break;
case 966:
#line 6163 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((QueryBlock) current_block);
	  }
  break;
case 967:
#line 6171 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 968:
#line 6179 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (LocatedToken) yyVals[-10+yyTop];
		var sn = new RangeVariable (lt.Value, lt.Location);
		RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (LocatedToken) yyVals[0+yyTop];
			into = new RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((QueryBlock)current_block).AddRangeVariable (into);		
	  }
  break;
case 970:
#line 6223 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		opt_intoStack.Push (GetLocation (yyVals[-1+yyTop]));
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 971:
#line 6231 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 972:
#line 6235 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 974:
#line 6246 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new QueryBlock (current_block, lexer.Location);
	  }
  break;
case 975:
#line 6253 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		((AQueryClause)yyVals[-3+yyTop]).Next = (AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }
  break;
case 977:
#line 6262 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new QueryBlock ((QueryBlock) current_block, lexer.Location);	 
	 }
  break;
case 978:
#line 6269 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		((AQueryClause)yyVals[-3+yyTop]).Tail.Next = (AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }
  break;
case 979:
#line 6277 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new OrderByAscending ((QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 980:
#line 6281 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new OrderByAscending ((QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	
	  }
  break;
case 981:
#line 6286 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new OrderByDescending ((QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	

	  }
  break;
case 982:
#line 6294 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ThenByAscending ((QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 983:
#line 6298 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ThenByAscending ((QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	
	  }
  break;
case 984:
#line 6303 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		yyVal = new ThenByDescending ((QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		
	  }
  break;
case 986:
#line 6313 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<QueryBlock> ();
	  		
		linq_clause_blocks.Push ((QueryBlock) current_block);		
	  }
  break;
case 987:
#line 6329 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (LocatedToken) yyVals[-2+yyTop];
		var rv = new RangeVariable (lt.Value, lt.Location);
  		yyVal = new QueryStartClause ((QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (AQueryClause)yyVals[0+yyTop]
  		};
	  }
  break;
case 988:
#line 6344 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedName = (MemberName) $2;*/
	  }
  break;
case 989:
#line 6351 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;*/
	  }
  break;
case 990:
#line 6355 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)$1;
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;
		$$ = null;*/
	  }
  break;
case 991:
#line 6361 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation ($1));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;
		$$ = null;*/
	  }
  break;
case 992:
#line 6367 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)$1;
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$4;
		var lt = (LocatedToken) $3;
		$$ = new MemberName (lt.Value);*/
	  }
  break;
case 993:
#line 6374 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	$$ = new MemberName ((MemberName) $1, MemberCache.IndexerNameAlias, Location.Null);*/
	  }
  break;
case 994:
#line 6378 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 995:
#line 6382 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$6;*/
		/*$$ = new MemberName ((MemberName) $1, MemberCache.IndexerNameAlias, Location.Null);*/
	  }
  break;
case 996:
#line 6387 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/*var p = (List<DocumentationParameter>)$4 ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) $3));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = VSC.TypeSystem.Resolver.OperatorType.Explicit;
		$$ = null;*/
	  }
  break;
case 997:
#line 6395 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	var p = (List<DocumentationParameter>)$4 ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) $3));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = VSC.TypeSystem.Resolver.OperatorType.Implicit;
		$$ = null;*/
	  }
  break;
case 998:
#line 6403 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
		/*var p = (List<DocumentationParameter>)$3;
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) $2;
		$$ = null;*/
	  }
  break;
case 1000:
#line 6414 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	$$ = new MemberName (((MemberName) $1), (MemberName) $3);*/
	  }
  break;
case 1002:
#line 6422 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 1003:
#line 6426 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
/*		$$ = $3;*/
	  }
  break;
case 1004:
#line 6433 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	$$ = new List<DocumentationParameter> (0);*/
	  }
  break;
case 1006:
#line 6441 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) $1);
		$$ = parameters;*/
	  }
  break;
case 1007:
#line 6447 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	var parameters = $1 as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) $3);
		$$ = parameters;*/
	  }
  break;
case 1008:
#line 6456 "E:\Projects\VSharp\VSC\\VSharpParser.jay"
  {
	/*	if ($1 != null)
			$$ = new DocumentationParameter ((Parameter.Modifier) $1, (FullNamedExpression) $2);
		else
			$$ = new DocumentationParameter ((FullNamedExpression) $2);*/
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    0,    1,    1,    1,    1,    2,    2,    8,    8,
    9,   10,   10,   10,   12,   12,   15,   16,   13,   13,
   18,   18,   18,   14,   14,   14,   19,   19,   20,   20,
    4,    4,   17,   17,    5,    5,   21,   21,   21,   22,
   22,   22,   22,   22,    6,    6,    7,    7,   30,   28,
   33,   29,   29,   29,   29,   31,   31,   31,   32,   32,
   37,   34,   35,   36,   36,   38,   38,   38,   38,   38,
   39,   39,   39,   43,   40,   42,   46,   46,   45,   45,
   45,   49,   49,   50,   50,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,   51,   51,   51,   65,
   60,   70,   72,   75,   76,   77,   24,   24,   80,   52,
   52,   81,   81,   82,   82,   83,   85,   79,   79,   84,
   84,   90,   53,   89,   93,   89,   91,   91,   94,   94,
   95,   96,   95,   92,   92,   92,   99,   54,  102,  103,
   97,  104,  105,  106,   97,   97,   97,   98,   98,  108,
  108,  111,  109,  101,  101,  112,  112,  112,  112,  112,
  112,  113,  113,  115,  115,  115,  115,  118,  115,  116,
  116,  119,  119,  120,  120,  120,  114,  114,  114,  121,
  121,  121,  123,  125,  126,  128,   55,  129,   55,  127,
  131,  127,  130,  130,  133,  135,   57,  134,  134,  124,
  124,  124,  124,  124,  139,  136,  140,  137,  138,  138,
  138,  141,  142,  143,  145,   25,   25,  144,  144,  146,
  146,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  149,   58,  150,  150,  153,  148,  148,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  155,  154,  156,  154,  154,  154,   59,  159,  161,  157,
  158,  158,  160,  160,  165,  163,  166,  163,  163,  163,
  167,   61,  169,   56,  172,  173,   56,   56,  168,  175,
  168,  170,  170,  176,  176,  177,  178,  177,  179,  174,
  171,  171,  171,  171,  171,  183,  180,  184,  181,  182,
  182,   62,   63,  186,  188,  189,   26,  185,  185,  185,
  187,  187,  187,  190,  190,  191,  192,  191,  191,  191,
  193,  194,  195,   27,  196,  196,   11,   11,   11,  197,
  197,  197,  201,  201,  199,  199,  199,  202,  202,  204,
   69,  122,  100,  100,  132,  132,  205,  205,  205,  203,
  203,  206,  206,  207,  207,  208,  208,   88,   78,   78,
  210,  210,  117,  117,  151,  151,  211,  211,  211,  209,
  214,  214,  214,  216,  216,  217,  215,  215,  215,  215,
  215,  215,  218,  218,  218,  218,  218,  218,  218,  218,
  218,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  220,  220,  221,  221,  221,  241,  241,  239,  239,
  242,  242,  243,  243,  244,  243,  245,  243,  246,  246,
  247,  247,  223,  223,  240,  240,  240,  240,  240,  240,
  240,  225,  225,  225,  249,  249,  250,  250,  251,  251,
  252,  252,  252,  253,  253,  253,  254,  254,  164,  164,
  248,  248,  248,  248,  248,  257,  257,  256,  256,  258,
  258,  258,  258,   48,   48,   48,   48,   48,  259,  226,
  226,  226,  226,  255,  255,  261,  261,  262,  262,  227,
  228,  228,  229,  230,  231,  231,  222,  222,  222,  222,
  222,  267,  263,  232,  268,  268,  269,  269,  270,  270,
  271,  271,  271,  271,  264,  264,  212,  212,  266,  266,
  272,  272,  265,  265,   87,   87,  273,  273,  233,  274,
  274,  200,  198,  234,  234,  235,  235,  236,  236,  237,
  276,  238,  275,  275,  278,  277,  224,  279,  279,  279,
  279,  279,  279,  279,  280,  280,  280,  280,  280,  280,
  280,  280,  280,  280,  280,  280,  280,  281,  281,  281,
  281,  281,  281,  281,  282,  282,  282,  282,  282,  282,
  282,  282,  282,  283,  284,  284,  284,  284,  284,  285,
  285,  285,  285,  285,  285,  285,  285,  285,  286,  286,
  286,  286,  286,  287,  287,  287,  288,  288,  288,  289,
  289,  289,  290,  290,  290,  291,  291,  291,  292,  292,
  293,  293,  293,  293,  293,  294,  294,  294,  294,  294,
  294,  294,  294,  294,  294,  294,  295,  295,  296,  296,
  296,  297,  297,  299,  298,  298,  298,   47,   47,  301,
  300,  302,  303,  300,   41,   41,  304,  304,  304,   86,
  306,   71,   71,  307,  308,  308,  308,  308,  310,  308,
  311,  312,  313,  314,   23,   68,   68,   67,   67,  107,
  107,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,   73,   73,  309,  309,   74,   74,  316,
  316,  317,  317,  318,  318,  319,  319,  319,  319,  320,
  110,   66,   66,  321,  162,  162,  323,  322,   64,   64,
  324,  324,  325,  325,  325,  325,  325,  329,  329,  330,
  330,  330,  327,  327,  327,  327,  327,  327,  327,  327,
  327,  327,  327,  331,  331,  331,  331,  331,  331,  331,
  331,  331,  331,  331,  343,  343,  343,  343,  332,  344,
  328,  260,  260,  345,  345,  345,  345,  213,  213,  346,
   44,  348,  326,  352,  326,  350,  350,  347,  347,  347,
  349,  349,  356,  356,  355,  355,  357,  357,  351,  351,
  353,  353,  358,  358,  359,  354,  354,  354,  333,  333,
  333,  342,  342,  360,  361,  361,  334,  334,  362,  362,
  362,  365,  363,  363,  364,  364,  366,  366,  366,  367,
  368,  368,  369,  369,  369,  335,  335,  335,  335,  370,
  370,  371,  371,  371,  375,  372,  378,  374,  374,  381,
  377,  377,  380,  380,  376,  376,  384,  383,  383,  379,
  379,  382,  382,  386,  385,  385,  373,  373,  387,  373,
  373,  373,  336,  336,  336,  336,  336,  336,  388,  389,
  389,  390,  390,  390,  391,  391,  391,  392,  392,  392,
  393,  393,  393,  394,  394,  337,  337,  337,  337,  395,
  395,  397,  397,  396,  400,  396,  396,  399,  399,  398,
  401,  398,  338,  339,  340,  340,  403,  404,  341,  341,
  341,  402,  402,  405,  405,  305,  305,  305,  305,  406,
  406,  408,  408,  410,  409,  411,  409,  407,  407,  407,
  407,  407,  415,  413,  416,  418,  413,  417,  417,  412,
  412,  419,  419,  419,  419,  419,  424,  420,  425,  421,
  426,  427,  428,  422,  430,  431,  432,  422,  429,  429,
  434,  423,  433,  437,  433,  436,  439,  436,  435,  435,
  435,  438,  438,  438,  414,  440,  414,    3,  441,  441,
  441,  441,  441,  445,  441,  441,  441,  441,  442,  442,
  443,  446,  443,  444,  444,  447,  447,  448,
  };
   static  short [] yyLen = {           2,
    2,    1,    1,    3,    2,    1,    0,    1,    1,    2,
    1,    3,    5,    2,    0,    1,    0,    0,   10,    3,
    0,    1,    1,    1,    3,    1,    0,    1,    0,    1,
    0,    1,    0,    1,    1,    2,    1,    1,    2,    1,
    1,    1,    1,    1,    0,    1,    1,    2,    0,    3,
    0,    6,    3,    2,    1,    1,    1,    1,    1,    3,
    0,    3,    1,    0,    3,    0,    1,    1,    3,    3,
    1,    1,    1,    0,    4,    4,    1,    1,    0,    1,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    4,    0,    0,    0,    0,    0,   17,    5,    0,    9,
    5,    0,    1,    1,    2,    3,    0,    3,    1,    1,
    1,    0,    8,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    1,    1,    1,    0,    3,    0,    0,
   10,    0,    0,    0,   12,    8,    5,    1,    1,    1,
    1,    0,    4,    0,    1,    1,    3,    3,    5,    1,
    1,    1,    3,    4,    6,    2,    4,    0,    7,    0,
    1,    1,    2,    1,    1,    1,    4,    6,    4,    1,
    2,    2,    0,    0,    0,    0,   12,    0,    6,    0,
    0,    4,    1,    1,    0,    0,   10,    3,    1,    1,
    2,    1,    2,    1,    0,    5,    0,    5,    1,    1,
    1,    0,    0,    0,    0,   15,    5,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    5,    1,    1,    0,    7,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    7,    0,    7,    2,    2,    2,    0,    0,    9,
    1,    1,    0,    1,    0,    6,    0,    6,    2,    1,
    0,    8,    0,    9,    0,    0,   10,    5,    0,    0,
    3,    0,    1,    1,    2,    2,    0,    5,    0,    2,
    2,    2,    1,    1,    1,    0,    5,    0,    5,    1,
    1,    2,    4,    0,    0,    0,   12,    0,    2,    2,
    0,    1,    2,    1,    3,    2,    0,    5,    3,    1,
    0,    0,    0,   13,    0,    1,    1,    3,    3,    1,
    4,    4,    2,    2,    0,    3,    2,    1,    3,    0,
    3,    1,    1,    3,    1,    2,    3,    4,    4,    0,
    3,    1,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    2,    1,    1,
    2,    2,    2,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    1,
    1,    3,    1,    3,    0,    4,    0,    6,    1,    1,
    1,    1,    3,    3,    4,    4,    5,    4,    4,    3,
    3,    4,    4,    3,    0,    1,    3,    4,    0,    1,
    1,    3,    2,    3,    3,    2,    1,    1,    0,    1,
    1,    3,    3,    3,    2,    1,    1,    1,    1,    2,
    2,    2,    2,    3,    4,    4,    2,    4,    1,    4,
    5,    4,    3,    1,    3,    1,    3,    1,    1,    1,
    4,    3,    2,    2,    6,    3,    7,    4,    3,    7,
    3,    0,    2,    4,    1,    2,    0,    1,    1,    3,
    3,    1,    1,    1,    0,    1,    1,    2,    2,    3,
    1,    2,    0,    1,    2,    4,    1,    3,    4,    1,
    1,    1,    2,    4,    4,    4,    2,    4,    2,    4,
    0,    4,    0,    1,    0,    4,    4,    1,    2,    2,
    4,    2,    2,    4,    1,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    3,    3,
    3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    1,    1,    3,    3,    3,    3,    1,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    1,    5,    4,    5,    5,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    2,
    1,    0,    1,    0,    2,    1,    1,    1,    1,    0,
    4,    0,    0,    7,    1,    1,    1,    1,    1,    1,
    1,    0,    1,    3,    0,    1,    1,    2,    0,    6,
    0,    0,    0,    0,   15,    0,    1,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    1,    2,    3,    0,    1,    1,
    2,    4,    3,    1,    3,    1,    3,    1,    1,    0,
    4,    1,    1,    0,    4,    1,    0,    4,    0,    1,
    1,    2,    1,    1,    1,    2,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    4,    1,    2,    2,    2,    1,    1,    1,    2,    1,
    1,    0,    6,    0,    7,    1,    1,    0,    2,    1,
    0,    1,    0,    1,    1,    2,    2,    4,    0,    2,
    0,    1,    1,    2,    4,    1,    5,    2,    2,    2,
    2,    2,    2,    1,    1,    1,    1,    1,    5,    7,
    4,    0,    8,    4,    0,    1,    1,    2,    1,    2,
    1,    2,    3,    3,    1,    1,    1,    1,    1,    5,
    4,    7,    3,    6,    0,    4,    0,    4,    2,    0,
    4,    2,    3,    1,    0,    1,    0,    5,    1,    0,
    1,    0,    1,    1,    1,    3,    4,    5,    0,    9,
    5,    4,    1,    1,    1,    1,    1,    1,    2,    2,
    2,    3,    4,    3,    3,    3,    2,    3,    3,    2,
    4,    4,    3,    0,    1,    3,    4,    5,    3,    1,
    2,    0,    1,    3,    0,    7,    3,    2,    1,    0,
    0,    5,    2,    2,    5,    4,    0,    0,    9,    5,
    4,    2,    1,    0,    2,    2,    2,    2,    2,    4,
    5,    4,    5,    0,    5,    0,    6,    3,    2,    2,
    2,    1,    0,    3,    0,    0,    5,    2,    1,    1,
    2,    1,    1,    1,    1,    1,    0,    5,    0,    3,
    0,    0,    0,   12,    0,    0,    0,   13,    0,    2,
    0,    3,    1,    0,    4,    1,    0,    4,    1,    2,
    2,    1,    2,    2,    0,    0,    4,    2,    2,    2,
    2,    4,    3,    0,    7,    4,    4,    3,    1,    3,
    0,    0,    4,    0,    1,    1,    3,    2,
  };
   static  short [] yyDefRed = {            0,
    6,    0,    0,    0,    0,    2,    0,    0,    9,   11,
   14,    0,    0,  337,    0,  340,  389,  394,  401,  391,
    0,  390,    0,  397,  399,  387,    0,  393,  395,  388,
  398,  400,  396,    0,  350,  999,    0,  392,  988,    0,
    8,    1,   49,    0,    0,    0,   38,   35,   37,   40,
   41,   42,   43,   44,   47,   10,    0,  543,    0,  542,
  343,  344,    0,   12,    0,    0,    0,  243,  260,  242,
  239,  244,  245,  238,  257,  256,  249,  250,  246,  248,
  247,  251,  240,  241,  252,  253,  259,  258,  254,  255,
    0, 1002,  991,    0,    0,  990,    0,  989,    0,    0,
    0,   36,  697,  703,  695,    0,  692,  702,  696,  694,
  693,  700,  698,  699,  701,    0,    0,  690,   39,   48,
    0,    0,  347,    0,    0,  348,  369,    0,  370,    0,
  379,    0,    0,  338,  339,    0,    0,  998,    0,    0,
  351,    0,    0, 1000,   55,   57,   58,    0,    0,   50,
    0,    0,   59,   61,   26,   24,    0,    0,    0,  687,
    0,  691,   13,  780,  383,    0,  336,  377,  378,    0,
  346,    0,  376,    0,  381,  382,  341,  342,  996,  997,
  175,  174,  176,    0,    0,  172,    0,    0, 1006,  365,
  364,    0,  362,  992,  994,   54,   51,    0,    0,    0,
    0,    0,    0,    0,  366,  368,    0,  681,    0,    0,
  779,  349,  529,  531,    0,  528,    0, 1008,  373,  173,
 1003,    0,    0,  361,    0,    0,   60,   53,    0,   62,
   25,   18,    0,    0,  314,    0,  217,    0,  108,    0,
  530,  532, 1007,  363,    0,    0,   73,    0,    0,    0,
    0,  428,    0,  426,    0,  500,  427,    0,    0,    0,
    0,    0,  430,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  425,    0,  662,    0,    0,   67,   68,   71,
   72,    0,    0,  422,    0,    0,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  423,  424,  565,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  667,  665,  668,  666,  669,    0,    0,    0,  331,
  320,  319,    0,  682,  213,  103,  995,    0,    0,    0,
    0,  547,  439,  440,    0,    0,  555,  551,  554,    0,
    0,    0,    0,    0,    0,  549,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  431,    0,  563,  560,  572,
  566,  573,  567,  562,  559,  577,  571,  576,  570,  574,
  568,  575,  569,  660,   74,    0,    0,   65,    0,    0,
  781,    0,    0,    0,    0,  503,  504,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  942,  959,    0,    0,  943,  945,    0,
  971,  928,  926,  952,    0,    0,  950,  953,  954,  955,
  956,  929,  927,    0,    0,  315,    0,    0,    0,   52,
  502,    0,    0,  498,  499,    0,  496,    0,    0,    0,
    0,  524,    0,    0,    0,    0,  515,    0,  519,  511,
    0,    0,    0,    0,    0,  506,    0,  509,  372,  513,
  371,    0,  541,  540,    0,    0,    0,    0,    0,    0,
    0,  435,    0,  429,  443,  444,    0,    0,    0,    0,
    0,    0,  647,    0,    0,   69,   70,   81,   80,    0,
  450,  451,    0,    0,    0,    0,    0,  493,    0,  454,
    0,    0,    0,  476,  479,    0,    0,  471,  478,  477,
  636,  637,  638,  639,  640,  641,  642,  643,  644,  646,
  645,  582,  579,  584,  581,  583,  580,  592,  590,  593,
  591,  588,  578,    0,  589,    0,  598,    0,  599,    0,
  605,    0,  606,    0,  607,    0,  608,    0,  612,    0,
  613,    0,  616,    0,  619,    0,  622,    0,  625,    0,
  628,    0,  630,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  941,  940,    0,  951,    0,  939,    0,
    0,  161,    0,    0,    0,  155,    0,    0,  162,    0,
    0,    0,    0,    0,  676,    0,  705,    0,  673,  449,
  501,    0,  546,  557,    0,  720,  552,    0,  514,    0,
    0,    0,    0,    0,  461,    0,  659,  658,  494,    0,
  534,  508,    0,    0,  136,  535,  134,  135,  537,    0,
  545,  544,  539,  548,  932,    0,  930,    0,    0,    0,
  432,  657,  656,  661,    0,   75,  650,    0,    0,    0,
  564,  561,    0,    0,    0,   76,   77,   78,  777,  776,
    0,    0,    0,    0,  448,    0,    0,  445,  446,  550,
  492,  490,  489,  483,  482,  481,  480,  475,  441,  442,
  452,  453,    0,  633,    0,  960,  934,    0,  961,    0,
  944,  946,  957,    0,  972,    0,  938,  986,    0,    0,
    0,    0,  166,  332,    0,    0,    0,    0,  330,  316,
    0,  324,    0,  386,    0,  384,    0,    0,  683,    0,
  710,  214,    0,  497,  556,    0,  521,  520,  466,    0,
    0,  457,  463,    0,    0,    0,    0,    0,    0,    0,
  933,  931,  437,  436,  655,  649,  648,  663,    0,    0,
    0,  774,  775,    0,  773,  447,  491,  474,  473,  472,
  634,  635,  632,    0,  936,    0,  965,    0,    0,  980,
  981,  974,    0,   23,   22,   19,  181,  182,    0,    0,
    0,    0,  163,  158,    0,  312,    0,    0,  674,  707,
    0,  679,    0,    0,  711,    0,  104,  737,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  769,    0,  814,    0,    0,
  743,    0,    0,  731,  733,  734,  735,  744,  745,  746,
  747,  748,  749,  750,  751,  752,  753,    0,  817,  818,
  836,  837,  838,  839,  873,  874,  875,  876,  877,  878,
  465,  467,  468,  464,  458,  462,    0,  526,    0,  495,
  505,  456,  538,  536,    0,    0,    0,    0,  484,    0,
  935,    0,    0,    0,  949,    0,  947,  958,    0,  987,
  167,    0,  179,    0,  333,    0,  329,    0,    0,  325,
  385,    0,  713,    0,    0,    0,    0,  879,  913,    0,
  881,  880,  768,  766,  765,  767,    0,  845,    0,    0,
    0,    0,    0,    0,  887,    0,    0,    0,  890,    0,
    0,    0,  914,    0,    0,  736,    0,    0,  770,  722,
  723,  721,  782,  732,  811,  809,  810,  510,  507,  438,
  664,  485,  486,  488,  937,  962,    0,  948,    0,    0,
  976,    0,  168,    0,    0,  159,    0,   28,  317,    0,
  718,    0,  719,  716,    0,  714,   99,  100,    0,   96,
    0,    0,   84,   86,   87,   88,   89,   90,   91,   92,
   93,   94,   95,   97,   98,  137,    0,    0,    0,  230,
  222,  223,  224,  225,  226,  227,  228,  229,    0,    0,
  220,  105,  784,  843,    0,    0,    0,  670,    0,  884,
  882,  671,    0,    0,  886,  885,    0,  889,  888,  899,
    0,    0,    0,  900,    0,    0,    0,  893,    0,    0,
    0,    0,    0,  966,  983,  984,  977,  165,    0,  178,
  334,  328,  680,    0,    0,    0,    0,  684,   85,    0,
  724,  726,  272,  267,  271,    0,  215,  221,    0,    0,
    0,    0,  865,  846,    0,  856,    0,  867,    0,  883,
  821,    0,  916,    0,  824,    0,  911,    0,    0,  897,
    0,  901,  921,    0,  917,  841,    0,  892,  891,  771,
  790,    0,    0,    0,    0,    0,  169,  717,  715,    0,
    0,    0,    0,    0,  268,    0,    0,  281,    0,  231,
    0,    0,  237,    0,  152,  151,  138,  148,  149,  150,
    0,    0,    0,    0,    0,    0,    0,  857,  849,  847,
    0,  868,    0,    0,  915,  822,    0,  907,    0,  904,
  898,  920,    0,  840,    0,  806,  789,    0,    0,    0,
  795,  963,    0,  978,  101,    0,    0,  266,    0,  265,
    0,    0,  142,    0,  355,  313,    0,  353,    0,    0,
    0,    0,    0,    0,    0,    0,  685,    0,    0,  216,
  106,  800,  120,  121,    0,    0,    0,  803,  844,    0,
    0,    0,  866,    0,    0,    0,    0,  903,    0,  923,
    0,    0,    0,    0,    0,  787,  786,  783,  796,    0,
  967,  111,  109,  288,    0,  352,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  147,  139,    0,    0,    0,
  195,    0,  356,    0,  232,    0,    0,  725,    0,    0,
  785,  804,  842,    0,    0,  848,    0,  869,  820,  829,
    0,  835,    0,    0,  827,    0,  831,    0,  905,  925,
  918,    0,  922,    0,    0,    0,    0,    0,  285,    0,
  263,  261,    0,    0,    0,  125,    0,  357,    0,    0,
  184,  189,    0,    0,    0,  354,  235,  153,  107,    0,
  858,  852,  850,    0,    0,  823,  828,    0,  832,  912,
    0,    0,    0,  798,    0,  964,    0,  119,  117,    0,
    0,  290,    0,    0,    0,  269,  143,    0,    0,    0,
    0,    0,  129,    0,    0,    0,    0,  358,  359,    0,
  805,    0,  870,  834,  833,  909,    0,  906,  919,  807,
  970,  968,    0,    0,    0,    0,  114,  305,    0,  286,
    0,    0,  299,    0,    0,    0,  294,    0,    0,    0,
    0,  282,  126,    0,  123,  130,  140,  146,  204,    0,
  185,    0,    0,  196,    0,  854,  851,    0,    0,  863,
  908,  118,    0,  110,  115,    0,    0,    0,  301,    0,
  302,  291,    0,    0,  284,  295,  264,  262,  280,    0,
  270,  274,    0,  132,    0,    0,    0,  201,  203,    0,
  236,    0,  116,  306,  308,  287,    0,    0,  300,  297,
  279,    0,    0,  144,    0,  141,  205,  207,  186,    0,
  199,  197,  853,    0,    0,  299,  275,  277,    0,  133,
    0,    0,    0,    0,  310,  311,  307,  309,  298,    0,
    0,  145,  211,  210,  209,  206,  208,  191,  187,  198,
    0,    0,    0,  276,  278,  193,  194,    0,  192,
  };
  protected static  short [] yyDgoto  = {             4,
    5,   42,    6,    7,   44,  613,  614,    8,    9,   10,
  125,    0,   47,  157,  202,  329,  611,  806, 1475,  199,
   48,   49,   50,   51,   52,   53,   54,   55,  150,   99,
  151,  152,  226,  153,  154,  230,  200,  277,  278,  279,
  848,  535,  508,  849,  520,  686,  649,  688, 1001, 1002,
 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
 1013, 1014, 1015,  850, 1076,  962,  116,  161, 1198,  240,
  628,  459,  626,  749,  927, 1089, 1269,  744, 1340, 1298,
 1375, 1376, 1377, 1212, 1373, 1213,  658,  204, 1307, 1254,
 1351, 1176, 1349, 1352, 1353, 1455, 1016, 1147, 1080, 1199,
  615, 1309, 1435, 1252, 1391, 1469,  117, 1148, 1149,  851,
 1208,  616,  617,  618,  619,  184,  510, 1069,  185,  186,
  732, 1201, 1259, 1401, 1356, 1437, 1489, 1473, 1260, 1498,
 1493, 1202, 1313, 1462, 1440, 1402, 1403, 1486, 1471, 1472,
  238,  458,  826, 1029, 1153, 1030, 1031, 1140, 1205, 1141,
  127,   91, 1360, 1143, 1345, 1344, 1017, 1084, 1192, 1431,
 1390, 1085, 1432,  536, 1480, 1481, 1194, 1343, 1300, 1385,
 1380, 1341, 1417, 1422, 1383, 1386, 1387, 1466, 1423, 1381,
 1382, 1477, 1464, 1465,  235,  333,  740,  620,  817,  741,
  742,  918,  455,  811,  985,  175,   14,  283,   61,   62,
  284,  128,  141,   94, 1248,  192,  193,  206,  689,  490,
  130,  173,  165,  131,  285,  745,  746,   38,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  365,  366,  670,  895,  345,  711,  654,  891,  486,
  643,  644,  645,  884,  650,  538,  539,  540,  705,  852,
  466,  467,  351,  889,  652,  174,  353,  476,  477,  478,
  479,  215,  660,  495,  348,  471,  349,  470,  309,  310,
  311,  312,    0,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  512,  513,  514,  674,  675,  324,
  507,  386,  896,  325,  326, 1043,  623,  624,  627,  922,
  236,  457,  824, 1144,  118,  750,  751,  995,  996,  756,
 1151,    0,    0,  853,  854,  934,  935,  936,    0,    0,
    0,  858,  859,  860,  861,  862,  863,  864,  865,  866,
  867,    0,  937, 1061,  694,  166, 1123, 1062, 1179, 1238,
 1156, 1090, 1216, 1177, 1180, 1293, 1181, 1217, 1218,  868,
    0,  869,  870, 1283, 1226, 1284, 1285, 1286, 1287,  871,
  872,  873,  874, 1094, 1036, 1095, 1276, 1222, 1277, 1407,
 1362, 1408, 1096, 1221, 1097, 1410, 1324,  875,  876,  877,
  878,  879,  880,  947, 1053, 1054, 1229, 1109, 1368, 1331,
 1167, 1232, 1173, 1332, 1233,  327,  443,  328,  444,  794,
  902,  445,  446,  609,  600,  601,  907,  798,  447,  448,
  449,  450,  451,  799,  595,  796, 1063, 1240, 1336,  904,
 1125, 1297,  725,  603,  726,  980,  909,  981, 1126,  803,
   39,   40,   93,  187,  225,  139,  188,  189,
  };
  protected static  short [] yySindex = {         -205,
    0, -193,14881,    0, -137,    0, -214,   85,    0,    0,
    0,  201, -248,    0,  -27,    0,    0,    0,    0,    0,
  158,    0,  316,    0,    0,    0, 8916,    0,    0,    0,
    0,    0,    0,  231,    0,    0,  485,    0,    0,  508,
    0,    0,    0, -214, 5340,  657,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  189,    0, 3217,    0,
    0,    0,  270,    0,  357,15083,15083,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  231,    0,    0,  265,  275,    0,  -21,    0, -181, 5340,
  657,    0,    0,    0,    0, -174,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  185, 5410,    0,    0,    0,
  255,  325,    0,  376,  274,    0,    0,  180,    0,  412,
    0, -232,  357,    0,    0,  231,  231,    0,  398, -172,
    0,  231,  422,    0,    0,    0,    0, -198,  435,    0,
  461,  470,    0,    0,    0,    0,  495,15155,  458,    0,
  229,    0,    0,    0,    0,  376,    0,    0,    0,15083,
    0,  188,    0,  412,    0,    0,    0,    0,    0,    0,
    0,    0,    0,15162,  398,    0,  520,  525,    0,    0,
    0,  209,    0,    0,    0,    0,    0,  189,  542,  547,
  505,  563,  376,  458,    0,    0,  572,    0,  676,  716,
    0,    0,    0,    0,  349,    0,  376,    0,    0,    0,
    0,  398, -172,    0,  398,  189,    0,    0, 8033,    0,
    0,    0,  602,12444,    0,  458,    0,  458,    0,  458,
    0,    0,    0,    0,  622,  470,    0,  182, -165,  -42,
  627,    0,  583,    0,  -42,    0,    0,  -42, -162,15231,
15231,13828,    0,13828, 8825, 8954, 9083, 9212, 9341, 9470,
 9599, 9728,    0,  105,    0,15083,  630,    0,    0,    0,
    0,  633,  587,    0,  640,  460,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1374,
  650,   16,  666,  360,  682,  632,  644,  637,  641, -284,
  654,    0,    0,    0,    0,    0,  366,  536,   85,    0,
    0,    0,  697,    0,    0,    0,    0,  707,  824,  587,
13952,    0,    0,    0,13828,15083,    0,    0,    0,12395,
 -184,  722,15083,15083,12497,    0,13828,  255,  795,  587,
  805,  587, -233,  732,  736,    0,   51,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,14909,  744,    0, 8033,  524,
    0,  357,  587, -286,  587,    0,    0,  690, 8165, 6845,
13828,13828,13828,13828,13828,13828,13828,13828,13828,13828,
13828, 9857, 9986,10115,12525, -215,10244,10373,10502,10631,
10760,10889,11018,11147,11276,11405,11534,11663,11792,11921,
12050,14200,13828,    0,    0,15231,15231,    0,    0,  587,
    0,    0,    0,    0,  559,  779,    0,    0,    0,    0,
    0,    0,    0, -214, -118,    0,  375,  748,  769,    0,
    0,  731, -233,    0,    0,  453,    0,  771,  775, -118,
  789,    0,  781,  460,    0,  798,    0,  806,    0,    0,
  -30,  579, 8297,  722,13208,    0, 6977,    0,    0,    0,
    0,  -94,    0,    0,  811,  814,13828,  889,13828,  896,
13828,    0,13828,    0,    0,    0, -159,13828,  255,  587,
15162,  820,    0,  827,12179,    0,    0,    0,    0, 7373,
    0,    0,  731,  587,13952,  357,  731,    0,  -95,    0,
13332,13332,  938,    0,    0,  139, -120,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  650,    0,  650,    0,   16,    0,   16,
    0,  666,    0,  666,    0,  666,    0,  666,    0,  360,
    0,  360,    0,  682,    0,  632,    0,  644,    0,  637,
    0,  641,    0, -151, 8297,  902,  587,  903,  587, 8297,
 8297,  825,13828,    0,    0,  779,    0,  587,    0, -214,
  841,    0,  411,   23,  838,    0,  837,  843,    0, -214,
 -118,15083,  748,  876,    0,  876,    0,  748,    0,    0,
    0,13952,    0,    0,  847,    0,    0, 7505,    0,12395,
 7637,  840,  797,  -78,    0,  803,    0,    0,    0,  592,
    0,    0,  857,  856,    0,    0,    0,    0,    0,  859,
    0,    0,    0,    0,    0,13828,    0,13828,  861,  821,
    0,    0,    0,    0,13828,    0,    0,  587,14909,  894,
    0,    0, -165, -162,13332,    0,    0,    0,    0,    0,
  308, -232,  587,  412,    0,  731,  597,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7109,    0, 7769,    0,    0,  943,    0,  946,
    0,    0,    0,  763,    0,  879,    0,    0, -182,  411,
15162,15083,    0,    0, -214,  992,  845,  759,    0,    0,
  882,    0,  893,    0,  -76,    0,  897,  851,    0,  876,
    0,    0,  876,    0,    0, 6581,    0,    0,    0,  408,
13456,    0,    0,  -50, 1008,  412, 8297,  904, 7505,  906,
    0,    0,    0,    0,    0,    0,    0,    0,13332,13332,
  900,    0,    0,  898,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8297,    0, 8297,    0,   78, 8297,    0,
    0,    0,  724,    0,    0,    0,    0,    0, -170, -157,
  876,  901,    0,    0, 1018,    0,  914, -214,    0,    0,
15083,    0, -105,  916,    0,  917,    0,    0,  909, -207,
14403, -161, 6713,  -42,  -42, -197,  -42,  -42, 8429,  -42,
 8561,  789, -171,  -42,  -42,    0, -209,    0,   63, -266,
    0,  587, 6581,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -17,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  918,    0,  722,    0,
    0,    0,    0,    0,  869, -159,  915,  919,    0,13828,
    0, 8297,  940, 8297,    0, 8297,    0,    0,13828,    0,
    0,  -23,    0,  920,    0, 1028,    0,  921,  922,    0,
    0,13208,    0,14962,   -2, -214,  932,    0,    0,  587,
    0,    0,    0,    0,    0,    0,   53,    0,15083,13828,
  924,  927,13828,13828,    0, 1043,  930,13828,    0, 1048,
  935, -140,    0,13580,13828,    0,  936,13828,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  964,    0,  773,  941,
    0,  944,    0,13828,  942,    0,13828,    0,    0,  945,
    0,  948,    0,    0,  949,    0,    0,    0, 5410,    0,
  954,   -2,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  425, 5410, -214,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  958, -214,
    0,    0,    0,    0,  -42,13580, -155,    0,  951,    0,
    0,    0,  -51,   15,    0,    0,   68,    0,    0,    0,
  133,  789,  284,    0,   69,  587,   70,    0, 1066,  953,
 6581, -179, 8297,    0,    0,    0,    0,    0,13828,    0,
    0,    0,    0,  960,14962, 6581,14619,    0,    0,  117,
    0,    0,    0,    0,    0, 6278,    0,    0,   -2,  952,
13828,  587,    0,    0,  437,    0,  956,    0, -146,    0,
    0, 6713,    0, 6713,    0,  967,    0,12583,  789,    0,
  789,    0,    0, 6713,    0,    0, 6713,    0,    0,    0,
    0, 7241,  962,  988, 8297,13828,    0,    0,    0, -266,
15083,15083,  212,  266,    0,  376, 1002,    0, 3522,    0,
 1034,    0,    0,  922,    0,    0,    0,    0,    0,    0,
 6581, 3064,  922,  978,13704,  974,   77,    0,    0,    0,
13828,    0,13828, 1067,    0,    0,  -42,    0,  587,    0,
    0,    0, -154,    0,15083,    0,    0,  587, -245,  962,
    0,    0, 1006,    0,    0, -152, -144,    0,15083,    0,
15083,  994,    0, 1029,    0,    0,  -16,    0, -201, 3543,
    0,  997,  957,   39,  117, 8916,    0,13828,  995,    0,
    0,    0,    0,    0,  587,  993,  974,    0,    0,  996,
 -179,13828,    0, 1004, 6713, -180,13828,    0, 1005,    0,
 7505, 1007,  962,  955, 1003,    0,    0,    0,    0, 8297,
    0,    0,    0,    0,  -16,    0, 1019,  969, 1014, 1017,
 -118,  971, 1020, 1011, 1021,    0,    0, 1024, 1030, 1051,
    0,  731,    0,  717,    0, 1027, 1023,    0,  922, 1025,
    0,    0,    0,  962, 1033,    0, 1031,    0,    0,    0,
13828,    0, 1032, -175,    0, 6428,    0, 1036,    0,    0,
    0,  962,    0,13828, 7241, 1052, 8297, -129,    0, 1035,
    0,    0, 1037, 1040, 1045,    0, 1044,    0, -118, -118,
    0,    0, -118, 1046, 1049,    0,    0,    0,    0,13704,
    0,    0,    0, 6713,  -93,    0,    0, 6581,    0,    0,
   74, 6713, 1054,    0,  587,    0, 1052,    0,    0, 1047,
   44,    0, 1053, -118, -118,    0,    0,  268, 7505, 1015,
 1050, 1044,    0, 1060, 1063,   52, 1055,    0,    0, -118,
    0, 8693,    0,    0,    0,    0,  774,    0,    0,    0,
    0,    0,13704, 1022, 1061, 1047,    0,    0, 5410,    0,
 -214, -214,    0, 1026, 1062, 1053,    0, 1064, 1069,  -83,
 -118,    0,    0, 1065,    0,    0,    0,    0,    0, 5410,
    0,   52,   52,    0, 1070,    0,    0, 1071,  956,    0,
    0,    0, -129,    0,    0,  161, 1079, 5410,    0, 5410,
    0,    0, 7505, 1073,    0,    0,    0,    0,    0,  104,
    0,    0, 1076,    0,  876,  796, 1082,    0,    0,  305,
    0, 6713,    0,    0,    0,    0, 1131, 1183,    0,    0,
    0, 1086, 1091,    0, 7505,    0,    0,    0,    0,   52,
    0,    0,    0,  358,  358,    0,    0,    0,  876,    0,
  -64,  -64, 1084, 1095,    0,    0,    0,    0,    0,13208,
13208,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1094, 1097,13704,    0,    0,    0,    0, 1096,    0,
  };
  protected static  short [] yyRindex = {         1197,
    0,    0,    0,    0, 1461,    0, 1626, 2682,    0,    0,
    0,  490,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1464,    0,    0, 1464,    0,    0, 1464,
    0,    0,    0, 2815,  220, 2856,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2005,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1464,    0,    0,  282,    0,    0,    0,    0,    0,   42,
 2897,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  259,14327,    0,    0,    0,
 1691,    0,    0, 2543, 2130,    0,    0,    0,    0, 2418,
    0, 2130, 2005,    0,    0, 1464, 1464,    0,15002,    0,
    0, 1464, 1467,    0,    0,    0,    0,  546,  475,    0,
    0, 1104,    0,    0,    0,    0, 1447,    0,    0,    0,
    0,    0,    0,    0,    0, 2274,    0,    0,    0,    0,
    0,    0,    0, 1848,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,15241,    0,    0,  639,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1106,    0,  606,
    0,    0, -259,    0,    0,    0, 1111,    0, 1072, 1074,
    0,    0,    0,    0,    0,    0, -142,    0,    0,    0,
    0,15310,    0,    0,15055,    0,    0,    0,  645,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1104,    0,    0,    0,    0,
 1115,    0,15317,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,12573,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3830,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3900,
 4003, 4213, 4423, 4773, 4983, 5123, 5263, 5403, 1490, 5613,
 5658,    0,    0,    0,    0,    0,    0,    0,15437,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1116,
    0,    0,    0,    0,    0,    0,    0, 2977,    0,    0,
    0,    0, 2912,  802,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1113,    0,    0,    0, 7901,
    0, 2912,    0,    0,    0,    0,    0,    0,    0,  142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5716,    0,    0,    0,    0,
    0,    0,    0,15497,14659,    0,  292,  312,  276,    0,
    0, 2912, 6065,    0,    0,    0,    0,    0,    0,14659,
    0,    0,  480,    0,  884,    0,    0, 1119,    0,    0,
 1057,    0,    0, 3371, 1117,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,14076,    0,  416,    0,
    0, 1122,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2912,    0,    0, 2912, 3524,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4073,    0, 4143,    0, 4283,    0, 4353,
    0, 4493,    0, 4563,    0, 4633,    0, 4703,    0, 4843,
    0, 4913,    0, 5053,    0, 5193,    0, 5333,    0, 5473,
    0, 5543,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5716,    0,    0,    0,15554,
    0,    0,15310,14770,    0,    0,  670,  684,    0,  149,
14659,    0,  323, 1124,    0, 1124,    0,  312,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1127,
    0,    0,    0, 1077,    0, 3065,    0,    0,    0,    0,
    0,    0,    0, 1125,    0,    0,    0,    0,    0, 1128,
    0,    0,    0,    0,    0,    0,    0,    0,  807,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  147, 6127,    0, 1083,    0, 2912,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  118,    0,  895,    0,    0, 2746,15389,
    0,    0,    0,    0,14823,    0,    0,12979,    0,    0,
 1132,    0,    0,    0,  207,    0,  340,    0,    0,  285,
    0,    0, 1124,    0,    0,  -52,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3218,    0, 3677, 1134,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -194,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1140,  685,    0,    0,  429,    0,    0,  155,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1141,    0,
 1141,    0,    0,    0,    0,    0, 6274,    0,    0,    0,
    0,    0,  -45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3371,    0,
    0,    0,    0,    0,    0,14076,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  501,    0,  565,    0,    0,    0,    0, 1286,    0,
    0, 1117,    0,    0,12805,13058,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1142,    0,    0,    0, 1142,
    0,    0,    0,    0,    0,    0,    0, 1141,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  262,  999,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  295,    0,    0,    0,14475,    0,
    0,12892,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,14553,12721,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,13133,
    0,    0,    0,    0,    0,  617,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1143,    0, 5831,    0,    0,    0,    0,    0, 1142,    0,
    0,  450,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -52,  259,    0,    0,    0,
    0,    0,    0,    0,    0,  259,    0,    0,12805,  691,
    0,    0,    0,    0,    0,    0,  618,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  193,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1377,  278,    0,    0,    0,
    0, 3369,    0, 1286,    0,    0,    0,    0,    0,    0,
  841,    0, 1286,    0,    0, 1145,    0,    0,    0,    0,
    0,    0,    0, 5985,    0,    0,    0,    0, 1135,    0,
    0,    0,  699,    0,    0,    0,    0,    0,    0,  377,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  329,    0,  339,    0,
  344,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1146,    0,    0,    0,
  598, 1148,    0,    0,    0, 1158,    0,    0,    0,    0,
    0,    0, 1155,  359,  396,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  647,    0,  456,    0,    0,    0,
14659,    0,    0,  711,    0,    0,    0,    0,    0,    0,
    0, 1159,    0,  522,    0,    0,    0,    0, 1286,    0,
    0,    0,    0,  623, 1152,    0,    0,    0,    0,    0,
    0,    0,    0, 1163,    0,    0,    0,    0,    0,    0,
    0, 1161,    0,    0,    0, 1016,    0,    0,    0,  721,
    0,    0,    0,    0,    0,    0, 1160,    0,14659,14659,
    0,    0,14717,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -218,    0,    0,
  804,    0,    0,    0,    0,    0, 1016,    0,    0, 1162,
 5914,    0, 1164,14659,14659,    0,    0,    0,    0,    0,
    0, 1166,    0,    0,    0, 5734,    0,    0,    0,14659,
    0, 1167,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1168,    0,    0,  222,    0,
 4002, 5614,    0,    0,    0, 1169,    0,    0,    0,  439,
14659,    0,    0,  726,    0,    0,    0,    0,    0,  812,
    0, 5474, 5544,    0,    0,    0,    0,    0, 1171,    0,
    0,    0,    0,    0,    0,    0,    0, 1214,    0, 1277,
    0,    0,    0,  729,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  297,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 5734,
    0,    0,    0, 3674, 3827,    0,    0,    0,  297,    0,
    0,    0,12306,    0,    0,    0,    0,    0,    0, 1117,
 1117,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static  short [] yyGindex = {            0,
    0,    0,    0, 1212, 1090,   -7,   -5,    0, 1537,    0,
   41,    0,    0,    0,    0,    0,    0,    0, -894, -219,
  -26, -861,    0,    0,    0,    0,    0,  -40,    0,    0,
    0, 1322,    0, 1351,    0,    0,    0,    0, 1165, 1172,
   -6, -206,    0,  331,    0,    0, -492, -496,  463,    0,
  548, -783, -742, -714, -621, -585, -584, -580, -578,    0,
    0, -586,    0, -781,    0,  427, -961,    0,   49,    0,
    0,    0,  937, -616,    0,    0,    0,  675,  150,    0,
    0,    0,  179, -897,    0, -914, -345, -332,    0,    0,
    0, -478,    0,    0,  218,    0,    0,  369,    0, -821,
 -387,    0,    0,    0,    0,    0,-1024,  223,-1220, -303,
    0,    0,    0,  844,  848,  963, -167,    0,    0, -173,
  854,  388,    0, -932,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  106,    0,    0,
    0,    0,    0,    0,    0,    0,  558,    0,    0,    0,
  -92,  384,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  224,    0, -480,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  127,    0,    0,  214,    0,    0,  216,
  228,  140,    0,    0,    0,    0,    0,    0,    0,    0,
  786,    0,    0,    0,    0, -110,    0,   67,  -54,  -43,
  792,    0,  355,    0, -475,    0, 1389, 1267,  693,  448,
 -352, -160, -112,  348,    1,    0,  808,    0, -342,  575,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -320,
    0,    0, 1130,    0,    0,  959,    0, 1225,    0,   76,
    0,    0,  863,    0,  987,    0,  926,    0, 1098, -499,
 -281, 1009,    0,    0,  742, 1382,    0,    0,    0,    0,
 1000,    0,    0,    0,    0,    0,    0,    0,    0, 2441,
  755,  765,    0,  619,  761, 1210, 1216, 1217, 1215, 1219,
    0, 1220,    0,    0,    0,  975,    0,  757,    0,    0,
    0,    0,    0,    0,    0, -926, 1196,    0, -409,    0,
    0,    0,    0,    0, -114,    0,  908,    0,  581,    0,
    0,    0,    0,  373, -834, -740, -711, -703,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,-1058,    0,    0,    0,  440,    0,  389,    0,
    0,    0,    0,  367,  431,    0,-1091,    0,  451,-1005,
    0,    0,    0,    0,    0,    0,  381,    0,  383,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  309,    0,    0,    0,    0,    0,
    0,    0,    0, -761,    0,  614,    0,  343,    0,    0,
    0,    0,    0,    0,    0,    0, -304,    0,    0,    0,
    0,    0, 1230, 1078,    0,    0,    0,    0, 1237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  333,    0,
    0,    0,    0,    0,    0,    0,    0,  564,    0,    0,
    0,    0,  393, 1469,    0,    0,    0, 1473,
  };
  protected static  short [] yyTable = {            45,
  491,   46,  162,   37,  653,  120,  488,  474,  659,  752,
  134,  220,  169,  216,  168,  855,  218,  102,  964,  176,
  693,  135,  281,  453,  989, 1039,  338,  687, 1057,  475,
 1093,  693,  693,  739,  704,  706,  100, 1077,  101, 1312,
  560,    4,   13, 1164,  856, 1165,  956,  625,  342,  830,
    1,   36,  857,  211, 1256, 1172, 1086,  196, 1174,  132,
  120,  487,   11, 1000, 1020,  205,  132,  132,   15, 1070,
  940,  480, 1072,  804,  145, 1280, 1121,  941,  177,  951,
  524,  155,  635,  190,  356,  911,    2, 1281, 1239,  178,
  342,  219, 1281,  356,  931,  960,  672,  122,  913,  146,
 1098, 1230,  716, 1242,  714,  384,  367,  721,  722, 1162,
  431, 1244,  855,  374, 1200, 1050, 1236,  529,   63,   41,
  167,   64,  432,   15, 1237,   15, 1338, 1200, 1051,  384,
  525,  147,   15,   15,  465,  712,  827,  612,  651,  149,
 1000,  856, 1021,  830, 1052,  144, 1163,  164,   43,  857,
  923,   58,  367,  636, 1127, 1223,  961,  343,  132,  757,
  701,  661, 1364, 1257, 1157,   15, 1279,  637, 1020,  487,
  132,  487, 1429,  487,   59,   58,  481,  763,  482,  820,
  343,   60,  281, 1022,  132,  693,   58,  805,  781,  636,
  484, 1483,  465,  343,  915, 1122, 1060,  830,   59,  343,
 1239,  636,  343,  673, 1101,   60,  344,  207,  932,   59,
  561, 1023,  511,  747,  391,    3,   60,  715,   12, 1461,
 1231,  374,  280,  374,   15,  374, 1120, 1000,  487,  344,
  148,  739,  483,  743,  132, 1282,   15,  156,  149,  191,
 1282,  391,  344,  697,   43, 1339, 1021,  713,  344, 1207,
   15,  344,  233,  997,  914,  364,  391,  367, 1210, 1243,
  132,  132,  205,  924,   15, 1363,  149, 1245,  702,  374,
 1103,  662,  632, 1369,  890, 1365,  132,  415,  733,  693,
  693,  360,  897,  898,  334, 1430,  335, 1022,  336,  764,
  893,  821,   15,  219, 1130, 1275,  636,  474,    4, 1378,
   15,  901,  143,  903, 1024, 1484,  908, 1399, 1034,  729,
  641,  885,  416,  688, 1102, 1023,  730,  688,  465,  475,
  855,  688,  343, 1105, 1113, 1116,   15,   15,  957, 1366,
  641,  930, 1219,  905,  464,  855,  688,  521,  468,  982,
 1025, 1026,   15,  678,  965, 1027,  132, 1028,  522,  856,
  496,  983,  966,  132,  132,  132, 1093,  857,  998, 1451,
   43,  642, 1263,  688,  856, 1246, 1325, 1452,   58, 1209,
  729,  344,  857,  979, 1319,  958,    2,  730, 1258,  688,
 1104,  642,  280, 1463,   65,   43,  132,  417,  418, 1035,
   35,   59,  464,  534,  541,  542,  543,  544,  545,  546,
  547,  548,  549,  550,  551,  967,   43,  630, 1024,  975,
  855,  977,   15,  978,   43,  132,  505, 1416,  219,   15,
   15,   15, 1361, 1444,  906,  465,  594, 1453, 1107,   96,
 1304,  959,   98, 1106, 1114, 1117,  132,  132, 1436,  856,
  770,  990, 1220,  384, 1025, 1026,   45,  857,  101, 1027,
 1264, 1028,   15,  979, 1056, 1145, 1447,  979, 1448,  979,
  158,   66,  979,  979,  159,  979,  979, 1188,  695, 1438,
 1439,  698,  700,  506, 1445, 1412,  648,  636,  534,  385,
  657,   15,  699,  138,  688,  979, 1146, 1107,  474,   58,
  665,  688,  667,  964,  669,  688,  364,  343,  910,  688,
  208,  676,   15,   15,  709,  511,  789,  469,  470,  335,
  321,  132,   59,  648,  688, 1189,  323,  982,  464,   60,
  691, 1190,  160,  209,  703,  703,  929, 1474,  179,  180,
  686,  691,  691,  785,  194,  688, 1092,  360,  952,  953,
  979,  688,  706,  651,  339,  855,  344,  170,  340,  687,
  210,  213, 1051,  686,  791,  214,  807,  688,  335,  282,
   45,  710,  791,  809,  469,  470,   45,  706, 1111, 1191,
 1124,  706,  687,  120,  856,   57,  223,   15,  176,  783,
  686,  782,  857,  102,  350,   58,  219,  855,  648,  171,
  359,  361,  673,  648,  648,   92,  724,  982,  341,  687,
  121,  982,   45,  982,  101,  888,  982,  982,   59,  982,
  982,  672,  737,  392,  738,   60,  856,  360,  224,   67,
  360,  434,  132,  709,  857,  464,  167,  675,  636,  982,
  712,  657, 1183,  712,  648,  708,  672, 1146,  219,   58,
   63,  786,  360, 1145,  672,  709,  360,  704,  360,  360,
  360,  360,  675,  164,  709,  712,  360,  708,  677,  771,
  167,  772,   59, 1204,  712, 1460,  708,  350,  775,   60,
  462,  282,  704,  140,  393,  678, 1204,  352,  367,  132,
  473,  133,  188,  677,  982,  691,  142,  164,   15,  350,
  498,   63,  500,  350,  163,  345,  122,  120,  122,  352,
  678,  435,  181,  122,  183,  436,  534,  437,  793,  182,
  438,  439,  241,  440,  441,  181,  242,  730,  636,  282,
  808,  183,  182,  523,  808,  526,  808,  988,  808,  282,
  282,  132,  132,  126,  183,  421,  422,  350,  792,  621,
  136,  137,  792,  622, 1139,   15,  792, 1296, 1110,  423,
  424,  129, 1290, 1152,  882,  164,  691,  797,  129,  129,
  648,  797,  657,  797,   59,  797,  596,  598,  345,  881,
  602,   60,  468,  496,  172,  767, 1150,  360,  345,  691,
  691,  651,  345,  651,  195, 1081, 1082,  648,  442,  648,
  326,  434,  648,   16, 1083,  345,  326,   15,   15,  273,
  273,   63, 1159,  327, 1337, 1170, 1160, 1171,  273, 1214,
  737,  788,  738,  394,  604,  282,  631,  788, 1456,  788,
  632,  132,  491,  283,  343,  283,  395,  345,  518,  197,
  283,  691,  946,  691,  950,  519,  883,  198,   63,   63,
  677,  522,   63,  892,  212,  396,  397,  522,   16,   92,
   16,   95, 1482,  691,  696,  282,  345,   16,   16,  345,
  360,  201,  129, 1303,  164,  398,  164,  690,  164,   35,
 1393,  435,   92,  344,   97,  436,  399,  437,  690,  690,
  438,  439,  360,  440,  441,  221,  360,   15,  345,  360,
   16,  360,  222,  974,  435,  648,  360,  648,  436,  648,
  437, 1150,  979,  438,  439,  228,  440,  441,  332,  345,
  345,  229,  345,  345,   56,  534,  231,  999, 1018,  738,
 1019, 1354, 1355,  232,  132, 1357,  129,  718,  177,  720,
  177,  237,  177, 1038,  360,  362, 1042, 1044,  728,  132,
  234, 1047,  646,  350, 1449,  172,  214, 1055, 1042,   16,
  387, 1059,  129,  129,  691,  766, 1388, 1389,  452,  767,
  787,   16,  282,  788,  632,  788,  330,  788,  129,   64,
  473,  239, 1405,   64, 1214,   16, 1470, 1038,  120,  434,
 1038,  605,  855,  859, 1142,  337,  855,  859,  791,   16,
   15,  347,  791, 1142,  999,  388,  738,  389,  391, 1491,
 1492,  390, 1005, 1433, 1005,   15,  393,  350,  776,  427,
   66,  350,   66,  345,  350,  429,  350,   16,  119,   43,
  469,  350, 1018,  784, 1019,   16,  428, 1214,  492,  412,
  413,  414,  690,  156,  430,  156,  691,  433,  129,  572,
  574,  576,  578,  282, 1150,  489,  129,  160,  157,  160,
  157,   16,   16,  419,  420,  350,  648,  456,  799,  435,
  799,  691, 1038,  436,  924,  437,  924,   16,  438,  439,
  460,  440,  441,  425,  426,  132,  691,  132,  124,  461,
  124,  999,  487,  738, 1042,  162,  132,  497,  289,  559,
  289,  503,  504,  131,  692,  131,  296,  499,  296,  501,
  502,  527,  691,  690,  691,  692,  692,  129,  132,  515,
  597,  599,  800,  801,  691,  657,  622,  691,  648,  979,
  816,   43, 1065, 1066,   59,  140,  690,  690,  129,  129,
  608,  132,  132,  621, 1081, 1082,  633,   16,   59,  912,
  634,   15, 1255,   15,   16,   16,   16, 1497, 1038,  636,
  973,  691,   15, 1457, 1458,  638, 1224,  433,  433,  639,
 1476, 1476,  434,  434,  910,  910,  942, 1485, 1485,  688,
  688,  564,  566,  640,   15,  132,  663,   16,  690,  664,
  690,  666,  963,  568,  570,  580,  582,  679,  668,  132,
 1255,  132,  680,  708,  717,  719,   31,   15,   15,  723,
  690, 1267,  729,  734,  735, 1203,   16, 1314,  346, 1315,
  736,  748,  755,  354,  761, 1042,  355,  357, 1203,  765,
 1288,  762,  768,  713,  657,  691,  769,   16,   16,  773,
  973,  774,  778,  648,  973,  795,  973,  423,  797,  973,
  973,   15,  973,  973,  400,  523,  802,  814,  423,  818,
  423,  523,  282, 1203,  975,   15,  815,   15,  819,  692,
 1033,  822,  823,  887,  481,  899, 1203,  894,  916,  423,
  423,  969,  900,  917, 1038,  919,  925,  926,  928,  970,
  972,  968,  976,  986,  973,   27,  691, 1333,  657,  423,
  648,  988, 1032, 1040,  984,  987, 1041,  423, 1045, 1046,
  423,  690,   16, 1048, 1049, 1058, 1064, 1068, 1067,  485,
 1073, 1071, 1074, 1038,  129, 1078, 1075,  973, 1203, 1087,
 1100, 1118, 1119, 1161,  691, 1128, 1155, 1166,  691, 1178,
  692, 1182,  691, 1379,  975, 1019, 1193, 1206,  975, 1211,
  975, 1215,  657,  975,  975, 1225,  975,  975, 1400, 1241,
 1019,  969, 1253,  692,  692,  969, 1268,  969, 1251, 1261,
  969,  969, 1271,  969,  969, 1273, 1038, 1099, 1262, 1278,
 1289, 1294, 1291, 1418, 1420, 1019, 1019, 1295, 1301, 1299,
 1264, 1302, 1245,  690, 1305, 1306, 1115, 1308, 1310, 1145,
 1311, 1317, 1318, 1326, 1400, 1400, 1019, 1019, 1322, 1320,
 1323, 1330, 1346, 1335, 1347,  692,  810,  692,  690, 1342,
 1348, 1350, 1358,   16, 1374, 1359,  657, 1370, 1404, 1395,
 1384,  975, 1158,  690,  129, 1397, 1394,  692, 1398, 1427,
 1414, 1425,  400, 1413, 1428, 1441, 1442, 1424,  969, 1434,
 1446, 1454,  691, 1459, 1445, 1444,   20, 1450,  657,  690,
 1467,  690, 1400,   31, 1019, 1468, 1490,   31, 1488, 1494,
    7,  690, 1495, 1001,  690, 1499,  993,   29,   31,   30,
   16,  318,   31,  534,  534,  553,   31,  517,  652,   31,
  518,  459,  469,  212,  708,  102, 1496,  653,  516,   29,
  470,   31,   31,  322,  772,   30,   31,   31,  690, 1228,
  902,  460,   31,  910,   31,   31,   31,   31, 1235,  708,
  894,  895,   31,  129,  801,  802,   31,  860,   31,  825,
  793,  861,   16,   16,  826,  345,  794,  688,  692,  127,
   31,  112,  862,  292,   31,  128,  864,  113,  293,  688,
  454,   27,   27,  610,   56, 1270,   27,  246,  227, 1079,
   27, 1154,   27,  516, 1415,   27, 1185,   27,   27,   31,
  517,   27, 1443,   27,  753,   27,   27,   27,   27, 1396,
 1392,   27,  690, 1265, 1247,  731,   27, 1487,  812,   27,
   27,   27,  813,  808,   27,   27,   27, 1088,   27, 1266,
 1411,   27, 1479,   27,   27,   27,   27, 1421,  994, 1426,
   27,   27,   27,  920, 1478,   27,   27,   27, 1419,   27,
  692,  244,   16, 1037,   27,   27,  129,   27, 1316,   27,
   27,  494, 1234,   27,  537,    3,  886,  760,  921,  707,
  969,  129,  671,  690,  352,  692,  584,  367,  790,  758,
  754,  779,  780,  586,  590,  588,   27,   27,   27,  592,
  692,  593,  971,  777,  629, 1129,   27,  825, 1328,  367,
 1274, 1334, 1321, 1292, 1327, 1371, 1112, 1272, 1329, 1372,
 1409,  690,  367, 1367,  606,  690,  692,  367,  692,  690,
  234,  607,  367,  727,  367,  367,  367,  367,  692, 1184,
  345,  692,  367,  245,  243,    0,  367,   27,    0,    0,
  367,    0,    0,   20,    0,    0,    0,   20,    0,    0,
  367,    0,    0,    0,    0,   16,    0,    0,   20,    0,
    0,    0,   20,    0,    0,  692,   20,    0,    0,   20,
   16,    0,    0,    0,    0,    0,    0,    0,  367,    0,
    0,   20,   20,    0,    0,  626,   20,   20,  401,  994,
    0,    0,   20,    0,   20,   20,   20,   20,    0,    0,
    0,    0,   20,    0,    0,    0,   20,  129,   20,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,    0,
   20,    0, 1169,    0,   20,    0,    0,    0,  367,  690,
    0,    0,  938,  939,    0,  943,  944,    0,  948,  692,
  129,  357,  954,  955,    0, 1186, 1187,   17,   20,   20,
  282,  282,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  129,  129,  626,    0,    0,    0,  626,
    0,  626,  626,  626,  626,  626,  626,  626,  626,  626,
  626,  626,    0,    0,    0,  626,  626,  527,    0,    0,
    0,  626,    0,  626,    0,  626,    0,  626,  626,  626,
  692,    0,    0, 1249,    0, 1250,   16,  489,   16,    0,
    0,    0,    0,  626,    0,    0,    0,   16,    0,    0,
    0,  129,    3,  129,  626,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  626,   45,  692,   16,
    0,   45,  692,    0,    0,   45,  692,    0,   45,    0,
    0,    0,  626,    0,  626,    0,    0,    0,    0,    0,
   45,   45,   16,   16,    0,   45,   45,    0,    0,    0,
    0,   45,    0,   45,   45,   45,   45,    0,    0,    0,
    0,   45,    0,    0,    0,   45,  345,   45,    0,    0,
    0,  345,  345,    0,    0,    0,    0,    0,    0,   45,
    0,    0,    0,   45,    0,    0,   16,    0,    0,    0,
    0,    0,    0,  345,    0,    0,    0,    0,    0,    0,
   16,    0,   16,    0,    0,    0,  345,  345,    0,    0,
    0,  345,    0, 1091,  345,    0,  345,    0,  345,  345,
  345,  345,    0,    0,  345,    0,  345,    0,    0, 1108,
  345,    0,    0,    0,  345,    0,  692,    0,    0,    0,
    0,    0,    0,    0,  345,    0,  345,    0,    0,  345,
  345,    0,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,    0,  345,  345,    0,    0,
    0,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,    0,  345,  345,    0,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,    0,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,    0,    0,
  345,    0,  345,  527,  345,    0,    0,  345,  527,  527,
    0,    0,    0,  345,    0,  345,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1227,    0,    0,    0,  335,
  527,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  527,  527,    0,    0,    0,  527,    0,
    0,  527,    0,  527,    0,  527,  527,  527,  527,    0,
    0,    0,    0,  527,    0,    0,    0,  527,    0,    0,
    0,  527,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  527,    0,  527,    0,    0,  527,  527,    0,  527,
  527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
    0,  527,    0,  527,  527,    0,    0,    0,  527,  527,
    0,  527,  527,  527,  527,  527,  527,  527,    0,  527,
  527,    0,  527,  527,  527,  527,  527,  527,  527,  527,
  527,  527,    0,  527,  527,  527,  527,  527,  527,  527,
  527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
  527,  527,  527,  527,  527,    0,    0,  527,    0,  527,
  345,  527,    0,    0,  527,  345,  345,    0,    0,    0,
  527,    0,  527,  778,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  345,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  345,  345,    0,    0,    0,  345,    0,    0,  345,    0,
  345,    0,  345,  345,  345,  345,    0,    0,    0,    0,
  345,    0,    0,    0,  345,    0,    0,    0,  345,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  345,    0,
  345,    0,    0,  345,  345,    0,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,    0,    0,
  345,  345,    0,    0,    0,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,    0,  345,  345,    0,    0,
  345,  345,  345,  345,  345,  335,    0,  345,  345,    0,
  335,  335,  345,  345,  345,  345,  345,  345,  345,  345,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  345,  335,    0,  345,    0,  345,  375,  345,    0,
    0,  345,    0,    0,    0,  335,  335,  345,    0,  345,
  335,    0,    0,  335,    0,  335,    0,  335,  335,  335,
  335,    0,    0,    0,    0,  335,    0,    0,    0,  335,
    0,    0,    0,  335,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  335,    0,  335,    0,    0,  335,  335,
    0,  335,  335,  335,  335,  335,  335,  335,  335,  335,
  335,  335,    0,    0,    0,  335,  335,    0,    0,    0,
  335,  335,  335,  335,  335,  335,    0,  335,  335,  335,
    0,  335,  335,    0,    0,  335,  335,  335,  335,    0,
    0,    0,  335,  335,    0,    0,    0,  335,  335,  335,
  335,  335,  335,  335,  335,    0,    0,    0,    0,  778,
    0,    0,    0,    0,  778,  778,  335,    0,    0,  335,
    0,  335,  380,  335,    0,    0,  335,    0,    0,    0,
    0,    0,  335,    0,  335,    0,  778,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  778,
  778,    0,    0,    0,  778,    0,    0,  778,    0,  778,
    0,  778,  778,  778,  778,    0,    0,    0,    0,  778,
    0,    0,    0,  778,    0,    0,    0,  778,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  778,    0,  778,
    0,    0,  778,  778,    0,  778,  778,  778,  778,  778,
  778,  778,  778,  778,  778,  778,    0,    0,    0,  778,
  778,    0,    0,    0,  778,  778,  778,  778,  778,  778,
    0,  778,  778,  778,    0,  778,  778,    0,    0,  778,
  778,  778,  778,    0,    0,    0,  778,  778,    0,    0,
    0,  778,  778,  778,  778,  778,  778,  778,  778,    0,
    0,    0,    0,  375,    0,    0,    0,    0,  375,  375,
  778,   32,    0,  778,    0,  778,    0,  778,    0,    0,
  778,    0,    0,    0,    0,    0,  778,    0,  778,    0,
  375,    0,    0,    0,    0,  369,  371,  373,  375,  377,
  379,  381,  383,  375,  375,    0,    0,    0,  375,    0,
    0,  375,    0,  375,    0,  375,  375,  375,  375,    0,
    0,    0,    0,  375,    0,    0,    0,  375,    0,    0,
    0,  375,    0,    0,    0,   21,    0,    0,    0,    0,
    0,  375,    0,  375,    0,    0,  375,  375,    0,  375,
  375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
    0,    0,    0,  375,  375,    0,    0,    0,  375,  375,
    0,  375,  375,  375,    0,  375,  375,  375,    0,  375,
  375,    0,    0,  375,  375,  375,  375,    0,  380,    0,
  375,  375,    0,    0,  380,  375,  375,  375,  375,  375,
  375,  375,  375,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  375,    0,    0,  375,    0,  375,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  380,
  375,    0,  375,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  553,  555,  557,    5,    0,  563,  563,  563,
  563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
  563,  563,  563,    0,    0,    0,    0,    0,  380,    0,
    0,  380,  380,    0,  380,  380,  380,  380,  380,  380,
  380,  380,  380,  380,  380,    0,   46,    0,  380,  380,
    0,    0,    0,  380,  380,  380,  380,  380,  380,    0,
  380,  380,  380,    0,  380,  380,    0,    0,  380,  380,
  380,  380,    0,    0,    0,  380,  380,    0,    0,    0,
  380,  380,  380,  380,  380,  380,  380,  380,   32,    0,
    0,    0,   32,    0,    0,    0,    0,    0,    0,  380,
    0,    0,  380,   32,  380,  682,  380,   32,    0,  380,
    0,   32,    0,    0,   32,  380,    0,  380,    0,    0,
    0,    0,    0,    0,    0,    0,   32,   32,    0,    0,
    0,   32,   32,    0,    0,    0,    0,   32,    0,   32,
   32,   32,   32,    0,    0,    0,    0,   32,    0,    0,
    0,   32,   21,   32,    0,    0,   21,    0,    0,    0,
    0,    0,    0,    0,    0,   32,    0,   21,    0,   32,
    0,   21,    0,    0,    0,   21,    0,    0,   21,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   21,   21,    0,   32,   32,   21,   21,    0,    0,    0,
    0,   21,    0,   21,   21,   21,   21,    0,    0,    0,
    0,   21,    0,    0,    0,   21,    0,   21,    0,    0,
    0,   45,    0,    0,    0,   45,    0,    0,    0,   21,
    0,    0,    0,   21,    0,    0,   45,    0,    0,    0,
   45,    0,    0,    0,   45,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   21,   21,   45,
   45,    0,    5,    0,   45,   45,   46,    0,    0,    0,
   45,    0,   45,   45,   45,   45,    0,   46,    0,    0,
   45,   46,    0,    0,   45,   46,   45,    0,   46,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
   46,   46,   45,   46,    0,   46,   46,   46,    0,    0,
    0,   46,    0,   46,   46,   46,   46,  345,   46,    0,
    0,   46,   46,  345,    0,   46,   46,   46,    0,   46,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
    0,   46,   46,   46,    0,    0,   46,   46,    0,    0,
    0,    0,   46,    0,   46,   46,   46,   46,  345,    0,
    0,    0,   46,    0,    0,    0,   46,    0,   46,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   46,    0,    0,    0,   46,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  345,    0,    0,
    0,  345,    0,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,    0,  345,  345,  781,
    0,    0,    0,  345,  345,  345,  345,  345,  345,  345,
  345,  345,    0,  345,  345,    0,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,    0,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,    0,
  529,    0,    0,  345,  103,  345,  529,    0,  345,  345,
  345,    0,    0,    0,  345,    0,  345,    0,  781,  345,
    0,  345,    0,  345,  781,    0,  104,    0,    0,    0,
    0,  781,    0,    0,    0,    0,  345,    0,    0,  105,
    0,  529,  345,  345,  107,    0,    0,    0,    0,  108,
    0,  109,  110,  111,  112,    0,    0,    0,    0,  113,
    0,    0,  345,  114,    0,    0,    0, 1195,  345,    0,
  345,    0,    0,  345,    0,    0,    0,  115,    0,    0,
  529,    0,    0,    0,  529,    0,  529,  529,  529,  529,
  529,  529,  529,  529,  529,  529,  529,    0,  529,    0,
  529,  529,    0,    0,    0,  529,  529,  529,  529,  529,
  529,  529,  529,  529,  529,    0,  529,  529,    0,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,    0,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
  529,  529,  123,  525,    0, 1197,    0,    0,  529,  525,
    0,   17,    0,   18,    0,    0,   19,  529,    0,  529,
    0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
    0,    0,   22,    0,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,  525,   25,    0,    0,    0,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,    0,    0,    0,   30,    0,    0,
    0,    0,    0,    0,    0,   31,   32,    0,   33,    0,
    0,  124,    0,  525,    0,    0,    0,  525,    0,  525,
  525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
    0,  525,    0,  525,  525,    0,    0,    0,  525,  525,
    0,  525,  525,  525,  525,  525,  525,  525,    0,  525,
  525,    0,  525,  525,  525,  525,  525,  525,  525,  525,
  525,  525,    0,  525,  525,  525,  525,  525,  525,  525,
  525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
  525,  525,  525,  525,  525,    0,  533,    0,  121,  366,
    0,  525,  533,    0,  525,    0,    0,    0,    0,    0,
  525,    0,  525,    0,    0,    0,    0,    0,    0,    0,
    0,  366,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  366,    0,    0,  533,    0,  366,
    0,    0,  233,    0,  366,    0,  366,  366,  366,  366,
    0,    0,    0,    0,  366,    0,    0,    0,  366,    0,
    0,    0,  366,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  366,    0,    0,    0,  533,    0,    0,    0,
  533,    0,  533,  533,  533,  533,  533,  533,  533,  533,
  533,  533,  533,    0,  533,    0,  533,  533,    0,    0,
  366,    0,  533,    0,  533,  533,  533,  533,  533,  533,
  533,    0,  533,  533,    0,  533,  533,  533,  533,  533,
  533,  533,  533,  533,  533,    0,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,  533,  533,    0,  345,
  366,    0,  103,    0,  533,  345,    0,  533,    0,    0,
    0,    0,    0,  533,    0,  533,    0,    0,    0,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  105,    0,    0,
  345,    0,  107,    0,    0,  104,    0,  108,    0,  109,
  110,  111,  112,    0,    0,    0,    0,  113,  105,    0,
    0,  114,    0,  107,    0, 1195,    0,    0,  108,    0,
  109,  110,  111,  112,    0,  115,    0,    0,  113,  345,
    0,    0,  114,  345,    0,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  115,  345,    0,  345,
  345,    0,    0, 1196,    0,  345,    0,  345,  345,  345,
  345,  345,  345,  345,    0,  345,  345,    0,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,    0,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,    0,  455, 1197,   27,    0,    0,  345,  455,    0,
  345,    0,    0,    0,    0,    0,  345,    0,  345,    0,
    0,    0,    0,    0, 1245,    0,   27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   27,
    0,    0,    0,  455,   27,    0,    0,    0,    0,   27,
    0,   27,   27,   27,   27,    0,    0,   27,    0,   27,
    0,    0,    0,   27,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   27,    0,    0,
    0,    0,  455,    0,    0,    0,  455,    0,  455,  455,
  455,  455,  455,  455,  455,  455,  455,  455,  455,    0,
  455,    0,  455,  455,    0,   27,   27,    0,  455,    0,
  455,  455,  455,  455,  455,  455,  455,    0,  455,  455,
    0,  455,  455,  455,  455,  455,  455,  455,  455,  455,
  455,    0,  455,  455,  455,  455,  455,  455,  455,  455,
  455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
  455,  455,  455,  455,    0,  558,    0,   27,    0,   27,
  455,  558,    0,  455,    0,    0,    0,    0,    0,  455,
    0,  455,    0,    0,    0,    0,    0,    0,    0,   27,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   27,    0,    0,    0,  558,   27,    0,    0,
    0,    0,   27,    0,   27,   27,   27,   27,    0,    0,
    0,    0,   27,    0,    0,    0,   27,    0,    0,    0,
    0,    0,    0,    0,    0,  578,    0,    0,    0,    0,
   27,  578,    0,    0,    0,  558,    0,    0,    0,  558,
    0,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,    0,    0,    0,  558,  558,    0,   27,   27,
    0,  558,    0,  558,    0,  558,  578,  558,  558,  558,
    0,  558,  558,    0,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,    0,    0,    0,  558,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
  558,  558,  558,  558,  558,  578,  558,    0,    0,  578,
    0,  578,  578,  578,  578,  578,  578,  578,  578,  578,
  578,  578,  558,    0,  558,  578,  578,    0,  585,    0,
    0,  578,   45,  578,  585,  578,    0,  578,  578,  578,
    0,  578,  578,    0,    0,  578,  578,  578,  578,  578,
  578,  578,  578,  578,   45,    0,    0,  578,  578,  578,
  578,  578,  578,  578,  578,    0,    0,   45,    0,  585,
    0,    0,   45,    0,    0,    0,  578,   45,    0,   45,
   45,   45,   45,    0,    0,   45,    0,   45,    0,    0,
    0,   45,  578,    0,  578,    0,    0,    0,  586,    0,
    0,    0,    0,    0,  586,   45,    0,    0,  585,    0,
    0,    0,  585,    0,  585,  585,  585,  585,  585,  585,
  585,  585,  585,  585,  585,    0,    0,    0,  585,  585,
    0,    0,    0,  303,  585,    0,  585,    0,  585,  586,
  585,  585,  585,    0,  585,  585,    0,    0,  585,  585,
  585,  585,    0,    0,    0,  585,  585,    0,    0,    0,
  585,  585,  585,  585,  585,  585,  585,  585,  587,    0,
    0,    0,    0,    0,  587,    0,    0,    0,  586,  585,
    0,    0,  586,    0,  586,  586,  586,  586,  586,  586,
  586,  586,  586,  586,  586,  585,    0,  585,  586,  586,
    0,    0,    0,    0,  586,    0,  586,    0,  586,  587,
  586,  586,  586,    0,  586,  586,    0,    0,  586,  586,
  586,  586,    0,    0,    0,  586,  586,    0,    0,    0,
  586,  586,  586,  586,  586,  586,  586,  586,  595,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  587,  586,
    0,    0,  587,    0,  587,  587,  587,  587,  587,  587,
  587,  587,  587,  587,  587,  586,    0,  586,  587,  587,
    0,    0,    0,    0,  587,    0,  587,    0,  587,    0,
  587,  587,  587,    0,  587,  587,    0,    0,  587,  587,
  587,  587,    0,    0,    0,  587,  587,    0,    0,    0,
  587,  587,  587,  587,  587,  587,  587,  587,  596,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  595,  587,
    0,    0,  595,    0,  595,  595,  595,  595,  595,  595,
  595,  595,  595,  595,  595,  587,    0,  587,  595,  595,
    0,    0,    0,    0,  595,    0,  595,    0,  595,    0,
  595,  595,  595,    0,    0,    0,    0,    0,  595,  595,
  595,  595,    0,    0,    0,  595,  595,    0,    0,    0,
  595,  595,  595,  595,  595,  595,  595,  595,  597,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  596,  595,
    0,    0,  596,    0,  596,  596,  596,  596,  596,  596,
  596,  596,  596,  596,  596,  595,    0,  595,  596,  596,
    0,    0,    0,    0,  596,    0,  596,    0,  596,    0,
  596,  596,  596,    0,    0,    0,    0,    0,  596,  596,
  596,  596,    0,    0,    0,  596,  596,    0,    0,    0,
  596,  596,  596,  596,  596,  596,  596,  596,  600,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  597,  596,
    0,    0,  597,    0,  597,  597,  597,  597,  597,  597,
  597,  597,  597,  597,  597,  596,    0,  596,  597,  597,
    0,    0,    0,    0,  597,    0,  597,    0,  597,    0,
  597,  597,  597,    0,    0,    0,    0,    0,  597,  597,
  597,  597,    0,    0,    0,  597,  597,    0,    0,    0,
  597,  597,  597,  597,  597,  597,  597,  597,  601,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  600,  597,
    0,    0,  600,    0,  600,  600,  600,  600,  600,  600,
  600,  600,  600,  600,  600,  597,    0,  597,  600,  600,
    0,    0,    0,    0,  600,    0,  600,    0,  600,    0,
  600,  600,  600,    0,    0,    0,    0,    0,  600,  600,
  600,  600,    0,    0,    0,  600,  600,    0,    0,    0,
    0,    0,  600,  600,  600,  600,  600,  600,  602,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  601,  600,
    0,    0,  601,    0,  601,  601,  601,  601,  601,  601,
  601,  601,  601,  601,  601,  600,    0,  600,  601,  601,
    0,    0,    0,    0,  601,    0,  601,    0,  601,    0,
  601,  601,  601,    0,    0,    0,    0,    0,  601,  601,
  601,  601,    0,    0,    0,  601,  601,    0,    0,    0,
    0,    0,  601,  601,  601,  601,  601,  601,  603,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  602,  601,
    0,    0,  602,    0,  602,  602,  602,  602,  602,  602,
  602,  602,  602,  602,  602,  601,    0,  601,  602,  602,
    0,    0,    0,    0,  602,    0,  602,    0,  602,    0,
  602,  602,  602,    0,    0,    0,    0,    0,  602,  602,
  602,  602,    0,    0,    0,  602,  602,    0,    0,    0,
    0,    0,  602,  602,  602,  602,  602,  602,  604,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  603,  602,
    0,    0,  603,    0,  603,  603,  603,  603,  603,  603,
  603,  603,  603,  603,  603,  602,    0,  602,  603,  603,
    0,    0,    0,    0,  603,    0,  603,    0,  603,    0,
  603,  603,  603,    0,    0,    0,    0,    0,  603,  603,
  603,  603,    0,    0,    0,  603,  603,    0,    0,    0,
    0,    0,  603,  603,  603,  603,  603,  603,  609,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  604,  603,
    0,    0,  604,    0,  604,  604,  604,  604,  604,  604,
  604,  604,  604,  604,  604,  603,    0,  603,  604,  604,
    0,    0,    0,    0,  604,    0,  604,    0,  604,    0,
  604,  604,  604,    0,    0,    0,    0,    0,  604,  604,
  604,  604,    0,    0,    0,  604,  604,    0,    0,    0,
    0,    0,  604,  604,  604,  604,  604,  604,  610,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  609,  604,
    0,    0,  609,    0,  609,  609,  609,  609,  609,  609,
  609,  609,  609,  609,  609,  604,    0,  604,  609,  609,
    0,    0,    0,    0,  609,    0,  609,    0,  609,    0,
  609,  609,  609,    0,    0,    0,    0,    0,    0,    0,
  609,  609,    0,    0,    0,  609,  609,    0,    0,    0,
    0,    0,    0,    0,  609,  609,  609,  609,  611,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  610,  609,
    0,    0,  610,    0,  610,  610,  610,  610,  610,  610,
  610,  610,  610,  610,  610,  609,    0,  609,  610,  610,
    0,    0,    0,    0,  610,    0,  610,    0,  610,    0,
  610,  610,  610,    0,    0,    0,    0,    0,    0,    0,
  610,  610,    0,    0,    0,  610,  610,    0,    0,    0,
    0,    0,    0,    0,  610,  610,  610,  610,  614,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  611,  610,
    0,    0,  611,    0,  611,  611,  611,  611,  611,  611,
  611,  611,  611,  611,  611,  610,    0,  610,  611,  611,
    0,    0,    0,    0,  611,    0,  611,    0,  611,    0,
  611,  611,  611,    0,    0,    0,    0,    0,    0,    0,
  611,  611,    0,    0,    0,  611,  611,    0,    0,    0,
    0,    0,    0,    0,  611,  611,  611,  611,  615,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  614,  611,
    0,    0,  614,    0,  614,  614,  614,  614,  614,  614,
  614,  614,  614,  614,  614,  611,    0,  611,  614,  614,
    0,    0,    0,    0,  614,    0,  614,    0,  614,    0,
  614,  614,  614,    0,    0,    0,    0,    0,    0,    0,
  614,  614,    0,    0,    0,  614,  614,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  614,  614,  617,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  615,  614,
    0,    0,  615,    0,  615,  615,  615,  615,  615,  615,
  615,  615,  615,  615,  615,  614,    0,  614,  615,  615,
    0,    0,    0,    0,  615,    0,  615,    0,  615,    0,
  615,  615,  615,    0,    0,    0,    0,    0,    0,    0,
  615,  615,    0,    0,    0,  615,  615,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  615,  615,  618,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  617,  615,
    0,    0,  617,    0,  617,  617,  617,  617,  617,  617,
  617,  617,  617,  617,  617,  615,    0,  615,  617,  617,
    0,    0,    0,    0,  617,    0,  617,    0,  617,    0,
  617,  617,  617,    0,    0,    0,    0,    0,    0,    0,
    0,  617,    0,    0,    0,  617,  617,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  617,  617,  620,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  618,  617,
    0,    0,  618,    0,  618,  618,  618,  618,  618,  618,
  618,  618,  618,  618,  618,  617,    0,  617,  618,  618,
    0,    0,    0,    0,  618,    0,  618,    0,  618,    0,
  618,  618,  618,    0,    0,    0,    0,    0,    0,    0,
    0,  618,    0,    0,    0,  618,  618,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  618,  618,  621,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  620,  618,
  103,    0,  620,    0,  620,  620,  620,  620,  620,  620,
  620,  620,  620,  620,  620,  618,    0,  618,  620,  620,
    0,    0,  104,    0,  620,    0,  620,    0,  620,    0,
  620,  620,  620,    0,    0,  105,    0,    0,    0,  106,
  107,  620,    0,    0,    0,  108,  620,  109,  110,  111,
  112,    0,    0,    0,    0,  113,  620,  620,  623,  114,
    0,    0,    0,    0,    0,    0,    0,    0,  621,  620,
  103,    0,  621,  115,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  620,    0,  620,  621,  621,
    0,    0,  104,    0,  621,    0,  621,    0,  621,    0,
  621,  621,  621,    0,    0,  105,    0,    0,    0,    0,
  107,  621,    0,    0,    0,  108,  621,  109,  110,  111,
  112,    0,    0,    0,    0,  113,  621,  621,  624,  114,
    0,    0,    0,    0,   45,    0,    0,    0,  623,  621,
    0,    0,  623,  115,  623,  623,  623,  623,  623,  623,
  623,  623,  623,  623,  623,  621,   45,  621,  623,  623,
    0,    0,    0,    0,  623,    0,  623,    0,  623,   45,
  623,  623,  623,    0,   45,    0,    0,    0,    0,   45,
    0,   45,   45,   45,   45,    0,  623,    0,    0,   45,
    0,    0,    0,   45,    0,    0,  623,  623,  627,    0,
    0,    0,    0,    0,   45,    0,    0,   45,  624,  623,
    0,    0,  624,    0,  624,  624,  624,  624,  624,  624,
  624,  624,  624,  624,  624,  623,   45,  623,  624,  624,
    0,   45,   45,    0,  624,  200,  624,    0,  624,   45,
  624,  624,  624,    0,   45,    0,    0,    0,    0,   45,
    0,   45,   45,   45,   45,    0,  624,    0,    0,   45,
    0,    0,    0,   45,    0,    0,  624,  624,  629,    0,
    0,    0,    0,    0,   45,    0,   45,   45,  627,  624,
    0,    0,  627,    0,  627,  627,  627,  627,  627,  627,
  627,  627,  627,  627,  627,  624,   45,  624,  627,  627,
    0,   45,   45,    0,  627,  202,  627,    0,  627,   45,
  627,  627,  627,  631,   45,    0,    0,    0,    0,   45,
    0,   45,   45,   45,   45,    0,  627,    0,    0,   45,
    0,    0,    0,   45,    0,    0,    0,  627,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   45,  629,  627,
    0,    0,  629,    0,  629,  629,  629,  629,  629,  629,
  629,  629,  629,  629,  629,  627,    0,  627,  629,  629,
    0,  985,    0,    0,  629,  304,  629,    0,  629,    0,
  629,  629,  629,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  631,   45,    0,  629,  631,    0,  631,
  631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
    0,    0,    0,  631,  631,    0,   45,    0,    0,  631,
    0,  631,    0,  631,    0,  631,  631,  631,    0,   45,
    0,    0,    0,    0,   45,  629,    0,  629,    0,   45,
    0,   45,   45,   45,   45,    0,    0,    0,    0,   45,
    0,  985,    0,   45,    0,  985,    0,  985,  985,  985,
  985,  985,  985,  985,  985,  985,  985,   45,    0,    0,
    0,  985,  985,    0,    0,    0,    0,  985,    0,  985,
  631,  985,  631,  985,  985,  985,  896,    0,    0,    0,
    0,   45,   45,    0,  896,  896,  896,  896,  896,    0,
  896,  896,    0,  896,  896,  896,  896,  896,  896,  896,
    0,    0,    0,    0,  896,    0,  896,  896,  896,  896,
  896,    0,    0,    0,  896,    0,    0,    0,  896,  896,
    0,  896,  896,  896,    0,    0,    0,    0,  985,    0,
  985,    0,    0,  896,    0,  896,    0,  896,  896,    0,
    0,  896,    0,  896,  896,  896,  896,  896,  896,  896,
  896,  896,  896,  896,    0,  896,    0,  896,    0,    0,
  896,  896,    0,    0,   45,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  896,  896,    0,    0,
    0,  896,  896,    0,    0,  896,   45,    0,    0,    0,
  896,  896,  896,  896,  896,    0,    0,    0,  896,   45,
  896,    0,    0,    0,   45,    0,  896,  896,    0,   45,
    0,   45,   45,   45,   45,    0,    0,   45,    0,   45,
    0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
  819,  896,  896,  896,  896,    0,  896,   45,  819,  819,
  819,  819,  819,  896,  819,  819,    0,  819,  819,  819,
  819,  819,  819,    0,    0,    0,    0,    0,  819,    0,
  819,  819,  819,  819,  819,    0,    0,    0,  819,    0,
    0,    0,  819,  819,    0,  819,  819,  819,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  819,    0,  819,
    0,  819,  819,    0,    0,  819,    0,  819,  819,  819,
  819,  819,  819,  819,  819,  819,  819,  819,    0,  819,
  345,  819,    0,    0,  819,  819,  345,    0,    0,    0,
  781,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  819,  819,    0,    0,    0,  819,  819,    0,    0,  819,
    0,    0,    0,    0,  819,  819,  819,  819,  819,    0,
    0,  345,  819,    0,  819,    0,    0,    0,    0,    0,
  819,  819,    0,    0,    0,    0,    0,  781,    0,    0,
    0,    0,  402,    0,    0,    0,    0,    0,  402,    0,
    0,    0,    0,    0,    0,  819,  819,  819,  819,    0,
  819,    0,    0,    0,    0,    0,    0,  819,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  345,  345,    0,
    0,    0,    0,  402,    0,    0,  345,  345,  345,  345,
  345,  345,  345,  781,  345,    0,  345,  345,    0,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,    0,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,    0,    0,    0,    0,  345,    0,  345,    0,
  402,  345,    0,    0,    0,    0,    0,  345,  402,  335,
  402,  402,  402,  402,  402,    0,  402,    0,  402,  402,
    0,  402,  402,  402,  402,  402,    0,  402,  402,  402,
  402,    0,  402,  402,  402,  402,  402,  402,  402,  402,
  402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
  402,  402,  402,  402,    0,  345,    0,    0,  335,  781,
  402,    0,   17,  402,   18,    0,    0,   19,    0,  402,
 1131,    0,    0,  158,    0,   20,    0,  159, 1132, 1133,
    0,    0,    0,   22,    0,    0,    0,    0, 1134,    0,
  345,   24,    0,    0,    0,    0,   25,    0,    0,    0,
   26,    0,    0,    0,    0,    0,  781,    0,    0,    0,
    0,    0,   28,    0,   29,    0,    0,    0,   30,    0,
    0, 1135,    0,    0,    0,    0,   31,   32,    0,   33,
    0,    0, 1136,    0,    0, 1137,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  345,  345,    0,    0,
    0,    0,    0,    0,    0,  345,  345,    0,  345,    0,
  345,    0,  781,  345,    0,  345,  345,    0,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,    0,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,    0,    0,  828,    0,  345,    0,  345,    0,  121,
  345,  248,   17,  829,   18, 1281,  345,   19,  830,    0,
  831,  832,  250,  251,  833,   20,    0,    0,    0,    0,
    0,  252,    0,   22,  834,  835,  836,  837,    0,    0,
    0,   24,    0,    0,    0,  838,   25,    0,  253,  254,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  839,    0,   28,    0,   29,  255,    0,    0,   30,    0,
  840,  256,  841,  257,  842,  258,   31,   32,  843,   33,
  844,    0,  124,    0,  845,    0,    0,  260,  261,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  262,  263,    0,    0,    0,  636,    0,
    0,    0,  264,    0,    0,    0,    0,  846,  265,  266,
  267,  268,    0,    0,    0,  269,    0,  270,    0,    0,
    0,    0,    0,  271,  272,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  828,    0,  273,  847,
  275,  276,    0, 1282,  248,   17,  829,   18,    0,    0,
   19,  830,    0,  831,  832,  250,  251,  833,   20,    0,
    0,    0,    0,    0,  252,    0,   22,  834,  835,  836,
  837,    0,    0,    0,   24,    0,    0,    0,  838,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  839,    0,   28,    0,   29,  255,    0,
    0,   30,    0,  840,  256,  841,  257,  842,  258,   31,
   32,  843,   33,  844,    0,  124,    0,  845,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  262,  263,    0,    0,
    0,  636,    0,    0,    0,  264,    0,    0,    0,    0,
  846,  265,  266,  267,  268,    0,    0,    0,  269,    0,
  270,    0,    0,    0,    0,    0,  271,  272,  933,    0,
    0,    0,    0,    0,    0,    0,  248,   17,  829,   18,
    0,    0,   19,  830,    0,  831,  832,  250,  251,  833,
   20,  273,  847,  275,  276,    0,  252,    0,   22,  834,
  835,  836,  837,    0,    0,    0,   24,    0,    0,    0,
  838,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  839,    0,   28,    0,   29,
  255,    0,    0,   30,    0,  840,  256,  841,  257,  842,
  258,   31,   32,  843,   33,  844,    0,  124,    0,  845,
    0,    0,  260,  261,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  262,  263,
    0,    0,    0,  636,    0,    0,    0,  264,    0,    0,
    0,    0,  846,  265,  266,  267,  268,    0,    0,    0,
  269,    0,  270,    0,    0,    0,    0,    0,  271,  272,
  530,    0,    0,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,  273,  463,  275,  276,    0,  252,    0,
   22,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0,   25,    0,  253,  254,   26,    0,  531,
    0,    0,    0,    0,    0,    0,  532,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,   33,    0,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  262,  263,    0,    0,    0,    0,    0,    0,    0,  264,
    0,    0,  533,    0,    0,  265,  266,  267,  268,    0,
    0,    0,  269,    0,  270,    0,    0,    0,    0,    0,
  271,  272,  655,    0,    0,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,  273,  463,  275,  276,    0,
  252,    0,   22,    0,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,    0,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,   33,    0,
    0,    0,    0,    0,    0,    0,  260,  261,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  262,  263,    0,    0,    0,  487,  656,    0,
    0,  264,    0,    0,    0,    0,    0,  265,  266,  267,
  268,    0,    0,    0,  269,    0,  270,    0,    0,    0,
    0,    0,  271,  272,  788,    0,    0,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,  273,  363,  275,
  276,    0,  252,    0,   22,    0,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,    0,   25,    0,  253,
  254,   26,    0,  531,    0,    0,    0,    0,    0,    0,
  532,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
   33,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  262,  263,    0,    0,    0,    0,
    0,    0,    0,  264,    0,    0,    0,    0,    0,  265,
  266,  267,  268,    0,    0,    0,  269,    0,  270,    0,
    0,    0,    0,    0,  271,  272,  655,    0,    0,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,  273,
  463,  275,  276,    0,  252,    0,   22,    0,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255, 1175,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,   33,    0,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  262,  263,    0,    0,
    0,  487,    0,    0,    0,  264,    0,    0,    0,    0,
    0,  265,  266,  267,  268,    0,    0,    0,  269,    0,
  270,    0,    0,    0,    0,    0,  271,  272,  647,    0,
    0,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  683,    0,    0,    0,  250,  251,    0,
   20,  273,  363,  275,  276,    0,  252,    0,   22,    0,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  684,   33,    0,    0,  124,    0,    0,
    0,    0,  260,  261,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  262,  263,
    0,    0,    0,    0,    0,    0,    0,  685,    0,    0,
    0,    0,    0,  265,  266,  267,  268,    0,    0,    0,
  269,    0,  270,    0,    0,    0,    0,    0,  271,  272,
  655,    0,    0,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,  273,  363,  275,  276,    0,  252,    0,
   22,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,   33,    0,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  262,  263,    0,    0,    0,  487,    0,    0,    0,  264,
    0,    0,    0,    0,    0,  265,  266,  267,  268,    0,
    0,    0,  269,    0,  270,    0,    0,    0,    0,    0,
  271,  272,  647,    0,    0,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,  273,  363,  275,  276,    0,
  252,    0,   22,    0,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,    0,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,   33,    0,
    0,    0,    0,    0,    0,    0,  260,  261,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  262,  263,    0,    0,    0,    0,  759,    0,
    0,  264,    0,    0,    0,    0,    0,  265,  266,  267,
  268,    0,    0,    0,  269,    0,  270,    0,    0,    0,
    0,    0,  271,  272,  791,    0,    0,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,  273,  363,  275,
  276,    0,  252,    0,   22,    0,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,    0,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
   33,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  262,  263,    0,    0,    0,    0,
  792,    0,    0,  264,    0,    0,    0,    0,    0,  265,
  266,  267,  268,    0,    0,    0,  269,    0,  270,    0,
    0,    0,    0,    0,  271,  272,   79,    0,    0,    0,
    0,    0,    0,    0,   79,   79,    0,   79,    0,    0,
   79,   79,    0,    0,    0,   79,   79,    0,   79,  273,
  363,  275,  276,    0,   79,    0,   79,    0,    0,    0,
    0,    0,    0,    0,   79,    0,    0,    0,    0,   79,
    0,   79,   79,   79,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   79,    0,   79,   79,    0,
    0,   79,    0,    0,   79,    0,   79,    0,   79,   79,
   79,   79,   79,    0,    0,   79,    0,    0,    0,    0,
   79,   79,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   79,   79,    0,    0,
    0,    0,    0,    0,    0,   79,    0,    0,    0,    0,
    0,   79,   79,   79,   79,    0,    0,    0,   79,    0,
   79,    0,    0,    0,    0,    0,   79,   79,  247,    0,
    0,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,   79,   79,   79,   79,    0,  252,    0,   22,    0,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,   33,    0,    0,    0,    0,    0,
    0,    0,  260,  261,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  262,  263,
    0,    0,    0,    0,    0,    0,    0,  264,    0,    0,
    0,    0,    0,  265,  266,  267,  268,    0,    0,    0,
  269,    0,  270,    0,    0,    0,    0,    0,  271,  272,
  528,    0,    0,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,  273,  274,  275,  276,    0,  252,    0,
   22,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,   33,    0,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  262,  263,    0,    0,    0,    0,    0,    0,    0,  264,
    0,    0,    0,    0,    0,  265,  266,  267,  268,    0,
    0,    0,  269,    0,  270,    0,    0,    0,    0,    0,
  271,  272,  647,    0,    0,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,  273,  463,  275,  276,    0,
  252,    0,   22,    0,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,    0,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,   33,    0,
    0,    0,    0,    0,    0,    0,  260,  261,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  262,  263,    0,    0,    0,    0,    0,    0,
    0,  264,    0,    0,    0,    0,    0,  265,  266,  267,
  268,    0,    0,    0,  269,    0,  270,    0,    0,    0,
    0,    0,  271,  272,  945,    0,    0,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,  273,  363,  275,
  276,    0,  252,    0,   22,    0,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,    0,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
   33,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  262,  263,    0,    0,    0,    0,
    0,    0,    0,  264,    0,    0,    0,    0,    0,  265,
  266,  267,  268,    0,    0,    0,  269,    0,  270,    0,
    0,    0,    0,    0,  271,  272,  949,    0,    0,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,  273,
  363,  275,  276,    0,  252,    0,   22,    0,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,   33,    0,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  262,  263,    0,    0,
    0,    0,    0,    0,    0,  264,    0,    0,    0,    0,
    0,  265,  266,  267,  268,    0,    0,    0,  269,    0,
  270,    0,    0,    0,    0,    0,  271,  272, 1406,    0,
    0,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,  273,  363,  275,  276,    0,  252,    0,   22,    0,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,   33,    0,    0,    0,    0,    0,
    0,    0,  260,  261,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  262,  263,
    0,    0,    0,    0,    0,    0,    0,  264,    0,    0,
    0,    0,    0,  265,  266,  267,  268,    0,    0,    0,
  269,    0,  270,    0,    0,    0,    0,    0,  271,  272,
  368,    0,    0,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,  273,  363,  275,  276,    0,  252,    0,
   22,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  262,  263,    0,    0,    0,    0,    0,    0,    0,  264,
    0,    0,    0,    0,    0,  265,  266,  267,  268,   68,
    0,    0,  269,    0,  270,    0,    0,    0,    0,  370,
  271,  272,   69,    0,    0,    0,    0,  248,   17,    0,
   18,    0,    0,   19,  249,    0,    0,    0,  250,  251,
    0,   20,    0,    0,    0,  273,  121,  252,  276,   22,
    0,   70,    0,    0,    0,    0,    0,   24,    0,    0,
    0,    0,   25,    0,  253,  254,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
   29,  255,    0,    0,   30,    0,    0,  256,    0,  257,
    0,  258,   31,   32,  259,   33,   71,   72,   73,   74,
    0,   75,   76,   77,   78,   79,   80,   81,   82,    0,
    0,   83,   84,   85,   86,   87,   88,   89,   90,  262,
  263,    0,    0,    0,    0,    0,    0,    0,  264,    0,
    0,    0,    0,    0,  265,  266,  267,  268,    0,    0,
    0,  269,    0,  270,    0,    0,    0,    0,  372,  271,
  272,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,    0,    0,    0,  273,  121,  252,  276,   22,    0,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  262,  263,
    0,    0,    0,    0,    0,    0,    0,  264,    0,    0,
    0,    0,    0,  265,  266,  267,  268,    0,    0,    0,
  269,    0,  270,    0,    0,    0,    0,  374,  271,  272,
    0,    0,    0,    0,    0,  248,   17,    0,   18,    0,
    0,   19,  249,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,  273,  121,  252,  276,   22,    0,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  259,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  262,  263,    0,
    0,    0,    0,    0,    0,    0,  264,    0,    0,    0,
    0,    0,  265,  266,  267,  268,    0,    0,    0,  269,
    0,  270,    0,    0,    0,    0,  376,  271,  272,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,    0,
    0,    0,  273,  121,  252,  276,   22,    0,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  262,  263,    0,    0,
    0,    0,    0,    0,    0,  264,    0,    0,    0,    0,
    0,  265,  266,  267,  268,    0,    0,    0,  269,    0,
  270,    0,    0,    0,    0,  378,  271,  272,    0,    0,
    0,    0,    0,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,    0,
    0,  273,  121,  252,  276,   22,    0,    0,    0,    0,
    0,    0,    0,   24,    0,    0,    0,    0,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  262,  263,    0,    0,    0,
    0,    0,    0,    0,  264,    0,    0,    0,    0,    0,
  265,  266,  267,  268,    0,    0,    0,  269,    0,  270,
    0,    0,    0,    0,  380,  271,  272,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,    0,    0,    0,
  273,  121,  252,  276,   22,    0,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,    0,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  262,  263,    0,    0,    0,    0,
    0,    0,    0,  264,    0,    0,    0,    0,    0,  265,
  266,  267,  268,    0,    0,    0,  269,    0,  270,    0,
    0,    0,    0,  382,  271,  272,    0,    0,    0,    0,
    0,  248,   17,    0,   18,    0,    0,   19,  249,    0,
    0,    0,  250,  251,    0,   20,    0,    0,    0,  273,
  121,  252,  276,   22,    0,    0,    0,    0,    0,    0,
    0,   24,    0,    0,    0,    0,   25,    0,  253,  254,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   28,    0,   29,  255,    0,    0,   30,    0,
    0,  256,    0,  257,    0,  258,   31,   32,  259,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  262,  263,    0,    0,    0,    0,    0,
    0,    0,  264,    0,    0,    0,    0,    0,  265,  266,
  267,  268,    0,    0,    0,  269,    0,  270,    0,    0,
    0,    0,  552,  271,  272,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,    0,    0,    0,  273,  121,
  252,  276,   22,    0,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,    0,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  262,  263,    0,    0,    0,    0,    0,    0,
    0,  264,    0,    0,    0,    0,    0,  265,  266,  267,
  268,    0,    0,    0,  269,    0,  270,    0,    0,    0,
    0,  554,  271,  272,    0,    0,    0,    0,    0,  248,
   17,    0,   18,    0,    0,   19,  249,    0,    0,    0,
  250,  251,    0,   20,    0,    0,    0,  273,  121,  252,
  276,   22,    0,    0,    0,    0,    0,    0,    0,   24,
    0,    0,    0,    0,   25,    0,  253,  254,   26,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   28,    0,   29,  255,    0,    0,   30,    0,    0,  256,
    0,  257,    0,  258,   31,   32,  259,   33,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  262,  263,    0,    0,    0,    0,    0,    0,    0,
  264,    0,    0,    0,    0,    0,  265,  266,  267,  268,
    0,    0,    0,  269,    0,  270,    0,    0,    0,    0,
  556,  271,  272,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,    0,    0,    0,  273,  121,  252,  276,
   22,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  262,  263,    0,    0,    0,    0,    0,    0,    0,  264,
    0,    0,    0,    0,    0,  265,  266,  267,  268,    0,
    0,    0,  269,    0,  270,    0,    0,    0,    0,  562,
  271,  272,    0,    0,    0,    0,    0,  248,   17,    0,
   18,    0,    0,   19,  249,    0,    0,    0,  250,  251,
    0,   20,    0,    0,    0,  273,  121,  252,  276,   22,
    0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
    0,    0,   25,    0,  253,  254,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
   29,  255,    0,    0,   30,    0,    0,  256,    0,  257,
    0,  258,   31,   32,  259,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  262,
  263,    0,    0,    0,    0,    0,    0,    0,  264,    0,
    0,    0,    0,    0,  265,  266,  267,  268,    0,    0,
    0,  269,    0,  270,    0,    0,    0,    0,  565,  271,
  272,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,    0,    0,    0,  273,  121,  252,  276,   22,    0,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  262,  263,
    0,    0,    0,    0,    0,    0,    0,  264,    0,    0,
    0,    0,    0,  265,  266,  267,  268,    0,    0,    0,
  269,    0,  270,    0,    0,    0,    0,  567,  271,  272,
    0,    0,    0,    0,    0,  248,   17,    0,   18,    0,
    0,   19,  249,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,  273,  121,  252,  276,   22,    0,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  259,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  262,  263,    0,
    0,    0,    0,    0,    0,    0,  264,    0,    0,    0,
    0,    0,  265,  266,  267,  268,    0,    0,    0,  269,
    0,  270,    0,    0,    0,    0,  569,  271,  272,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,    0,
    0,    0,  273,  121,  252,  276,   22,    0,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  262,  263,    0,    0,
    0,    0,    0,    0,    0,  264,    0,    0,    0,    0,
    0,  265,  266,  267,  268,    0,    0,    0,  269,    0,
  270,    0,    0,    0,    0,  571,  271,  272,    0,    0,
    0,    0,    0,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,    0,
    0,  273,  121,  252,  276,   22,    0,    0,    0,    0,
    0,    0,    0,   24,    0,    0,    0,    0,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  262,  263,    0,    0,    0,
    0,    0,    0,    0,  264,    0,    0,    0,    0,    0,
  265,  266,  267,  268,    0,    0,    0,  269,    0,  270,
    0,    0,    0,    0,  573,  271,  272,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,    0,    0,    0,
  273,  121,  252,  276,   22,    0,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,    0,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  262,  263,    0,    0,    0,    0,
    0,    0,    0,  264,    0,    0,    0,    0,    0,  265,
  266,  267,  268,    0,    0,    0,  269,    0,  270,    0,
    0,    0,    0,  575,  271,  272,    0,    0,    0,    0,
    0,  248,   17,    0,   18,    0,    0,   19,  249,    0,
    0,    0,  250,  251,    0,   20,    0,    0,    0,  273,
  121,  252,  276,   22,    0,    0,    0,    0,    0,    0,
    0,   24,    0,    0,    0,    0,   25,    0,  253,  254,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   28,    0,   29,  255,    0,    0,   30,    0,
    0,  256,    0,  257,    0,  258,   31,   32,  259,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  262,  263,    0,    0,    0,    0,    0,
    0,    0,  264,    0,    0,    0,    0,    0,  265,  266,
  267,  268,    0,    0,    0,  269,    0,  270,    0,    0,
    0,    0,  577,  271,  272,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,    0,    0,    0,  273,  121,
  252,  276,   22,    0,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,    0,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  262,  263,    0,    0,    0,    0,    0,    0,
    0,  264,    0,    0,    0,    0,    0,  265,  266,  267,
  268,    0,    0,    0,  269,    0,  270,    0,    0,    0,
    0,  579,  271,  272,    0,    0,    0,    0,    0,  248,
   17,    0,   18,    0,    0,   19,  249,    0,    0,    0,
  250,  251,    0,   20,    0,    0,    0,  273,  121,  252,
  276,   22,    0,    0,    0,    0,    0,    0,    0,   24,
    0,    0,    0,    0,   25,    0,  253,  254,   26,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   28,    0,   29,  255,    0,    0,   30,    0,    0,  256,
    0,  257,    0,  258,   31,   32,  259,   33,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  262,  263,    0,    0,    0,    0,    0,    0,    0,
  264,    0,    0,    0,    0,    0,  265,  266,  267,  268,
    0,    0,    0,  269,    0,  270,    0,    0,    0,    0,
  581,  271,  272,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,    0,    0,    0,  273,  121,  252,  276,
   22,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  262,  263,    0,    0,    0,    0,    0,    0,    0,  264,
    0,    0,    0,    0,    0,  265,  266,  267,  268,    0,
    0,    0,  269,    0,  270,    0,    0,    0,    0,  583,
  271,  272,    0,    0,    0,    0,    0,  248,   17,    0,
   18,    0,    0,   19,  249,    0,    0,    0,  250,  251,
    0,   20,    0,    0,    0,  273,  121,  252,  276,   22,
    0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
    0,    0,   25,    0,  253,  254,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
   29,  255,    0,    0,   30,    0,    0,  256,    0,  257,
    0,  258,   31,   32,  259,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  262,
  263,    0,    0,    0,    0,    0,    0,    0,  264,    0,
    0,    0,    0,    0,  265,  266,  267,  268,    0,    0,
    0,  269,    0,  270,    0,    0,    0,    0,  585,  271,
  272,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,    0,    0,    0,  273,  121,  252,  276,   22,    0,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  262,  263,
    0,    0,    0,    0,    0,    0,    0,  264,    0,    0,
    0,    0,    0,  265,  266,  267,  268,    0,    0,    0,
  269,    0,  270,    0,    0,    0,    0,  587,  271,  272,
    0,    0,    0,    0,    0,  248,   17,    0,   18,    0,
    0,   19,  249,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,  273,  121,  252,  276,   22,    0,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  259,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  262,  263,    0,
    0,    0,    0,    0,    0,    0,  264,    0,    0,    0,
    0,    0,  265,  266,  267,  268,    0,    0,    0,  269,
    0,  270,    0,    0,    0,    0,  589,  271,  272,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,    0,
    0,    0,  273,  121,  252,  276,   22,    0,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  262,  263,    0,    0,
    0,    0,    0,    0,    0,  264,    0,    0,    0,    0,
    0,  265,  266,  267,  268,    0,    0,    0,  269,    0,
  270,    0,    0,    0,    0,  591,  271,  272,    0,    0,
    0,    0,    0,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,    0,
    0,  273,  121,  252,  276,   22,    0,    0,    0,    0,
    0,    0,    0,   24,    0,    0,    0,    0,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  262,  263,    0,    0,    0,
    0,    0,    0,    0,  264,    0,    0,    0,    0,    0,
  265,  266,  267,  268,    0,    0,    0,  269,    0,  270,
    0,    0,    0,    0,  681,  271,  272,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,    0,    0,    0,
  273,  121,  252,  276,   22,    0,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,    0,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  262,  263,    0,    0,    0,    0,
    0,    0,    0,  264,    0,    0,    0,    0,    0,  265,
  266,  267,  268,    0,    0,    0,  269,    0,  270,    0,
    0,  190,    0,    0,  271,  272,  190,    0,    0,    0,
  190,    0,  190,    0,    0,  190,    0,  190,  190,    0,
    0,  190,    0,  190,    0,  190,  190,  190,  190,  273,
  121,  190,  276,    0,    0,    0,  190,    0,    0,  190,
  190,  190,    0,    0,  190,    0,  190,    0,  190,    0,
    0,  190,    0,  190,  190,  190,  190,    0,    0,    0,
  190,  190,  190,    0,    0,  190,  190,  190,    0,  190,
    0,    0,    0,    0,  190,  190,    0,  190,    0,  190,
  190,    0,    0,  190,    0,    0,    0,    0,    0,    0,
  472,    0,    0,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,  190,  190,  190,  250,
  251,    0,   20,    0,    0,    0,  190,    0,  252,    0,
   22,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0,   25,    0,  253,  254,   26,    0,  331,
    0,    0,    0,    0,    0,    0,    0,    0,   17,   28,
   18,   29,  255,   19,    0,   30,    0,  190,  256,    0,
  257,   20,  258,   31,   32,  259,   33,    0,    0,   22,
    0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
    0,    0,   25,    0,    0,    0,   26,    0,    0,    0,
  262,  263,  493,    0,    0,    0,    0,    0,   28,  264,
   29,   17,    0,   18,   30,    0,   19,    0,    0,    0,
    0,    0,   31,   32,   20,   33,    0,    0,  124,    0,
  558,    0,   22,    0,    0,    0,    0,    0,    0,   17,
   24,   18,    0,    0,   19,   25,    0,    0,    0,   26,
    0,    0,   20,    0,    0,  273,  358,    0,    0,    0,
   22,   28,    0,   29,    0,    0,    0,   30,   24,    0,
    0,    0,    0,   25,    0,   31,   32,   26,   33,    0,
    0,  203,    0,    0,  345,    0,    0,    0, 1168,   28,
    0,   29,    0,    0,    0,   30,    0,   17,    0,   18,
    0,    0,   19,   31,   32,  121,   33,    0,    0,  124,
   20,    0,    0,    0,    0,    0,    0,    0,   22,  345,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
    0,   25,    0,    0,    0,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
    0,    0,    0,   30,    0,    0,    0,    0,  121,    0,
    0,   31,   32,    0,   33,    0,    0,  124,    0,    0,
    0,    0,    0,    0,    0,    0,  345,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  121,  345,  345,  345,
  345,  781,    0,    0,  345,  345,    0,    0,  345,  345,
  345,  345,  345,  345,  345,  345,  345,    0,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
  345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
    0,   46,    0,   46,    0,   46,  345,   46,    0,  345,
   46,    0,   46,   46,  121,    0,   46,    0,   46,    0,
   46,   46,   46,   46,    0,    0,   46,    0,    0,    0,
    0,   46,    0,    0,   46,   46,   46,    0,    0,   46,
    0,   46,    0,   46,    0,    0,   46,    0,   46,   46,
   46,   46,    0,    0,   46,   46,   46,   46,    0,    0,
   46,   46,   46,    0,   46,    0,    0,    0,    0,   46,
   46,    0,   46,    0,   46,   46,    0,    0,   46,    0,
    0,    0,    0,    0,    0,   45,    0,    0,    0,   45,
    0,   45,    0,    0,   45,    0,   45,   45,   46,   46,
   45,    0,   45,    0,   45,   45,   45,   45,    0,    0,
   45,    0,    0,    0,    0,   45,    0,    0,   45,   45,
   45,    0,    0,   45,    0,   45,    0,   45,    0,    0,
   45,    0,   45,   45,   45,   45,    0,    0,    0,   45,
   45,   45,    0,    0,   45,   45,   45,    0,   45,    0,
    0,    0,   46,   45,   45,    0,   45,    0,   45,   45,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   45,    0,    0,    0,   45,    0,   45,    0,
    0,   45,    0,   45,   45,    0,   82,   45,    0,   45,
    0,   45,   45,   45,   45,   45,    0,   45,    0,    0,
    0,    0,   45,    0,    0,   45,   45,   45,    0,    0,
   45,    0,   45,    0,   45,    0,    0,   45,    0,   45,
   45,   45,   45,    0,    0,    0,   45,   45,   45,    0,
    0,   45,   45,   45,    0,   45,   45,    0,    0,    0,
   45,   45,    0,   45,    0,   45,   45,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
    0,    0,    0,   46,    0,   46,    0,    0,   46,    0,
   46,   46,    0,   83,   46,    0,   46,    0,   46,   46,
   46,   46,   45,    0,   46,    0,    0,    0,    0,   46,
    0,    0,   46,   46,   46,    0,    0,   46,    0,   46,
    0,   46,    0,    0,   46,    0,   46,   46,   46,   46,
    0,    0,    0,   46,   46,   46,    0,    0,   46,   46,
   46,    0,   46,   45,    0,    0,    0,   46,   46,    0,
   46,    0,   46,   46,    0,    0,   46,    0,   45,    0,
    0,    0,   45,    0,   45,    0,    0,   45,    0,   45,
   45,    0,    0,   45,    0,   45,    0,   45,   45,   45,
   45,    0,    0,   45,    0,    0,    0,    0,   45,   46,
    0,   45,   45,   45,    0,    0,   45,    0,   45,    0,
   45,    0,    0,   45,    0,   45,   45,   45,   45,    0,
    0,    0,   45,   45,   45,    0,    0,   45,   45,   45,
    0,   45,    0,    0,    0,    0,   45,   45,    0,   45,
   46,   45,   45,   45,    0,   45,    0,   45,    0,   45,
    0,    0,   45,    0,   45,   45,    0,    0,   45,    0,
   45,    0,   45,   45,   45,   45,    0,    0,   45,  218,
    0,    0,    0,   45,    0,    0,   45,   45,   45,    0,
    0,   45,    0,   45,    0,   45,    0,    0,   45,    0,
   45,   45,   45,   45,    0,    0,    0,   45,   45,   45,
    0,    0,   45,   45,   45,    0,   45,    0,    0,    0,
    0,   45,   45,    0,   45,    0,   45,   45,    0,   45,
   45,  248,   17,    0,   18,    0,    0,   19,  249,    0,
    0,    0,  250,  251,    0,   20,    0,    0,    0,    0,
    0,  252,    0,   22,  219,    0,    0,    0,    0,    0,
    0,   24,    0,    0,    0,    0,   25,    0,  253,  254,
   26,    0,  531,    0,    0,    0,    0,    0,    0,  532,
    0,    0,   28,    0,   29,  255,    0,    0,   30,    0,
    0,  256,    0,  257,    0,  258,   31,   32,  259,   33,
    0,    0,    0,    0,   45,    0,    0,  260,  261,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  262,  263,    0,    0,    0,    0,    0,
    0,    0,  264,    0,    0,  533,    0,    0,  265,  266,
  267,  268,    0,    0,    0,  269,    0,  270,    0,    0,
    0,    0,    0,  271,  272,  248,   17,    0,   18,    0,
    0,   19,  683,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,    0,    0,  252,    0,   22,  273,  463,
  275,  276,    0,    0,    0,   24,    0,    0,    0,    0,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  684,   33,    0,    0,  124,    0,    0,    0,
    0,  260,  261,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  262,  263,    0,
    0,    0,    0,    0,    0,    0,  685,    0,    0,    0,
    0,    0,  265,  266,  267,  268,    0,    0,    0,  269,
    0,  270,    0,    0,    0,    0,    0,  271,  272,  248,
   17,    0,   18,    0,    0,   19,  249,    0,    0,    0,
  250,  251,    0,   20,    0,    0,    0,    0,    0,  252,
    0,   22,  273,  363,  275,  276,    0,    0,    0,   24,
    0,    0,    0,    0,   25,    0,  253,  254,   26,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   28,    0,   29,  255,    0,    0,   30,    0,    0,  256,
    0,  257,    0,  258,   31,   32,  259,   33,    0,    0,
    0,    0,    0,    0,    0,  260,  261,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  262,  263,    0,    0,    0,  481,    0,    0,    0,
  264,    0,    0,    0,    0,    0,  265,  266,  267,  268,
    0,    0,    0,  269,    0,  270,    0,    0,    0,    0,
    0,  271,  272,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,    0,
    0,    0,    0,  252,    0,   22,  273,  363,  275,  276,
    0,    0,    0,   24,    0,    0,    0,    0,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,   33,    0,    0,  124,    0,    0,    0,    0,  260,
  261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  262,  263,    0,    0,    0,
    0,    0,    0,    0,  264,    0,    0,    0,    0,    0,
  265,  266,  267,  268,    0,    0,    0,  269,    0,  270,
    0,    0,    0,    0,    0,  271,  272,  248,   17,    0,
   18,    0,    0,   19,  249,    0,    0,    0,  250,  251,
    0,   20,    0,    0,    0,    0,    0,  252,    0,   22,
  273,  363,  275,  276,    0,    0,    0,   24,    0,    0,
    0,    0,   25,    0,  253,  254,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
   29,  255,    0,    0,   30,    0,    0,  256,    0,  257,
    0,  258,   31,   32,  259,   33,    0,    0,    0,    0,
    0,    0,    0,  260,  261,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  262,
  263,    0,    0,    0,  487,    0,    0,    0,  264,    0,
    0,    0,    0,    0,  265,  266,  267,  268,    0,    0,
    0,  269,    0,  270,    0,    0,    0,    0,    0,  271,
  272,  248,   17,    0,   18,    0,    0,   19,  249,    0,
    0,    0,  250,  251,    0,   20,    0,    0,    0,    0,
    0,  252,    0,   22,  273,  363,  275,  276,    0,    0,
    0,   24,    0,    0,    0,    0,   25,    0,  253,  254,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   28,    0,   29,  255,    0,    0,   30,    0,
    0,  256,    0,  257,    0,  258,   31,   32,  259,   33,
    0,    0,    0,    0,    0,    0,    0,  260,  261,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  262,  263,    0,    0,    0,    0,    0,
    0,    0,  264,    0,    0,    0,    0,    0,  265,  266,
  267,  268,    0,    0,    0,  269,    0,  270,    0,    0,
    0,    0,    0,  271,  272,  248,   17,    0,   18,    0,
    0,   19,  249,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,    0,    0,  252,    0,   22,  273,  363,
  275,  276,    0,    0,    0,   24,    0,    0,    0,    0,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  259,   33,    0,    0,    0,    0,    0,    0,
    0,  260,  261,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  262,  263,    0,
    0,    0,    0,    0,    0,    0,  264,    0,    0,    0,
    0,    0,  265,  266,  267,  268,    0,    0,    0,  269,
    0,  270,    0,    0,    0,    0,    0,  271,  272,  654,
  654,    0,  654,    0,    0,  654,  654,    0,    0,    0,
  654,  654,    0,  654,    0,    0,    0,    0,    0,  654,
    0,  654,  273,  463,  275,  276,    0,    0,    0,  654,
    0,    0,    0,    0,  654,    0,  654,  654,  654,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  654,    0,  654,  654,    0,    0,  654,    0,    0,  654,
    0,  654,    0,  654,  654,  654,  654,  654,    0,    0,
    0,    0,    0,    0,    0,  654,  654,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  654,  654,    0,    0,    0,    0,    0,    0,    0,
  654,    0,    0,    0,    0,    0,  654,  654,  654,  654,
    0,    0,    0,  654,    0,  654,    0,    0,    0,    0,
    0,  654,  654,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,    0,
    0,    0,    0,  252,    0,   22,  654,  654,  654,  654,
    0,    0,    0,   24,    0,    0,    0,    0,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  262,  263,    0,    0,    0,
    0,    0,    0,    0,  264,    0,    0,    0,    0,    0,
  265,  266,  267,  268,    0,    0,    0,  269,    0,  270,
    0,    0,    0,    0,    0,  271,  272,    0,    0,  689,
    0,  689,    0,  689,    0,    0,  689,    0,  689,  689,
    0,    0,  689,    0,  689,    0,  689,  689,  689,    0,
  273,  121,  689,  276,    0,    0,    0,  689,    0,    0,
  689,  689,    0,    0,    0,  689,    0,    0,    0,  689,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  689,  689,    0,  689,    0,    0,    0,  689,  689,    0,
  689,    0,    0,    0,    0,  689,  689,    0,  689,    0,
    0,  689,    0,    0,  689,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,    0,    0,    0,  689,  689,  252,    0,   22,    0,
    0,    0,    0,    0,    0,    0,   24,  689,    0,    0,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,   33,    0,    0,  124,  689,  688,
    0,  688,    0,    0,  688,    0,  688,  688,    0,    0,
  688,    0,  688,    0,  688,  688,  688,    0,  262,  263,
  688,    0,    0,    0,    0,  688,    0,  264,  688,  688,
    0,    0,    0,  688,    0,    0,    0,  688,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  688,
    0,  688,    0,    0,    0,  688,  688,    0,  688,    0,
    0,    0,    0,  688,  688,    0,  688,    0,    0,  688,
    0,    0,  688,  273,  121,    0,    0,  688,    0,  688,
    0,    0,  688,    0,  688,  688,    0,    0,  688,    0,
  688,    0,  688,  688,  688,    0,    0,    0,  688,    0,
    0,    0,    0,  688,    0,  688,  688,  688,    0,    0,
    0,  688,    0,    0,    0,  688,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  688,    0,  688,
    0,    0,    0,  688,  688,    0,  688,    0,    0,    0,
    0,  688,  688,   17,  688,   18,  688,  688,   19,    0,
  688, 1131,    0,    0,  158,    0,   20,    0,  159, 1132,
 1133,    0,    0,    0,   22,    0,    0,    0,    0, 1134,
    0,    0,   24,    0,    0,    0,    0,   25,    0,    0,
    0,   26,    0,   45,    0,   45,    0,    0,   45,    0,
    0,    0,    0,   28,    0,   29,   45,    0,    0,   30,
    0,    0, 1135,    0,   45,    0,    0,   31,   32,    0,
   33,    0,   45, 1136,    0,    0, 1137,   45,    0,    0,
    0,   45,    0,   45,  688,   45,    0,    0,    0,    0,
   45,    0,    0,   45,    0,   45,    0,    0,    0,   45,
    0,   45,   45,   45,    0,    0,   45,   45,   45, 1138,
   45,    0,    0,   45,   45,    0,    0,    0,    0,    0,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
   45,    0,    0,    0,    0,   45,    0,    0,    0,   45,
    0,   45,    0,   45,  154,    0,    0,    0,   45,    0,
  121,   45,    0,   45,   46,    0,   46,   45,    0,   46,
   45,    0,    0,    0,    0,   45,   45,   46,   45,    0,
    0,   45,    0,    0,    0,   46,    0,    0,    0,    0,
    0,    0,    0,   46,    0,    0,    0,    0,   46,    0,
   45,    0,   46,    0,   46,    0,   46,    0,    0,    0,
  154,   46,    0,    0,   46,    0,   46,   45,    0,   45,
   46,    0,   45,   46,    0,    0,    0,    0,   46,   46,
   45,   46,    0,    0,   46,    0,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,   45,    0,    0,    0,
    0,   45,    0,    0,    0,   45,    0,   45,   45,   45,
    0,    0,    0,    0,   45,    0,    0,   45,    0,   45,
    0,    0,    0,   45,    0,   17,   45,   18,    0,    0,
   19,   45,   45,    0,   45,    0,    0,   45,   20,    0,
    0,    0,   21,    0,    0,    0,   22,    0,    0,    0,
    0,   23,    0,   17,   24,   18,    0,    0,   19,   25,
    0,   46,    0,   26,   27,    0,   20,    0,    0,    0,
    0,    0,    0,    0,   22,   28,    0,   29,    0,    0,
    0,   30,   24,    0,    0,    0,    0,   25,    0,   31,
   32,   26,   33,  181,    0,   34,    0,    0,    0,    0,
  182,    0,    0,   28,    0,   29,   17,    0,   18,   30,
    0,   19,  183,  991,   45,    0,    0,   31,   32,   20,
   33,    0,    0,  217,    0,    0,    0,   22,    0,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
   25,    0,  992,    0,   26,    0,  170,    0,  170,    0,
    0,  170,    0,    0,    0,    0,   28,    0,   29,  170,
    0,    0,   30,  993,    0,    0,    0,  170,    0,    0,
   31,   32,   35,   33,    0,  170,  124,    0,    0,    0,
  170,    0,    0,    0,  170,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  170,    0,  170,  170,
  509,  170,  170,    0,  170,    0,    0,    0,    0,    0,
  170,  170,  170,  170,    0,    0,  170,    0,    0,    0,
  170,    0,    0,    0,    0,    0,    0,   17,  170,   18,
    0,    0,   19,  170,    0,    0,    0,  170,    0,    0,
   20,    0,    0,    0,    0,    0,    0, 1004,   22,  170,
    0,  170,    0,  121,    0,  170,   24,    0,    0,    0,
    0,   25,    0,  170,  170,   26,  170,    0,    0,  170,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
    0,    0,    0,   30,    0,    0,    0,    0,    0,    0,
    0,   31,   32,  170,   33,    0,    0,  124, 1004,   17,
    0,   18,    0,    0,   19,    0,   17,    0,   18,    0,
    0,   19,   20,    0,    0,    0,    0,    0,    0,   20,
   22,    0,    0,    0,    0,    0,    0,   22,   24,    0,
    0,    0,    0,   25,    0,   24,    0,   26,    0,    0,
   25,    0,    0,    0,   26,    0,  170,    0,    0,   28,
    0,   29,    0,    0,    0,   30,   28,    0,   29,    0,
    0,    0,   30,   31,   32,    0,   33,    0,    0,  203,
   31,   32,    0,   33,  121,   17,  217,   18,    0,    0,
   19,    0,    0,    0,    0,  171,    0,  171,   20,    0,
  171,    0,    0,    0,    0,    0,   22,    0,  171,    0,
    0,    0,    0,    0,   24,    0,  171,    0,    0,   25,
    0,    0,    0,   26,  171,    0,    0,    0,    0,  171,
    0,    0,    0,  171,    0,   28,    0,   29,    0,    0,
    0,   30,    0,    0,    0,  171,    0,  171,    0,   31,
   32,  171,   33,    0,    0,  124,  121,    0,    0,  171,
  171,    0,  171,  121,  170,  171,  170,    0,    0,  170,
    0,  512,    0,  512,    0,    0,  512,  170,    0,    0,
    0,    0,    0,    0,  512,  170,    0,    0,    0,    0,
    0,    0,  512,  170,    0,    0,    0,    0,  170,    0,
  512,    0,  170,    0,    0,  512,    0,    0,    0,  512,
    0,    0,    0,    0,  170,    0,  170,    0,    0,    0,
  170,  512,    0,  512,    0,    0,    0,  512,  170,  170,
    0,  170,  358,    0,  170,  512,  512,    0,  512,    0,
    0,  512,  171,  180,    0,  180,    0,    0,  180,    0,
    0,    0,    0,    0,    0,    0,  180,    0,    0,    0,
    0,    0,    0,    0,  180,    0,    0,    0,    0,    0,
    0,    0,  180,    0,    0,    0,    0,  180,    0,    0,
    0,  180,    0,    0,    0,    0,    0,   31,    0,    0,
    0,    0,    0,  180,    0,  180,    0,    0,   31,  180,
    0,    0,   31,    0,    0,    0,   31,  180,  180,   31,
  180,  170,    0,  180,    0,    0,    0,    0,  512,    0,
    0,   31,   31,    0,    0,    0,   31,   31,    0,    0,
    0,    0,   31,    0,   31,   31,   31,   31,    0,    0,
    0,    0,   31,    0,    0,    0,   31,   45,   31,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
   31,    0,   45,    0,   31,    0,   45,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   45,   45,    0,    0,    0,   45,   45,   31,   31,
  180,    0,   45,    0,   45,   45,   45,   45,    0,    0,
    0,    0,   45,    0,   45,    0,   45,    0,   45,    0,
    0,    0,    0,    0,    0,   45,    0,    0,    0,   45,
   45,    0,    0,   45,   45,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   45,   45,
    0,    0,    0,   45,   45,    0,    0,    0,   33,   45,
    0,   45,   45,   45,   45,    0,    0,    0,    0,   45,
    0,    0,    0,   45,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   45,    0,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   34,
  };
  protected static  short [] yyCheck = {             7,
  353,    7,  117,    3,  485,   46,  352,  350,  487,  626,
   65,  185,  125,  174,  125,  756,  184,   44,  853,  132,
  520,   65,  229,  328,  919,  940,  246,  520,  955,  350,
 1036,  531,  532,  620,  531,  532,   44,  999,   44, 1260,
  256,    0,    2, 1102,  756, 1104,  256,  457,  256,  268,
  256,    3,  756,  166,  256, 1114, 1018,  256, 1117,   59,
  101,  256,  256,  925,  926,  158,   66,   67,    2,  984,
  268,  256,  987,  256,  256,  256,  256,  275,  133,  841,
  367,  256,  470,  256,  256,  256,  292,  268, 1180,  133,
  256,  184,  268,  256,  256,  362,  256,   57,  256,  281,
  256,  256,  595,  256,  256,  339,  366,  600,  601,  256,
  395,  256,  853,  256, 1139,  256,  362,  399,  367,  257,
  353,  370,  407,   57,  370,   59,  256, 1152,  269,  339,
  417,  313,   66,   67,  341,  256,  753,  256,  484,   99,
 1002,  853,  926,  362,  285,   97,  293,  380,  363,  853,
  256,  385,  412,  361, 1069, 1161,  423,  365,  158,  638,
  256,  256,  256,  365, 1091,   99, 1225,  471, 1030,  364,
  170,  366,  256,  368,  408,  385,  361,  256,  363,  256,
  365,  415,  389,  926,  184,  685,  385,  370,  685,  361,
  351,  256,  399,  365,  811,  375,  958,  416,  408,  365,
 1292,  361,  365,  507,  256,  415,  414,  159,  370,  408,
  426,  926,  386,  623,  412,  421,  415,  369,  412, 1440,
  375,  364,  229,  366,  158,  368, 1061, 1089,  423,  414,
  412,  818,  417,  621,  234,  416,  170,  412,  198,  412,
  416,  412,  414,  525,  363,  375, 1030,  368,  414, 1144,
  184,  414,  204,  256,  412,  262,  412,  264, 1153,  412,
  260,  261,  355,  369,  198, 1324,  226,  412,  364,  412,
  256,  366,  368, 1332,  767,  369,  276,  262,  256,  779,
  780,    0,  779,  780,  236,  369,  238, 1030,  240,  368,
  769,  368,  226,  386, 1076, 1222,  361,  640,  257,  256,
  234,  794,  324,  796,  926,  370,  799,  256,  256,  362,
  361,  362,  297,  272,  366, 1030,  362,  276,  525,  640,
 1061,  280,  365,  256,  256,  256,  260,  261,  266,  256,
  361,  831,  256,  256,  341, 1076,  295,  392,  345,  363,
  926,  926,  276,  511,  362,  926,  346,  926,  392, 1061,
  357,  375,  370,  353,  354,  355, 1362, 1061,  361,  256,
  363,  412,  324,  322, 1076, 1187, 1281,  264,  385, 1151,
  423,  414, 1076,  256, 1269,  313,  292,  423, 1200,  338,
  366,  412,  389, 1442,  412,  363,  386,  372,  373,  337,
  412,  408,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  423,  363,  462, 1030,  902,
 1151,  904,  346,  906,  363,  415,  366, 1379,  511,  353,
  354,  355, 1320,  263,  347,  632,  433,  324,  355,   37,
 1252,  369,   40,  366,  366,  366,  436,  437, 1400, 1151,
  660,  922,  366,  339, 1030, 1030,  454, 1151,  454, 1030,
  412, 1030,  386,  336,  954,  339, 1418,  340, 1420,  342,
  276,  304,  345,  346,  280,  348,  349,  256,  523, 1402,
 1403,  526,  527,  423,  314, 1373,  483,  361,  485,  375,
  487,  415,  526,   91,  263,  368,  370,  355,  831,  385,
  497,  272,  499, 1328,  501,  276,  503,  365,  803,  280,
  272,  508,  436,  437,  366,  679,  713,  366,  366,  363,
  362,  511,  408,  520,  295,  304,  362,  256,  525,  415,
  520,  256,  338,  295,  531,  532,  830, 1460,  136,  137,
  272,  531,  532,  694,  142,  314, 1036,  256,  842,  843,
  423,  322,  336,  889,  363, 1286,  414,  368,  367,  272,
  322,  364,  269,  295,  362,  368,  730,  338,  412,  229,
  412,  423,  370,  731,  423,  423,  412,  361,  285,  304,
 1063,  365,  295,  614, 1286,  375,  368,  511,  691,  692,
  322,  692, 1286,  610,  256,  385,  679, 1328,  595,  410,
  260,  261,  896,  600,  601,  365,  603,  336,  417,  322,
  412,  340,  610,  342,  610,  766,  345,  346,  408,  348,
  349,  336,  620,  283,  620,  415, 1328,  336,  410,  304,
  339,  256,  622,  339, 1328,  632,  353,  336,  361,  368,
  336,  638, 1125,  339,  641,  339,  361,  370,  731,  385,
  367,  696,  361,  339,  369,  361,  365,  336,  367,  368,
  369,  370,  361,  380,  370,  361,  375,  361,  336,  666,
  353,  668,  408, 1139,  370,  361,  370,  339,  675,  415,
  340,  341,  361,  409,  367,  336, 1152,  339,  685,  679,
  350,  412,  339,  361,  423,  685,  412,  380,  622,  361,
  360,  367,  362,  365,  370,  367,  368,  738,  370,  361,
  361,  336,  305,  375,  361,  340,  713,  342,  715,  312,
  345,  346,  364,  348,  349,  305,  368,  307,  361,  389,
  362,  324,  312,  393,  366,  395,  368,  370,  370,  399,
  400,  731,  732,   59,  324,  376,  377,  409,  362,  365,
   66,   67,  366,  369, 1077,  679,  370, 1240, 1052,  390,
  391,   59, 1231, 1086,  761,  380,  756,  362,   66,   67,
  767,  366,  769,  368,  408,  370,  436,  437,  353,  362,
  440,  415,  779,  780,  363,  368, 1080,  256,  363,  779,
  780,  366,  367,  368,  363,  361,  362,  794,  423,  796,
  362,  256,  799,    2,  370,  380,  368,  731,  732,  361,
  362,  367,  366,  375, 1297, 1109,  370, 1111,  370, 1155,
  818,  362,  818,  354,  256,  485,  364,  368, 1435,  370,
  368,  821, 1175,  368,  365,  370,  367,  412,  305,  369,
  375,  831,  839,  833,  841,  312,  761,  368,  364,  365,
  510,  362,  368,  768,  170,  386,  387,  368,   57,  365,
   59,  367, 1469,  853,  524,  525,  367,   66,   67,  370,
  339,  367,  170, 1251,  364,  406,  366,  520,  368,  412,
 1349,  336,  365,  414,  367,  340,  417,  342,  531,  532,
  345,  346,  361,  348,  349,  366,  365,  821,  367,  368,
   99,  370,  368,  900,  336,  902,  375,  904,  340,  906,
  342, 1205,  909,  345,  346,  364,  348,  349,  234,  364,
  365,  365,  367,  368,  369,  922,  412,  925,  926,  925,
  926, 1309, 1310,  361,  924, 1313,  234,  597,  364,  599,
  366,  256,  368,  940,  260,  261,  943,  944,  608,  939,
  369,  948,  364,  361, 1423,  363,  368,  954,  955,  158,
  276,  958,  260,  261,  954,  364, 1344, 1345,  423,  368,
  364,  170,  632,  366,  368,  368,  365,  370,  276,  364,
  640,  256, 1360,  368, 1320,  184, 1455,  984, 1019,  256,
  987,  423,  366,  366, 1077,  364,  370,  370,  366,  198,
  924,  365,  370, 1086, 1002,  366, 1002,  368,  412, 1480,
 1481,  369,  364, 1391,  366,  939,  367,  361,  678,  378,
  366,  365,  368,  367,  368,  379,  370,  226,  362,  363,
  346,  375, 1030,  693, 1030,  234,  383, 1373,  354,  380,
  381,  382,  685,  364,  394,  366, 1036,  384,  346,  421,
  422,  423,  424,  713, 1348,  353,  354,  364,  364,  366,
  366,  260,  261,  388,  389,  409, 1063,  361,  368,  336,
  370, 1061, 1069,  340,  366,  342,  368,  276,  345,  346,
  364,  348,  349,  392,  393, 1075, 1076, 1077,  368,  256,
  370, 1089,  361, 1089, 1091, 1200, 1086,  293,  368,  415,
  370,  356,  357,  368,  520,  370,  368,  293,  370,  368,
  369,  412, 1102,  756, 1104,  531,  532,  415, 1108,  366,
  436,  437,  350,  351, 1114, 1122,  369, 1117, 1125, 1126,
  362,  363,  350,  351,  408,  409,  779,  780,  436,  437,
  352, 1131, 1132,  365,  361,  362,  366,  346,  408,  809,
  366, 1075, 1197, 1077,  353,  354,  355, 1493, 1155,  361,
  256, 1151, 1086,  358,  359,  375, 1163,  356,  357,  362,
 1464, 1465,  356,  357,  361,  362,  836, 1471, 1472,  358,
  359,  417,  418,  368, 1108, 1175,  366,  386,  831,  366,
  833,  293,  852,  419,  420,  425,  426,  368,  293, 1189,
 1245, 1191,  366,  256,  293,  293,    0, 1131, 1132,  375,
  853, 1208,  362,  366,  368, 1139,  415, 1262,  250, 1264,
  368,  336,  366,  255,  375, 1222,  258,  259, 1152,  417,
 1227,  425,  366,  368, 1231, 1225,  368,  436,  437,  369,
  336,  411,  339, 1240,  340,  293,  342,  354,  293,  345,
  346, 1175,  348,  349,  286,  362,  368,  256,  365,  368,
  367,  368,  922, 1187,  256, 1189,  412, 1191,  366,  685,
  930,  365,  412,  256,  361,  366, 1200,  362,  368,  386,
  387,  256,  375,  256, 1281,  362,  361,  361,  370,  411,
  366,  364,  343,  256,  366,    0, 1286, 1294, 1295,  406,
 1297,  370,  361,  370,  375,  375,  370,  414,  256,  370,
  417,  954,  511,  256,  370,  370,  343,  364,  368,  351,
  366,  370,  365, 1320,  622,  362,  368,  423, 1252,  362,
  370,  256,  370,  368, 1324,  366,  375,  361, 1328,  368,
  756,  344, 1332, 1341,  336, 1341,  335,  304,  340,  362,
  342,  368, 1349,  345,  346,  279,  348,  349, 1356,  344,
 1356,  336,  324,  779,  780,  340,  362,  342,  365,  363,
  345,  346,  370,  348,  349,  370, 1373, 1037,  412,  366,
  366,  417,  366, 1381, 1382, 1381, 1382,  375,  365,  361,
  412,  365,  412, 1036,  365,  375, 1056,  367,  365,  339,
  361,  365,  370,  362, 1402, 1403, 1402, 1403,  366,  375,
  370,  366,  366,  352,  365,  831,  732,  833, 1061,  375,
  366,  368,  367,  622,  368,  367, 1423,  364,  364,  370,
  368,  423, 1092, 1076,  732,  366,  412,  853,  366,  366,
  370,  370,  474,  412,  366,  366,  366,  412,  423,  375,
  362,  366, 1442,  362,  314,  263,    0,  375, 1455, 1102,
  365, 1104, 1460,  257, 1460,  365,  362,  261,  375,  366,
    0, 1114,  366,    0, 1117,  370,    0,  364,  272,  364,
  679,  361,  276, 1480, 1481,  361,  280,  362,  366,  283,
  362,  425,  366,  412,  361,  412, 1493,  366,  362,  362,
  366,  295,  296,  362,  412,  362,  300,  301, 1151, 1169,
  366,  425,  306,  361,  308,  309,  310,  311, 1178,  370,
  370,  370,  316,  821,  370,  370,  320,  370,  322,  362,
  366,  370,  731,  732,  362,  367,  366,  314,  954,  370,
  334,  370,  366,  370,  338,  370,  366,  370,  370,  263,
  329,  256,  257,  454,    8, 1215,  261,  226,  198, 1002,
  265, 1089,  267,  389, 1376,  270, 1130,  272,  273,  363,
  389,  276, 1413,  278,  628,  280,  281,  282,  283, 1352,
 1348,  286, 1225, 1205, 1187,  613,  291, 1472,  735,  294,
  295,  296,  735,  730,  299,  300,  301, 1030,  303, 1206,
 1367,  306, 1466,  308,  309,  310,  311, 1382,  924, 1386,
  315,  316,  317,  818, 1465,  320,  321,  322, 1381,  324,
 1036,  223,  821,  939,  329,  330,  924,  332, 1264,  334,
  335,  355, 1175,  338,  400,    0,  764,  641,  821,  532,
  889,  939,  503, 1286,  253, 1061,  427,  261,  713,  640,
  632,  683,  684,  428,  430,  429,  361,  362,  363,  431,
 1076,  432,  896,  679,  459, 1075,  371,  750, 1286,  283,
 1221, 1295, 1274, 1233, 1284, 1335, 1053, 1217, 1286, 1337,
 1362, 1324,  296, 1331,  445, 1328, 1102,  301, 1104, 1332,
  304,  445,  306,  606,  308,  309,  310,  311, 1114, 1126,
    0, 1117,  316,  225,  222,   -1,  320,  412,   -1,   -1,
  324,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,   -1,
  334,   -1,   -1,   -1,   -1,  924,   -1,   -1,  272,   -1,
   -1,   -1,  276,   -1,   -1, 1151,  280,   -1,   -1,  283,
  939,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,
   -1,  295,  296,   -1,   -1,  256,  300,  301,  375, 1075,
   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,  320, 1075,  322,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,   -1,
  334,   -1, 1108,   -1,  338,   -1,   -1,   -1,  412, 1442,
   -1,   -1,  834,  835,   -1,  837,  838,   -1,  840, 1225,
 1108,  843,  844,  845,   -1, 1131, 1132,  361,  362,  363,
 1480, 1481,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1, 1131, 1132,  336,   -1,   -1,   -1,  340,
   -1,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,   -1,   -1,   -1,  356,  357,    0,   -1,   -1,
   -1,  362,   -1,  364,   -1,  366,   -1,  368,  369,  370,
 1286,   -1,   -1, 1189,   -1, 1191, 1075, 1175, 1077,   -1,
   -1,   -1,   -1,  384,   -1,   -1,   -1, 1086,   -1,   -1,
   -1, 1189,  257, 1191,  395,   -1,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  407,  272, 1324, 1108,
   -1,  276, 1328,   -1,   -1,  280, 1332,   -1,  283,   -1,
   -1,   -1,  423,   -1,  425,   -1,   -1,   -1,   -1,   -1,
  295,  296, 1131, 1132,   -1,  300,  301,   -1,   -1,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,
   -1,  316,   -1,   -1,   -1,  320,  256,  322,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,  334,
   -1,   -1,   -1,  338,   -1,   -1, 1175,   -1,   -1,   -1,
   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,
 1189,   -1, 1191,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,  301,   -1, 1035,  304,   -1,  306,   -1,  308,  309,
  310,  311,   -1,   -1,    0,   -1,  316,   -1,   -1, 1051,
  320,   -1,   -1,   -1,  324,   -1, 1442,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  334,   -1,  336,   -1,   -1,  339,
  340,   -1,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,   -1,   -1,
   -1,  361,  362,  363,  364,  365,  366,  367,  368,  369,
  370,   -1,  372,  373,   -1,  375,  376,  377,  378,  379,
  380,  381,  382,  383,  384,   -1,  386,  387,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,   -1,   -1,
  410,   -1,  412,  256,  414,   -1,   -1,  417,  261,  262,
   -1,   -1,   -1,  423,   -1,  425,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1, 1167,   -1,   -1,   -1,    0,
  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,  301,   -1,
   -1,  304,   -1,  306,   -1,  308,  309,  310,  311,   -1,
   -1,   -1,   -1,  316,   -1,   -1,   -1,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  334,   -1,  336,   -1,   -1,  339,  340,   -1,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
   -1,  354,   -1,  356,  357,   -1,   -1,   -1,  361,  362,
   -1,  364,  365,  366,  367,  368,  369,  370,   -1,  372,
  373,   -1,  375,  376,  377,  378,  379,  380,  381,  382,
  383,  384,   -1,  386,  387,  388,  389,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,   -1,   -1,  410,   -1,  412,
  256,  414,   -1,   -1,  417,  261,  262,   -1,   -1,   -1,
  423,   -1,  425,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297,   -1,   -1,   -1,  301,   -1,   -1,  304,   -1,
  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,  320,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,
  336,   -1,   -1,  339,  340,   -1,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,   -1,   -1,
  356,  357,   -1,   -1,   -1,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,   -1,  372,  373,   -1,   -1,
  376,  377,  378,  379,  380,  256,   -1,  383,  384,   -1,
  261,  262,  388,  389,  390,  391,  392,  393,  394,  395,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  407,  283,   -1,  410,   -1,  412,    0,  414,   -1,
   -1,  417,   -1,   -1,   -1,  296,  297,  423,   -1,  425,
  301,   -1,   -1,  304,   -1,  306,   -1,  308,  309,  310,
  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  334,   -1,  336,   -1,   -1,  339,  340,
   -1,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,
  361,  362,  363,  364,  365,  366,   -1,  368,  369,  370,
   -1,  372,  373,   -1,   -1,  376,  377,  378,  379,   -1,
   -1,   -1,  383,  384,   -1,   -1,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,  261,  262,  407,   -1,   -1,  410,
   -1,  412,    0,  414,   -1,   -1,  417,   -1,   -1,   -1,
   -1,   -1,  423,   -1,  425,   -1,  283,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  301,   -1,   -1,  304,   -1,  306,
   -1,  308,  309,  310,  311,   -1,   -1,   -1,   -1,  316,
   -1,   -1,   -1,  320,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,  336,
   -1,   -1,  339,  340,   -1,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,   -1,   -1,   -1,  356,
  357,   -1,   -1,   -1,  361,  362,  363,  364,  365,  366,
   -1,  368,  369,  370,   -1,  372,  373,   -1,   -1,  376,
  377,  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,
   -1,  388,  389,  390,  391,  392,  393,  394,  395,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,  261,  262,
  407,    0,   -1,  410,   -1,  412,   -1,  414,   -1,   -1,
  417,   -1,   -1,   -1,   -1,   -1,  423,   -1,  425,   -1,
  283,   -1,   -1,   -1,   -1,  265,  266,  267,  268,  269,
  270,  271,  272,  296,  297,   -1,   -1,   -1,  301,   -1,
   -1,  304,   -1,  306,   -1,  308,  309,  310,  311,   -1,
   -1,   -1,   -1,  316,   -1,   -1,   -1,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,  334,   -1,  336,   -1,   -1,  339,  340,   -1,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,  361,  362,
   -1,  364,  365,  366,   -1,  368,  369,  370,   -1,  372,
  373,   -1,   -1,  376,  377,  378,  379,   -1,  256,   -1,
  383,  384,   -1,   -1,  262,  388,  389,  390,  391,  392,
  393,  394,  395,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  407,   -1,   -1,  410,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,
  423,   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  412,  413,  414,    0,   -1,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,   -1,   -1,   -1,   -1,   -1,  336,   -1,
   -1,  339,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,   -1,    0,   -1,  356,  357,
   -1,   -1,   -1,  361,  362,  363,  364,  365,  366,   -1,
  368,  369,  370,   -1,  372,  373,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,  407,
   -1,   -1,  410,  272,  412,  515,  414,  276,   -1,  417,
   -1,  280,   -1,   -1,  283,  423,   -1,  425,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,   -1,   -1,
   -1,  300,  301,   -1,   -1,   -1,   -1,  306,   -1,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,  320,  257,  322,   -1,   -1,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  334,   -1,  272,   -1,  338,
   -1,  276,   -1,   -1,   -1,  280,   -1,   -1,  283,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,   -1,  362,  363,  300,  301,   -1,   -1,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,
   -1,  316,   -1,   -1,   -1,  320,   -1,  322,   -1,   -1,
   -1,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,  334,
   -1,   -1,   -1,  338,   -1,   -1,  272,   -1,   -1,   -1,
  276,   -1,   -1,   -1,  280,   -1,   -1,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  363,  295,
  296,   -1,  257,   -1,  300,  301,  261,   -1,   -1,   -1,
  306,   -1,  308,  309,  310,  311,   -1,  272,   -1,   -1,
  316,  276,   -1,   -1,  320,  280,  322,   -1,  283,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,
  295,  296,  338,  257,   -1,  300,  301,  261,   -1,   -1,
   -1,  306,   -1,  308,  309,  310,  311,  256,  272,   -1,
   -1,  316,  276,  262,   -1,  320,  280,  322,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,
   -1,  295,  296,  338,   -1,   -1,  300,  301,   -1,   -1,
   -1,   -1,  306,   -1,  308,  309,  310,  311,  297,   -1,
   -1,   -1,  316,   -1,   -1,   -1,  320,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  334,   -1,   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,
   -1,  340,   -1,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  293,
   -1,   -1,   -1,  362,  363,  364,  365,  366,  367,  368,
  369,  370,   -1,  372,  373,   -1,  375,  376,  377,  378,
  379,  380,  381,  382,  383,  384,   -1,  386,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,   -1,
  256,   -1,   -1,  412,  261,  414,  262,   -1,  417,  353,
  354,   -1,   -1,   -1,  423,   -1,  425,   -1,  362,  363,
   -1,  365,   -1,  367,  368,   -1,  283,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,  380,   -1,   -1,  296,
   -1,  297,  386,  387,  301,   -1,   -1,   -1,   -1,  306,
   -1,  308,  309,  310,  311,   -1,   -1,   -1,   -1,  316,
   -1,   -1,  406,  320,   -1,   -1,   -1,  324,  412,   -1,
  414,   -1,   -1,  417,   -1,   -1,   -1,  334,   -1,   -1,
  336,   -1,   -1,   -1,  340,   -1,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,   -1,  354,   -1,
  356,  357,   -1,   -1,   -1,  361,  362,  363,  364,  365,
  366,  367,  368,  369,  370,   -1,  372,  373,   -1,  375,
  376,  377,  378,  379,  380,  381,  382,  383,  384,   -1,
  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  256,  256,   -1,  412,   -1,   -1,  414,  262,
   -1,  265,   -1,  267,   -1,   -1,  270,  423,   -1,  425,
   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,  297,  299,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  329,  330,   -1,  332,   -1,
   -1,  335,   -1,  336,   -1,   -1,   -1,  340,   -1,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
   -1,  354,   -1,  356,  357,   -1,   -1,   -1,  361,  362,
   -1,  364,  365,  366,  367,  368,  369,  370,   -1,  372,
  373,   -1,  375,  376,  377,  378,  379,  380,  381,  382,
  383,  384,   -1,  386,  387,  388,  389,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,   -1,  256,   -1,  412,  261,
   -1,  414,  262,   -1,  417,   -1,   -1,   -1,   -1,   -1,
  423,   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,   -1,   -1,  297,   -1,  301,
   -1,   -1,  304,   -1,  306,   -1,  308,  309,  310,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,  320,   -1,
   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  334,   -1,   -1,   -1,  336,   -1,   -1,   -1,
  340,   -1,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,   -1,  354,   -1,  356,  357,   -1,   -1,
  362,   -1,  362,   -1,  364,  365,  366,  367,  368,  369,
  370,   -1,  372,  373,   -1,  375,  376,  377,  378,  379,
  380,  381,  382,  383,  384,   -1,  386,  387,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,   -1,  256,
  412,   -1,  261,   -1,  414,  262,   -1,  417,   -1,   -1,
   -1,   -1,   -1,  423,   -1,  425,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  261,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
  297,   -1,  301,   -1,   -1,  283,   -1,  306,   -1,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,  316,  296,   -1,
   -1,  320,   -1,  301,   -1,  324,   -1,   -1,  306,   -1,
  308,  309,  310,  311,   -1,  334,   -1,   -1,  316,  336,
   -1,   -1,  320,  340,   -1,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  334,  354,   -1,  356,
  357,   -1,   -1,  362,   -1,  362,   -1,  364,  365,  366,
  367,  368,  369,  370,   -1,  372,  373,   -1,  375,  376,
  377,  378,  379,  380,  381,  382,  383,  384,   -1,  386,
  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,   -1,  256,  412,  261,   -1,   -1,  414,  262,   -1,
  417,   -1,   -1,   -1,   -1,   -1,  423,   -1,  425,   -1,
   -1,   -1,   -1,   -1,  412,   -1,  283,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
   -1,   -1,   -1,  297,  301,   -1,   -1,   -1,   -1,  306,
   -1,  308,  309,  310,  311,   -1,   -1,  314,   -1,  316,
   -1,   -1,   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,
   -1,   -1,  336,   -1,   -1,   -1,  340,   -1,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,  357,   -1,  362,  363,   -1,  362,   -1,
  364,  365,  366,  367,  368,  369,  370,   -1,  372,  373,
   -1,  375,  376,  377,  378,  379,  380,  381,  382,  383,
  384,   -1,  386,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,   -1,  256,   -1,  261,   -1,  263,
  414,  262,   -1,  417,   -1,   -1,   -1,   -1,   -1,  423,
   -1,  425,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,  297,  301,   -1,   -1,
   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,  320,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
  334,  262,   -1,   -1,   -1,  336,   -1,   -1,   -1,  340,
   -1,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,   -1,   -1,   -1,  356,  357,   -1,  362,  363,
   -1,  362,   -1,  364,   -1,  366,  297,  368,  369,  370,
   -1,  372,  373,   -1,  375,  376,  377,  378,  379,  380,
  381,  382,  383,  384,   -1,   -1,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  336,  407,   -1,   -1,  340,
   -1,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  423,   -1,  425,  356,  357,   -1,  256,   -1,
   -1,  362,  261,  364,  262,  366,   -1,  368,  369,  370,
   -1,  372,  373,   -1,   -1,  376,  377,  378,  379,  380,
  381,  382,  383,  384,  283,   -1,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,   -1,   -1,  296,   -1,  297,
   -1,   -1,  301,   -1,   -1,   -1,  407,  306,   -1,  308,
  309,  310,  311,   -1,   -1,  314,   -1,  316,   -1,   -1,
   -1,  320,  423,   -1,  425,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,   -1,  262,  334,   -1,   -1,  336,   -1,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,   -1,   -1,   -1,  356,  357,
   -1,   -1,   -1,  362,  362,   -1,  364,   -1,  366,  297,
  368,  369,  370,   -1,  372,  373,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,  297,
  368,  369,  370,   -1,  372,  373,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,  372,  373,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  392,  393,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  378,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,   -1,   -1,  383,  384,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
  261,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,  283,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,  296,   -1,   -1,   -1,  300,
  301,  379,   -1,   -1,   -1,  306,  384,  308,  309,  310,
  311,   -1,   -1,   -1,   -1,  316,  394,  395,  256,  320,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  407,
  261,   -1,  340,  334,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,   -1,  283,   -1,  362,   -1,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,  296,   -1,   -1,   -1,   -1,
  301,  379,   -1,   -1,   -1,  306,  384,  308,  309,  310,
  311,   -1,   -1,   -1,   -1,  316,  394,  395,  256,  320,
   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,  336,  407,
   -1,   -1,  340,  334,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,  283,  425,  356,  357,
   -1,   -1,   -1,   -1,  362,   -1,  364,   -1,  366,  296,
  368,  369,  370,   -1,  301,   -1,   -1,   -1,   -1,  306,
   -1,  308,  309,  310,  311,   -1,  384,   -1,   -1,  316,
   -1,   -1,   -1,  320,   -1,   -1,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,  261,   -1,   -1,  334,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,  283,  425,  356,  357,
   -1,  358,  359,   -1,  362,  362,  364,   -1,  366,  296,
  368,  369,  370,   -1,  301,   -1,   -1,   -1,   -1,  306,
   -1,  308,  309,  310,  311,   -1,  384,   -1,   -1,  316,
   -1,   -1,   -1,  320,   -1,   -1,  394,  395,  256,   -1,
   -1,   -1,   -1,   -1,  261,   -1,  263,  334,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,  283,  425,  356,  357,
   -1,  358,  359,   -1,  362,  362,  364,   -1,  366,  296,
  368,  369,  370,  256,  301,   -1,   -1,   -1,   -1,  306,
   -1,  308,  309,  310,  311,   -1,  384,   -1,   -1,  316,
   -1,   -1,   -1,  320,   -1,   -1,   -1,  395,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,  336,  407,
   -1,   -1,  340,   -1,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  423,   -1,  425,  356,  357,
   -1,  256,   -1,   -1,  362,  362,  364,   -1,  366,   -1,
  368,  369,  370,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  336,  261,   -1,  384,  340,   -1,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
   -1,   -1,   -1,  356,  357,   -1,  283,   -1,   -1,  362,
   -1,  364,   -1,  366,   -1,  368,  369,  370,   -1,  296,
   -1,   -1,   -1,   -1,  301,  423,   -1,  425,   -1,  306,
   -1,  308,  309,  310,  311,   -1,   -1,   -1,   -1,  316,
   -1,  336,   -1,  320,   -1,  340,   -1,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  334,   -1,   -1,
   -1,  356,  357,   -1,   -1,   -1,   -1,  362,   -1,  364,
  423,  366,  425,  368,  369,  370,  256,   -1,   -1,   -1,
   -1,  358,  359,   -1,  264,  265,  266,  267,  268,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,  284,   -1,  286,  287,  288,  289,
  290,   -1,   -1,   -1,  294,   -1,   -1,   -1,  298,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,  423,   -1,
  425,   -1,   -1,  313,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,   -1,  335,   -1,  337,   -1,   -1,
  340,  341,   -1,   -1,  261,   -1,  263,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,
   -1,  361,  362,   -1,   -1,  365,  283,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,  296,
  380,   -1,   -1,   -1,  301,   -1,  386,  387,   -1,  306,
   -1,  308,  309,  310,  311,   -1,   -1,  314,   -1,  316,
   -1,   -1,   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  411,  412,  413,  414,   -1,  416,  334,  264,  265,
  266,  267,  268,  423,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,   -1,   -1,   -1,   -1,   -1,  284,   -1,
  286,  287,  288,  289,  290,   -1,   -1,   -1,  294,   -1,
   -1,   -1,  298,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,   -1,  335,
  256,  337,   -1,   -1,  340,  341,  262,   -1,   -1,   -1,
  266,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  357,   -1,   -1,   -1,  361,  362,   -1,   -1,  365,
   -1,   -1,   -1,   -1,  370,  371,  372,  373,  374,   -1,
   -1,  297,  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,
  386,  387,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,  411,  412,  413,  414,   -1,
  416,   -1,   -1,   -1,   -1,   -1,   -1,  423,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  353,  354,   -1,
   -1,   -1,   -1,  297,   -1,   -1,  362,  363,  364,  365,
  366,  367,  368,  369,  370,   -1,  372,  373,   -1,  375,
  376,  377,  378,  379,  380,  381,  382,  383,  384,   -1,
  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,   -1,   -1,   -1,   -1,  412,   -1,  414,   -1,
  354,  417,   -1,   -1,   -1,   -1,   -1,  423,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,   -1,  372,  373,
   -1,  375,  376,  377,  378,  379,   -1,  381,  382,  383,
  384,   -1,  386,  387,  388,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,   -1,  262,   -1,   -1,  412,  266,
  414,   -1,  265,  417,  267,   -1,   -1,  270,   -1,  423,
  273,   -1,   -1,  276,   -1,  278,   -1,  280,  281,  282,
   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,  291,   -1,
  297,  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,
  303,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,  324,   -1,   -1,   -1,   -1,  329,  330,   -1,  332,
   -1,   -1,  335,   -1,   -1,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,  365,   -1,
  367,   -1,  369,  370,   -1,  372,  373,   -1,  375,  376,
  377,  378,  379,  380,  381,  382,  383,  384,   -1,  386,
  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,   -1,   -1,  256,   -1,  412,   -1,  414,   -1,  412,
  417,  264,  265,  266,  267,  268,  423,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,   -1,   -1,   -1,   -1,
   -1,  284,   -1,  286,  287,  288,  289,  290,   -1,   -1,
   -1,  294,   -1,   -1,   -1,  298,  299,   -1,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,   -1,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,  361,   -1,
   -1,   -1,  365,   -1,   -1,   -1,   -1,  370,  371,  372,
  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,
   -1,   -1,   -1,  386,  387,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  411,  412,
  413,  414,   -1,  416,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,   -1,
   -1,   -1,   -1,   -1,  284,   -1,  286,  287,  288,  289,
  290,   -1,   -1,   -1,  294,   -1,   -1,   -1,  298,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,   -1,  335,   -1,  337,   -1,   -1,
  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,
   -1,  361,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
  370,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  411,  412,  413,  414,   -1,  284,   -1,  286,  287,
  288,  289,  290,   -1,   -1,   -1,  294,   -1,   -1,   -1,
  298,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,   -1,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,
   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,  370,  371,  372,  373,  374,   -1,   -1,   -1,
  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,  411,  412,  413,  414,   -1,  284,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,   -1,   -1,   -1,   -1,   -1,  312,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,  368,   -1,   -1,  371,  372,  373,  374,   -1,
   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,
  386,  387,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,  411,  412,  413,  414,   -1,
  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,  357,   -1,   -1,   -1,  361,  362,   -1,
   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,
  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,
   -1,   -1,  386,  387,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,  411,  412,  413,
  414,   -1,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,
  302,  303,   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,
  312,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,  341,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,
   -1,   -1,   -1,   -1,  386,  387,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,  411,
  412,  413,  414,   -1,  284,   -1,  286,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,  319,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,
   -1,  361,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,  411,  412,  413,  414,   -1,  284,   -1,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,  332,   -1,   -1,  335,   -1,   -1,
   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,
  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,  411,  412,  413,  414,   -1,  284,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  357,   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,   -1,
   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,
  386,  387,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,  411,  412,  413,  414,   -1,
  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,  362,   -1,
   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,
  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,
   -1,   -1,  386,  387,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,  411,  412,  413,
  414,   -1,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,  341,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,
  362,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,
   -1,   -1,   -1,   -1,  386,  387,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,  411,
  412,  413,  414,   -1,  284,   -1,  286,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,  332,   -1,   -1,  335,   -1,   -1,   -1,   -1,
  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,  411,  412,  413,  414,   -1,  284,   -1,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,
  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,  411,  412,  413,  414,   -1,  284,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,   -1,
   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,
  386,  387,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,  411,  412,  413,  414,   -1,
  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,
  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,
   -1,   -1,  386,  387,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,  411,  412,  413,
  414,   -1,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,  341,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,
   -1,   -1,   -1,   -1,  386,  387,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,  411,
  412,  413,  414,   -1,  284,   -1,  286,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,  411,  412,  413,  414,   -1,  284,   -1,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,
  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,  411,  412,  413,  414,   -1,  284,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,  284,
   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,  256,
  386,  387,  297,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,  278,   -1,   -1,   -1,  411,  412,  284,  414,  286,
   -1,  326,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,  330,  331,  332,  371,  372,  373,  374,
   -1,  376,  377,  378,  379,  380,  381,  382,  383,   -1,
   -1,  386,  387,  388,  389,  390,  391,  392,  393,  356,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,
   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,  256,  386,
  387,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,   -1,   -1,   -1,  411,  412,  284,  414,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,
  378,   -1,  380,   -1,   -1,   -1,   -1,  256,  386,  387,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,  411,  412,  284,  414,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,
   -1,  380,   -1,   -1,   -1,   -1,  256,  386,  387,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,
   -1,   -1,  411,  412,  284,  414,  286,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
  380,   -1,   -1,   -1,   -1,  256,  386,  387,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,
   -1,  411,  412,  284,  414,  286,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,
   -1,   -1,   -1,   -1,  256,  386,  387,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,
  411,  412,  284,  414,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,
   -1,   -1,   -1,  256,  386,  387,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  411,
  412,  284,  414,  286,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,  332,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,  372,
  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,
   -1,   -1,  256,  386,  387,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  411,  412,
  284,  414,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,
  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,
   -1,  256,  386,  387,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,  278,   -1,   -1,   -1,  411,  412,  284,
  414,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,
   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,
  256,  386,  387,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,   -1,   -1,   -1,  411,  412,  284,  414,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,   -1,
   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,  256,
  386,  387,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,  278,   -1,   -1,   -1,  411,  412,  284,  414,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,
   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,  256,  386,
  387,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,   -1,   -1,   -1,  411,  412,  284,  414,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,
  378,   -1,  380,   -1,   -1,   -1,   -1,  256,  386,  387,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,  411,  412,  284,  414,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,
   -1,  380,   -1,   -1,   -1,   -1,  256,  386,  387,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,
   -1,   -1,  411,  412,  284,  414,  286,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
  380,   -1,   -1,   -1,   -1,  256,  386,  387,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,
   -1,  411,  412,  284,  414,  286,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,
   -1,   -1,   -1,   -1,  256,  386,  387,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,
  411,  412,  284,  414,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,
   -1,   -1,   -1,  256,  386,  387,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  411,
  412,  284,  414,  286,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,  332,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,  372,
  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,
   -1,   -1,  256,  386,  387,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  411,  412,
  284,  414,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,
  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,
   -1,  256,  386,  387,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,  278,   -1,   -1,   -1,  411,  412,  284,
  414,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,
   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,
  256,  386,  387,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,   -1,   -1,   -1,  411,  412,  284,  414,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,   -1,
   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,  256,
  386,  387,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,  278,   -1,   -1,   -1,  411,  412,  284,  414,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,
   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,  256,  386,
  387,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,   -1,   -1,   -1,  411,  412,  284,  414,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,
   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,
  378,   -1,  380,   -1,   -1,   -1,   -1,  256,  386,  387,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,  411,  412,  284,  414,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,
   -1,  380,   -1,   -1,   -1,   -1,  256,  386,  387,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,
   -1,   -1,  411,  412,  284,  414,  286,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,
  380,   -1,   -1,   -1,   -1,  256,  386,  387,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,
   -1,  411,  412,  284,  414,  286,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,
   -1,   -1,   -1,   -1,  256,  386,  387,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,
  411,  412,  284,  414,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,
  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,
   -1,  256,   -1,   -1,  386,  387,  261,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
   -1,  276,   -1,  278,   -1,  280,  281,  282,  283,  411,
  412,  286,  414,   -1,   -1,   -1,  291,   -1,   -1,  294,
  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,
  315,  316,  317,   -1,   -1,  320,  321,  322,   -1,  324,
   -1,   -1,   -1,   -1,  329,  330,   -1,  332,   -1,  334,
  335,   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,  361,  362,  363,  275,
  276,   -1,  278,   -1,   -1,   -1,  371,   -1,  284,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,  315,
  267,  317,  318,  270,   -1,  321,   -1,  412,  324,   -1,
  326,  278,  328,  329,  330,  331,  332,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,   -1,  299,   -1,   -1,   -1,  303,   -1,   -1,   -1,
  356,  357,  256,   -1,   -1,   -1,   -1,   -1,  315,  365,
  317,  265,   -1,  267,  321,   -1,  270,   -1,   -1,   -1,
   -1,   -1,  329,  330,  278,  332,   -1,   -1,  335,   -1,
  256,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,  265,
  294,  267,   -1,   -1,  270,  299,   -1,   -1,   -1,  303,
   -1,   -1,  278,   -1,   -1,  411,  412,   -1,   -1,   -1,
  286,  315,   -1,  317,   -1,   -1,   -1,  321,  294,   -1,
   -1,   -1,   -1,  299,   -1,  329,  330,  303,  332,   -1,
   -1,  335,   -1,   -1,  262,   -1,   -1,   -1,  256,  315,
   -1,  317,   -1,   -1,   -1,  321,   -1,  265,   -1,  267,
   -1,   -1,  270,  329,  330,  412,  332,   -1,   -1,  335,
  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,  297,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,  299,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,  412,   -1,
   -1,  329,  330,   -1,  332,   -1,   -1,  335,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  354,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  412,  365,  366,  367,
  368,  369,   -1,   -1,  372,  373,   -1,   -1,  376,  377,
  378,  379,  380,  381,  382,  383,  384,   -1,  386,  387,
  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
   -1,  261,   -1,  263,   -1,  265,  414,  267,   -1,  417,
  270,   -1,  272,  273,  412,   -1,  276,   -1,  278,   -1,
  280,  281,  282,  283,   -1,   -1,  286,   -1,   -1,   -1,
   -1,  291,   -1,   -1,  294,  295,  296,   -1,   -1,  299,
   -1,  301,   -1,  303,   -1,   -1,  306,   -1,  308,  309,
  310,  311,   -1,   -1,  314,  315,  316,  317,   -1,   -1,
  320,  321,  322,   -1,  324,   -1,   -1,   -1,   -1,  329,
  330,   -1,  332,   -1,  334,  335,   -1,   -1,  338,   -1,
   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,  358,  359,
  276,   -1,  278,   -1,  280,  281,  282,  283,   -1,   -1,
  286,   -1,   -1,   -1,   -1,  291,   -1,   -1,  294,  295,
  296,   -1,   -1,  299,   -1,  301,   -1,  303,   -1,   -1,
  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,  315,
  316,  317,   -1,   -1,  320,  321,  322,   -1,  324,   -1,
   -1,   -1,  412,  329,  330,   -1,  332,   -1,  334,  335,
   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  362,  276,   -1,  278,
   -1,  280,  281,  282,  283,  371,   -1,  286,   -1,   -1,
   -1,   -1,  291,   -1,   -1,  294,  295,  296,   -1,   -1,
  299,   -1,  301,   -1,  303,   -1,   -1,  306,   -1,  308,
  309,  310,  311,   -1,   -1,   -1,  315,  316,  317,   -1,
   -1,  320,  321,  322,   -1,  324,  412,   -1,   -1,   -1,
  329,  330,   -1,  332,   -1,  334,  335,   -1,   -1,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,
   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  273,   -1,  362,  276,   -1,  278,   -1,  280,  281,
  282,  283,  371,   -1,  286,   -1,   -1,   -1,   -1,  291,
   -1,   -1,  294,  295,  296,   -1,   -1,  299,   -1,  301,
   -1,  303,   -1,   -1,  306,   -1,  308,  309,  310,  311,
   -1,   -1,   -1,  315,  316,  317,   -1,   -1,  320,  321,
  322,   -1,  324,  412,   -1,   -1,   -1,  329,  330,   -1,
  332,   -1,  334,  335,   -1,   -1,  338,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,   -1,  276,   -1,  278,   -1,  280,  281,  282,
  283,   -1,   -1,  286,   -1,   -1,   -1,   -1,  291,  371,
   -1,  294,  295,  296,   -1,   -1,  299,   -1,  301,   -1,
  303,   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,
   -1,   -1,  315,  316,  317,   -1,   -1,  320,  321,  322,
   -1,  324,   -1,   -1,   -1,   -1,  329,  330,   -1,  332,
  412,  334,  335,  261,   -1,  338,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,   -1,  276,   -1,
  278,   -1,  280,  281,  282,  283,   -1,   -1,  286,  362,
   -1,   -1,   -1,  291,   -1,   -1,  294,  295,  296,   -1,
   -1,  299,   -1,  301,   -1,  303,   -1,   -1,  306,   -1,
  308,  309,  310,  311,   -1,   -1,   -1,  315,  316,  317,
   -1,   -1,  320,  321,  322,   -1,  324,   -1,   -1,   -1,
   -1,  329,  330,   -1,  332,   -1,  334,  335,   -1,  412,
  338,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,   -1,
   -1,  284,   -1,  286,  362,   -1,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,
  303,   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,  312,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,  332,
   -1,   -1,   -1,   -1,  412,   -1,   -1,  340,  341,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,   -1,  368,   -1,   -1,  371,  372,
  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,
   -1,   -1,   -1,  386,  387,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,   -1,   -1,  284,   -1,  286,  411,  412,
  413,  414,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,  332,   -1,   -1,  335,   -1,   -1,   -1,
   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,
   -1,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,  278,   -1,   -1,   -1,   -1,   -1,  284,
   -1,  286,  411,  412,  413,  414,   -1,   -1,   -1,  294,
   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,  357,   -1,   -1,   -1,  361,   -1,   -1,   -1,
  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,
   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,
   -1,  386,  387,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,
   -1,   -1,   -1,  284,   -1,  286,  411,  412,  413,  414,
   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,  332,   -1,   -1,  335,   -1,   -1,   -1,   -1,  340,
  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,
   -1,   -1,   -1,   -1,   -1,  386,  387,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,  278,   -1,   -1,   -1,   -1,   -1,  284,   -1,  286,
  411,  412,  413,  414,   -1,   -1,   -1,  294,   -1,   -1,
   -1,   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,  330,  331,  332,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,
  357,   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,  371,  372,  373,  374,   -1,   -1,
   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,   -1,  386,
  387,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,   -1,
   -1,  284,   -1,  286,  411,  412,  413,  414,   -1,   -1,
   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,  332,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,  341,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,  371,  372,
  373,  374,   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,
   -1,   -1,   -1,  386,  387,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,   -1,   -1,  284,   -1,  286,  411,  412,
  413,  414,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,   -1,   -1,   -1,  378,
   -1,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,  278,   -1,   -1,   -1,   -1,   -1,  284,
   -1,  286,  411,  412,  413,  414,   -1,   -1,   -1,  294,
   -1,   -1,   -1,   -1,  299,   -1,  301,  302,  303,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,  330,  331,  332,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  340,  341,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,  374,
   -1,   -1,   -1,  378,   -1,  380,   -1,   -1,   -1,   -1,
   -1,  386,  387,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,
   -1,   -1,   -1,  284,   -1,  286,  411,  412,  413,  414,
   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  356,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
  371,  372,  373,  374,   -1,   -1,   -1,  378,   -1,  380,
   -1,   -1,   -1,   -1,   -1,  386,  387,   -1,   -1,  263,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,   -1,  276,   -1,  278,   -1,  280,  281,  282,   -1,
  411,  412,  286,  414,   -1,   -1,   -1,  291,   -1,   -1,
  294,  295,   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  315,   -1,  317,   -1,   -1,   -1,  321,  322,   -1,
  324,   -1,   -1,   -1,   -1,  329,  330,   -1,  332,   -1,
   -1,  335,   -1,   -1,  338,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,   -1,   -1,   -1,  358,  359,  284,   -1,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,  371,   -1,   -1,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,  332,   -1,   -1,  335,  412,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,   -1,
  276,   -1,  278,   -1,  280,  281,  282,   -1,  356,  357,
  286,   -1,   -1,   -1,   -1,  291,   -1,  365,  294,  295,
   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,   -1,   -1,   -1,  321,  322,   -1,  324,   -1,
   -1,   -1,   -1,  329,  330,   -1,  332,   -1,   -1,  335,
   -1,   -1,  338,  411,  412,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,  273,   -1,   -1,  276,   -1,
  278,   -1,  280,  281,  282,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,  291,   -1,  371,  294,  295,   -1,   -1,
   -1,  299,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
   -1,   -1,   -1,  321,  322,   -1,  324,   -1,   -1,   -1,
   -1,  329,  330,  265,  332,  267,  412,  335,  270,   -1,
  338,  273,   -1,   -1,  276,   -1,  278,   -1,  280,  281,
  282,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,  291,
   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,
   -1,  303,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
   -1,   -1,   -1,  315,   -1,  317,  278,   -1,   -1,  321,
   -1,   -1,  324,   -1,  286,   -1,   -1,  329,  330,   -1,
  332,   -1,  294,  335,   -1,   -1,  338,  299,   -1,   -1,
   -1,  303,   -1,  305,  412,  307,   -1,   -1,   -1,   -1,
  312,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,
   -1,  265,  324,  267,   -1,   -1,  270,  329,  330,  371,
  332,   -1,   -1,  335,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,
   -1,  305,   -1,  307,  366,   -1,   -1,   -1,  312,   -1,
  412,  315,   -1,  317,  265,   -1,  267,  321,   -1,  270,
  324,   -1,   -1,   -1,   -1,  329,  330,  278,  332,   -1,
   -1,  335,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,
  412,   -1,  303,   -1,  305,   -1,  307,   -1,   -1,   -1,
  364,  312,   -1,   -1,  315,   -1,  317,  265,   -1,  267,
  321,   -1,  270,  324,   -1,   -1,   -1,   -1,  329,  330,
  278,  332,   -1,   -1,  335,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
   -1,  299,   -1,   -1,   -1,  303,   -1,  305,  412,  307,
   -1,   -1,   -1,   -1,  312,   -1,   -1,  315,   -1,  317,
   -1,   -1,   -1,  321,   -1,  265,  324,  267,   -1,   -1,
  270,  329,  330,   -1,  332,   -1,   -1,  335,  278,   -1,
   -1,   -1,  282,   -1,   -1,   -1,  286,   -1,   -1,   -1,
   -1,  291,   -1,  265,  294,  267,   -1,   -1,  270,  299,
   -1,  412,   -1,  303,  304,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,  315,   -1,  317,   -1,   -1,
   -1,  321,  294,   -1,   -1,   -1,   -1,  299,   -1,  329,
  330,  303,  332,  305,   -1,  335,   -1,   -1,   -1,   -1,
  312,   -1,   -1,  315,   -1,  317,  265,   -1,  267,  321,
   -1,  270,  324,  272,  412,   -1,   -1,  329,  330,  278,
  332,   -1,   -1,  335,   -1,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,   -1,  301,   -1,  303,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,   -1,   -1,   -1,  315,   -1,  317,  278,
   -1,   -1,  321,  322,   -1,   -1,   -1,  286,   -1,   -1,
  329,  330,  412,  332,   -1,  294,  335,   -1,   -1,   -1,
  299,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  265,
  412,  267,  321,   -1,  270,   -1,   -1,   -1,   -1,   -1,
  329,  330,  278,  332,   -1,   -1,  335,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,  265,  294,  267,
   -1,   -1,  270,  299,   -1,   -1,   -1,  303,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,   -1,  366,  286,  315,
   -1,  317,   -1,  412,   -1,  321,  294,   -1,   -1,   -1,
   -1,  299,   -1,  329,  330,  303,  332,   -1,   -1,  335,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  329,  330,  412,  332,   -1,   -1,  335,  364,  265,
   -1,  267,   -1,   -1,  270,   -1,  265,   -1,  267,   -1,
   -1,  270,  278,   -1,   -1,   -1,   -1,   -1,   -1,  278,
  286,   -1,   -1,   -1,   -1,   -1,   -1,  286,  294,   -1,
   -1,   -1,   -1,  299,   -1,  294,   -1,  303,   -1,   -1,
  299,   -1,   -1,   -1,  303,   -1,  412,   -1,   -1,  315,
   -1,  317,   -1,   -1,   -1,  321,  315,   -1,  317,   -1,
   -1,   -1,  321,  329,  330,   -1,  332,   -1,   -1,  335,
  329,  330,   -1,  332,  412,  265,  335,  267,   -1,   -1,
  270,   -1,   -1,   -1,   -1,  265,   -1,  267,  278,   -1,
  270,   -1,   -1,   -1,   -1,   -1,  286,   -1,  278,   -1,
   -1,   -1,   -1,   -1,  294,   -1,  286,   -1,   -1,  299,
   -1,   -1,   -1,  303,  294,   -1,   -1,   -1,   -1,  299,
   -1,   -1,   -1,  303,   -1,  315,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  315,   -1,  317,   -1,  329,
  330,  321,  332,   -1,   -1,  335,  412,   -1,   -1,  329,
  330,   -1,  332,  412,  265,  335,  267,   -1,   -1,  270,
   -1,  265,   -1,  267,   -1,   -1,  270,  278,   -1,   -1,
   -1,   -1,   -1,   -1,  278,  286,   -1,   -1,   -1,   -1,
   -1,   -1,  286,  294,   -1,   -1,   -1,   -1,  299,   -1,
  294,   -1,  303,   -1,   -1,  299,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,
  321,  315,   -1,  317,   -1,   -1,   -1,  321,  329,  330,
   -1,  332,  412,   -1,  335,  329,  330,   -1,  332,   -1,
   -1,  335,  412,  265,   -1,  267,   -1,   -1,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,
   -1,  303,   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,   -1,   -1,  272,  321,
   -1,   -1,  276,   -1,   -1,   -1,  280,  329,  330,  283,
  332,  412,   -1,  335,   -1,   -1,   -1,   -1,  412,   -1,
   -1,  295,  296,   -1,   -1,   -1,  300,  301,   -1,   -1,
   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,  320,  261,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,   -1,
  334,   -1,  276,   -1,  338,   -1,  280,   -1,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,   -1,   -1,   -1,  300,  301,  362,  363,
  412,   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,
   -1,   -1,  316,   -1,  261,   -1,  320,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,   -1,  276,
  334,   -1,   -1,  280,  338,   -1,  283,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,
   -1,   -1,   -1,  300,  301,   -1,   -1,   -1,  362,  306,
   -1,  308,  309,  310,  311,   -1,   -1,   -1,   -1,  316,
   -1,   -1,   -1,  320,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,
   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,
  };

#line 6465 "E:\Projects\VSharp\VSC\\VSharpParser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclarationInfo {
	public readonly VSC.TypeSystem.Resolver.OperatorType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (128, expr.Location, "Expecting `;'");
	} else {
			report.Error (135, expr.Location, "Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement");
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (136, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, VSC.TypeSystem.ParameterModifier mod)
{
	report.Error (137, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (138, loc, "Type expected");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (139, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (140, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (141, loc, "You must provide an initializer in a fixed or using statement declaration");
}


void push_current_container (TypeDeclaration tce)
{	
	++lexer.parsing_declaration;
	current_container = tce;
	current_type = tce;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDeclaration;

	return retval;
}





string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (VSC.TypeSystem.Resolver.OperatorType op)
{
	switch (op) {
		
	case VSC.TypeSystem.Resolver.OperatorType.LogicalNot: 
	case VSC.TypeSystem.Resolver.OperatorType.OnesComplement: 
	case VSC.TypeSystem.Resolver.OperatorType.Increment:
	case VSC.TypeSystem.Resolver.OperatorType.Decrement:
	case VSC.TypeSystem.Resolver.OperatorType.True: 
	case VSC.TypeSystem.Resolver.OperatorType.False: 
	case VSC.TypeSystem.Resolver.OperatorType.UnaryPlus: 
	case VSC.TypeSystem.Resolver.OperatorType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (142, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public VSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public VSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = file.RootPackage.DefaultType;
	current_package = file.RootPackage;
	file.TopLevelTypeDefinitions.Add(current_container);
	current_container.UnresolvedFile = file;
	//this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.Verbose ? 1 : 0;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (143, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (144, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;
		
	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

/*void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}
	current_anonymous_method.IsAsync = isAsync;
	
	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}
*/
/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
/*AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}
*/
void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (145, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.SUPER:
		return "super";
	case Token.LEAVE:
		return "leave";
	case Token.CASE:
		return "case";
	case Token.EXCEPT:
		return "except";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.PERSIST:
		return "persist";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IMPORT:
		return "import";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.SYNC:
		return "sync";
	case Token.PACKAGE:
		return "package";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.SELF:
		return "self";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
	case Token.WHEN:
		return "when";
	case Token.INTERPOLATED_STRING_END:
		return "}";
	case Token.INTERPOLATED_STRING:
		return "${";

	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int LEAVE = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int EXCEPT = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int PERSIST = 274;
  public const int DEFAULT = 275;
  public const int DELEGATE = 276;
  public const int DO = 277;
  public const int DOUBLE = 278;
  public const int ELSE = 279;
  public const int ENUM = 280;
  public const int EVENT = 281;
  public const int EXPLICIT = 282;
  public const int EXTERN = 283;
  public const int FALSE = 284;
  public const int FINALLY = 285;
  public const int FLOAT = 286;
  public const int FOR = 287;
  public const int FOREACH = 288;
  public const int GOTO = 289;
  public const int IF = 290;
  public const int IMPLICIT = 291;
  public const int IMPORT = 292;
  public const int IN = 293;
  public const int INT = 294;
  public const int INTERFACE = 295;
  public const int INTERNAL = 296;
  public const int IS = 297;
  public const int SYNC = 298;
  public const int LONG = 299;
  public const int PACKAGE = 300;
  public const int NEW = 301;
  public const int NULL = 302;
  public const int OBJECT = 303;
  public const int OPERATOR = 304;
  public const int OUT = 305;
  public const int OVERRIDE = 306;
  public const int PARAMS = 307;
  public const int PRIVATE = 308;
  public const int PROTECTED = 309;
  public const int PUBLIC = 310;
  public const int READONLY = 311;
  public const int REF = 312;
  public const int RETURN = 313;
  public const int REMOVE = 314;
  public const int SBYTE = 315;
  public const int SEALED = 316;
  public const int SHORT = 317;
  public const int SIZEOF = 318;
  public const int STACKALLOC = 319;
  public const int STATIC = 320;
  public const int STRING = 321;
  public const int STRUCT = 322;
  public const int SWITCH = 323;
  public const int SELF = 324;
  public const int THROW = 325;
  public const int TRUE = 326;
  public const int TRY = 327;
  public const int TYPEOF = 328;
  public const int UINT = 329;
  public const int ULONG = 330;
  public const int UNCHECKED = 331;
  public const int USHORT = 332;
  public const int USING = 333;
  public const int VIRTUAL = 334;
  public const int VOID = 335;
  public const int WHERE = 336;
  public const int WHILE = 337;
  public const int PARTIAL = 338;
  public const int ARROW = 339;
  public const int FROM = 340;
  public const int FROM_FIRST = 341;
  public const int JOIN = 342;
  public const int ON = 343;
  public const int EQUALS = 344;
  public const int SELECT = 345;
  public const int GROUP = 346;
  public const int BY = 347;
  public const int LET = 348;
  public const int ORDERBY = 349;
  public const int ASCENDING = 350;
  public const int DESCENDING = 351;
  public const int INTO = 352;
  public const int INTERR_NULLABLE = 353;
  public const int INTERR_OPERATOR = 354;
  public const int WHEN = 355;
  public const int INTERPOLATED_STRING = 356;
  public const int INTERPOLATED_STRING_END = 357;
  public const int GET = 358;
  public const int SET = 359;
  public const int LAST_KEYWORD = 360;
  public const int OPEN_BRACE = 361;
  public const int CLOSE_BRACE = 362;
  public const int OPEN_BRACKET = 363;
  public const int CLOSE_BRACKET = 364;
  public const int OPEN_PARENS = 365;
  public const int CLOSE_PARENS = 366;
  public const int DOT = 367;
  public const int COMMA = 368;
  public const int COLON = 369;
  public const int SEMICOLON = 370;
  public const int TILDE = 371;
  public const int PLUS = 372;
  public const int MINUS = 373;
  public const int BANG = 374;
  public const int ASSIGN = 375;
  public const int OP_LT = 376;
  public const int OP_GT = 377;
  public const int BITWISE_AND = 378;
  public const int BITWISE_OR = 379;
  public const int STAR = 380;
  public const int PERCENT = 381;
  public const int DIV = 382;
  public const int CARRET = 383;
  public const int INTERR = 384;
  public const int DOUBLE_COLON = 385;
  public const int OP_INC = 386;
  public const int OP_DEC = 387;
  public const int OP_SHIFT_LEFT = 388;
  public const int OP_SHIFT_RIGHT = 389;
  public const int OP_LE = 390;
  public const int OP_GE = 391;
  public const int OP_EQ = 392;
  public const int OP_NE = 393;
  public const int OP_AND = 394;
  public const int OP_OR = 395;
  public const int OP_MULT_ASSIGN = 396;
  public const int OP_DIV_ASSIGN = 397;
  public const int OP_MOD_ASSIGN = 398;
  public const int OP_ADD_ASSIGN = 399;
  public const int OP_SUB_ASSIGN = 400;
  public const int OP_SHIFT_LEFT_ASSIGN = 401;
  public const int OP_SHIFT_RIGHT_ASSIGN = 402;
  public const int OP_AND_ASSIGN = 403;
  public const int OP_XOR_ASSIGN = 404;
  public const int OP_OR_ASSIGN = 405;
  public const int OP_PTR = 406;
  public const int OP_COALESCING = 407;
  public const int OP_GENERICS_LT = 408;
  public const int OP_GENERICS_LT_DECL = 409;
  public const int OP_GENERICS_GT = 410;
  public const int LITERAL = 411;
  public const int IDENTIFIER = 412;
  public const int OPEN_PARENS_LAMBDA = 413;
  public const int OPEN_PARENS_CAST = 414;
  public const int GENERIC_DIMENSION = 415;
  public const int DEFAULT_COLON = 416;
  public const int OPEN_BRACKET_EXPR = 417;
  public const int EVAL_STATEMENT_PARSER = 418;
  public const int EVAL_COMPILATION_UNIT_PARSER = 419;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 420;
  public const int DOC_SEE = 421;
  public const int GENERATE_COMPLETION = 422;
  public const int COMPLETE_COMPLETION = 423;
  public const int UMINUS = 424;
  public const int close_brace_or_complete_completion = 425;
  public const int pattern_expr = 426;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
