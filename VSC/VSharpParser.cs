// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "E:\Projects\VSharp\Research\\VSharpParser.jay"
using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using VSC.AST;
using VSC.Base;
using VSC.Context;
using VSC.TypeSystem;
using VSC.TypeSystem.Implementation;
using VSC.TypeSystem.Resolver;
namespace VSC
{
	/// <summary>
	///   V# Parser
	/// </summary>
	public class VSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			Self	= 1 << 3,
			Params	= 1 << 4,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | Self | Params | DefaultValue,
			PrimaryConstructor = Ref | Out | Params | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		PackageContainer current_package;
	    TypeContainer current_container;
		TypeDeclaration current_type;
		SymbolKind type_parameter_symbol_kind = SymbolKind.TypeDefinition;
		FieldDeclaration current_field;
		PropertyOrIndexer current_property;
		EventDeclaration current_event;
	
	
		// for method type parameter
		bool is_inheritance_impl = false;
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariable current_variable;

		DelegateDeclaration   current_delegate;
		
		//AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;


		bool? interactive_async;
		


		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		Stack<Location> opt_intoStack = new Stack<Location> ();

		bool HadAttributeParens;
		List<Location> attributeArgumentCommas = new List<Location> ();
		List<Location> parameterListCommas = new List<Location> ();
		Stack<Location> location_stack;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 4;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_import_directives",
    "outer_declaration : opt_import_directives package_or_type_declarations opt_attributes",
    "outer_declaration : opt_import_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "import_directives : import_directive",
    "import_directives : import_directives import_directive",
    "import_directive : import_package",
    "import_package : USING package_or_type_expr SEMICOLON",
    "import_package : USING IDENTIFIER ASSIGN package_or_type_expr SEMICOLON",
    "import_package : USING error",
    "opt_static :",
    "opt_static : STATIC",
    "$$1 :",
    "$$2 :",
    "package_declaration : opt_attributes PACKAGE package_name $$1 OPEN_BRACE $$2 opt_import_directives opt_package_or_type_declarations CLOSE_BRACE opt_semicolon_error",
    "package_declaration : opt_attributes PACKAGE package_name",
    "opt_semicolon_error :",
    "opt_semicolon_error : SEMICOLON",
    "opt_semicolon_error : error",
    "package_name : IDENTIFIER",
    "package_name : package_name DOT IDENTIFIER",
    "package_name : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "opt_import_directives :",
    "opt_import_directives : import_directives",
    "opt_package_or_type_declarations :",
    "opt_package_or_type_declarations : package_or_type_declarations",
    "package_or_type_declarations : package_or_type_declaration",
    "package_or_type_declarations : package_or_type_declarations package_or_type_declaration",
    "package_or_type_declaration : type_declaration",
    "package_or_type_declaration : package_declaration",
    "package_or_type_declaration : attribute_sections CLOSE_BRACE",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$3 :",
    "attribute_section : OPEN_BRACKET $$3 attribute_section_cont",
    "$$4 :",
    "attribute_section_cont : attribute_target COLON $$4 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : IDENTIFIER error",
    "attribute_section_cont : error",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$5 :",
    "attribute : attribute_name $$5 opt_attribute_arguments",
    "attribute_name : package_or_type_expr",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "positional_or_named_argument : error",
    "$$6 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$6 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier named_argument_expr",
    "named_argument_expr : expression_or_error",
    "named_argument_expr : declaration_expression",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : primary_constructor_body",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : attributes_without_members",
    "class_member_declaration : incomplete_member",
    "class_member_declaration : error",
    "$$7 :",
    "primary_constructor_body : OPEN_BRACE $$7 opt_statement_list block_end",
    "$$8 :",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_primary_parameters opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$13 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
    "constant_declaration : opt_attributes opt_modifiers CONST type error",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$14 :",
    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$15 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$15 opt_field_initializer opt_field_declarators SEMICOLON",
    "opt_field_initializer :",
    "$$16 :",
    "opt_field_initializer : ASSIGN $$16 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$17 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$17 variable_initializer",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$18 :",
    "method_declaration : method_header $$18 method_body_expression_block",
    "$$19 :",
    "$$20 :",
    "$$21 :",
    "method_header : opt_attributes opt_modifiers member_type $$19 method_declaration_name OPEN_PARENS $$20 opt_formal_parameter_list CLOSE_PARENS $$21 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
    "method_body_expression_block : method_body",
    "method_body_expression_block : expression_block",
    "method_body : block",
    "method_body : SEMICOLON",
    "$$22 :",
    "expression_block : ARROW $$22 expression SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : attribute_sections error",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$23 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type identifier_inside_body ASSIGN $$23 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : SELF",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "$$24 :",
    "$$25 :",
    "$$26 :",
    "$$27 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$24 OPEN_BRACE $$25 accessor_declarations $$26 CLOSE_BRACE $$27 opt_property_initializer",
    "$$28 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$28 expression_block",
    "opt_property_initializer :",
    "$$29 :",
    "opt_property_initializer : ASSIGN $$29 property_initializer SEMICOLON",
    "property_initializer : expression",
    "property_initializer : array_initializer",
    "$$30 :",
    "$$31 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$30 opt_formal_parameter_list CLOSE_BRACKET $$31 indexer_body",
    "indexer_body : OPEN_BRACE accessor_declarations CLOSE_BRACE",
    "indexer_body : expression_block",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$32 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$32 accessor_body",
    "$$33 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$33 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$34 :",
    "$$35 :",
    "$$36 :",
    "$$37 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$34 type_declaration_name $$35 opt_class_base opt_type_parameter_constraints_clauses $$36 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$37 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$38 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$38 method_body_expression_block",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$39 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$39 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "overloadable_operator : IS",
    "$$40 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
    "$$41 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$42 :",
    "$$43 :",
    "constructor_declarator : opt_attributes opt_modifiers SELF $$42 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$43 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$44 :",
    "constructor_initializer : COLON SUPER OPEN_PARENS $$44 opt_argument_list CLOSE_PARENS",
    "$$45 :",
    "constructor_initializer : COLON SELF OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : COLON error",
    "constructor_initializer : error",
    "$$46 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$46 SELF OPEN_PARENS CLOSE_PARENS method_body",
    "$$47 :",
    "$$48 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$47 event_accessor_declarations $$48 CLOSE_BRACE",
    "event_declaration : opt_attributes opt_modifiers EVENT type error",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$49 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$49 event_accessor_block",
    "$$50 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$50 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "attributes_without_members : attribute_sections CLOSE_BRACE",
    "incomplete_member : opt_attributes opt_modifiers member_type CLOSE_BRACE",
    "$$51 :",
    "$$52 :",
    "$$53 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$51 OPEN_BRACE $$52 opt_enum_member_declarations $$53 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$54 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$54 ASSIGN constant_expression",
    "enum_member_declaration : opt_attributes IDENTIFIER error",
    "enum_member_declaration : attributes_without_members",
    "$$55 :",
    "$$56 :",
    "$$57 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$55 opt_formal_parameter_list CLOSE_PARENS $$56 opt_type_parameter_constraints_clauses $$57 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "package_or_type_expr : member_name",
    "package_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "package_or_type_expr : qualified_alias_member IDENTIFIER generic_dimension",
    "member_name : simple_name_expr",
    "member_name : package_or_type_expr DOT IDENTIFIER opt_type_argument_list",
    "member_name : package_or_type_expr DOT IDENTIFIER generic_dimension",
    "simple_name_expr : IDENTIFIER opt_type_argument_list",
    "simple_name_expr : IDENTIFIER generic_dimension",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$58 :",
    "type_declaration_name : IDENTIFIER $$58 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : SELF",
    "indexer_declaration_name : explicit_interface SELF",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : void_invalid",
    "simple_type : type_expression",
    "simple_type : void_invalid",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : package_or_type_expr opt_nullable",
    "type_expression : package_or_type_expr pointer_stars",
    "type_expression : builtin_type_expression",
    "void_invalid : VOID",
    "builtin_type_expression : builtin_types opt_nullable",
    "builtin_type_expression : builtin_types pointer_stars",
    "builtin_type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : type_name_expression",
    "primary_expression : literal",
    "primary_expression : array_creation_expression",
    "primary_expression : parenthesized_expression",
    "primary_expression : default_value_expression",
    "primary_expression : invocation_expression",
    "primary_expression : element_access",
    "primary_expression : self_access",
    "primary_expression : super_access",
    "primary_expression : post_increment_expression",
    "primary_expression : post_decrement_expression",
    "primary_expression : object_or_delegate_creation_expression",
    "primary_expression : anonymous_type_expression",
    "primary_expression : typeof_expression",
    "primary_expression : sizeof_expression",
    "primary_expression : checked_expression",
    "primary_expression : unchecked_expression",
    "primary_expression : pointer_member_access",
    "primary_expression : anonymous_method_expression",
    "primary_expression : interpolated_string",
    "type_name_expression : simple_name_expr",
    "type_name_expression : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "interpolated_string : INTERPOLATED_STRING interpolations INTERPOLATED_STRING_END",
    "interpolated_string : INTERPOLATED_STRING_END",
    "interpolations : interpolation",
    "interpolations : interpolations INTERPOLATED_STRING interpolation",
    "interpolation : expression",
    "interpolation : expression COMMA expression",
    "$$59 :",
    "interpolation : expression COLON $$59 LITERAL",
    "$$60 :",
    "interpolation : expression COMMA expression COLON $$60 LITERAL",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT identifier_inside_body opt_type_argument_list",
    "member_access : primary_expression DOT identifier_inside_body generic_dimension",
    "member_access : primary_expression INTERR_OPERATOR DOT identifier_inside_body opt_type_argument_list",
    "member_access : builtin_types DOT identifier_inside_body opt_type_argument_list",
    "member_access : SUPER DOT identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body opt_type_argument_list",
    "member_access : qualified_alias_member identifier_inside_body generic_dimension",
    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
    "invocation_expression : primary_expression open_parens_any argument_list error",
    "invocation_expression : primary_expression open_parens_any error",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA error",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : REF declaration_expression",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : OUT declaration_expression",
    "declaration_expression : OPEN_PARENS declaration_expression CLOSE_PARENS",
    "declaration_expression : CHECKED open_parens_any declaration_expression CLOSE_PARENS",
    "declaration_expression : UNCHECKED open_parens_any declaration_expression CLOSE_PARENS",
    "declaration_expression : variable_type identifier_inside_body",
    "declaration_expression : variable_type identifier_inside_body ASSIGN expression",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression INTERR_OPERATOR OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
    "element_access : primary_expression OPEN_BRACKET_EXPR error",
    "expression_list : expression_or_error",
    "expression_list : expression_list COMMA expression_or_error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "self_access : SELF",
    "super_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "super_access : SUPER OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$61 :",
    "new_expr_type : $$61 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameter : identifier_inside_body ASSIGN variable_initializer",
    "anonymous_type_parameter : identifier_inside_body",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "typeof_expression : TYPEOF open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : error",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "sizeof_expression : SIZEOF open_parens_any type error",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "checked_expression : CHECKED error",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED error",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$62 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$62 block",
    "$$63 :",
    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$63 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$64 :",
    "anonymous_method_signature : OPEN_PARENS $$64 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : BANG error",
    "unary_expression : TILDE error",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS error",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "prefixed_unary_expression : PLUS error",
    "prefixed_unary_expression : MINUS error",
    "prefixed_unary_expression : OP_INC error",
    "prefixed_unary_expression : OP_DEC error",
    "prefixed_unary_expression : STAR error",
    "prefixed_unary_expression : BITWISE_AND error",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR error",
    "multiplicative_expression : multiplicative_expression DIV error",
    "multiplicative_expression : multiplicative_expression PERCENT error",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression PLUS error",
    "additive_expression : additive_expression MINUS error",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS pattern_expr",
    "additive_expression : additive_expression AS error",
    "additive_expression : additive_expression IS error",
    "pattern_type_expr : variable_type",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT error",
    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "relational_expression : relational_expression OP_LT error",
    "relational_expression : relational_expression OP_GT error",
    "relational_expression : relational_expression OP_LE error",
    "relational_expression : relational_expression OP_GE error",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "equality_expression : equality_expression OP_EQ error",
    "equality_expression : equality_expression OP_NE error",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "and_expression : and_expression BITWISE_AND error",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET error",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND error",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR error",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "conditional_expression : null_coalescing_expression INTERR expression error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
    "conditional_expression : null_coalescing_expression INTERR expression COLON CLOSE_BRACE",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "lambda_parameter : AWAIT",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "$$65 :",
    "lambda_expression_body : $$65 expression",
    "lambda_expression_body : block",
    "lambda_expression_body : error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$66 :",
    "lambda_expression : IDENTIFIER ARROW $$66 lambda_expression_body",
    "$$67 :",
    "lambda_expression : AWAIT ARROW $$67 lambda_expression_body",
    "$$68 :",
    "lambda_expression : ASYNC identifier_inside_body ARROW $$68 lambda_expression_body",
    "$$69 :",
    "$$70 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$69 opt_lambda_parameter_list CLOSE_PARENS ARROW $$70 lambda_expression_body",
    "$$71 :",
    "$$72 :",
    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$71 opt_lambda_parameter_list CLOSE_PARENS ARROW $$72 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "constant_expression : expression",
    "boolean_expression : expression",
    "opt_primary_parameters :",
    "opt_primary_parameters : primary_parameters",
    "primary_parameters : OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "opt_primary_parameters_with_class_base :",
    "opt_primary_parameters_with_class_base : class_base",
    "opt_primary_parameters_with_class_base : primary_parameters",
    "opt_primary_parameters_with_class_base : primary_parameters class_base",
    "$$73 :",
    "opt_primary_parameters_with_class_base : primary_parameters class_base OPEN_PARENS $$73 opt_argument_list CLOSE_PARENS",
    "$$74 :",
    "$$75 :",
    "$$76 :",
    "$$77 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$74 type_declaration_name $$75 opt_primary_parameters_with_class_base opt_type_parameter_constraints_clauses $$76 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$77 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "opt_class_base :",
    "opt_class_base : class_base",
    "class_base : COLON type_list",
    "class_base : COLON type_list error",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "$$78 :",
    "block : OPEN_BRACE $$78 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$79 :",
    "block_prepared : OPEN_BRACE $$79 opt_statement_list CLOSE_BRACE",
    "block_prepared : CLOSE_BRACE",
    "$$80 :",
    "block_prepared_strict : OPEN_BRACE $$80 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : IDENTIFIER error",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : sync_statement",
    "valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : sync_statement",
    "interactive_valid_declaration_statement : using_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$81 :",
    "labeled_statement : identifier_inside_body COLON $$81 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : type_name_expression opt_nullable",
    "variable_type_simple : type_name_expression pointer_stars",
    "variable_type_simple : builtin_type_expression",
    "variable_type_simple : void_invalid",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "$$82 :",
    "block_variable_declaration : variable_type identifier_inside_body $$82 opt_local_variable_initializer opt_variable_declarators semicolon_or_handle_error_close_brace",
    "$$83 :",
    "block_variable_declaration : CONST variable_type identifier_inside_body $$83 const_variable_initializer opt_const_declarators SEMICOLON",
    "semicolon_or_handle_error_close_brace : SEMICOLON",
    "semicolon_or_handle_error_close_brace : CLOSE_BRACE",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "expression_statement : statement_expression CLOSE_BRACE",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "if_statement : IF open_parens_any boolean_expression error",
    "$$84 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$84 opt_switch_sections CLOSE_BRACE",
    "switch_statement : SWITCH open_parens_any expression error",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "switch_section : switch_labels statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : CASE constant_expression error",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "while_statement : WHILE open_parens_any boolean_expression error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "do_statement : DO embedded_statement error",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
    "$$85 :",
    "for_statement : FOR open_parens_any $$85 for_statement_cont",
    "$$86 :",
    "for_statement_cont : opt_for_initializer SEMICOLON $$86 for_statement_condition",
    "for_statement_cont : opt_for_initializer CLOSE_PARENS",
    "$$87 :",
    "for_statement_condition : opt_for_condition SEMICOLON $$87 for_statement_end",
    "for_statement_condition : boolean_expression CLOSE_PARENS",
    "for_statement_end : opt_for_iterator CLOSE_PARENS embedded_statement",
    "for_statement_end : error",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$88 :",
    "for_initializer : variable_type identifier_inside_body $$88 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type error",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "$$89 :",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$89 embedded_statement",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
    "foreach_statement : FOREACH open_parens_any type error",
    "jump_statement : leave_statement",
    "jump_statement : persist_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "leave_statement : LEAVE SEMICOLON",
    "persist_statement : PERSIST SEMICOLON",
    "persist_statement : PERSIST error",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "return_statement : RETURN expression error",
    "return_statement : RETURN error",
    "throw_statement : THROW opt_expression SEMICOLON",
    "throw_statement : THROW expression error",
    "throw_statement : THROW error",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body RETURN expression error",
    "yield_statement : identifier_inside_body LEAVE SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block except_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block except_clauses FINALLY block",
    "try_statement : TRY block error",
    "except_clauses : except_clause",
    "except_clauses : except_clauses except_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "except_clause : EXCEPT opt_except_filter block",
    "$$90 :",
    "except_clause : EXCEPT open_parens_any type opt_identifier CLOSE_PARENS $$90 opt_except_filter_or_error",
    "except_clause : EXCEPT open_parens_any error",
    "opt_except_filter_or_error : opt_except_filter block_prepared",
    "opt_except_filter_or_error : error",
    "opt_except_filter :",
    "$$91 :",
    "opt_except_filter : WHEN $$91 open_parens_any expression CLOSE_PARENS",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "sync_statement : SYNC open_parens_any expression CLOSE_PARENS embedded_statement",
    "sync_statement : SYNC open_parens_any expression error",
    "$$92 :",
    "$$93 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$92 using_initialization CLOSE_PARENS $$93 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_statement : USING open_parens_any expression error",
    "using_initialization : using_variable_initializer opt_using_or_fixed_variable_declarators",
    "using_initialization : error",
    "using_variable_initializer :",
    "using_variable_initializer : ASSIGN variable_initializer",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : VOID opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT SELF",
    "$$94 :",
    "doc_cref : doc_type_declaration_name DOT SELF OPEN_BRACKET $$94 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$95 :",
    "opt_doc_method_sig : OPEN_PARENS $$95 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","LEAVE","BYTE",
    "CASE","EXCEPT","CHAR","CHECKED","CLASS","CONST","PERSIST","DEFAULT",
    "DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT","EXTERN",
    "FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO","IF",
    "IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","SYNC","LONG",
    "PACKAGE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE","PARAMS",
    "PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN","REMOVE",
    "SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC","STRING",
    "STRUCT","SWITCH","SELF","THROW","TRUE","TRY","TYPEOF","UINT","ULONG",
    "UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID","VOLATILE",
    "WHERE","WHILE","PARTIAL","ARROW","FROM","FROM_FIRST","JOIN","ON",
    "EQUALS","SELECT","GROUP","BY","LET","ORDERBY","ASCENDING",
    "DESCENDING","INTO","INTERR_NULLABLE","INTERR_OPERATOR","WHEN",
    "INTERPOLATED_STRING","INTERPOLATED_STRING_END","GET","SET",
    "LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS","event_declarator",
    "close_brace_or_complete_completion","ASYNC","pattern_expr","AWAIT",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 361 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 4:
#line 370 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			VSharpAttributes attrs = (VSharpAttributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
			"Assembly and module attributes must precede all other elements except import clauses");

		current_package.UnattachedAttributes = attrs;
		}
	  }
  break;
case 5:
#line 380 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_package.UnattachedAttributes = (VSharpAttributes) yyVals[0+yyTop];
	  }
  break;
case 6:
#line 384 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 11:
#line 401 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 12:
#line 409 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Import uc = new ImportPackage ((TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_package.AddImport (uc);
	  }
  break;
case 13:
#line 414 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	var lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
		 "An alias named `global' will not be used when resolving `global::'. The global package will be used instead");
	}

		var un = new ImportPackageAlias (new AliasIdentifier (lt.Value, lt.Location), (TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_package.AddImport (un);		
	  }
  break;
case 14:
#line 425 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }
  break;
case 17:
#line 443 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		VSharpAttributes attrs = (VSharpAttributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
		bool valid_global_attrs = true;
		if ((current_package.DeclarationFound || current_package != file.RootPackage)) {
				valid_global_attrs = false;
			} else {
		foreach (var a in attrs.Attrs) {
		    if (a.ExplicitTarget == "assembly")
				continue;
						
				valid_global_attrs = false;
					break;
			}
		}
		
		if (!valid_global_attrs)
			report.Error (1671, name.Location, "A package declaration cannot have modifiers or attributes");
	}
		
		file.AddAttributes (attrs);
		
		var ns = PackageContainer.CreateContainers (current_package,name,  GetLocation (yyVals[-1+yyTop]),file);
		current_package = ns;
		current_container = ns.DefaultType;
		file.TopLevelTypeDefinitions.Add(current_container);
	  }
  break;
case 18:
#line 472 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 19:
#line 477 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	    current_package = current_package.Parent;
		current_container =current_package.DefaultType; 
	  }
  break;
case 20:
#line 482 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

	var name = (MemberName) yyVals[0+yyTop];		
	PackageContainer.CreateContainers (current_package,name,  GetLocation (yyVals[-1+yyTop]),file);

	  }
  break;
case 23:
#line 495 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 24:
#line 503 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 25:
#line 508 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 26:
#line 513 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }
  break;
case 37:
#line 547 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

	if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
			report.Error (1527, ds.Location, 
		"Package elements cannot be explicitly declared as private, protected or protected internal");
		}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
		/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.Attributes != null) {
				ds.ConvertGlobalAttributes (ds, file);
			}
		}
	current_package.DeclarationFound = true;
	  }
  break;
case 38:
#line 567 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_package.DeclarationFound = true;
	  }
  break;
case 39:
#line 570 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_package.UnattachedAttributes = (VSharpAttributes) yyVals[-1+yyTop];
	report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
	lexer.putback ('}');
	  }
  break;
case 47:
#line 603 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var sect = (List<VSC.AST.VSharpAttribute>) yyVals[0+yyTop];
		yyVal = new VSharpAttributes (sect);
	  }
  break;
case 48:
#line 608 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		VSharpAttributes attrs = yyVals[-1+yyTop] as VSharpAttributes;
		var sect = (List<VSC.AST.VSharpAttribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new VSharpAttributes (sect);
		else if (sect != null)
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }
  break;
case 49:
#line 621 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 50:
#line 625 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 51:
#line 633 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }
  break;
case 52:
#line 640 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<VSC.AST.VSharpAttribute> (0);
		else
		yyVal = yyVals[-2+yyTop];
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }
  break;
case 53:
#line 650 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-2+yyTop];	
	  }
  break;
case 54:
#line 654 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-1+yyTop];
		var tne = new SimpleName (lt.Value, null, lt.Location);

		yyVal = new List<VSC.AST.VSharpAttribute> () {
			new VSC.AST.VSharpAttribute (null, tne, null, GetLocation (yyVals[-1+yyTop]), false)
		};
	  }
  break;
case 55:
#line 665 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (CheckAttributeTarget (yyToken, GetTokenName (yyToken), GetLocation (yyVals[0+yyTop])).Length > 0)
			Error_SyntaxError (yyToken);

 		yyVal = null;
	  }
  break;
case 56:
#line 675 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (yyToken, lt.Value, lt.Location);
	
	  }
  break;
case 57:
#line 680 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = "event"; }
  break;
case 58:
#line 681 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = "return";}
  break;
case 59:
#line 686 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new List<VSC.AST.VSharpAttribute> (4) { (VSC.AST.VSharpAttribute) yyVals[0+yyTop] };
	  }
  break;
case 60:
#line 690 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	var attrs = (List<VSC.AST.VSharpAttribute>) yyVals[-2+yyTop];
	if (attrs != null) 
		attrs.Add ((VSC.AST.VSharpAttribute) yyVals[0+yyTop]);


		yyVal = attrs;
	  }
  break;
case 61:
#line 702 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 62:
#line 706 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		
		var tne = (TypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) 
			report.Error (404, tne.Location, "Attributes cannot be generic");
		
		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];

		yyVal = new VSC.AST.VSharpAttribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	
	  }
  break;
case 64:
#line 725 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; HadAttributeParens = false;	  }
  break;
case 65:
#line 727 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		HadAttributeParens = true;
	  }
  break;
case 66:
#line 735 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 67:
#line 737 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }
  break;
case 68:
#line 743 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments a = new Arguments (4);
	a.Add ((Argument) yyVals[0+yyTop]);  
	yyVal = new Arguments [] { null, a };
	  }
  break;
case 69:
#line 749 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
	if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
		o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
	args.Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 70:
#line 764 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 71:
#line 777 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 73:
#line 782 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 74:
#line 790 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 75:
#line 794 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[-1+yyTop]);	  
	  }
  break;
case 76:
#line 803 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {

	/* Avoid boxing in common case (no modifier)*/
	var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }
  break;
case 79:
#line 819 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 80:
#line 821 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 81:
#line 825 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 84:
#line 837 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 85:
#line 842 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 99:
#line 863 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
		GetSymbolName (yyToken));
	    yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 100:
#line 873 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_local_parameters = current_type.PrimaryConstructorParameters;
	if (current_local_parameters == null) {
			report.Error (9010, GetLocation (yyVals[0+yyTop]), "Primary constructor body is not allowed");
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		}

		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 101:
#line 884 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_local_parameters = null;
		var t = current_type as ClassOrStructDeclaration;
	if (t != null) {
			var b = (ToplevelBlock) yyVals[0+yyTop];
			if (t.PrimaryConstructorBlock != null) {
				report.Error (8041, b.StartLocation, "Primary constructor already has a body");
			} else {
			t.PrimaryConstructorBlock = b;
			}
		}
	  }
  break;
case 102:
#line 903 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 103:
#line 907 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		lexer.ConstraintsParsing = true;
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
		push_current_container (new StructDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], GetLocation(yyVals[-2+yyTop]),file));
	
	  }
  break;
case 104:
#line 916 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

	if (yyVals[-2+yyTop] != null)
			current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-2+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

	if (doc_support)
			current_type.DocComment = Lexer.consume_doc_comment ();

		
		lexer.parsing_modifiers = true;
	  }
  break;
case 105:
#line 933 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 106:
#line 938 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 107:
#line 944 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = pop_current_class ();
	  }
  break;
case 108:
#line 948 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 109:
#line 957 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new ConstantDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }
  break;
case 110:
#line 970 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
		Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.ConstantValue = (IConstantValue) yyVals[-2+yyTop];
		current_field = null;
	  }
  break;
case 111:
#line 982 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new ConstantDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-4+yyTop]));
	  }
  break;
case 114:
#line 996 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
	  }
  break;
case 115:
#line 1000 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		
	  }
  break;
case 116:
#line 1007 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  var lt = (LocatedToken) yyVals[-1+yyTop];
	  	current_field = new ConstantDeclaration (current_field as ConstantDeclaration, new MemberName (lt.Value, lt.Location));
		current_field.ConstantValue = (IConstantValue) yyVals[0+yyTop];
		current_type.AddMember (current_field);
	  }
  break;
case 117:
#line 1017 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 118:
#line 1021 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 119:
#line 1026 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 122:
#line 1041 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (LocatedToken) yyVals[0+yyTop];
		current_field = new FieldDeclaration (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-3+yyTop]);
		current_type.AddMember (current_field);
		yyVal = current_field;
	  }
  break;
case 123:
#line 1056 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
	
		yyVal = current_field;
		current_field = null;
	  }
  break;
case 125:
#line 1071 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	 	start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 126:
#line 1077 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		current_field.ConstantValue = (IConstantValue) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }
  break;
case 129:
#line 1092 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 130:
#line 1095 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 131:
#line 1101 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		 var lt = (LocatedToken) yyVals[0+yyTop];
	  	current_field = new FieldDeclaration (current_field, new MemberName (lt.Value, lt.Location));
		current_type.AddMember (current_field);
	  }
  break;
case 132:
#line 1107 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 133:
#line 1111 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		 var lt = (LocatedToken) yyVals[-3+yyTop];
	  	current_field = new FieldDeclaration (current_field, new MemberName (lt.Value, lt.Location));
		current_field.ConstantValue = (IConstantValue) yyVals[-1+yyTop];
		current_type.AddMember (current_field);
	  }
  break;
case 136:
#line 1124 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 137:
#line 1133 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	is_inheritance_impl = false;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }
  break;
case 138:
#line 1141 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	MethodDeclaration method = (MethodDeclaration) yyVals[-2+yyTop];
	method.Block = (ToplevelBlock) yyVals[0+yyTop];
	async_block = false;
		
		if (method.Block == null) 
		method.ParameterInfo.CheckParameters ();
		 else {
		if (current_container is InterfaceDeclaration) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
				method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 139:
#line 1166 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.Method;
	  }
  break;
case 140:
#line 1170 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
			valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 141:
#line 1174 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-5+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-2+yyTop];
		Modifiers mods = (Modifiers) yyVals[-7+yyTop];
		is_inheritance_impl = ((mods & Modifiers.OVERRIDE) != 0 ) || name.ExplicitInterface != null;
		var method = new MethodDeclaration (current_type, (FullNamedExpression) yyVals[-6+yyTop], mods,
				     name, current_local_parameters, (VSharpAttributes) yyVals[-8+yyTop]);

		current_type.AddMember (method);


		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

	
		yyVal = method;
		is_inheritance_impl = false;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 142:
#line 1195 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[-1+yyTop] != null) {
		var method = (MethodDeclaration) yyVals[-2+yyTop];
			method.SetConstraints ((List<TypeParameterConstraints>) yyVals[-1+yyTop]);
		}

		yyVal = yyVals[-2+yyTop];
		
	  }
  break;
case 143:
#line 1210 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		MemberName name = (MemberName) yyVals[-3+yyTop];
			Modifiers mods = (Modifiers) yyVals[-4+yyTop];
		is_inheritance_impl = ((mods & Modifiers.OVERRIDE) != 0 ) || name.ExplicitInterface != null;


		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name (mods));

		var method = new MethodDeclaration (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-7+yyTop]);

	current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
				is_inheritance_impl = false;
	  }
  break;
case 144:
#line 1236 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

	MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = new MethodDeclaration(current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (VSharpAttributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
				is_inheritance_impl = false;
	  }
  break;
case 148:
#line 1261 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {/* savedLocation = GetLocation ($1); $$ = null;*/
	 }
  break;
case 149:
#line 1267 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	++lexer.parsing_block;
	start_block (GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 150:
#line 1272 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_block = 0;
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		var b = end_block (GetLocation (yyVals[0+yyTop]));
		b.IsCompilerGenerated = true;
		yyVal = b;
	 }
  break;
case 151:
#line 1282 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters;}
  break;
case 153:
#line 1288 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	 	yyVal = new ParametersCompiled (pars_list.ToArray ());	
	  }
  break;
case 154:
#line 1293 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);
	
		yyVal = new ParametersCompiled (pars_list.ToArray ()); 

	  }
  break;
case 155:
#line 1301 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }
  break;
case 156:
#line 1308 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

	var pars_list = (List<Parameter>) yyVals[-4+yyTop];
	yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 157:
#line 1316 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 158:
#line 1320 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 159:
#line 1328 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		default_parameter_used = p.IsOptional;
		yyVal = parameters_bucket;
	  }
  break;
case 160:
#line 1336 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.IsSelf)
				report.Error (1100, p.Location, "The parameter modifier `self' can only be used on the first parameter");
			else if (!p.IsOptional && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.IsOptional;
			pars.Add (p);
			
		}
		
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 161:
#line 1359 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 162:
#line 1367 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (ParameterModifier) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 163:
#line 1373 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	 	Location l = GetLocation (yyVals[0+yyTop]);
	yyVal = new Parameter (null, null, ParameterModifier.None, (VSharpAttributes) yyVals[-1+yyTop], l);
	  }
  break;
case 164:
#line 1382 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], l);
	  }
  break;
case 165:
#line 1392 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 166:
#line 1396 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;

		ParameterModifier mod = (ParameterModifier) yyVals[-5+yyTop];
		if (mod != ParameterModifier.None) {
			switch (mod) {
			case ParameterModifier.Ref:
			case ParameterModifier.Out:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
				Parameter.GetModifierSignature (mod));
				break;
				
			case ParameterModifier.Self:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
				Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
		mod = ParameterModifier.None;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (VSharpAttributes) yyVals[-6+yyTop], lt.Location);
	
	if (yyVals[0+yyTop] != null)
		((Parameter) yyVal).DefaultValue = (IConstantValue) yyVals[0+yyTop];
	  }
  break;
case 167:
#line 1431 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = ParameterModifier.None; 
	}
  break;
case 169:
#line 1438 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 170:
#line 1442 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		ParameterModifier p2 = (ParameterModifier)yyVals[0+yyTop];
  		ParameterModifier mod = (ParameterModifier)yyVals[-1+yyTop] | p2;
  		if (((ParameterModifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~ParameterModifier.Self) {
  				case ParameterModifier.Ref:
					report.Error (1101, lexer.Location, "The parameter modifiers `self' and `ref' cannot be used altogether");
  					break;
   				case ParameterModifier.Out:
				report.Error (1102, lexer.Location, "The parameter modifiers `self' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 				break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 171:
#line 1466 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));

	  	yyVal = ParameterModifier.Ref;
	  }
  break;
case 172:
#line 1473 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	 		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));

	 	yyVal = ParameterModifier.Out;
	  }
  break;
case 173:
#line 1480 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.Self) == 0)
	 		Error_ParameterModifierNotValid ("self", GetLocation (yyVals[0+yyTop]));


		yyVal = ParameterModifier.Self;
	  }
  break;
case 174:
#line 1491 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 175:
#line 1496 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (ParameterModifier) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 176:
#line 1503 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (ParameterModifier) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-3+yyTop], GetLocation(yyVals[-2+yyTop]));
	  }
  break;
case 177:
#line 1511 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ParameterModifier.Params;
	  }
  break;
case 178:
#line 1515 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		ParameterModifier mod = (ParameterModifier)yyVals[0+yyTop];
		if ((mod & ParameterModifier.Self) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `self' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	mod |=  ParameterModifier.Params;
	  }
  break;
case 179:
#line 1525 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), ParameterModifier.Params);
	  }
  break;
case 180:
#line 1535 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }
  break;
case 181:
#line 1541 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new PropertyDeclaration (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		
		lexer.PropertyParsing = true;
	  }
  break;
case 182:
#line 1554 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }
  break;
case 183:
#line 1561 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 184:
#line 1565 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_property = null;
	  }
  break;
case 185:
#line 1572 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 186:
#line 1579 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		var property = new PropertyDeclaration (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);

		property.Getter = new GetterDeclaration (property, Modifiers.COMPILER_GENERATED, null, property.Location);
		(property.Getter  as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];

		if (current_container is InterfaceDeclaration) {
			report.Error (531, (property.Getter as MethodOrOperator).Block.StartLocation,
			"`{0}': interface members cannot have a definition", property.GetSignatureForError ());
		}

		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", property.GetSignatureForError ());

		current_type.AddMember (property);

		current_local_parameters = null;
	  }
  break;
case 188:
#line 1604 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 189:
#line 1610 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	((PropertyDeclaration)current_property).Initializer = (Expression) yyVals[-1+yyTop];

	end_block (GetLocation (yyVals[0+yyTop]));
		current_local_parameters = null;
	  }
  break;
case 192:
#line 1627 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 193:
#line 1631 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		IndexerDeclaration indexer = new IndexerDeclaration (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddMember (indexer);

		if (type.Type != null && type.Type == KnownTypeReference.Void)
			report.Error (620, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
	  }
  break;
case 194:
#line 1656 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
 		lexer.PropertyParsing = false;
		current_local_parameters = null;

		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((IndexerDeclaration) current_property).ParameterInfo.CheckParameters ();
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
		
		current_property = null;		
	  }
  break;
case 195:
#line 1672 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {

	  }
  break;
case 196:
#line 1676 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_property.Getter = new IndexerGetterDeclaration (current_property, Modifiers.COMPILER_GENERATED, current_local_parameters, null, current_property.Location);
		(current_property.Getter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
	  }
  break;
case 201:
#line 1688 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyToken == Token.CLOSE_BRACE) {
	 		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }
  break;
case 202:
#line 1702 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
	  
		if (current_property.Getter != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is IndexerDeclaration) {
			current_property.Getter = new IndexerGetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop], ((IndexerDeclaration)current_property).ParameterInfo.Clone (),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Getter = new GetterDeclaration (current_property,
				(Modifiers) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = (current_property.Getter as MethodOrOperator).ParameterInfo;	  
		lexer.PropertyParsing = false;
	  }
  break;
case 203:
#line 1721 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyVals[0+yyTop] != null) {
	  	 (current_property.Getter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container is InterfaceDeclaration) {
				report.Error (531,  (current_property.Getter as MethodOrOperator).Block.StartLocation,
					"`{0}': interface members cannot have a definition",  (current_property.Getter as MethodOrOperator).GetSignatureForError ());
			}

		} 
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 204:
#line 1743 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {

		if (current_property.Setter != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is IndexerDeclaration) {
			current_property.Setter = new IndexerSetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop],
			ParametersCompiled.MergeGenerated (compiler,
				((IndexerDeclaration)current_property).ParameterInfo, true, new Parameter (
				current_property.TypeExpression, "value", ParameterModifier.None, null, GetLocation (yyVals[0+yyTop]))),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Setter = new SetterDeclaration (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = (current_property.Setter as MethodOrOperator).ParameterInfo;	
		lexer.PropertyParsing = false;
	  }
  break;
case 205:
#line 1765 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {		
			(current_property.Setter as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
			report.Error (531, (current_property.Setter as MethodOrOperator).Block.StartLocation,
					"`{0}': interface members cannot have a definition", (current_property.Setter as MethodOrOperator).GetSignatureForError ());
		}
	}

		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 207:
#line 1788 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 208:
#line 1792 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }
  break;
case 209:
#line 1803 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 210:
#line 1807 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;
		push_current_container (new InterfaceDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop], GetLocation(yyVals[-2+yyTop]),file));
	  }
  break;
case 211:
#line 1813 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 212:
#line 1827 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;	  
	if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 213:
#line 1833 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 214:
#line 1837 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 217:
#line 1849 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 218:
#line 1854 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
		lexer.parsing_block = 0;
	  }
  break;
case 219:
#line 1862 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 220:
#line 1866 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 225:
#line 1874 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 226:
#line 1878 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 227:
#line 1882 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 228:
#line 1889 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  }
  break;
case 229:
#line 1892 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		OperatorDeclarationInfo decl = (OperatorDeclarationInfo) yyVals[-2+yyTop];
		if (decl != null) {
			OperatorDeclaration op = new OperatorDeclaration (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (VSharpAttributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters ();

		if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddMember (op);


		
	}
		
		current_local_parameters = null;
	  }
  break;
case 231:
#line 1922 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 232:
#line 1930 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
		if ((VSC.TypeSystem.Resolver.OperatorType ) yyVals[-1+yyTop] ==VSC.TypeSystem.Resolver.OperatorType.Is)
			valid_param_mod |= ParameterModifierType.Out;
	  }
  break;
case 233:
#line 1936 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		VSC.TypeSystem.Resolver.OperatorType  op = (VSC.TypeSystem.Resolver.OperatorType ) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == VSC.TypeSystem.Resolver.OperatorType.Addition)
				op = VSC.TypeSystem.Resolver.OperatorType.UnaryPlus;
			else if (op == VSC.TypeSystem.Resolver.OperatorType.Subtraction)
			op = VSC.TypeSystem.Resolver.OperatorType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
			report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					VSC.TypeSystem.Resolver.VSharpResolver.GetMetadataName (op));
			}
		} else if (op ==VSC.TypeSystem.Resolver.OperatorType.Is) {
			/* TODO: Special checks for is operator*/
		} else {
		if (p_count == 1) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			} else if (p_count != 2) {
			report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					VSC.TypeSystem.Resolver.VSharpResolver.GetMetadataName (op));
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclarationInfo (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
	  }
  break;
case 235:
#line 1981 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LogicalNot; }
  break;
case 236:
#line 1982 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.OnesComplement;  }
  break;
case 237:
#line 1983 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Increment;}
  break;
case 238:
#line 1984 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Decrement; }
  break;
case 239:
#line 1985 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.True; }
  break;
case 240:
#line 1986 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.False;}
  break;
case 241:
#line 1988 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Addition;  }
  break;
case 242:
#line 1989 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Subtraction; }
  break;
case 243:
#line 1991 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Multiply; 	 }
  break;
case 244:
#line 1992 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {  yyVal = VSC.TypeSystem.Resolver.OperatorType.Division; }
  break;
case 245:
#line 1993 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Modulus;  }
  break;
case 246:
#line 1994 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.BitwiseAnd; 	 }
  break;
case 247:
#line 1995 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.BitwiseOr; 	}
  break;
case 248:
#line 1996 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.ExclusiveOr;	 }
  break;
case 249:
#line 1997 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LeftShift; 	 }
  break;
case 250:
#line 1998 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.RightShift;  }
  break;
case 251:
#line 1999 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Equality;}
  break;
case 252:
#line 2000 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.Inequality;	}
  break;
case 253:
#line 2001 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.GreaterThan;}
  break;
case 254:
#line 2002 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LessThan; 	 }
  break;
case 255:
#line 2003 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.GreaterThanOrEqual; 	 }
  break;
case 256:
#line 2004 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = VSC.TypeSystem.Resolver.OperatorType.LessThanOrEqual; 	}
  break;
case 257:
#line 2006 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = VSC.TypeSystem.Resolver.OperatorType.Is;
	  }
  break;
case 258:
#line 2013 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 259:
#line 2017 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

		if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `implicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

	yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 260:
#line 2035 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 261:
#line 2039 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  

	if (current_local_parameters.Count != 1) {
			report.Error (1535, loc, "Overloaded unary operator `explicit' takes one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
	}

		yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 262:
#line 2057 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 263:
#line 2063 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 264:
#line 2073 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		ConstructorDeclaration c = (ConstructorDeclaration) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 265:
#line 2090 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 266:
#line 2099 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
	
		var mods = (Modifiers) yyVals[-5+yyTop];
		string ctor_name = (current_container.IsStatic || ((mods & Modifiers.STATIC) != 0))?ConstructorDeclaration.TypeConstructorName : ConstructorDeclaration.ConstructorName;
		var c = new ConstructorDeclaration (current_type, ctor_name, mods, (VSharpAttributes) yyVals[-6+yyTop], current_local_parameters, GetLocation(yyVals[-4+yyTop]));

	 if ((mods & Modifiers.STATIC) != 0) {
		if (!current_local_parameters.IsEmpty) {
				report.Error (132, c.Location, "`{0}': The static constructor must be parameterless",
					c.GetSignatureForError ());
			}

			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		} else {
			if (current_type is StructDeclaration && current_local_parameters.IsEmpty) {
			
				if ((mods & Modifiers.PUBLIC) == 0) {
					report.Error (8075, c.Location, "`{0}': Structs parameterless instance constructor must be public", c.GetSignatureForError ());
				}
		}
	}

	current_type.AddMember (c);
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
	/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }
  break;
case 267:
#line 2138 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			var c = (ConstructorDeclaration) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `self' or `super' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 269:
#line 2156 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { current_block = null; yyVal = null; 	}
  break;
case 272:
#line 2166 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 273:
#line 2170 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
	yyVal = new ConstructorSuperInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 274:
#line 2175 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 275:
#line 2179 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorSelfInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 276:
#line 2184 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorSelfInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 277:
#line 2189 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 278:
#line 2197 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
			}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 279:
#line 2206 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 if (!(current_container is ClassDeclaration)){
			report.Error (575, GetLocation(yyVals[-4+yyTop]), "Only class types can contain destructor");
		}
		
		DestructorDeclaration d = new DestructorDeclaration (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (VSharpAttributes) yyVals[-7+yyTop], GetLocation(yyVals[-4+yyTop]));
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);

		current_local_parameters = null;
	  }
  break;
case 280:
#line 2228 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_event = new EventDeclaration (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (VSharpAttributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
	
		lexer.EventParsing = true;
	  }
  break;
case 281:
#line 2235 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (current_container is InterfaceDeclaration)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }
  break;
case 282:
#line 2242 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		

	  	current_event = null;	
		current_local_parameters = null;
	  }
  break;
case 283:
#line 2255 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventDeclaration (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-4+yyTop]));
	  }
  break;
case 284:
#line 2265 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_event_field.AddDeclarator ((FieldDeclarator) $1);*/
	  }
  break;
case 285:
#line 2269 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*current_event_field.AddDeclarator ((FieldDeclarator) $2);*/
	  }
  break;
case 288:
#line 2279 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 289:
#line 2284 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 290:
#line 2289 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }
  break;
case 291:
#line 2297 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  
	  	Modifiers mods = (Modifiers)yyVals[-1+yyTop];
	 	current_event.AddAccessor = new AddEventAccessor (current_event, mods,(VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = (current_event.AddAccessor as MethodOrOperator).ParameterInfo;
		
	
		lexer.EventParsing = false;		
	  }
  break;
case 292:
#line 2307 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.EventParsing = true;
	  
		(current_event.AddAccessor as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
		report.Error (531, (current_event.AddAccessor as MethodOrOperator).Block.StartLocation,
			"`{0}': interface members cannot have a definition", (current_event.AddAccessor as MethodOrOperator).GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 293:
#line 2323 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {	
	   	Modifiers mods = (Modifiers)yyVals[-1+yyTop];
	  	current_event.RemoveAccessor = new RemoveEventAccessor(current_event, mods, (VSharpAttributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters =( current_event.RemoveAccessor as MethodOrOperator).ParameterInfo;

		lexer.EventParsing = false;		
	  }
  break;
case 294:
#line 2331 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.EventParsing = true;
	  
	 ( current_event.RemoveAccessor as MethodOrOperator).Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container is InterfaceDeclaration) {
			report.Error (531, ( current_event.RemoveAccessor as MethodOrOperator).Block.StartLocation,
				"`{0}': interface members cannot have a definition", ( current_event.RemoveAccessor as MethodOrOperator).GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 295:
#line 2347 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 297:
#line 2356 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_type.UnattachedAttributes = (VSharpAttributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }
  break;
case 298:
#line 2367 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1519, lexer.Location, "Unexpected symbol `}' in class, struct, or interface member declaration");
		lexer.putback ('}');

	 	lexer.parsing_generic_declaration = false;
		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		current_field = new FieldDeclaration (current_type, type, (Modifiers) yyVals[-2+yyTop], MemberName.Null, (VSharpAttributes) yyVals[-3+yyTop]);
		current_type.AddMember(current_field);
		yyVal = current_field;
	  }
  break;
case 299:
#line 2385 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }
  break;
case 300:
#line 2390 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new EnumDeclaration (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (VSharpAttributes) yyVals[-6+yyTop],file));
	
	  }
  break;
case 301:
#line 2403 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = true;
	  
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 302:
#line 2411 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
		
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

	/*		if (doc_support)*/
	/*				em.DocComment = ev.DocComment;*/

		yyVal = pop_current_class ();
	  }
  break;
case 304:
#line 2429 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 305:
#line 2433 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }
  break;
case 310:
#line 2448 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = yyVals[0+yyTop];
  }
  break;
case 311:
#line 2455 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	var lt = (LocatedToken) yyVals[0+yyTop];
	 	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-1+yyTop]);
	  	((EnumDeclaration) current_type).AddMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 312:
#line 2468 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }
  break;
case 313:
#line 2476 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		--lexer.parsing_block;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-4+yyTop]);
	  	em.ConstantValue = (IConstantValue) yyVals[0+yyTop];
	  	((EnumDeclaration) current_type).AddMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }
  break;
case 314:
#line 2490 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMemberDeclaration ((EnumDeclaration) current_type, new MemberName (lt.Value, lt.Location), (VSharpAttributes) yyVals[-2+yyTop]);
	  	((EnumDeclaration) current_type).AddMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 316:
#line 2513 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 317:
#line 2517 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];
		DelegateDeclaration del = new DelegateDeclaration (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (VSharpAttributes) yyVals[-8+yyTop],file);
		p.CheckParameters ();
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 318:
#line 2527 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 319:
#line 2531 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
		current_delegate.SetConstraints ((List<TypeParameterConstraints>) yyVals[-2+yyTop]);

		yyVal = current_delegate;

		current_delegate = null;
	  }
  break;
case 321:
#line 2549 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  			yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 323:
#line 2557 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new QualifiedAlias(lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 324:
#line 2563 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  	    var lt1 = (LocatedToken) yyVals[-2+yyTop];
    	var lt2 = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 326:
#line 2573 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	
	  }
  break;
case 327:
#line 2579 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 328:
#line 2587 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 329:
#line 2592 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 331:
#line 2604 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
			yyVal = yyVals[-1+yyTop];
	  }
  break;
case 332:
#line 2608 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 333:
#line 2616 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	
	  }
  break;
case 334:
#line 2623 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 335:
#line 2635 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 336:
#line 2639 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 337:
#line 2648 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	MemberName mn = (MemberName)yyVals[0+yyTop];
	 	if (mn.TypeParameters != null)
	 		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
				mn.GetSignatureForError ()));
	  }
  break;
case 339:
#line 2659 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (TypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }
  break;
case 340:
#line 2668 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDeclaration.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 341:
#line 2673 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDeclaration.DefaultIndexerName, null, (TypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 342:
#line 2681 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	  }
  break;
case 343:
#line 2686 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-3+yyTop];
		var lt2 = (LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
	  }
  break;
case 344:
#line 2693 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((TypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	
	  }
  break;
case 346:
#line 2703 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 347:
#line 2710 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var tparams = new TypeParameters ();
		tparams.Add ((UnresolvedTypeParameterSpec)yyVals[0+yyTop]);
		yyVal = tparams;
	  }
  break;
case 348:
#line 2716 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((UnresolvedTypeParameterSpec)yyVals[0+yyTop]);
		yyVal = tparams;
		
	  }
  break;
case 349:
#line 2726 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];
		if(type_parameter_symbol_kind == SymbolKind.Method && is_inheritance_impl)
		   yyVal = new MethodTypeParameterWithInheritedConstraints(0, lt.Value);
		else
			yyVal = new UnresolvedTypeParameterSpec (type_parameter_symbol_kind,0,lt.Value);
  	  }
  break;
case 350:
#line 2734 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new UnresolvedTypeParameterSpec (type_parameter_symbol_kind, 0);
  	  }
  break;
case 352:
#line 2750 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new TypeExpression (KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 353:
#line 2757 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 359:
#line 2778 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
	yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 361:
#line 2787 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 362:
#line 2794 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) 
			yyVal = new ComposedType ((TypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		 else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarTypeExpression (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }
  break;
case 363:
#line 2806 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType ((TypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 365:
#line 2814 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error(1547, GetLocation (yyVals[0+yyTop]), "Keyword `void' cannot be used in this context");
		yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 366:
#line 2822 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 367:
#line 2827 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 368:
#line 2831 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ComposedType (new TypeExpression (VSC.TypeSystem.KnownTypeReference.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 369:
#line 2838 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 370:
#line 2844 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
	
		yyVal = types;
	  }
  break;
case 371:
#line 2854 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is ComposedType)
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedType)yyVals[0+yyTop]).GetSignatureForError ());
	
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 372:
#line 2867 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 373:
#line 2868 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 374:
#line 2869 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Boolean, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 375:
#line 2870 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Single, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 376:
#line 2871 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Double, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 378:
#line 2876 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.SByte, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 379:
#line 2877 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Byte, GetLocation (yyVals[0+yyTop]));	}
  break;
case 380:
#line 2878 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int16, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 381:
#line 2879 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt16, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 382:
#line 2880 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int32, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 383:
#line 2881 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt32, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 384:
#line 2882 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Int64, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 385:
#line 2883 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.UInt64, GetLocation (yyVals[0+yyTop]));	 }
  break;
case 386:
#line 2884 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {yyVal = new TypeExpression (VSC.TypeSystem.KnownTypeReference.Char, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 411:
#line 2923 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		 yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 412:
#line 2929 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 	yyVal = new BoolLiteral (true, GetLocation (yyVals[0+yyTop])); 	}
  break;
case 413:
#line 2930 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 	yyVal = new BoolLiteral (false, GetLocation (yyVals[0+yyTop]));	}
  break;
case 414:
#line 2935 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[-2+yyTop], (List<Expression>) yyVals[-1+yyTop], (StringLiteral) yyVals[0+yyTop]);
	  }
  break;
case 415:
#line 2939 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new InterpolatedString ((StringLiteral) yyVals[0+yyTop], null, null);
	  }
  break;
case 416:
#line 2946 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = new List<Expression> ();
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 417:
#line 2952 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((StringLiteral) yyVals[-1+yyTop]);
		list.Add ((InterpolatedStringInsert) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 418:
#line 2962 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 419:
#line 2966 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-2+yyTop]) {
			Alignment = (Expression)yyVals[0+yyTop]
		};
	  }
  break;
case 420:
#line 2972 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 421:
#line 2976 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-3+yyTop]) {
			Format = (string)yyVals[0+yyTop]
		};
	  }
  break;
case 422:
#line 2984 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = true;
	  }
  break;
case 423:
#line 2988 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_interpolation_format = false;

		yyVal = new InterpolatedStringInsert ((Expression) yyVals[-5+yyTop]) {
			Alignment = (Expression)yyVals[-3+yyTop],
			Format = (string) yyVals[0+yyTop]
		};
	  }
  break;
case 428:
#line 3021 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 429:
#line 3025 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 430:
#line 3032 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 431:
#line 3037 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 432:
#line 3042 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new ConditionalMemberAccess ((Expression) yyVals[-4+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 433:
#line 3047 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 434:
#line 3052 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new SuperReference (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location, NameLookupMode.Expression);
	  }
  break;
case 435:
#line 3057 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAlias(lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location, NameLookupMode.Expression);
	  }
  break;
case 436:
#line 3064 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt1 = (LocatedToken) yyVals[-2+yyTop];
		var lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAlias (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location, NameLookupMode.Expression);
	  }
  break;
case 437:
#line 3074 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 438:
#line 3078 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	  }
  break;
case 439:
#line 3083 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Invocation ((Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 440:
#line 3090 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 	yyVal = null; 	}
  break;
case 442:
#line 3096 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (GetLocation (yyVals[-2+yyTop]));
	  	} else {
			yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	}

	  }
  break;
case 443:
#line 3105 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 444:
#line 3111 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {	 yyVal = null; 	}
  break;
case 445:
#line 3113 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {		yyVal = yyVals[0+yyTop];}
  break;
case 446:
#line 3118 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 447:
#line 3124 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 448:
#line 3129 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 449:
#line 3137 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var lt = (LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 450:
#line 3142 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-1+yyTop] == null)
			yyVal = new CollectionElementInitializer (GetLocation (yyVals[-2+yyTop]));
		else {
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		}
	  }
  break;
case 451:
#line 3150 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 454:
#line 3162 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; 	 }
  break;
case 456:
#line 3168 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 457:
#line 3174 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 458:
#line 3183 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
		if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }
  break;
case 459:
#line 3197 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 460:
#line 3204 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }
  break;
case 461:
#line 3212 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation(yyVals[0+yyTop]));
	  }
  break;
case 465:
#line 3225 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 466:
#line 3229 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 467:
#line 3233 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 468:
#line 3237 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out, GetLocation(yyVals[-1+yyTop]));
	  }
  break;
case 469:
#line 3244 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 470:
#line 3249 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 471:
#line 3253 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnCheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 472:
#line 3258 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-1+yyTop], lv);
	  }
  break;
case 473:
#line 3265 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
	var lv = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (lv);
		yyVal = new DeclarationExpression ((FullNamedExpression) yyVals[-3+yyTop], lv) {
		Initializer = (Expression) yyVals[0+yyTop]
		};
	  }
  break;
case 475:
#line 3281 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 476:
#line 3285 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop])) {
			ConditionalAccess = true
		};
	  }
  break;
case 477:
#line 3291 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 478:
#line 3296 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 479:
#line 3304 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 480:
#line 3310 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 481:
#line 3319 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 482:
#line 3325 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Arguments args = (Arguments) yyVals[-2+yyTop];
	if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
		Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }
  break;
case 483:
#line 3337 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 485:
#line 3345 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SelfReference (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 486:
#line 3352 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	yyVal = new ElementAccess (new SuperReference (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 487:
#line 3356 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 488:
#line 3364 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 489:
#line 3371 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 490:
#line 3378 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] != null) {			
			yyVal = new NewInitializeExpression ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new NewExpression ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
	  }
  break;
case 491:
#line 3387 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new NewInitializeExpression ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 492:
#line 3396 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 493:
#line 3403 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 494:
#line 3410 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 495:
#line 3414 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 496:
#line 3419 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new NewExpression ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 497:
#line 3427 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 498:
#line 3431 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 499:
#line 3439 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new NewAnonymousTypeExpression ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 502:
#line 3450 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 yyVal = null; 
	 }
  break;
case 504:
#line 3458 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 505:
#line 3464 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);

	  	yyVal = a;
	  }
  break;
case 506:
#line 3474 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  }
  break;
case 507:
#line 3479 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }
  break;
case 508:
#line 3485 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }
  break;
case 509:
#line 3490 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }
  break;
case 513:
#line 3505 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 514:
#line 3513 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		
	  }
  break;
case 515:
#line 3518 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 516:
#line 3525 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = 2;
	  }
  break;
case 517:
#line 3529 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 518:
#line 3536 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = null;
	  }
  break;
case 519:
#line 3540 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 520:
#line 3547 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		yyVal = ai;
	  }
  break;
case 521:
#line 3553 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
	
		yyVal = ai;
	  }
  break;
case 522:
#line 3563 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 523:
#line 3569 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 524:
#line 3578 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new TypeOfExpression ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 526:
#line 3586 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }
  break;
case 527:
#line 3594 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 528:
#line 3601 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = lt;		
	  }
  break;
case 529:
#line 3609 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = new SizeOfExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 530:
#line 3613 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new SizeOfExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 531:
#line 3622 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 532:
#line 3626 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 533:
#line 3635 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnCheckedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 534:
#line 3639 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 535:
#line 3648 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new IndirectionExpression ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 536:
#line 3657 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_anonymous (false, (ParametersCompiled) $2, false, GetLocation ($1));*/
	  }
  break;
case 537:
#line 3661 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $4);*/
		/*if ((ParametersCompiled) $2 != ParametersCompiled.Undefined) {*/
		/*	lbag.AddLocation ($$, GetLocation ($1), PopLocation (), PopLocation ());*/
		/*} else {*/
		/*	lbag.AddLocation ($$, GetLocation ($1));*/
	/*	}*/
	  }
  break;
case 538:
#line 3670 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_anonymous (false, (ParametersCompiled) $3, true, GetLocation ($1));*/
	  }
  break;
case 539:
#line 3674 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $5);*/
		
	/*	if ((ParametersCompiled) $3 != ParametersCompiled.Undefined) {*/
	/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2), PopLocation (), PopLocation ());*/
	/*	} else {*/
	/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2));*/
	/*	}*/
	  }
  break;
case 540:
#line 3687 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = ParametersCompiled.Undefined;*/
	  }
  break;
case 542:
#line 3695 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 543:
#line 3699 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = 0;*/
	 /* 	$$ = $3;*/
	  /*	PushLocation (GetLocation ($3));*/
	 /* 	PushLocation (GetLocation ($1));*/
	
	  }
  break;
case 544:
#line 3710 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 546:
#line 3718 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 547:
#line 3722 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 548:
#line 3726 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CastExpression ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 549:
#line 3730 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 550:
#line 3735 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 551:
#line 3740 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new CastExpression ((FullNamedExpression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 553:
#line 3753 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	 	yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 554:
#line 3757 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 555:
#line 3761 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 556:
#line 3765 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 557:
#line 3769 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new IndirectionExpression ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 558:
#line 3773 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
#line 3777 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		Error_SyntaxError (yyToken);

	  	yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3783 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		Error_SyntaxError (yyToken);

		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3789 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 562:
#line 3795 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

	yyVal = new UnaryMutatedExpression (UnaryMutatedExpression.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 3801 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new IndirectionExpression (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 564:
#line 3807 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new UnaryExpression (VSC.TypeSystem.Resolver.UnaryOperatorType.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 566:
#line 3817 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 567:
#line 3821 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 568:
#line 3825 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 569:
#line 3829 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 570:
#line 3834 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 571:
#line 3840 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 573:
#line 3850 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);

	  }
  break;
case 574:
#line 3855 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 575:
#line 3859 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 576:
#line 3864 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 577:
#line 3869 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new AsExpression ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 578:
#line 3873 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var is_expr = new IsExpression ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		yyVal = is_expr;
	  }
  break;
case 579:
#line 3878 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new AsExpression ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 580:
#line 3883 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new IsExpression ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 583:
#line 3897 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 584:
#line 3901 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 585:
#line 3905 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 586:
#line 3911 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 588:
#line 3920 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = new BinaryExpression (BinaryOperatorType.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 589:
#line 3924 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 590:
#line 3928 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 591:
#line 3932 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 592:
#line 3936 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		 yyVal = new BinaryExpression (BinaryOperatorType.LessThan, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 593:
#line 3942 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThan, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 594:
#line 3948 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 595:
#line 3954 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 597:
#line 3964 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 598:
#line 3968 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 599:
#line 3972 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new BinaryExpression (BinaryOperatorType.Equality, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 600:
#line 3977 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.Inequality, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 602:
#line 3987 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 603:
#line 3991 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 605:
#line 4001 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 606:
#line 4005 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 608:
#line 4015 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 609:
#line 4019 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 611:
#line 4029 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 612:
#line 4033 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 614:
#line 4043 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BinaryExpression (BinaryOperatorType.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 615:
#line 4047 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new BinaryExpression (BinaryOperatorType.LogicalOr, (Expression) yyVals[-2+yyTop], null);
	  }
  break;
case 617:
#line 4057 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {		
		yyVal = new BinaryExpression (BinaryOperatorType.NullCoalescing, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 619:
#line 4065 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 620:
#line 4069 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		 yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 621:
#line 4075 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 622:
#line 4081 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (Token.CLOSE_BRACE);

		yyVal = new ConditionalExpression (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lexer.putback ('}');
	  }
  break;
case 623:
#line 4091 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 624:
#line 4095 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 625:
#line 4099 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 626:
#line 4103 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 627:
#line 4107 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 628:
#line 4111 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 629:
#line 4115 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 630:
#line 4119 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 631:
#line 4123 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 632:
#line 4127 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 633:
#line 4131 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new CompoundAssign (BinaryOperatorType.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 634:
#line 4139 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/* var pars = new List<Parameter> (4);*/
	/*	pars.Add ((Parameter) $1);*/
	/*	parameterListCommas.Clear ();*/
	/*	$$ = pars;*/
	  }
  break;
case 635:
#line 4146 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var pars = (List<Parameter>) $1;*/
	/*	Parameter p = (Parameter)$3;*/
	/*	if (pars[0].GetType () != p.GetType ()) {*/
	/*		report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");*/
	/*	}*/
		
	/*	pars.Add (p);*/
		/*parameterListCommas.Add (GetLocation ($2));*/

		/*$$ = pars;*/
	  }
  break;
case 636:
#line 4162 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var lt = (LocatedToken) $3;*/

	/*	$$ = new Parameter ((FullNamedExpression) $2, lt.Value, (Parameter.Modifier) $1, null, lt.Location);*/
	  }
  break;
case 637:
#line 4168 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $2;*/

	/*	$$ = new Parameter ((FullNamedExpression) $1, lt.Value, Parameter.Modifier.NONE, null, lt.Location);*/
	  }
  break;
case 638:
#line 4174 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var lt = (LocatedToken) $1;*/
	/*	$$ = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
	  }
  break;
case 639:
#line 4179 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	var lt = (LocatedToken) Error_AwaitAsIdentifier ($1);*/
	/*	$$ = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
	  }
  break;
case 640:
#line 4186 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { /*$$ = ParametersCompiled.EmptyReadOnlyParameters; */
	}
  break;
case 641:
#line 4188 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	/*	var pars_list = (List<Parameter>) $1;*/
	/*	$$ = new ParametersCompiled (pars_list.ToArray ());*/
	/*	lbag.AddLocation ($$, parameterListCommas);*/
	  }
  break;
case 642:
#line 4196 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	start_block (Location.Null);*/
	  }
  break;
case 643:
#line 4200 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	Block b = end_block (Location.Null);*/
	/*	b.IsCompilerGenerated = true;*/
	/*	b.AddStatement (new ContextualReturn ((Expression) $2));*/
	/*	$$ = b;*/
	  }
  break;
case 645:
#line 4208 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
	/*	Block b = end_block (Location.Null);*/
	/*	b.IsCompilerGenerated = true;*/

	/*	Error_SyntaxError (yyToken);*/
/*		$$ = null;*/
	  }
  break;
case 647:
#line 4222 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 648:
#line 4230 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) $1;	*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
		/*start_anonymous (true, new ParametersCompiled (p), false, lt.Location);*/
	  }
  break;
case 649:
#line 4236 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*$$ = end_anonymous ((ParametersBlock) $4);*/
		/*lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 650:
#line 4241 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var lt = (LocatedToken) Error_AwaitAsIdentifier ($1);*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
/*		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);*/
	  }
  break;
case 651:
#line 4247 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $4);*/
	/*	lbag.AddLocation ($$, GetLocation ($2));*/
	  }
  break;
case 652:
#line 4252 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		var lt = (LocatedToken) $2;*/
	/*	Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);*/
/*		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);*/
	  }
  break;
case 653:
#line 4258 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $5);*/
/*		lbag.AddLocation ($$, GetLocation ($1), GetLocation ($3));*/
	  }
  break;
case 654:
#line 4263 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 655:
#line 4267 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	valid_param_mod = 0;*/
	/*	start_anonymous (true, (ParametersCompiled) $3, false, GetLocation ($1));*/
	  }
  break;
case 656:
#line 4272 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $7);*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($4), GetLocation ($5));*/
	  }
  break;
case 657:
#line 4277 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  */
	  }
  break;
case 658:
#line 4281 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  /*	valid_param_mod = 0;*/
	/*	start_anonymous (true, (ParametersCompiled) $4, true, GetLocation ($1));*/
	  }
  break;
case 659:
#line 4286 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = end_anonymous ((ParametersBlock) $8);*/
	/*	lbag.AddLocation ($$, GetLocation ($1), GetLocation ($2), GetLocation ($5), GetLocation ($6));*/
	  }
  break;
case 665:
#line 4309 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 666:
#line 4316 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 668:
#line 4324 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 669:
#line 4331 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 670:
#line 4335 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = null;
	  }
  break;
case 671:
#line 4339 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 672:
#line 4343 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 673:
#line 4347 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_type.PrimaryConstructorBaseArgumentsStart = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 674:
#line 4352 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	current_type.PrimaryConstructorBaseArguments = (Arguments) yyVals[-1+yyTop];
		--lexer.parsing_block;

		yyVal = yyVals[-5+yyTop];
	  }
  break;
case 675:
#line 4368 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  type_parameter_symbol_kind = SymbolKind.TypeDefinition;
	  }
  break;
case 676:
#line 4372 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.ConstraintsParsing = true;

		ClassDeclaration c = new ClassDeclaration (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (VSharpAttributes) yyVals[-5+yyTop],GetLocation(yyVals[-2+yyTop]),file );		
		push_current_container (c);
		valid_param_mod = ParameterModifierType.PrimaryConstructor;
	  }
  break;
case 677:
#line 4381 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		valid_param_mod = 0;
		lexer.ConstraintsParsing = false;

	if (yyVals[-1+yyTop] != null)
		current_type.PrimaryConstructorParameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<TypeParameterConstraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 678:
#line 4399 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 679:
#line 4405 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = pop_current_class ();
	  }
  break;
case 680:
#line 4412 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null; }
  break;
case 681:
#line 4414 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[0+yyTop];  }
  break;
case 682:
#line 4419 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }
  break;
case 683:
#line 4424 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 685:
#line 4432 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
			"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
		((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }
  break;
case 686:
#line 4451 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.NEW;	
		/*if (current_container is D)
			report.Error (1530, GetLocation ($1), "Keyword `new' is not allowed on package elements");*/
	  }
  break;
case 687:
#line 4457 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {	yyVal = Modifiers.PUBLIC;  }
  break;
case 688:
#line 4459 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.PROTECTED;
	
	  }
  break;
case 689:
#line 4464 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.INTERNAL;

	  }
  break;
case 690:
#line 4469 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.PRIVATE;
	  }
  break;
case 691:
#line 4473 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.ABSTRACT;
	  }
  break;
case 692:
#line 4477 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.SEALED;
	  }
  break;
case 693:
#line 4481 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.STATIC;
	  }
  break;
case 694:
#line 4485 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	yyVal = Modifiers.READONLY;
	  }
  break;
case 695:
#line 4489 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.VIRTUAL;
	  }
  break;
case 696:
#line 4493 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.OVERRIDE;
	  }
  break;
case 697:
#line 4497 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = Modifiers.EXTERN;
	  }
  break;
case 700:
#line 4509 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 701:
#line 4513 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		current_type.SetBaseTypes ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }
  break;
case 703:
#line 4523 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 704:
#line 4530 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = new List<TypeParameterConstraints> (1);
		constraints.Add ((TypeParameterConstraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 705:
#line 4536 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = (List<TypeParameterConstraints>) yyVals[-1+yyTop];
		TypeParameterConstraints new_constraint = (TypeParameterConstraints)yyVals[0+yyTop];

		foreach (TypeParameterConstraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
				"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
		}
	}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 706:
#line 4555 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new TypeParameterConstraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	
	  }
  break;
case 707:
#line 4561 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new TypeParameterConstraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 708:
#line 4571 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 709:
#line 4577 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
	var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
		} else {
		 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);

		yyVal = constraints;
	  }
  break;
case 710:
#line 4604 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is ComposedType)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedType)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 711:
#line 4611 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 712:
#line 4615 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 713:
#line 4619 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 714:
#line 4639 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 715:
#line 4644 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 716:
#line 4651 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 717:
#line 4656 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }
  break;
case 718:
#line 4665 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 719:
#line 4670 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
	yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 720:
#line 4674 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol '}', expected '{'");
		lexer.putback ('}');
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 721:
#line 4683 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 722:
#line 4688 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 727:
#line 4706 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 728:
#line 4710 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 730:
#line 4716 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		var lt =(LocatedToken) yyVals[-1+yyTop];
		var sn = new SimpleName (lt.Value, lt.Location);
		current_block.AddStatement(new StatementErrorExpression (sn));
		yyVal = null;
	}
  break;
case 731:
#line 4725 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 734:
#line 4744 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 735:
#line 4748 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 760:
#line 4785 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 761:
#line 4790 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 762:
#line 4795 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 763:
#line 4803 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }
  break;
case 764:
#line 4811 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }
  break;
case 767:
#line 4823 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[-1+yyTop] is VarTypeExpression)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarTypeExpression) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedType ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 768:
#line 4839 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
	
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use package_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		var expr = (TypeNameExpression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			if (expr.Name == "var" && expr is SimpleName)
				yyVal = new VarTypeExpression (expr.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else {
			yyVal = new ComposedType (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		}
	  }
  break;
case 769:
#line 4866 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var expr = (TypeNameExpression) yyVals[-1+yyTop];
		yyVal = new ComposedType (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 773:
#line 4877 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	 	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 774:
#line 4885 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 776:
#line 4896 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 777:
#line 4903 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
	  }
  break;
case 778:
#line 4908 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstant ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 779:
#line 4915 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = current_variable;;
		current_variable = null;
	  }
  break;
case 781:
#line 4923 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* Redundant, but wont regress*/
		report.Error (1525, lexer.Location, "Unexpected symbol }");
		lexer.putback ('}');
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 783:
#line 4934 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }
  break;
case 784:
#line 4939 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }
  break;
case 788:
#line 4957 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }
  break;
case 791:
#line 4972 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  }
  break;
case 792:
#line 4980 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);

	  }
  break;
case 793:
#line 4992 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 794:
#line 4996 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 799:
#line 5013 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  }
  break;
case 801:
#line 5025 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 802:
#line 5029 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }
  break;
case 803:
#line 5037 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 804:
#line 5040 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 805:
#line 5042 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }
  break;
case 806:
#line 5050 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 807:
#line 5051 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 808:
#line 5060 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			var expr = yyVals[0+yyTop] as Expression;
			yyVal = new StatementErrorExpression (expr);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }
  break;
case 809:
#line 5073 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
		yyVal = new StatementExpression (new OptionalAssign (expr, lexer.Location));
	  }
  break;
case 810:
#line 5078 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 813:
#line 5092 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { 
  if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 814:
#line 5100 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
	
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 815:
#line 5110 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 816:
#line 5119 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 817:
#line 5123 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 818:
#line 5128 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
	  }
  break;
case 819:
#line 5137 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 823:
#line 5147 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 825:
#line 5158 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
	current_block.AddStatement (label);
	  }
  break;
case 826:
#line 5164 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 827:
#line 5171 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 }
  break;
case 828:
#line 5175 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 829:
#line 5180 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 834:
#line 5194 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 835:
#line 5201 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 836:
#line 5210 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 837:
#line 5214 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }
  break;
case 838:
#line 5219 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 839:
#line 5228 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		yyVal = f;
	  }
  break;
case 840:
#line 5236 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 841:
#line 5244 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		For f =  (For) yyVals[-2+yyTop];
		f.Initializer = (Statement) yyVals[-1+yyTop];
		yyVal = f;
	  }
  break;
case 842:
#line 5250 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 843:
#line 5253 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol ')', expected ';'");
		For f =  (For) yyVals[-2+yyTop];
		f.Initializer = (Statement) yyVals[-1+yyTop];
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	}
  break;
case 844:
#line 5263 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		For f =  (For) yyVals[-2+yyTop];
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = f;
	  }
  break;
case 845:
#line 5269 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 846:
#line 5273 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol ')', expected ';'");
		For f =  (For) yyVals[-2+yyTop];
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	}
  break;
case 847:
#line 5284 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		For f =  (For) yyVals[-3+yyTop];
		f.Iterator = (Statement) yyVals[-2+yyTop];
		
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		f.Statement = (Statement) yyVals[0+yyTop];

		yyVal = end_block (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 848:
#line 5296 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }
  break;
case 849:
#line 5303 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = new EmptyStatement (lexer.Location); 	}
  break;
case 851:
#line 5309 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariable ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 852:
#line 5316 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
	  }
  break;
case 854:
#line 5324 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = null;	 }
  break;
case 856:
#line 5329 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  { yyVal = new EmptyStatement (lexer.Location); 	}
  break;
case 860:
#line 5340 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	 	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		
	  	}
	  		
		yyVal = sl;
	  }
  break;
case 861:
#line 5355 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
	
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 862:
#line 5368 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 863:
#line 5384 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }
  break;
case 864:
#line 5394 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }
  break;
case 865:
#line 5404 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = yyVals[-1+yyTop] as LocatedToken;
		var li = lt != null ? new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location) : null;
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 866:
#line 5416 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		

		yyVal = f;
	  }
  break;
case 873:
#line 5436 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 874:
#line 5443 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 875:
#line 5447 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 876:
#line 5455 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
	
	  }
  break;
case 877:
#line 5461 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	
	  }
  break;
case 878:
#line 5466 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));

	  }
  break;
case 879:
#line 5474 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 880:
#line 5478 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 881:
#line 5483 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 882:
#line 5491 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	
	  }
  break;
case 883:
#line 5496 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 884:
#line 5501 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 885:
#line 5509 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);

	  }
  break;
case 886:
#line 5523 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		var lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
	
	  }
  break;
case 887:
#line 5539 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} 
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
	  }
  break;
case 890:
#line 5557 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Except>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 891:
#line 5561 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	
	  }
  break;
case 892:
#line 5566 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Except>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	
	  }
  break;
case 893:
#line 5571 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 894:
#line 5579 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var l = new List<Except> (2);

		l.Add ((Except) yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 895:
#line 5586 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		var l = (List<Except>) yyVals[-1+yyTop];
		
		Except c = (Except) yyVals[0+yyTop];
		var prev_catch = l [l.Count - 1];
		if (prev_catch.IsGeneral && prev_catch.Filter == null) {
			report.Error (1017, c.loc, "Try statement already has an empty except block");
		}
		
		l.Add (c);
		yyVal = l;
	  }
  break;
case 898:
#line 5607 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	
	  	var c = new Except ((ExplicitBlock) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	c.Filter = (ExceptFilterExpression) yyVals[-1+yyTop];
	  	yyVal = c;
	  }
  break;
case 899:
#line 5614 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Except ((ExplicitBlock) current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		yyVal = c;
		lexer.parsing_catch_when = true;
	  }
  break;
case 900:
#line 5629 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	((Except) yyVals[-1+yyTop]).Filter = (ExceptFilterExpression) yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 901:
#line 5634 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Except (null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 902:
#line 5648 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 903:
#line 5652 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		end_block (Location.Null);
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 904:
#line 5660 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 905:
#line 5664 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		lexer.parsing_catch_when = false;
	  }
  break;
case 906:
#line 5668 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {


		yyVal = new ExceptFilterExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	
	  }
  break;
case 907:
#line 5678 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		  yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 908:
#line 5685 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 909:
#line 5692 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Sync ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 910:
#line 5699 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);

		yyVal = new Sync ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 911:
#line 5710 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 912:
#line 5720 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		yyVal = current_variable;	  
		current_variable = null;
	  }
  break;
case 913:
#line 5725 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 914:
#line 5734 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 915:
#line 5741 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 917:
#line 5751 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }
  break;
case 918:
#line 5759 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 919:
#line 5763 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }
  break;
case 920:
#line 5775 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedName = (MemberName) $2;*/
	  }
  break;
case 921:
#line 5782 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;*/
	  }
  break;
case 922:
#line 5786 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)$1;
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;
		$$ = null;*/
	  }
  break;
case 923:
#line 5792 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedBuiltinType = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation ($1));
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$2;
		$$ = null;*/
	  }
  break;
case 924:
#line 5798 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)$1;
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$4;
		var lt = (LocatedToken) $3;
		$$ = new MemberName (lt.Value);*/
	  }
  break;
case 925:
#line 5805 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new MemberName ((MemberName) $1, MemberCache.IndexerNameAlias, Location.Null);*/
	  }
  break;
case 926:
#line 5809 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 927:
#line 5813 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)$6;*/
		/*$$ = new MemberName ((MemberName) $1, MemberCache.IndexerNameAlias, Location.Null);*/
	  }
  break;
case 928:
#line 5818 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var p = (List<DocumentationParameter>)$4 ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) $3));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = VSC.TypeSystem.Resolver.OperatorType.Explicit;
		$$ = null;*/
	  }
  break;
case 929:
#line 5826 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var p = (List<DocumentationParameter>)$4 ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) $3));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = VSC.TypeSystem.Resolver.OperatorType.Implicit;
		$$ = null;*/
	  }
  break;
case 930:
#line 5834 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
		/*var p = (List<DocumentationParameter>)$3;
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) $2;
		$$ = null;*/
	  }
  break;
case 932:
#line 5845 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new MemberName (((MemberName) $1), (MemberName) $3);*/
	  }
  break;
case 934:
#line 5853 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;*/
	  }
  break;
case 935:
#line 5857 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
/*		$$ = $3;*/
	  }
  break;
case 936:
#line 5864 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	$$ = new List<DocumentationParameter> (0);*/
	  }
  break;
case 938:
#line 5872 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) $1);
		$$ = parameters;*/
	  }
  break;
case 939:
#line 5878 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	var parameters = $1 as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) $3);
		$$ = parameters;*/
	  }
  break;
case 940:
#line 5887 "E:\Projects\VSharp\Research\\VSharpParser.jay"
  {
	/*	if ($1 != null)
			$$ = new DocumentationParameter ((Parameter.Modifier) $1, (FullNamedExpression) $2);
		else
			$$ = new DocumentationParameter ((FullNamedExpression) $2);*/
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    0,    1,    1,    1,    1,    2,    2,    8,    8,
    9,   10,   10,   10,   12,   12,   15,   16,   13,   13,
   18,   18,   18,   14,   14,   14,   19,   19,   20,   20,
    4,    4,   17,   17,    5,    5,   21,   21,   21,   22,
   22,   22,   22,   22,    6,    6,    7,    7,   30,   28,
   33,   29,   29,   29,   29,   31,   31,   31,   32,   32,
   37,   34,   35,   36,   36,   38,   38,   38,   38,   38,
   39,   39,   39,   43,   40,   42,   46,   46,   45,   45,
   45,   49,   49,   50,   50,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,   51,   51,   51,   65,
   60,   70,   72,   75,   76,   77,   24,   24,   80,   52,
   52,   81,   81,   82,   82,   83,   85,   79,   79,   84,
   84,   90,   53,   89,   93,   89,   91,   91,   94,   94,
   95,   96,   95,   92,   92,   92,   99,   54,  101,  103,
  104,   97,   97,   97,   98,   98,  106,  106,  109,  107,
  102,  102,  110,  110,  110,  110,  110,  110,  111,  111,
  113,  113,  113,  113,  116,  113,  114,  114,  117,  117,
  118,  118,  118,  112,  112,  112,  119,  119,  119,  121,
  123,  124,  126,   55,  127,   55,  125,  129,  125,  128,
  128,  131,  133,   57,  132,  132,  122,  122,  122,  122,
  122,  137,  134,  138,  135,  136,  136,  136,  139,  140,
  141,  143,   25,   25,  142,  142,  144,  144,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  147,   58,  148,
  148,  151,  146,  146,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  153,  152,  154,
  152,  152,  152,   59,  157,  159,  155,  156,  156,  158,
  158,  163,  161,  164,  161,  161,  161,  165,   61,  167,
  168,   56,   56,  169,  169,  166,  166,  166,  166,  166,
  173,  170,  174,  171,  172,  172,   62,   63,  176,  178,
  179,   26,  175,  175,  175,  177,  177,  177,  180,  180,
  181,  182,  181,  181,  181,  183,  184,  185,   27,  186,
  186,   11,   11,   11,  187,  187,  187,  191,  191,  189,
  189,  189,  192,  192,  194,   69,  120,  100,  100,  130,
  130,  195,  195,  195,  193,  193,  196,  196,  197,  197,
  198,  198,   88,   78,   78,  200,  200,  115,  115,  149,
  149,  201,  201,  201,  199,  204,  204,  204,  206,  206,
  207,  205,  205,  205,  205,  205,  205,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  210,  210,  211,  211,
  211,  231,  231,  229,  229,  232,  232,  233,  233,  234,
  233,  235,  233,  236,  236,  237,  237,  213,  213,  230,
  230,  230,  230,  230,  230,  230,  215,  215,  215,  239,
  239,  240,  240,  241,  241,  242,  242,  242,  243,  243,
  243,  244,  244,  162,  162,  238,  238,  238,  238,  238,
  247,  247,  246,  246,  248,  248,  248,  248,   48,   48,
   48,   48,   48,  249,  216,  216,  216,  216,  245,  245,
  251,  251,  252,  252,  217,  218,  218,  219,  220,  221,
  221,  212,  212,  212,  212,  212,  257,  253,  222,  258,
  258,  259,  259,  260,  260,  261,  261,  261,  261,  254,
  254,  202,  202,  256,  256,  262,  262,  255,  255,   87,
   87,  263,  263,  223,  264,  264,  190,  188,  224,  224,
  225,  225,  226,  226,  227,  266,  228,  267,  228,  265,
  265,  269,  268,  214,  270,  270,  270,  270,  270,  270,
  270,  271,  271,  271,  271,  271,  271,  271,  271,  271,
  271,  271,  271,  271,  272,  272,  272,  272,  272,  272,
  272,  273,  273,  273,  273,  273,  273,  273,  273,  273,
  274,  275,  275,  275,  275,  275,  276,  276,  276,  276,
  276,  276,  276,  276,  276,  277,  277,  277,  277,  277,
  278,  278,  278,  279,  279,  279,  280,  280,  280,  281,
  281,  281,  282,  282,  282,  283,  283,  284,  284,  284,
  284,  284,  285,  285,  285,  285,  285,  285,  285,  285,
  285,  285,  285,  286,  286,  287,  287,  287,  287,  288,
  288,  290,  289,  289,  289,   47,   47,  292,  291,  293,
  291,  294,  291,  295,  296,  291,  297,  298,  291,   41,
   41,  299,  299,   86,  300,   71,   71,  301,  302,  302,
  302,  302,  304,  302,  305,  306,  307,  308,   23,   68,
   68,   67,   67,  105,  105,  309,  309,  309,  309,  309,
  309,  309,  309,  309,  309,  309,  309,   73,   73,  303,
  303,   74,   74,  310,  310,  311,  311,  312,  312,  313,
  313,  313,  313,  314,  108,   66,   66,  315,  160,  160,
  317,  316,   64,   64,  318,  318,  319,  319,  319,  319,
  319,  323,  323,  324,  324,  324,  321,  321,  321,  321,
  321,  321,  321,  321,  321,  321,  321,  325,  325,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  337,  337,
  337,  337,  326,  338,  322,  250,  250,  339,  339,  339,
  339,  203,  203,  340,   44,  342,  320,  346,  320,  344,
  344,  341,  341,  341,  343,  343,  350,  350,  349,  349,
  351,  351,  345,  345,  347,  347,  352,  352,  353,  348,
  348,  348,  327,  327,  327,  336,  336,  354,  355,  355,
  328,  328,  356,  356,  356,  359,  357,  357,  358,  358,
  360,  360,  360,  361,  362,  362,  363,  363,  363,  329,
  329,  329,  329,  364,  364,  365,  365,  365,  369,  366,
  372,  368,  368,  375,  371,  371,  374,  374,  370,  370,
  378,  377,  377,  373,  373,  376,  376,  380,  379,  379,
  367,  367,  381,  367,  367,  367,  330,  330,  330,  330,
  330,  330,  382,  383,  383,  384,  384,  384,  385,  385,
  385,  386,  386,  386,  387,  387,  387,  388,  388,  331,
  331,  331,  331,  389,  389,  391,  391,  390,  394,  390,
  390,  393,  393,  392,  395,  392,  332,  333,  334,  334,
  397,  398,  335,  335,  335,  396,  396,  399,  399,    3,
  400,  400,  400,  400,  400,  404,  400,  400,  400,  400,
  401,  401,  402,  405,  402,  403,  403,  406,  406,  407,
  };
   static  short [] yyLen = {           2,
    2,    1,    1,    3,    2,    1,    0,    1,    1,    2,
    1,    3,    5,    2,    0,    1,    0,    0,   10,    3,
    0,    1,    1,    1,    3,    1,    0,    1,    0,    1,
    0,    1,    0,    1,    1,    2,    1,    1,    2,    1,
    1,    1,    1,    1,    0,    1,    1,    2,    0,    3,
    0,    6,    3,    2,    1,    1,    1,    1,    1,    3,
    0,    3,    1,    0,    3,    0,    1,    1,    3,    3,
    1,    1,    1,    0,    4,    4,    1,    1,    0,    1,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    4,    0,    0,    0,    0,    0,   17,    5,    0,    9,
    5,    0,    1,    1,    2,    3,    0,    3,    1,    1,
    1,    0,    8,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    1,    1,    1,    0,    3,    0,    0,
    0,   11,    8,    5,    1,    1,    1,    1,    0,    4,
    0,    1,    1,    3,    3,    5,    1,    1,    1,    3,
    4,    6,    2,    4,    0,    7,    0,    1,    1,    2,
    1,    1,    1,    4,    6,    4,    1,    2,    2,    0,
    0,    0,    0,   12,    0,    6,    0,    0,    4,    1,
    1,    0,    0,   10,    3,    1,    1,    2,    1,    2,
    1,    0,    5,    0,    5,    1,    1,    1,    0,    0,
    0,    0,   15,    5,    0,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    5,    1,
    1,    0,    7,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    7,    0,
    7,    2,    2,    2,    0,    0,    9,    1,    1,    0,
    1,    0,    6,    0,    6,    2,    1,    0,    8,    0,
    0,   10,    5,    1,    2,    2,    2,    1,    1,    1,
    0,    5,    0,    5,    1,    1,    2,    4,    0,    0,
    0,   12,    0,    2,    2,    0,    1,    2,    1,    3,
    2,    0,    5,    3,    1,    0,    0,    0,   13,    0,
    1,    1,    3,    3,    1,    4,    4,    2,    2,    0,
    3,    2,    1,    3,    0,    3,    1,    1,    3,    1,
    2,    3,    4,    4,    0,    3,    1,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    1,    1,    2,    2,    2,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    1,    1,    3,    1,    3,    0,
    4,    0,    6,    1,    1,    1,    1,    3,    3,    4,
    4,    5,    4,    4,    3,    3,    4,    4,    3,    0,
    1,    3,    4,    0,    1,    1,    3,    2,    3,    3,
    2,    1,    1,    0,    1,    1,    3,    3,    3,    2,
    1,    1,    1,    1,    2,    2,    2,    2,    3,    4,
    4,    2,    4,    1,    4,    5,    4,    3,    1,    3,
    1,    3,    1,    1,    1,    4,    3,    2,    2,    6,
    3,    7,    4,    3,    7,    3,    0,    2,    4,    1,
    2,    0,    1,    1,    3,    3,    1,    1,    1,    0,
    1,    1,    2,    2,    3,    1,    2,    0,    1,    2,
    4,    1,    3,    4,    1,    1,    1,    2,    4,    4,
    4,    2,    4,    2,    4,    0,    4,    0,    5,    0,
    1,    0,    4,    4,    1,    2,    2,    4,    2,    2,
    4,    1,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    1,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    1,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    3,    3,
    1,    3,    3,    1,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    1,    3,    1,    5,    4,
    5,    5,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    2,    1,    1,    0,
    1,    0,    2,    1,    1,    1,    1,    0,    4,    0,
    4,    0,    5,    0,    0,    7,    0,    0,    8,    1,
    1,    1,    1,    1,    1,    0,    1,    3,    0,    1,
    1,    2,    0,    6,    0,    0,    0,    0,   15,    0,
    1,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    2,
    3,    0,    1,    1,    2,    4,    3,    1,    3,    1,
    3,    1,    1,    0,    4,    1,    1,    0,    4,    1,
    0,    4,    0,    1,    1,    2,    1,    1,    1,    2,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    4,    1,    2,    2,    2,    1,
    1,    1,    2,    1,    1,    0,    6,    0,    7,    1,
    1,    0,    2,    1,    0,    1,    0,    1,    1,    2,
    2,    4,    0,    2,    0,    1,    1,    2,    4,    1,
    5,    2,    2,    2,    2,    2,    2,    1,    1,    1,
    1,    1,    5,    7,    4,    0,    8,    4,    0,    1,
    1,    2,    1,    2,    1,    2,    3,    3,    1,    1,
    1,    1,    1,    5,    4,    7,    3,    6,    0,    4,
    0,    4,    2,    0,    4,    2,    3,    1,    0,    1,
    0,    5,    1,    0,    1,    0,    1,    1,    1,    3,
    4,    5,    0,    9,    5,    4,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    3,    4,    3,    3,    3,
    2,    3,    3,    2,    4,    4,    3,    0,    1,    3,
    4,    5,    3,    1,    2,    0,    1,    3,    0,    7,
    3,    2,    1,    0,    0,    5,    2,    2,    5,    4,
    0,    0,    9,    5,    4,    2,    1,    0,    2,    2,
    2,    2,    2,    4,    3,    0,    7,    4,    4,    3,
    1,    3,    0,    0,    4,    0,    1,    1,    3,    2,
  };
   static  short [] yyDefRed = {            0,
    6,    0,    0,    0,    0,    2,    0,    0,    9,   11,
   14,    0,    0,  322,    0,  325,  374,  379,  386,  376,
    0,  375,    0,  382,  384,  372,    0,  378,  380,  373,
  383,  385,  381,    0,  335,  931,    0,  377,  920,    0,
    8,    1,   49,    0,    0,    0,   38,   35,   37,   40,
   41,   42,   43,   44,   47,   10,    0,  528,    0,  527,
  328,  329,    0,   12,    0,    0,    0,  240,  257,  239,
  236,  241,  242,  235,  254,  253,  246,  247,  243,  245,
  244,  248,  237,  238,  249,  250,  256,  255,  251,  252,
    0,  934,  923,    0,    0,  922,    0,  921,    0,    0,
    0,   36,  691,  697,  689,    0,  686,  696,  690,  688,
  687,  694,  692,  693,  695,    0,    0,  684,   39,   48,
    0,    0,  332,    0,    0,  333,  354,    0,  355,    0,
  364,    0,    0,  323,  324,    0,    0,  930,    0,    0,
  336,    0,    0,  932,   55,   57,   58,    0,    0,   50,
    0,    0,   59,   61,   26,   24,    0,    0,    0,  681,
    0,  685,   13,  774,  368,    0,  321,  362,  363,    0,
  331,    0,  361,    0,  366,  367,  326,  327,  928,  929,
  172,  171,  173,    0,    0,  169,    0,    0,  938,  350,
  349,    0,  347,  924,  926,   54,   51,    0,    0,    0,
    0,    0,    0,    0,  351,  353,    0,  675,    0,    0,
  773,  334,  514,  516,    0,  513,    0,  940,  358,  170,
  935,    0,    0,  346,    0,    0,   60,   53,    0,   62,
   25,   18,    0,    0,  299,    0,  214,    0,  108,    0,
  515,  517,  939,  348,    0,    0,   73,    0,    0,    0,
    0,  413,    0,  411,    0,  485,  412,    0,    0,    0,
  415,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  410,    0,  654,    0,    0,    0,    0,   67,   68,   71,
   72,    0,    0,  407,    0,    0,  387,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  408,  409,  552,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  662,  660,  663,  661,    0,  316,  305,  304,    0,
  676,  210,  103,  927,    0,    0,    0,    0,  532,  424,
  425,    0,    0,  542,  536,  541,    0,    0,    0,    0,
    0,    0,  534,    0,    0,    0,    0,  416,    0,  550,
    0,  547,  559,  553,  560,  554,  549,  546,  564,  558,
  563,  557,  561,  555,  562,  556,  648,   74,    0,    0,
    0,  775,  657,    0,  650,   65,    0,    0,    0,    0,
    0,    0,  488,  489,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  300,    0,    0,    0,   52,  487,    0,    0,
  483,  484,    0,  481,    0,    0,    0,    0,  509,    0,
    0,    0,    0,    0,  500,    0,  504,  496,    0,    0,
    0,    0,    0,  491,    0,  494,  357,  498,  356,    0,
  526,  525,    0,    0,    0,  420,    0,  414,  428,  429,
    0,    0,    0,  639,    0,    0,    0,  634,    0,    0,
  538,    0,  652,    0,   69,   70,   81,   80,    0,  435,
  436,    0,    0,    0,    0,    0,  478,    0,  439,    0,
    0,    0,  461,  464,    0,    0,  456,  463,  462,  623,
  624,  625,  626,  627,  628,  629,  630,  631,  633,  632,
  569,  566,  571,  568,  570,  567,  579,  577,  580,  578,
  575,  565,    0,  576,    0,  585,    0,  586,    0,  592,
    0,  593,    0,  594,    0,  595,    0,  599,    0,  600,
    0,  603,    0,  606,    0,  609,    0,  612,    0,  615,
    0,  617,    0,    0,    0,  158,    0,    0,    0,  152,
    0,    0,  159,    0,    0,    0,    0,    0,  670,    0,
  699,    0,  667,  434,  486,    0,  531,  544,    0,  714,
  537,    0,  499,    0,    0,    0,    0,    0,  446,    0,
  647,  646,  479,    0,  519,  493,    0,    0,  136,  520,
  134,  135,  522,    0,  530,  529,  524,  533,    0,    0,
  417,  645,  644,  649,    0,   75,  637,    0,    0,    0,
  551,  548,    0,    0,    0,  651,    0,    0,    0,   76,
   77,   78,  771,  770,    0,    0,    0,    0,  433,    0,
    0,  430,  431,  535,  477,  475,  474,  468,  467,  466,
  465,  460,  426,  427,  437,  438,    0,  620,    0,    0,
    0,    0,    0,  163,  317,    0,    0,    0,    0,  315,
  301,    0,  309,    0,  371,    0,  369,    0,    0,  677,
    0,  704,  211,    0,  482,  543,    0,  506,  505,  451,
    0,    0,  442,  448,    0,    0,    0,    0,    0,    0,
    0,  422,  421,  643,  636,  635,  655,  539,    0,  653,
    0,    0,    0,  768,  769,    0,  767,  432,  476,  459,
  458,  457,  621,  622,  619,   23,   22,   19,  178,  179,
    0,    0,    0,    0,  160,  155,    0,  297,    0,    0,
  668,  701,    0,  673,    0,    0,  705,    0,  104,  731,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  763,    0,  808,
    0,    0,  737,    0,    0,  725,  727,  728,  729,  738,
  739,  740,  741,  742,  743,  744,  745,  746,  747,    0,
  811,  812,  830,  831,  832,  833,  867,  868,  869,  870,
  871,  872,  450,  452,  453,  449,  443,  447,    0,  511,
    0,  480,  490,  441,  523,  521,    0,    0,  658,    0,
    0,  469,    0,  164,    0,  176,    0,  318,    0,  314,
    0,    0,  310,  370,    0,  707,    0,    0,    0,    0,
  873,  907,    0,  875,  874,  762,  760,  759,  761,    0,
  839,    0,    0,    0,    0,    0,    0,  881,    0,    0,
    0,  884,    0,    0,    0,  908,    0,    0,  730,    0,
    0,  764,  716,  717,  715,  776,  726,  805,  803,  804,
  495,  492,  423,  656,    0,  470,  471,  473,    0,  165,
    0,    0,  156,    0,   28,  302,    0,  712,    0,  713,
  710,    0,  708,   99,  100,    0,   96,    0,    0,   84,
   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
   97,   98,  137,    0,    0,    0,  227,  219,  220,  221,
  222,  223,  224,  225,  226,    0,    0,  217,  105,  778,
  837,    0,    0,    0,  664,    0,  878,  876,  665,    0,
    0,  880,  879,    0,  883,  882,  893,    0,    0,    0,
  894,    0,    0,    0,  887,    0,    0,    0,    0,  659,
  162,    0,  175,  319,  313,  674,    0,    0,    0,    0,
  678,   85,    0,  718,  720,  269,  264,  268,    0,  212,
  218,    0,    0,    0,    0,  859,  840,    0,  850,    0,
  861,    0,  877,  815,    0,  910,    0,  818,    0,  905,
    0,    0,  891,    0,  895,  915,    0,  911,  835,    0,
  886,  885,  765,  784,    0,    0,  166,  711,  709,    0,
    0,    0,    0,    0,  265,    0,  278,    0,  228,    0,
    0,  234,    0,  149,  148,  138,  145,  146,  147,    0,
    0,    0,    0,    0,    0,    0,  851,  843,  841,    0,
  862,    0,    0,  909,  816,    0,  901,    0,  898,  892,
  914,    0,  834,    0,  800,  783,    0,    0,    0,  789,
  101,    0,    0,  263,    0,  262,    0,    0,    0,  340,
  298,    0,  338,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  679,    0,    0,  213,  106,  794,  120,  121,
    0,    0,    0,  797,  838,    0,    0,    0,  860,    0,
    0,    0,    0,  897,    0,  917,    0,    0,    0,    0,
    0,  781,  780,  777,  790,  111,  109,  283,    0,  337,
    0,    0,    0,    0,    0,    0,    0,    0,  144,    0,
    0,    0,    0,  192,    0,  341,    0,  229,    0,    0,
  719,    0,    0,  779,  798,  836,    0,    0,  842,    0,
  863,  814,  823,    0,  829,    0,    0,  821,    0,  825,
    0,  899,  919,  912,    0,  916,    0,    0,    0,  280,
  260,  258,    0,    0,  125,    0,  342,  140,    0,  181,
  186,    0,    0,    0,  339,  232,  150,  107,    0,  852,
  846,  844,    0,    0,  817,  822,    0,  826,  906,    0,
    0,    0,  792,  119,  117,    0,    0,    0,    0,  266,
    0,    0,    0,    0,    0,  129,    0,    0,    0,    0,
  343,  344,    0,  799,    0,  864,  828,  827,  903,    0,
  900,  913,  801,    0,    0,    0,    0,  114,  290,    0,
  281,    0,    0,    0,    0,    0,  279,  126,    0,  123,
  130,    0,  143,  201,    0,  182,    0,    0,  193,    0,
  848,  845,    0,    0,  857,  902,  118,    0,  110,  115,
    0,    0,    0,  286,    0,  287,  261,  259,  277,    0,
  267,  271,  132,  141,    0,    0,  198,  200,    0,  233,
    0,  116,  291,  293,  282,    0,    0,  276,    0,    0,
    0,    0,  202,  204,  183,    0,  196,  194,  847,    0,
    0,  272,  274,  133,  142,    0,    0,    0,    0,  295,
  296,  292,  294,    0,    0,  208,  207,  206,  203,  205,
  188,  184,  195,    0,    0,    0,  273,  275,  190,  191,
    0,  189,
  };
  protected static  short [] yyDgoto  = {             4,
    5,   42,    6,    7,   44,  577,  578,    8,    9,   10,
  125,    0,   47,  157,  202,  326,  575,  748, 1360,  199,
   48,   49,   50,   51,   52,   53,   54,   55,  150,   99,
  151,  152,  226,  153,  154,  230,  200,  277,  278,  279,
  790,  514,  482,  791,  499,  650,  613,  652,  928,  929,
  930,  931,  932,  933,  934,  935,  936,  937,  938,  939,
  940,  941,  942,  792,  999,  895,  116,  161, 1113,  240,
  592,  436,  590,  700,  860, 1012, 1182,  695, 1246, 1209,
 1276, 1277, 1278, 1128, 1274, 1129,  622,  204, 1216, 1167,
 1254, 1095, 1252, 1255, 1256, 1341,  943, 1066, 1003, 1114,
 1115,  579, 1257, 1342,  117, 1067, 1068,  793, 1124,  580,
  581,  582,  583,  184,  485,  992,  185,  186,  683, 1117,
 1172, 1296, 1259, 1326, 1372, 1358, 1173, 1381, 1376, 1118,
 1222, 1348, 1329, 1297, 1298, 1369, 1356, 1357,  238,  435,
  768,  956, 1072,  957,  958, 1059, 1121, 1060,  127,   91,
 1263, 1062, 1249, 1248,  944, 1007, 1108, 1321, 1286, 1008,
 1322,  515, 1364, 1365, 1109, 1281, 1247, 1312,    0, 1282,
 1283, 1362, 1350, 1351,  235,  330,  691,  584,  759,  692,
  693,  851,  432,  753,  912,  175,   14,  283,   61,   62,
  284,  128,  141,   94, 1162,  192,  193,  206,  653,  468,
  130,  173,  165,  131,  285,  696,  697,   38,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  357,  358,  630,  837,  342,  675,  618,  833,  464,
  607,  608,  609,  826,  614,  517,  518,  519,  669,  794,
  443,  444,  348,  831,  616,  174,  350,  454,  455,  456,
  457,  215,  624,  473,  345,  448,  643,  346,  447,  309,
  310,  311,  312,    0,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  487,  488,  489,  634,  635,
  324,  481,  494,  645,  379,  838,  492,  905,  325,  970,
  587,  588,  591,  855,  236,  434,  766, 1063,  118,  701,
  702,  922,  923,  707, 1070,    0,    0,  795,  796,  867,
  868,  869,    0,    0,    0,  800,  801,  802,  803,  804,
  805,  806,  807,  808,  809,    0,  870,  988,  658,  166,
 1046,  989, 1098, 1154, 1075, 1013, 1132, 1096, 1099, 1206,
 1100, 1133, 1134,  810,    0,  811,  812, 1196, 1142, 1197,
 1198, 1199, 1200,  813,  814,  815,  816, 1017,  963, 1018,
 1189, 1138, 1190, 1302, 1265, 1303, 1019, 1137, 1020, 1305,
 1233,  817,  818,  819,  820,  821,  822,  880,  980,  981,
 1145, 1032, 1271, 1240, 1086, 1148, 1092, 1241, 1149,   39,
   40,   93,  187,  225,  139,  188,  189,
  };
  protected static  short [] yySindex = {         -213,
    0, -220,12451,    0, -146,    0, -271, -217,    0,    0,
    0,  329,  356,    0,  -53,    0,    0,    0,    0,    0,
   -3,    0,  125,    0,    0,    0, 5530,    0,    0,    0,
    0,    0,    0,   38,    0,    0,  205,    0,    0,  584,
    0,    0,    0, -271, 4677,  491,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  175,    0,12098,    0,
    0,    0,  194,    0, -295,13696,13696,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,  236,  238,    0,   16,    0, -182, 4677,
  491,    0,    0,    0,    0, -203,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  398, 4262,    0,    0,    0,
  424,  401,    0,  328,  489,    0,    0,  293,    0,  389,
    0, -253, -295,    0,    0,   38,   38,    0,  268, -158,
    0,   38,  419,    0,    0,    0,    0, -118,  433,    0,
  445,  456,    0,    0,    0,    0,  470,13737,  451,    0,
  440,    0,    0,    0,    0,  328,    0,    0,    0,13696,
    0,  617,    0,  389,    0,    0,    0,    0,    0,    0,
    0,    0,    0,13778,  268,    0,  515,  547,    0,    0,
    0,  303,    0,    0,    0,    0,    0,  175,  571,  600,
  580,  658,  328,  451,    0,    0,  664,    0,  801,  821,
    0,    0,    0,    0,  649,    0,  328,    0,    0,    0,
    0,  268, -158,    0,  268,  175,    0,    0, 4633,    0,
    0,    0,  713,12317,    0,  451,    0,  451,    0,  451,
    0,    0,    0,    0,  742,  456,    0,  172, -110, -319,
  784,    0,  641,    0, -319,    0,    0, -319,  -81,11433,
    0,11433, 5437, 5568, 5699, 5830, 5961, 6092, 6223, 6354,
    0,  271,    0,13696, -188,  770,  699,    0,    0,    0,
    0,  768,  749,    0,  805,  624,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1151,
  787,  116,  591,  556,  654,  817,  819,  809,  833,  497,
  827,    0,    0,    0,    0, -217,    0,    0,    0,  846,
    0,    0,    0,    0,  868,  982,  749,11566,    0,    0,
    0,11433,13696,    0,    0,    0, 8974, -210,  884,13696,
13696,12374,    0,11433,  173,  761,  848,    0,  113,    0,
  979,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,11824,  894,
  784,    0,    0,  916,    0,    0, 4633,  374, -295,  749,
 -284,  749,    0,    0,  857, 4767, 3427,11433,11433,11433,
11433,11433,11433,11433,11433,11433,11433,11433, 6485, 6616,
 6747,12384, -228, 6878, 7009, 7140, 7271, 7402, 7533, 7664,
 7795, 7926, 8057, 8188, 8319, 8450, 8581, 8712,11891,11433,
 -271, -183,    0,  728,  896,  906,    0,    0,  870,  173,
    0,    0,  744,    0,  920,  921, -183,  931,    0,  424,
  907,  624,    0,  934,    0,  925,    0,    0, -304,  750,
 4901,  884,10768,    0, 3561,    0,    0,    0,    0,   22,
    0,    0,  932,  933,11433,    0,11433,    0,    0,    0,
  146,11433,  424,    0,  749,13778,  929,    0,  935, 8843,
    0,11824,    0,  146,    0,    0,    0,    0, 3963,    0,
    0,  870,  749,11566, -295,  870,    0,   67,    0,10901,
10901, 1049,    0,    0,  132, -206,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  787,    0,  787,    0,  116,    0,  116,    0,
  591,    0,  591,    0,  591,    0,  591,    0,  556,    0,
  556,    0,  654,    0,  817,    0,  819,    0,  809,    0,
  833,    0, -109, -271,  943,    0,  604, -172,  944,    0,
  941,  945,    0, -271, -183,13696,  896,  975,    0,  975,
    0,  896,    0,    0,    0,11566,    0,    0,  948,    0,
    0, 4097,    0, 8974, 4231,  940,  892, -112,    0,  902,
    0,    0,    0,  752,    0,    0,  954,  955,    0,    0,
    0,    0,    0,  956,    0,    0,    0,    0,  957,  914,
    0,    0,    0,    0,11433,    0,    0,  749,11824,  988,
    0,    0,  931,  962,  146,    0, -110,  -81,10901,    0,
    0,    0,    0,    0,  493, -253,  749,  389,    0,  870,
  757,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3695,    0, 4365, -198,
  604,13778,13696,    0,    0, -271, 1076,  924,  853,    0,
    0,  970,    0,  977,    0,   92,    0,  976,  936,    0,
  975,    0,    0,  975,    0,    0, 3159,    0,    0,    0,
  523,11034,    0,    0,  266, 1090,  389, 4901,  985, 4097,
  987,    0,    0,    0,    0,    0,    0,    0, 1008,    0,
10901,10901,  984,    0,    0,  978,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -144, -119,  975,  983,    0,    0, 1098,    0,  992, -271,
    0,    0,13696,    0,    8,  996,    0,  997,    0,    0,
  989, -166,12022, -191, 3293, -319, -319,  -76, -319, -319,
 5035, -319, 5169,  931, -114, -319, -319,    0,   69,    0,
  250, -293,    0,  749, 3159,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  999,    0,
  884,    0,    0,    0,    0,    0,  949,  146,    0, 1000,
 1002,    0,11433,    0,  538,    0,  990,    0, 1117,    0,
  998, 1005,    0,    0,10768,    0,13573,   57, -271, 1011,
    0,    0,  749,    0,    0,    0,    0,    0,    0,   78,
    0,13696,11433, 1006, 1010,11433,11433,    0, 1131, 1016,
11433,    0, 1133, 1018,  475,    0,11167,11433,    0, 1020,
11433,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  146,    0,    0,    0, 1027,    0,
11433, 1022,    0,11433,    0,    0, 1028,    0, 1030,    0,
    0, 1031,    0,    0,    0, 4262,    0, 1034,   57,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  597, 4262, -271,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1036, -271,    0,    0,    0,
    0, -319,11167, -117,    0, 1032,    0,    0,    0,   55,
   87,    0,    0,  124,    0,    0,    0,  166,  931,   43,
    0,  140,  749,  142,    0, 1146, 1033, 3159, -193,    0,
    0,11433,    0,    0,    0,    0, 1035,13573, 3159,13241,
    0,    0,  447,    0,    0,    0,    0,    0,13317,    0,
    0,   57, 1037,11433,  749,    0,    0,  758,    0, 1039,
    0,  111,    0,    0, 3293,    0, 3293,    0, 1044,    0,
12441,  931,    0,  931,    0,    0, 3293,    0,    0, 3293,
    0,    0,    0,    0, 3829, 1041,    0,    0,    0, -293,
13696,13696,  397,  404,    0,  328,    0,  950,    0, 1108,
    0,    0, 1005,    0,    0,    0,    0,    0,    0, 3159,
 2552, 1005, 1051,11300, 1047,  143,    0,    0,    0,11433,
    0,11433, 1140,    0,    0, -319,    0,  749,    0,    0,
    0, -147,    0,13696,    0,    0,  749,  478, 1041,    0,
    0,  -97,  -93,    0,13696,    0,13696, 1053, 1099,    0,
    0,  312,    0, 1166, 1012, 1203,    0, 1060, 1013,   40,
  447, 5530,    0,11433, 1064,    0,    0,    0,    0,    0,
  749, 1057, 1047,    0,    0, 1058, -193,11433,    0, 1063,
 3293, -175,11433,    0, 1067,    0, 4097, 1068, 1041, 1021,
 1055,    0,    0,    0,    0,    0,    0,    0,  312,    0,
 1074, 1038, 1077, 1081, -183, 1091, 1080, 1093,    0, 1092,
 1096, 1110, 1134,    0,  870,    0,  810,    0, 1107, 1104,
    0, 1005, 1100,    0,    0,    0, 1041, 1111,    0, 1106,
    0,    0,    0,11433,    0, 1116, -128,    0, 2991,    0,
 1113,    0,    0,    0, 1041,    0,11433, 3829, -132,    0,
    0,    0, 1114, 1120,    0, 1121,    0,    0, -183,    0,
    0, -183, 1123, 1124,    0,    0,    0,    0,11300,    0,
    0,    0, 3293,   68,    0,    0, 3159,    0,    0, -209,
 3293, 1129,    0,    0,    0, 1126,   94, -183, -183,    0,
  516, 4097, 1083, 1118, 1121,    0, -183, 1130,  103, 1135,
    0,    0, -183,    0, 5303,    0,    0,    0,    0,  860,
    0,    0,    0,11300, 1088, 1136, 1126,    0,    0, 4262,
    0, -271, -271, 1137, 1138,   90,    0,    0, 1141,    0,
    0, 1139,    0,    0, 4262,    0,  103,  103,    0, 1142,
    0,    0, 1147, 1039,    0,    0,    0, -132,    0,    0,
 -181, 1153, 4262,    0, 4262,    0,    0,    0,    0,  338,
    0,    0,    0,    0,  867, 1156,    0,    0,  355,    0,
 3293,    0,    0,    0,    0, 1210, 1262,    0, 1162, 1163,
 4097,  975,    0,    0,    0,  103,    0,    0,    0,  567,
  567,    0,    0,    0,    0,   53,   53, 1154, 1168,    0,
    0,    0,    0,10768,10768,    0,    0,    0,    0,    0,
    0,    0,    0, 1165, 1167,11300,    0,    0,    0,    0,
 1169,    0,
  };
  protected static  short [] yyRindex = {         2320,
    0,    0,    0,    0, 1534,    0, 2378, 2192,    0,    0,
    0,  627,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1539,    0,    0, 1539,    0,    0, 1539,
    0,    0,    0, 2419,  392, 2460,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1583,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1539,    0,    0,  136,    0,    0,    0,    0,    0,   75,
 2516,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  476,13032,    0,    0,    0,
 1265,    0,    0, 1960, 1726,    0,    0,    0,    0, 1075,
    0, 1726, 1583,    0,    0, 1539, 1539,    0,13614,    0,
    0, 1539, 1540,    0,    0,    0,    0,  735,  671,    0,
    0, 1176,    0,    0,    0,    0,  441,    0,    0,    0,
    0,    0,    0,    0,    0, 1869,    0,    0,    0,    0,
    0,    0,    0, 1424,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,13819,    0,    0,  726,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1177,    0,  763,
    0,    0,   33,    0,    0,    0, 1181,    0, 1132, 1145,
    0,    0,    0,    0,    0,    0,  110,    0,    0,    0,
    0,13860,    0,    0,13655,    0,    0,    0,  791,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1176,    0,    0,    0,    0,
 1182,    0,13901,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,12426,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 9515,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 9594,
 9670, 8958, 9981, 2989,  938,  561,10427, 1345,  844,  421,
  794,    0,    0,    0,    0,13986,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1183,    0,    0,    0,
    0,    0,    0,    0, 9050,  873,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  935,    0,
 1182,    0,    0,    0,    0,    0,    0, 4499, 9050,    0,
    0,    0,    0,    0,    0,    0,  178,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
14027,13357,    0,  482,  505,  462,    0,    0, 9050,10553,
    0,    0,    0,    0,    0,    0,13357,    0,    0,  709,
  574,    0,  628,    0,    0, 1196,    0,    0, 1144,    0,
    0, 9284, 1195,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
11699,    0,  531,    0,    0,    0, 1197,    0,    0,    0,
    0,  935,    0,11699,    0,    0,    0,    0,    0,    0,
    0, 9050,    0,    0, 9050, 9360,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  185,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 9738,    0, 9790,    0, 9855,    0, 9918,    0,
10044,    0,10107,    0,10170,    0,10233,    0,10296,    0,
10359,    0,10393,    0, 1489,    0,10476,    0, 2637,    0,
 2805,    0,    0,14092,    0,    0,13860,13471,    0,    0,
  807,  811,    0,  191,13357,    0,  532, 1201,    0, 1201,
    0,  505,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1204,    0,    0,    0, 1149,    0, 9129,
    0,    0,    0,    0,    0,    0,    0, 1199,    0,    0,
    0,    0,    0, 1206,    0,    0,    0,    0,  878,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11699,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -308,10615,    0, 1164,    0, 9050,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2258,
13942,    0,    0,    0,    0,13532,    0,    0,12804,    0,
    0, 1218,    0,    0,    0,  500,    0,  539,    0,    0,
  460,    0,    0, 1201,    0,    0, -273,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 9205,    0, 9439, 1220,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -131,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1214,  816,    0,    0,  544,    0,    0,  243,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1215,    0, 1215,    0,    0,    0,    0,    0,12094,    0,
    0,    0,    0,    0,  162,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 9284,    0,    0,    0,    0,    0,    0,11699,    0,    0,
    0,    0,    0,    0,  598,    0,  715,    0,    0,    0,
    0, 2126,    0,    0, 1195,    0,    0,12652,12880,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1216,    0,
    0,    0, 1216,    0,    0,    0,    0,    0,    0,    0,
 1215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11699,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  431,    0,    0,    0,13104,    0,    0,12728,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,13180,12576,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,12956,    0,    0,    0,
    0,    0,  766,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1228,    0, 2655,
    0,    0,    0,    0,    0, 1216,    0,    0,  688,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -273,  476,
    0,    0,    0,    0,    0,    0,    0,    0,  476,    0,
    0,12652,  813,    0,    0,    0,    0,    0,    0,  769,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  546,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3458,    0,    0,    0,    0,
 3592,    0, 2126,    0,    0,    0,    0,    0,    0, 1229,
    0, 2126,    0,    0, 1222,    0,    0,    0,    0,    0,
    0,    0, 2823,    0,    0,    0,    0, 1227,    0,    0,
    0,  818,    0,    0,    0,    0,    0,    0,  702,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  265,    0,  427,    0,    0,  519,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1224,    0,    0,    0,  719, 1225,    0,    0,
    0, 1234,    0,    0,    0,    0,    0,    0, 1231,  650,
  691,    0,    0,    0,    0,    0,    0,    0,  455,    0,
    0,    0,    0,    0,13357,    0,  823,    0,    0,    0,
    0,    0,    0,    0, 1233,    0,  298,    0,    0,    0,
    0, 2126,    0,    0,    0,    0,  772, 1232,    0,    0,
    0,    0,    0,    0,    0,    0, 1241,    0,    0,    0,
    0,    0,    0,    0, 1239,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1236,    0,    0,13357,    0,
    0,13427,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -34,    0,    0,  881,
    0,    0,    0,    0,    0, 1237, 1743,13357,13357,    0,
    0,    0,    0,    0, 1238,    0,13357,    0, 3195,    0,
    0,    0,13357,    0, 1243,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1240,    0,    0,  352,
    0, 4128, 4543,    0,    0,  662,    0,    0,  826,    0,
    0,    0,    0,    0,  889,    0, 3860, 3994,    0,    0,
    0,    0,    0, 1245,    0,    0,    0,    0,    0,    0,
    0,    0, 1301,    0, 1353,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  468,    0,    0,    0, 3195,    0,    0,    0, 3726,
 9896,    0,    0,    0,    0,    0,    0,12250,    0,    0,
    0,    0,    0, 1195, 1195,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
  };
  protected static  short [] yyGindex = {            0,
    0,    0,    0, 1293, 1194,   -7,   -5,    0, 1618,    0,
  105,    0,    0,    0,    0,    0,    0,    0, -825, -221,
  -25, -427,    0,    0,    0,    0,    0,  -39,    0,    0,
    0, 1401,    0, 1440,    0,    0,    0,    0, 1254, 1288,
 -184, -208,    0, -219,    0,    0, -466, -345,  640,    0,
  747, -608, -487, -407, -393, -361, -339, -337, -324,    0,
    0, -535,    0, -894,    0,  632, -904,    0,  101,    0,
    0,    0, 1086, -584,    0,    0,    0,  174,  375,    0,
    0,    0,  410, -583,    0, -831, -348,  -24,    0,    0,
    0, -457,    0,    0,  434,    0,    0,  570,    0, -141,
    0, -436,    0,    0, -945,  437,-1129, -378,    0,    0,
    0, 1009, 1014, 1115, -164,    0,    0, -150, 1015,  594,
    0, -671,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  337,    0,    0,    0,    0,
    0,    0,    0,    0,  741,    0,    0,    0, -124,  577,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  432,
    0, -460,    0,    0,    0,    0,    0,    0,    0,  418,
  423,  357,    0,    0,    0,    0,    0,    0,    0,    0,
  946,    0,    0,    0,    0, -111,    0,   84,  -56,  -33,
  485,    0,  533,    0, -426,    0, 1491, 1366,  -43,  625,
 -338, -161,  -94, -459,    2,    0,  959,    0, -329,  381,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -321,
    0,    0, 1246,    0,    0, -163,    0, 1327,    0,  224,
    0,    0, 1023,    0, 1122,    0, 1052,    0, 1226, -444,
  -31, 1143,    0,    0,  905, 1490,    0,    0,    0,    0,
 1148,    0,    0,    0, 1365,    0,    0,    0,    0,    0,
 2481,  849,  866,    0,  729,  864, 1323, 1324, 1325, 1326,
 1322,    0, 1328,    0,    0,    0, 1119, 1263, -465,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -858,
 1320,    0, -380,    0,    0,    0,    0,    0, -113,    0,
 1059,    0,  765,    0,    0,    0,    0,  562, -780, -628,
 -606, -599,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -766,    0,    0,    0,
  629,    0,  581,    0,    0,    0,    0,  559,  615,    0,
-1010,    0,  636, -946,    0,    0,    0,    0,    0,    0,
  575,    0,  572,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  509,    0,
    0,    0,    0,    0,    0,    0,    0, -409,    0,  795,
    0,  536,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  558, 1552,    0,    0,    0, 1556,
  };
  protected static  short [] yyTable = {            45,
  466,   46,  617,  162,   37,  703,  120,  623,  134,  282,
  599,  469,  216,  168,  897,  129, 1016,  452,  102,  218,
  281, 1000,  129,  129,  335,  453,  916,  539,  646,  984,
  169,  135,  651,  205,  220,   11,  100,  176,  101,  654,
 1009,  966,    1, 1221,  280,  458, 1269,  340,  690,  676,
  654,  654,  155,  589,  657,  384,  320,  746,  605,  219,
  132,  120, 1044,  389,  864,  657,  657,  132,  132,  601,
  893,  211,  576,  145,    4,  356,  177,  359,  797,  993,
 1193, 1333,  995,  684,  503,   15,  343,  381, 1155,  339,
  723,  351, 1194,   43,  352,  354,  341,  190,  146,  178,
  798,  167,  633,   36, 1050,  320,   13,  799, 1146,  606,
   41,  844, 1116,  615,   59,  633,    2,  439,  282,  769,
    2,   60,  397, 1244,  472, 1116,  129,  451,  164,  442,
  147,  894, 1334, 1139,  504,  345,  846,  196, 1021, 1194,
   15,  353,   15,  714,  708,  339,  678, 1030,  694,   15,
   15,  723,  459,  441,  460, 1076,  340,  445, 1156,  132,
 1047,  122, 1158,  677,  668,  670,  797,  282,  848,  474,
  502,  132,  505,  747,  353, 1125,  282,  282,  281,  730,
  865,   43,   15, 1045,  463,  132,  462,  442,  798,  654,
  129,  873,   43,   12, 1155,  799,  600,  144,  874, 1347,
  340,  540,  280,  149,  657,  341,  698, 1043,  461,    3,
  156,  441,  513,  520,  521,  522,  523,  524,  525,  526,
  527,  528,  529,  530,  690,  382,  383,  205,  486, 1147,
  129,  148,  126,  824,  472,  132,  472, 1123,  472,  136,
  137,   15, 1195,  282, 1245,  573, 1126,  654,  600,  341,
  948,  832,  340,   15,  219,  191,  340,  715, 1083,  207,
 1084,  679,  835,  856,  728,  637,  633,   15,   58,  382,
 1091,  654,  654, 1093,  452,  132,  612,  625,  513, 1188,
  621,   15,  453,  660,  282,  340,  657,  657,  397, 1195,
  629,   59,  356,  472,  847,  442,  382,  636,   60,  129,
   66,  341,  149,  733,  233,  341,  467,  129, 1366,   15,
 1024,  978,  924,  654,  612,  654, 1157,   15, 1016,  441,
 1159,  638,  665, 1267,  889,  667,  667, 1034,  863,  824,
  149,    4,  500,  961,  341,  654,  331,  382,  332,  143,
  333,  486, 1026,  212,  132, 1319,  682,  762,  948, 1279,
  682,  132,  132,  132,  682,  501, 1228,   15, 1294,  797,
   65,  219, 1234, 1176,  508,  359, 1081,  219,  129,  682,
  797,  949,  904,  884, 1192, 1311,  282,  412,  857, 1028,
  132,  798,  594,  824,  451,  840,  841,  442,  799,  626,
 1325,  345,  798,  862,  917, 1036,  682, 1039, 1135,  799,
  352,  632,  721, 1082,   92,  885,  886,  329, 1336,  377,
 1337,  441,  413,  132,  682,  600,  962,  621,  725,  925,
  612,   43, 1025,   45, 1367,  101,   15,  654,   67,   35,
  927,  947,  666,   15,   15,   15,  596,  736, 1268,  990,
   20,  797,  983,  452,  898,  659,  352,  380,  662,  664,
  724,  950,  899, 1177, 1027,   58,  897,  282,   43,  633,
 1320,  763,   15,  798,  359,  951, 1266,   43,  741,  949,
  799,  663,  661,  345, 1272,  359,  345,  359,   59,  359,
  479,  987,  615,  731,  732,   60,   16,  132,  486,  414,
  415, 1029,  513,  132,  745,   15,  737,  952,  345,  673,
  655,  927,  345,  654,  345,  900,  345, 1037,  600, 1040,
 1136,  655,  655,  377,  219,  890,  446,  751, 1015,  953,
  335,  954, 1030,  359,  470,  724,  633,  824,  654,  947,
  749,  845,  340,  612,  955,  621,  336,  480,  120,  654,
  337,   16,  129,   16,  734,  454,  445,  474,  102,  950,
   16,   16,  455,  345,  306,  830,  674,  219,  875,   58,
  176,  735,  891,  951, 1349,  654,   45,  654,  101,   15,
  797,   92,  181,   95,  896,   15,  688,  654,  689,  182,
  654,  341,   59,   16,  927,  538,  724,  132,  121,   60,
  338,  183,  798, 1338,   96,  952,  879,   98,  883,  799,
 1033, 1339,  454,  738,   45,  335,  308,  133,  797,  455,
  654,  377,  871,  872,  682,  876,  877,  953,  881,  954,
  892,  354,  887,  888, 1069, 1327, 1328,  335,  605,  827,
  798, 1120,  955,  330,  122,  282,  122,  799,  345,  129,
  132,  122,   16,  960, 1120, 1264,  140,  378,  138,  120,
  655,  142, 1104, 1089,   16, 1090,   45,   58,  908, 1106,
  345, 1340,  170,  682,  345,  682,  330,  682,   16,   15,
  513,  682,  223,  158, 1359,  335,  616,  159,  497,  606,
   59,  654,   16,  132,  132,  498,  682,   60,  965, 1203,
 1307,  969,  971,  179,  180, 1064,  974,   20,   58,  194,
 1105,   20,  982,  969,  171,   57,  986, 1107,  655,  164,
   16,  208,   20,  682,  224,   58,   20, 1346,   16,  129,
   20,   59,   15,   20,   63, 1130,  965,   64, 1213,  965,
  977,  682,  655,  655,  209,   20,   20,  160,   59,  654,
   20,   20, 1069,  978, 1022,   60,   20,  680,   20,   20,
   20,   20,  688,  172,  689,  469,   20, 1355,   16,  979,
   20,  210,   20, 1038,  132,   15,   15,  337,  706,   63,
  680,  706,  163,  654,  655,   20,  655,  654,  616,  616,
   20,  654, 1258,  195,  616, 1260,  616, 1064,  616,  337,
  616,  616,  616,  706, 1288, 1077,  655,  680, 1014,  666,
  703,   63,  706,   17,   20,   20,  616,  965,  702,  600,
   58, 1284, 1285,  129, 1031,  197,  604,  335, 1065,  669,
 1292,  335,  703,  330,  666,  198, 1300,   16,  129,  969,
  702,  703,  666,   59,   16,   16,   16,  700,  201,  702,
   60, 1152,  698,  167,  669,  616,   15,  167,  616, 1153,
  926,  945,  689,  946,  119,   43,  752,   63,  132,  185,
  621,  390,  700,   16,   35,  335,  700,  698, 1144,  671,
  164,  654, 1069,  132,  164, 1061,  672, 1151,  600,  656,
 1130,  180,  221, 1354, 1061,  330,  823, 1065,  655,  965,
  656,  656,  718,  428,  671,  330,   16, 1140,  638,  330,
  638,  672,  909, 1374, 1375,  429,  120,  311,  181,  785,
  681, 1183,  330,  311,  910,  182,  222,  785,  604,  604,
  312,  926, 1143,  689,  604, 1130,  604,  183,  604,  600,
  604,  604,  604,  418,  419,  825,  228,  507,  915, 1180,
   15,  604,  834,  507,  330,  604,  604,  420,  421,  945,
   92,  946,   97,  969,  129,   15,  604,  604, 1201, 1004,
 1005, 1160,  621,  161,  655,  161,  229,  161, 1006,  604,
   16, 1361, 1361, 1170, 1171, 1058,   16, 1368, 1368,  391,
  416,  417,  213,  408, 1071,  604,  214,  129,  604,  655,
  340,  508,  392,  231,  408,  330,  408,  508,  330,  132,
  655,  132,  162,  347,  926,  172,  689,  129,  129,  965,
  132,  393,  394,  802,  241,  408,  408,  802,  242,  802,
  232,  802, 1242,  621,  270,  270,  655, 1380,  655,  656,
  921,  395,  132,  270,  234,  408,   63,   63,  655,  341,
   63,  655,  396,  408,  965,  964,  408,  422,  423,  618,
  467,  782,  132,  132,  791, 1168,  237,  782,  791,  782,
  791,  129,  791,  129,  330,  786,  386,  621,  387,  786,
   16,  655,  775,  786,  360,  330,  239,  330,  775,  327,
  174,   15,  174,   15,  174,  775,  782,  656,  782,  965,
  782,  937,   15,  937,  585,  132,  330,  330,  586,  613,
  330,  330, 1168,  330,  330,   56,  132,  334,  132,  595,
  385,  656,  656,  596,   15,  610,  330,  717, 1223,  214,
 1224,  718,  739,   16,  330, 1078,  596,  330,   64, 1079,
  475,  476,   64,  849,   15,   15,  853,  849,  388,  785,
  853, 1119,  655,  785,  282,  282,  551,  553,  555,  557,
  344,  618,  618,  656, 1119,  656,  621,  618,   66,  618,
   66,  618,  382,  618,  618,  618,   16,   16,  409,  410,
  411,  921,  153,  390,  153,  656,  157,   15,  157,  513,
  513,  154,  793,  154,  793,  918, 1119,  918,   15,  426,
   15, 1379,  124,  601,  124,  131,  424,  131, 1119, 1119,
  655,  613,  613,  425, 1088,  477,  478,  613,  433,  613,
  103,  613,  430,  613,  613,  613,  758,   43,  618,   59,
  140,  618, 1004, 1005, 1102, 1103, 1343, 1344,  427,  613,
  418,  418,  104,  437,  655,  419,  419,  438,  655, 1280,
  613,  946,  655,  904,  904,  105,  465,   16,  682,  682,
  107, 1295,  613,  946,  381,  108,  493,  109,  110,  111,
  112,  490,  543,  545,  330,  113,  586,  656,  613,  114,
  506,  613,  585, 1110, 1313, 1315,  946,  946, 1163,   59,
 1164,  547,  549,  602,  115,  559,  561,  597,  598, 1295,
 1295,  946,  946,  600,  604,  601,  601,  603,  639,  627,
  628,  601,  640,  601,  672,  601,  680,  601,  601,  601,
  686,  685,  699, 1111,  687,  706,  712,  601,  601,  713,
  716,  719,  601,  601,  677,  720,  723,  722,  727,  729,
  360,  756,  655,  601,  601,  360,  360,  757, 1295,  760,
  946,   16,  764,  656,  761,  829,  601,  459,  839,  765,
  836,  842,  849,  850,  843,  852,   16,  360,  858,  859,
  861,  903,  601, 1112,  901,  601,  911,  906,  656,  907,
  360,  360,  913,  959,  914,  360,  915,  967,  360,  656,
  360,  968,  360,  360,  360,  360,  972,  973,  975,  976,
  360,  985,  991,  994,  360,  996,  997, 1001,  360, 1010,
  998, 1041, 1048, 1023, 1042,  656, 1085,  656, 1080,  360,
 1097, 1122,  360, 1074, 1127,  360, 1131,  656, 1141, 1165,
  656, 1169, 1166,  512, 1174, 1159, 1175, 1181, 1184, 1186,
 1191, 1208,  360,  360, 1202, 1204, 1210,  360,  360, 1207,
  360,  360,  360, 1211,  360,  360,  360, 1212,  360,  360,
  656, 1177,  360,  360,  360,  360, 1215, 1214, 1218,  360,
  360, 1217, 1219,  103,  360,  360,  360,  360,  360,  360,
  360,  360, 1220, 1226, 1064, 1227, 1229, 1232, 1231, 1235,
 1239, 1250,   16,  360,   16,  104,  360, 1251,  360, 1290,
 1253, 1261, 1262,   16, 1273, 1275, 1289, 1293,  105,  360,
 1299, 1308,  360,  107, 1317, 1318, 1324, 1309,  108, 1330,
  109,  110,  111,  112, 1331,   16, 1335, 1323,  113, 1345,
  330,  656,  114, 1334, 1333,  330,  330,  398, 1352, 1353,
 1371, 1373, 1377,    7, 1378,   16,   16,  115,  933,  925,
 1382,   29,   30,  303,  540,  209,  502,  330,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  102,  503,
  330,  330,  454,  702,  641,  330,  455,  501,  330,   29,
  330,  444,  330,  330,  330,  330,  445,  766,   16,  656,
  330,  307,  330,   30,  330,  702,  888,  889,  330,   16,
  904,   16,  723,  795,  896,  796,  854,  819,  787,  330,
  610,  330,  330,  855,  820,  330,  788,  127,  112,  128,
  856,  113,  858,  656,  682,  682, 1159,  656,  431,  330,
  330,  656,  330,  330,  574,   56,  246,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  227,  330,  330,
  495,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330, 1073,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  496, 1002,  330,  704,  330,  512,
  330, 1101, 1332,  330,  512,  512, 1310, 1287, 1291,  330,
 1178,  682,  330, 1370,  754,  750, 1161, 1011, 1179,  755,
 1316, 1306,  610,  610, 1314,  853,  512, 1363,  610, 1225,
  610,  656,  610,  244,  610,  610,  610,  472, 1150,  512,
  512,  854,  631,  516,  512,  320,  711,  512,  742,  512,
  610,  512,  512,  512,  512,  902,  671,  828,  705,  512,
  610,  610,  349,  512,  605,  491,  563,  512,  565,  571,
  567,  709,  569,  610,  644,  593,  572,  726,  512,  767,
 1237,  512, 1049, 1205,  512, 1187, 1243, 1230, 1185,  610,
 1238, 1236,  610, 1304, 1035, 1270,  245,  243,    0,  512,
    0,  512,  512,    0,    0,    0,  512,  512,    0,  512,
  512,  512,  512,  512,  512,  512,    0,  512,  512,    0,
  512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
    0,  512,  512,  512,  512,  512,  512,  512,  512,  512,
  512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
  512,  512,  512,    0,    0,  512,    0,  512,  330,  512,
    0,    0,  512,  330,  330,    0,  605,  605,  512,    0,
    0,  512,  605,    0,  605,    0,  605,    0,  605,  605,
  605,    0,    0,    0,    0,  330,    0,    0,  772,  605,
    0,    0,    0,  605,  605,    0,    0,    0,  330,  330,
    0,    0,    0,  330,  605,  605,  330,    0,  330,    0,
  330,  330,  330,  330,    0,    0,    0,  605,  330,    0,
    0,    0,  330,    0,    0,    0,  330,    0,    0,    0,
    0,    0,    0,  605,    0,    0,  605,  330,    0,    0,
  330,    0,    0,  330,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  330,    0,    0,
  330,  330,    0,    0,    0,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,    0,  330,  330,    0,  365,
  330,  330,  330,  330,  330,    0,    0,  330,  330,    0,
    0,    0,  330,  330,  330,  330,  330,  330,  330,  330,
    0,  320,    0,    0,    0,    0,  320,  320,    0,    0,
    0,  330,    0,    0,  330,    0,  330,    0,  330,    0,
    0,  330,    0,   45,    0,   45,    0,  330,  320,    0,
  330,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  320,  320,    0,    0,   45,  320,    0,    0,  320,
    0,  320,    0,  320,  320,  320,  320,    0,   45,    0,
    0,  320,    0,   45,    0,  320,    0,    0,   45,  320,
   45,   45,   45,   45,    0,    0,   45,    0,   45,    0,
  320,    0,   45,  320,    0,    0,  320,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   45,    0,    0,
    0,    0,    0,  320,  320,    0,    0,    0,  320,  320,
  320,  320,  320,  320,    0,  320,  320,  320,    0,  320,
  320,    0,    0,  320,  320,  320,  320,    0,    0,    0,
  320,  320,    0,    0,    0,  320,  320,  320,  320,  320,
  320,  320,  320,    0,  772,   27,    0,    0,    0,  772,
  772,    0,    0,    0,  320,    0,    0,  320,    0,  320,
    0,  320,    0,    0,  320,    0,    0,    0,    0,    0,
  320,  772,    0,  320,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  772,  772,    0,    0,    0,  772,
    0,    0,  772,    0,  772,    0,  772,  772,  772,  772,
    0,    0,    0,    0,  772,    0,    0,    0,  772,    0,
    0,   32,  772,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  772,    0,    0,  772,    0,    0,  772,
    0,    0,    0,    0,    0,  365,    0,    0,    0,    0,
    0,  365,    0,    0,    0,    0,  772,  772,    0,    0,
    0,  772,  772,  772,  772,  772,  772,    0,  772,  772,
  772,    0,  772,  772,    0,    0,  772,  772,  772,  772,
    0,    0,    0,  772,  772,    0,  365,   21,  772,  772,
  772,  772,  772,  772,  772,  772,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  772,    0,    0,
  772,    0,  772,    0,  772,    0,    0,  772,    0,    0,
    0,    0,    0,  772,    0,    0,  772,  365,    0,    0,
  365,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  365,  365,   31,
    0,    0,  365,  365,  365,  365,  365,  365,    0,  365,
  365,  365,    0,  365,  365,    0,    0,  365,  365,  365,
  365,    0,    0,    0,  365,  365,    0,    0,    0,  365,
  365,  365,  365,  365,  365,  365,  365,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  365,    0,
    0,  365,    0,  365,    0,  365,    0,    3,  365,    0,
    0,   27,   27,    0,  365,    0,   27,  365,    0,    0,
   27,    0,   27,    0,    0,   27,    0,   27,   27,    0,
    0,   27,    0,   27,    0,   27,   27,   27,   27,    0,
    0,    0,   27,    0,    0,    0,    0,   27,   45,   27,
   27,   27,    0,    0,   27,   27,   27,    0,   27,    0,
    0,   27,    0,   27,   27,   27,   27,    0,    0,    0,
   27,   27,   27,    0,    0,   27,   27,   27,   32,   27,
    0,    0,   32,    0,   27,   27,    0,    0,   27,    5,
   27,   27,    0,   32,    0,   27,    0,   32,    0,    0,
    0,   32,    0,    0,   32,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   32,   32,   27,   27,
   27,   32,   32,    0,    0,    0,    0,   32,   27,   32,
   32,   32,   32,    0,    0,    0,    0,   32,    0,    0,
    0,   32,    0,   32,   21,   46,    0,    0,   21,    0,
    0,    0,    0,    0,    0,    0,   32,    0,    0,   21,
    0,   32,    0,   21,    0,    0,    0,   21,    0,   27,
   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   21,   21,    0,   32,   32,   21,   21,    0,
    0,    0,    0,   21,    0,   21,   21,   21,   21,    0,
    0,    0,    0,   21,    0,    0,   31,   21,    0,   21,
   31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   31,   21,    0,    0,   31,    0,   21,    0,   31,
    0,    0,   31,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   31,   31,    0,    0,    0,   31,
   31,   21,   21,    0,    0,   31,    0,   31,   31,   31,
   31,    0,    0,    0,    3,   31,    0,    0,   45,   31,
    0,   31,    0,    0,    0,    0,    0,    0,    0,   45,
    0,    0,    0,   45,   31,    0,    0,   45,    0,   31,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   45,   45,    0,   45,    0,   45,   45,   45,
    0,    0,    0,   45,   31,   45,   45,   45,   45,    0,
   45,    0,    0,   45,   45,    0,    0,   45,   45,   45,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   45,   45,   45,    0,    5,   45,   45,   45,
   46,    0,    0,    0,   45,    0,   45,   45,   45,   45,
    0,   46,    0,    0,   45,   46,    0,    0,   45,   46,
   45,    0,   46,  362,  364,  366,  368,  370,  372,  374,
  376,    0,    0,   45,   46,   46,    0,    0,   45,   46,
   46,    0,    0,    0,    0,   46,    0,   46,   46,   46,
   46,    0,   46,    0,    0,   46,   46,    0,    0,   46,
    0,   46,    0,    0,    0,    0,    0,   46,    0,    0,
    0,   46,    0,    0,   46,   46,    0,    0,   46,   46,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   46,   46,  103,    0,    0,   46,   46,    0,    0,    0,
    0,   46,    0,   46,   46,   46,   46,    0,    0,    0,
    0,   46,    0,    0,  104,   46,    0,   46,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  105,    0,    0,
   46,    0,  107,    0,    0,   46,    0,  108,    0,  109,
  110,  111,  112,    0,    0,    0,    0,  113,    0,    0,
    0,  114,    0,    0,    0, 1110,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  115,    0,    0,  532,
  534,  536,  611,    0,  542,  542,  542,  542,  542,  542,
  542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
  890,    0,    0,    0,    0,    0,    0,    0,  890,  890,
  890,  890,  890,    0,  890,  890,    0,  890,  890,  890,
  890,  890,  890,  890,    0,    0,    0,    0,  890,    0,
    0,  890,  890,  890,  890,  890,    0,    0,  890,    0,
    0,    0,  890,  890,    0,  890,  890,  890,    0,    0,
    0,    0,    0,    0,    0, 1112,    0,  890,    0,  890,
  642,  890,  890,    0,    0,  890,    0,  890,  890,  890,
  890,  890,  890,  890,  890,  890,    0,  890,  890,    0,
  890,    0,    0,  890,  611,  611,    0,    0,    0,    0,
  611,    0,  611,    0,  611,    0,  611,  611,  611,    0,
    0,    0,  890,  890,    0,    0,    0,  890,  890,    0,
    0,  890,  611,    0,    0,    0,  890,  890,  890,  890,
  890,    0,  611,  611,  890,    0,  890,    0,    0,    0,
    0,    0,  890,  890,    0,  611,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  614,  611,    0,    0,  611,    0,    0,  890,  890,  890,
  890,    0,  890,    0,    0,    0,    0,    0,  813,  890,
    0,    0,    0,  890,    0,  890,  813,  813,  813,  813,
  813,    0,  813,  813,    0,  813,  813,  813,  813,  813,
  813,    0,    0,    0,    0,    0,  813,    0,    0,  813,
  813,  813,  813,  813,    0,    0,  813,    0,    0,    0,
  813,  813,    0,  813,  813,  813,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  813,    0,  813,    0,  813,
  813,    0,    0,  813,    0,  813,  813,  813,  813,  813,
  813,  813,  813,  813,    0,  813,  813,    0,  813,    0,
    0,  813,  614,  614,    0,    0,    0,    0,  614,    0,
  614,    0,  614,    0,  614,  614,  614,    0,    0,    0,
  813,  813,    0,    0,    0,  813,  813,    0,    0,  813,
  614,    0,    0,    0,  813,  813,  813,  813,  813,    0,
    0,  614,  813,    0,  813,    0,    0,    0,    0,    0,
  813,  813,    0,  614,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  614,
    0,    0,  614,    0,    0,  813,  813,  813,  813,    0,
  813,    0,    0,    0,  596,    0,  770,  813,    0,    0,
    0,  813,    0,  813,  248,   17,  771,   18, 1194,    0,
   19,  772,    0,  773,  774,  250,  251,  775,   20,    0,
    0,    0,    0,    0,  252,    0,    0,   22,  776,  777,
  778,  779,    0,    0,   24,    0,    0,    0,  780,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  781,    0,   28,    0,   29,  255,    0,
    0,   30,    0,  782,  256,  783,  257,  784,  258,   31,
   32,  785,    0,   33,  786,    0,  124,    0,    0,  787,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  596,  596,  260,  261,
    0,    0,  596,  600,  596,    0,  596,  262,  596,  596,
  596,    0,  788,  263,  264,  265,  266,    0,  596,  596,
  267,    0,  268,  596,  596,    0,    0,    0,  269,  270,
    0,    0,  596,  596,  596,  596,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  596,    0,    0,
    0,    0,    0,  271,  789,  273,  274,    0, 1195,    0,
    0,    0,    0,  596,  770,    0,  596,    0,    0,  275,
    0,  276,  248,   17,  771,   18,    0,    0,   19,  772,
    0,  773,  774,  250,  251,  775,   20,    0,    0,    0,
    0,    0,  252,    0,    0,   22,  776,  777,  778,  779,
    0,    0,   24,    0,    0,   45,  780,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  781,    0,   28,    0,   29,  255,   45,    0,   30,
    0,  782,  256,  783,  257,  784,  258,   31,   32,  785,
   45,   33,  786,    0,  124,   45,    0,  787,    0,    0,
   45,    0,   45,   45,   45,   45,    0,    0,    0,    0,
   45,    0,    0,    0,   45,    0,  260,  261,    0,    0,
    0,  600,    0,    0,    0,  262,    0,    0,    0,   45,
  788,  263,  264,  265,  266,    0,    0,    0,  267,    0,
  268,    0,    0,    0,    0,    0,  269,  270,  866,    0,
    0,    0,    0,    0,   45,   45,  248,   17,  771,   18,
    0,    0,   19,  772,    0,  773,  774,  250,  251,  775,
   20,  271,  789,  273,  274,    0,  252,    0,    0,   22,
  776,  777,  778,  779,    0,    0,   24,  275,    0,  276,
  780,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  781,    0,   28,    0,   29,
  255,    0,    0,   30,    0,  782,  256,  783,  257,  784,
  258,   31,   32,  785,    0,   33,  786,    0,  124,    0,
    0,  787,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,  600,    0,    0,    0,  262,
    0,    0,    0,    0,  788,  263,  264,  265,  266,    0,
    0,    0,  267,    0,  268,    0,    0,    0,    0,    0,
  269,  270,  509,    0,    0,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,  271,  440,  273,  274,    0,
  252,    0,    0,   22,    0,    0,    0,    0,  352,    0,
   24,  275,    0,  276,    0,   25,    0,  253,  254,   26,
    0,  510,    0,    0,    0,    0,    0,    0,  511,    0,
  352,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,  352,  258,   31,   32,  259,  352,   33,
    0,  231,    0,  352,    0,  352,  352,  352,  352,    0,
    0,    0,    0,  352,    0,    0,    0,  352,    0,    0,
    0,  352,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,  352,  262,    0,    0,  512,    0,    0,  263,
  264,  265,  266,    0,    0,    0,  267,    0,  268,    0,
    0,    0,    0,    0,  269,  270,  619,    0,    0,    0,
    0,  352,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,  271,
  440,  273,  274,    0,  252,    0,    0,   22,    0,    0,
    0,    0,  351,    0,   24,  275,    0,  276,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,  352,    0,    0,  351,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,  351,  258,   31,
   32,  259,  351,   33,    0,  230,    0,  351,    0,  351,
  351,  351,  351,    0,    0,    0,    0,  351,    0,    0,
    0,  351,    0,    0,    0,  351,    0,    0,  260,  261,
    0,    0,    0,  465,  620,    0,  351,  262,    0,    0,
    0,    0,    0,  263,  264,  265,  266,    0,    0,    0,
  267,    0,  268,    0,    0,    0,    0,    0,  269,  270,
  740,    0,    0,    0,    0,  351,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,  271,  355,  273,  274,    0,  252,    0,
    0,   22,    0,    0,    0,    0,   27,    0,   24,  275,
    0,  276,    0,   25,    0,  253,  254,   26,    0,  510,
    0,    0,    0,    0,    0,  351,  511,    0,   27,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,   27,  258,   31,   32,  259,   27,   33,    0,    0,
    0,   27,    0,   27,   27,   27,   27,    0,    0,   27,
    0,   27,    0,    0,    0,   27,    0,    0,    0,    0,
    0,    0,  260,  261,    0,    0,    0,    0,    0,    0,
   27,  262,    0,    0,    0,    0,    0,  263,  264,  265,
  266,    0,    0,    0,  267,    0,  268,    0,    0,    0,
    0,    0,  269,  270,  619,    0,    0,    0,    0,   27,
   27,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,  271,  440,  273,
  274,    0,  252,    0,    0,   22,    0,    0,    0,    0,
   45,    0,   24,  275,    0,  276,    0,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   45,   28,    0,   29,  255, 1094,    0,   30,
    0,    0,  256,    0,  257,   45,  258,   31,   32,  259,
   45,   33,    0,    0,    0,   45,    0,   45,   45,   45,
   45,    0,    0,    0,    0,   45,    0,    0,    0,   45,
    0,    0,    0,    0,    0,    0,  260,  261,    0,    0,
    0,  465,    0,    0,   45,  262,    0,    0,    0,    0,
    0,  263,  264,  265,  266,    0,    0,    0,  267,    0,
  268,    0,    0,    0,    0,    0,  269,  270,  611,   45,
   45,    0,    0,  197,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  647,    0,    0,    0,  250,  251,    0,
   20,  271,  355,  273,  274,    0,  252,    0,    0,   22,
    0,    0,    0,    0,   45,    0,   24,  275,    0,  276,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   45,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,   45,
  258,   31,   32,  648,   45,   33,    0,    0,  124,   45,
    0,   45,   45,   45,   45,    0,    0,    0,    0,   45,
    0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,   45,  649,
    0,    0,    0,    0,    0,  263,  264,  265,  266,    0,
    0,    0,  267,    0,  268,    0,    0,    0,    0,    0,
  269,  270,  619,   45,   45,    0,    0,  199,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,  271,  355,  273,  274,    0,
  252,    0,    0,   22,    0,    0,    0,    0,   45,    0,
   24,  275,    0,  276,    0,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   45,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,   45,  258,   31,   32,  259,   45,   33,
    0,    0,    0,   45,    0,   45,   45,   45,   45,    0,
    0,   45,    0,   45,    0,    0,    0,   45,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,  465,
    0,    0,   45,  262,    0,    0,    0,    0,    0,  263,
  264,  265,  266,    0,    0,    0,  267,    0,  268,    0,
    0,    0,    0,    0,  269,  270,  611,    0,    0,    0,
    0,  288,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,  271,
  355,  273,  274,    0,  252,    0,    0,   22,    0,    0,
    0,    0,  103,    0,   24,  275,    0,  276,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  104,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,  105,  258,   31,
   32,  259,  107,   33,    0,    0,    0,  108,    0,  109,
  110,  111,  112,    0,    0,    0,    0,  113,    0,    0,
    0,  114,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,  710,    0,  115,  262,    0,    0,
    0,    0,    0,  263,  264,  265,  266,    0,    0,    0,
  267,    0,  268,    0,    0,    0,    0,    0,  269,  270,
  743,    0,    0,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,  271,  355,  273,  274,    0,  252,    0,
    0,   22,    0,    0,    0,    0,    0,    0,   24,  275,
    0,  276,    0,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,    0,   33,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  260,  261,    0,    0,    0,    0,  744,    0,
    0,  262,    0,    0,    0,    0,    0,  263,  264,  265,
  266,    0,    0,    0,  267,    0,  268,    0,    0,    0,
    0,    0,  269,  270,   79,    0,    0,    0,    0,    0,
    0,    0,   79,   79,    0,   79,    0,    0,   79,   79,
    0,    0,    0,   79,   79,    0,   79,  271,  355,  273,
  274,    0,   79,    0,    0,   79,    0,    0,    0,    0,
    0,    0,   79,  275,    0,  276,    0,   79,    0,   79,
   79,   79,    0,   45,    0,   45,    0,    0,    0,    0,
    0,    0,    0,   79,    0,   79,   79,    0,    0,   79,
    0,    0,   79,    0,   79,   45,   79,   79,   79,   79,
    0,   79,    0,    0,   79,    0,    0,    0,   45,    0,
    0,    0,    0,   45,    0,    0,    0,    0,   45,    0,
   45,   45,   45,   45,    0,    0,   79,   79,   45,    0,
    0,    0,   45,    0,    0,   79,    0,    0,    0,    0,
    0,   79,   79,   79,   79,    0,    0,   45,   79,    0,
   79,    0,    0,    0,    0,    0,   79,   79,  247,    0,
    0,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,  289,  250,  251,    0,
   20,   79,   79,   79,   79,    0,  252,    0,    0,   22,
    0,    0,    0,    0,    0,    0,   24,   79,    0,   79,
    0,   25,    0,  253,  254,   26,    0,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,  104,
  258,   31,   32,  259,    0,   33,    0,    0,    0,    0,
    0,    0,  105,    0,    0,    0,  106,  107,    0,    0,
    0,    0,  108,    0,  109,  110,  111,  112,    0,    0,
  260,  261,  113,    0,    0,    0,  114,    0,    0,  262,
    0,    0,    0,    0,    0,  263,  264,  265,  266,    0,
    0,  115,  267,    0,  268,    0,    0,    0,    0,    0,
  269,  270,  507,    0,    0,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,  271,  272,  273,  274,    0,
  252,    0,    0,   22,    0,    0,    0,    0,    0,    0,
   24,  275,    0,  276,    0,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,    0,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,    0,  262,    0,    0,    0,    0,    0,  263,
  264,  265,  266,    0,    0,    0,  267,    0,  268,    0,
    0,    0,    0,    0,  269,  270,  611,    0,    0,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,  271,
  440,  273,  274,    0,  252,    0,    0,   22,    0,    0,
    0,    0,    0,    0,   24,  275,    0,  276,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,    0,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,    0,    0,    0,  262,    0,    0,
    0,    0,    0,  263,  264,  265,  266,    0,    0,    0,
  267,    0,  268,    0,    0,    0,    0,    0,  269,  270,
  878,    0,    0,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,  271,  355,  273,  274,    0,  252,    0,
    0,   22,    0,    0,    0,    0,    0,    0,   24,  275,
    0,  276,    0,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,    0,   33,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  260,  261,    0,    0,    0,    0,    0,    0,
    0,  262,    0,    0,    0,    0,    0,  263,  264,  265,
  266,    0,    0,    0,  267,    0,  268,    0,    0,    0,
    0,    0,  269,  270,  882,    0,    0,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,  271,  355,  273,
  274,    0,  252,    0,    0,   22,    0,    0,    0,    0,
    0,    0,   24,  275,    0,  276,    0,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
    0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  260,  261,    0,    0,
    0,    0,    0,    0,    0,  262,    0,    0,    0,    0,
    0,  263,  264,  265,  266,    0,    0,    0,  267,    0,
  268,    0,    0,    0,    0,    0,  269,  270, 1301,    0,
    0,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,  271,  355,  273,  274,    0,  252,    0,    0,   22,
    0,    0,    0,    0,    0,    0,   24,  275,    0,  276,
    0,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,    0,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,    0,  262,
    0,    0,    0,    0,    0,  263,  264,  265,  266,    0,
    0,    0,  267,    0,  268,    0,    0,    0,    0,    0,
  269,  270,  360,    0,    0,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,  271,  355,  273,  274,    0,
  252,    0,    0,   22,    0,    0,    0,    0,    0,    0,
   24,  275,    0,  276,    0,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,    0,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,    0,  262,    0,    0,    0,    0,    0,  263,
  264,  265,  266,   68,    0,    0,  267,    0,  268,    0,
    0,    0,    0,  363,  269,  270,   69,    0,    0,    0,
    0,  248,   17,    0,   18,    0,    0,   19,  249,    0,
    0,    0,  250,  251,    0,   20,    0,    0,    0,  271,
  121,  252,  274,    0,   22,   70,    0,    0,    0,    0,
    0,   24,    0,    0,    0,  361,   25,    0,  253,  254,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   28,    0,   29,  255,    0,    0,   30,    0,
    0,  256,    0,  257,    0,  258,   31,   32,  259,    0,
   33,    0,   71,   72,   73,   74,    0,   75,   76,   77,
   78,   79,   80,   81,   82,    0,    0,   83,   84,   85,
   86,   87,   88,   89,   90,  260,  261,    0,    0,    0,
    0,    0,    0,    0,  262,    0,    0,    0,    0,    0,
  263,  264,  265,  266,    0,    0,    0,  267,    0,  268,
    0,    0,    0,    0,  365,  269,  270,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,    0,    0,    0,
  271,  121,  252,  274,    0,   22,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,  361,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
    0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  260,  261,    0,    0,
    0,    0,    0,    0,    0,  262,    0,    0,    0,    0,
    0,  263,  264,  265,  266,    0,    0,    0,  267,    0,
  268,    0,    0,    0,    0,  367,  269,  270,    0,    0,
    0,    0,    0,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,    0,
    0,  271,  121,  252,  274,    0,   22,    0,    0,    0,
    0,    0,    0,   24,    0,    0,    0,  361,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,    0,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  260,  261,    0,
    0,    0,    0,    0,    0,    0,  262,    0,    0,    0,
    0,    0,  263,  264,  265,  266,    0,    0,    0,  267,
    0,  268,    0,    0,    0,    0,  369,  269,  270,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,    0,
    0,    0,  271,  121,  252,  274,    0,   22,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,  361,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,    0,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,    0,    0,    0,  262,    0,    0,
    0,    0,    0,  263,  264,  265,  266,    0,    0,    0,
  267,    0,  268,    0,    0,    0,    0,  371,  269,  270,
    0,    0,    0,    0,    0,  248,   17,    0,   18,    0,
    0,   19,  249,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,  271,  121,  252,  274,    0,   22,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,  361,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  259,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  260,
  261,    0,    0,    0,    0,    0,    0,    0,  262,    0,
    0,    0,    0,    0,  263,  264,  265,  266,    0,    0,
    0,  267,    0,  268,    0,    0,    0,    0,  373,  269,
  270,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,    0,    0,    0,  271,  121,  252,  274,    0,   22,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
  361,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,    0,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,    0,  262,
    0,    0,    0,    0,    0,  263,  264,  265,  266,    0,
    0,    0,  267,    0,  268,    0,    0,    0,    0,  375,
  269,  270,    0,    0,    0,    0,    0,  248,   17,    0,
   18,    0,    0,   19,  249,    0,    0,    0,  250,  251,
    0,   20,    0,    0,    0,  271,  121,  252,  274,    0,
   22,    0,    0,    0,    0,    0,    0,   24,    0,    0,
    0,  361,   25,    0,  253,  254,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
   29,  255,    0,    0,   30,    0,    0,  256,    0,  257,
    0,  258,   31,   32,  259,    0,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  260,  261,    0,    0,    0,    0,    0,    0,    0,
  262,    0,    0,    0,    0,    0,  263,  264,  265,  266,
    0,    0,    0,  267,    0,  268,    0,    0,    0,    0,
  531,  269,  270,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,    0,    0,    0,  271,  121,  252,  274,
    0,   22,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,  361,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,    0,   33,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  260,  261,    0,    0,    0,    0,    0,    0,
    0,  262,    0,    0,    0,    0,    0,  263,  264,  265,
  266,    0,    0,    0,  267,    0,  268,    0,    0,    0,
    0,  533,  269,  270,    0,    0,    0,    0,    0,  248,
   17,    0,   18,    0,    0,   19,  249,    0,    0,    0,
  250,  251,    0,   20,    0,    0,    0,  271,  121,  252,
  274,    0,   22,    0,    0,    0,    0,    0,    0,   24,
    0,    0,    0,  361,   25,    0,  253,  254,   26,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   28,    0,   29,  255,    0,    0,   30,    0,    0,  256,
    0,  257,    0,  258,   31,   32,  259,    0,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  260,  261,    0,    0,    0,    0,    0,
    0,    0,  262,    0,    0,    0,    0,    0,  263,  264,
  265,  266,    0,    0,    0,  267,    0,  268,    0,    0,
    0,    0,  535,  269,  270,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,    0,    0,    0,  271,  121,
  252,  274,    0,   22,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,  361,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,    0,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,    0,  262,    0,    0,    0,    0,    0,  263,
  264,  265,  266,    0,    0,    0,  267,    0,  268,    0,
    0,    0,    0,  541,  269,  270,    0,    0,    0,    0,
    0,  248,   17,    0,   18,    0,    0,   19,  249,    0,
    0,    0,  250,  251,    0,   20,    0,    0,    0,  271,
  121,  252,  274,    0,   22,    0,    0,    0,    0,    0,
    0,   24,    0,    0,    0,  361,   25,    0,  253,  254,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   28,    0,   29,  255,    0,    0,   30,    0,
    0,  256,    0,  257,    0,  258,   31,   32,  259,    0,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  260,  261,    0,    0,    0,
    0,    0,    0,    0,  262,    0,    0,    0,    0,    0,
  263,  264,  265,  266,    0,    0,    0,  267,    0,  268,
    0,    0,    0,    0,  544,  269,  270,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,    0,    0,    0,
  271,  121,  252,  274,    0,   22,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,  361,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
    0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  260,  261,    0,    0,
    0,    0,    0,    0,    0,  262,    0,    0,    0,    0,
    0,  263,  264,  265,  266,    0,    0,    0,  267,    0,
  268,    0,    0,    0,    0,  546,  269,  270,    0,    0,
    0,    0,    0,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,    0,
    0,  271,  121,  252,  274,    0,   22,    0,    0,    0,
    0,    0,    0,   24,    0,    0,    0,  361,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,    0,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  260,  261,    0,
    0,    0,    0,    0,    0,    0,  262,    0,    0,    0,
    0,    0,  263,  264,  265,  266,    0,    0,    0,  267,
    0,  268,    0,    0,    0,    0,  548,  269,  270,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,    0,
    0,    0,  271,  121,  252,  274,    0,   22,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,  361,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,    0,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,    0,    0,    0,  262,    0,    0,
    0,    0,    0,  263,  264,  265,  266,    0,    0,    0,
  267,    0,  268,    0,    0,    0,    0,  550,  269,  270,
    0,    0,    0,    0,    0,  248,   17,    0,   18,    0,
    0,   19,  249,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,  271,  121,  252,  274,    0,   22,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,  361,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  259,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  260,
  261,    0,    0,    0,    0,    0,    0,    0,  262,    0,
    0,    0,    0,    0,  263,  264,  265,  266,    0,    0,
    0,  267,    0,  268,    0,    0,    0,    0,  552,  269,
  270,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,    0,    0,    0,  271,  121,  252,  274,    0,   22,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
  361,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,    0,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,    0,  262,
    0,    0,    0,    0,    0,  263,  264,  265,  266,    0,
    0,    0,  267,    0,  268,    0,    0,    0,    0,  554,
  269,  270,    0,    0,    0,    0,    0,  248,   17,    0,
   18,    0,    0,   19,  249,    0,    0,    0,  250,  251,
    0,   20,    0,    0,    0,  271,  121,  252,  274,    0,
   22,    0,    0,    0,    0,    0,    0,   24,    0,    0,
    0,  361,   25,    0,  253,  254,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
   29,  255,    0,    0,   30,    0,    0,  256,    0,  257,
    0,  258,   31,   32,  259,    0,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  260,  261,    0,    0,    0,    0,    0,    0,    0,
  262,    0,    0,    0,    0,    0,  263,  264,  265,  266,
    0,    0,    0,  267,    0,  268,    0,    0,    0,    0,
  556,  269,  270,    0,    0,    0,    0,    0,  248,   17,
    0,   18,    0,    0,   19,  249,    0,    0,    0,  250,
  251,    0,   20,    0,    0,    0,  271,  121,  252,  274,
    0,   22,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,  361,   25,    0,  253,  254,   26,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,   29,  255,    0,    0,   30,    0,    0,  256,    0,
  257,    0,  258,   31,   32,  259,    0,   33,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  260,  261,    0,    0,    0,    0,    0,    0,
    0,  262,    0,    0,    0,    0,    0,  263,  264,  265,
  266,    0,    0,    0,  267,    0,  268,    0,    0,    0,
    0,  558,  269,  270,    0,    0,    0,    0,    0,  248,
   17,    0,   18,    0,    0,   19,  249,    0,    0,    0,
  250,  251,    0,   20,    0,    0,    0,  271,  121,  252,
  274,    0,   22,    0,    0,    0,    0,    0,    0,   24,
    0,    0,    0,  361,   25,    0,  253,  254,   26,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   28,    0,   29,  255,    0,    0,   30,    0,    0,  256,
    0,  257,    0,  258,   31,   32,  259,    0,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  260,  261,    0,    0,    0,    0,    0,
    0,    0,  262,    0,    0,    0,    0,    0,  263,  264,
  265,  266,    0,    0,    0,  267,    0,  268,    0,    0,
    0,    0,  560,  269,  270,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,    0,    0,    0,  271,  121,
  252,  274,    0,   22,    0,    0,    0,    0,    0,    0,
   24,    0,    0,    0,  361,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,    0,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,    0,  262,    0,    0,    0,    0,    0,  263,
  264,  265,  266,    0,    0,    0,  267,    0,  268,    0,
    0,    0,    0,  562,  269,  270,    0,    0,    0,    0,
    0,  248,   17,    0,   18,    0,    0,   19,  249,    0,
    0,    0,  250,  251,    0,   20,    0,    0,    0,  271,
  121,  252,  274,    0,   22,    0,    0,    0,    0,    0,
    0,   24,    0,    0,    0,  361,   25,    0,  253,  254,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   28,    0,   29,  255,    0,    0,   30,    0,
    0,  256,    0,  257,    0,  258,   31,   32,  259,    0,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  260,  261,    0,    0,    0,
    0,    0,    0,    0,  262,    0,    0,    0,    0,    0,
  263,  264,  265,  266,    0,    0,    0,  267,    0,  268,
    0,    0,    0,    0,  564,  269,  270,    0,    0,    0,
    0,    0,  248,   17,    0,   18,    0,    0,   19,  249,
    0,    0,    0,  250,  251,    0,   20,    0,    0,    0,
  271,  121,  252,  274,    0,   22,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,  361,   25,    0,  253,
  254,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   29,  255,    0,    0,   30,
    0,    0,  256,    0,  257,    0,  258,   31,   32,  259,
    0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  260,  261,    0,    0,
    0,    0,    0,    0,    0,  262,    0,    0,    0,    0,
    0,  263,  264,  265,  266,    0,    0,    0,  267,    0,
  268,    0,    0,    0,    0,  566,  269,  270,    0,    0,
    0,    0,    0,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,    0,
    0,  271,  121,  252,  274,    0,   22,    0,    0,    0,
    0,    0,    0,   24,    0,    0,    0,  361,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,    0,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  260,  261,    0,
    0,    0,    0,    0,    0,    0,  262,    0,    0,    0,
    0,    0,  263,  264,  265,  266,    0,    0,    0,  267,
    0,  268,    0,    0,    0,    0,  568,  269,  270,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  249,    0,    0,    0,  250,  251,    0,   20,    0,
    0,    0,  271,  121,  252,  274,    0,   22,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,  361,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,    0,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,    0,    0,    0,  262,    0,    0,
    0,    0,    0,  263,  264,  265,  266,    0,    0,    0,
  267,    0,  268,    0,    0,    0,    0,  570,  269,  270,
    0,    0,    0,    0,    0,  248,   17,    0,   18,    0,
    0,   19,  249,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,  271,  121,  252,  274,    0,   22,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,  361,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  259,    0,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  260,
  261,    0,    0,    0,    0,    0,    0,    0,  262,    0,
    0,    0,    0,    0,  263,  264,  265,  266,    0,    0,
    0,  267,    0,  268,    0,    0,    0,    0,  641,  269,
  270,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,    0,    0,    0,  271,  121,  252,  274,    0,   22,
    0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
  361,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,    0,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,    0,  262,
    0,    0,    0,  582,    0,  263,  264,  265,  266,    0,
    0,    0,  267,    0,  268,    0,    0,    0,    0,  449,
  269,  270,    0,    0,    0,    0,    0,  248,   17,    0,
   18,    0,    0,   19,  249,    0,    0,    0,  250,  251,
    0,   20,    0,    0,    0,  271,  121,  252,  274,    0,
   22,    0,    0,    0,    0,    0,    0,   24,    0,    0,
    0,  361,   25,    0,  253,  254,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
   29,  255,    0,    0,   30,    0,    0,  256,    0,  257,
    0,  258,   31,   32,  259,  330,   33,    0,    0,    0,
    0,  330,    0,    0,    0,  582,  582,    0,    0,    0,
    0,  582,    0,  582,    0,  582,    0,  582,  582,  582,
    0,  260,  261,    0,    0,  582,  582,  582,  582,    0,
  262,    0,  582,  582,    0,    0,  330,  582,  582,  582,
  582,  582,  582,  582,  582,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  582,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  582,    0,  514,  582,  271,  450,    0,    0,
  514,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  361,    0,  330,  330,    0,  330,  330,    0,
    0,    0,    0,  330,  330,  330,  330,  330,  330,  330,
  330,  330,    0,  330,  330,  514,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,    0,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,    0,
  510,    0,    0,  330,    0,  330,  510,    0,  330,    0,
    0,    0,    0,    0,  330,    0,    0,  330,    0,    0,
    0,    0,    0,    0,  514,    0,  514,  514,    0,    0,
    0,  514,  514,  514,  514,  514,  514,  514,  514,  514,
  514,  510,  514,  514,    0,  514,  514,  514,  514,  514,
  514,  514,  514,  514,  514,    0,  514,  514,  514,  514,
  514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
  514,  514,  514,  514,  514,  514,  514,  514,    0,  518,
    0,    0,    0,    0,  514,  518,    0,    0,    0,    0,
    0,    0,    0,  514,    0,    0,  514,    0,    0,    0,
  510,    0,  510,  510,    0,    0,    0,  510,  510,    0,
  510,  510,  510,  510,  510,  510,  510,    0,  510,  510,
  518,  510,  510,  510,  510,  510,  510,  510,  510,  510,
  510,    0,  510,  510,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,    0,  330,    0,    0,    0,    0,
  510,  330,    0,  510,    0,    0,    0,    0,    0,  510,
    0,    0,  510,    0,    0,    0,    0,    0,    0,  518,
    0,  518,  518,    0,    0,    0,    0,  518,    0,  518,
  518,  518,  518,  518,  518,  518,  330,  518,  518,    0,
  518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
    0,  518,  518,  518,  518,  518,  518,  518,  518,  518,
  518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
  518,  518,  518,    0,  440,    0,    0,    0,    0,  518,
  440,    0,  518,    0,    0,    0,    0,    0,  518,    0,
    0,  518,    0,    0,    0,  330,    0,  330,  330,    0,
    0,    0,    0,  330,    0,  330,  330,  330,  330,  330,
  330,  330,    0,  330,  330,  440,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,    0,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,    0,
  545,    0,    0,    0,    0,  330,  545,    0,  330,    0,
    0,    0,    0,    0,  330,    0,    0,  330,    0,    0,
    0,    0,    0,    0,  440,    0,  440,  440,    0,    0,
    0,    0,  440,    0,  440,  440,  440,  440,  440,  440,
  440,  545,  440,  440,    0,  440,  440,  440,  440,  440,
  440,  440,  440,  440,  440,    0,  440,  440,  440,  440,
  440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
  440,  440,  440,  440,  440,  440,  440,  440,    0,  565,
    0,    0,    0,    0,  440,  565,    0,  440,    0,    0,
    0,    0,    0,  440,    0,    0,  440,    0,    0,    0,
    0,    0,  545,  545,    0,    0,    0,    0,  545,    0,
  545,    0,  545,    0,  545,  545,  545,    0,  545,  545,
  565,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,    0,    0,    0,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,    0,  545,    0,  572,    0,    0,    0,    0,
    0,  572,    0,    0,    0,    0,    0,    0,    0,  545,
    0,    0,  545,    0,    0,    0,    0,    0,    0,    0,
    0,  565,  565,    0,    0,    0,    0,  565,    0,  565,
    0,  565,    0,  565,  565,  565,  572,  565,  565,    0,
    0,  565,  565,  565,  565,  565,  565,  565,  565,  565,
    0,    0,    0,  565,  565,  565,  565,  565,  565,  565,
  565,    0,    0,  573,    0,    0,    0,    0,    0,  573,
    0,    0,  565,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  565,    0,
    0,  565,    0,    0,    0,    0,    0,  572,  572,    0,
    0,    0,    0,  572,  573,  572,    0,  572,    0,  572,
  572,  572,    0,  572,  572,  574,    0,  572,  572,  572,
  572,  574,    0,    0,  572,  572,    0,    0,    0,  572,
  572,  572,  572,  572,  572,  572,  572,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  572,    0,
    0,    0,    0,    0,    0,    0,  574,    0,    0,    0,
    0,    0,    0,    0,  572,  573,  573,  572,    0,    0,
    0,  573,    0,  573,    0,  573,    0,  573,  573,  573,
  583,  573,  573,    0,    0,  573,  573,  573,  573,    0,
    0,    0,  573,  573,    0,    0,    0,  573,  573,  573,
  573,  573,  573,  573,  573,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  573,  574,  574,    0,
    0,    0,    0,  574,    0,  574,   27,  574,   27,  574,
  574,  574,  573,  574,  574,  573,    0,  574,  574,  574,
  574,    0,    0,  584,  574,  574,    0,    0,   27,  574,
  574,  574,  574,  574,  574,  574,  574,    0,    0,    0,
    0,   27,    0,    0,    0,    0,   27,    0,  574,    0,
    0,   27,    0,   27,   27,   27,   27,    0,    0,    0,
    0,   27,  583,  583,  574,   27,    0,  574,  583,    0,
  583,    0,  583,    0,  583,  583,  583,    0,    0,    0,
   27,    0,  583,  583,  583,  583,  587,    0,    0,  583,
  583,    0,    0,    0,  583,  583,  583,  583,  583,  583,
  583,  583,    0,    0,    0,    0,    0,    0,    0,   27,
   27,    0,    0,  583,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  584,  584,    0,    0,  583,
    0,  584,  583,  584,    0,  584,    0,  584,  584,  584,
    0,    0,    0,    0,    0,  584,  584,  584,  584,  588,
    0,    0,  584,  584,    0,    0,    0,  584,  584,  584,
  584,  584,  584,  584,  584,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  584,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  587,  587,
    0,    0,  584,    0,  587,  584,  587,    0,  587,    0,
  587,  587,  587,    0,    0,    0,    0,    0,  587,  587,
  587,  587,  589,    0,    0,  587,  587,    0,    0,    0,
    0,    0,  587,  587,  587,  587,  587,  587,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  587,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  588,  588,    0,    0,  587,    0,  588,  587,  588,
    0,  588,    0,  588,  588,  588,    0,    0,    0,    0,
    0,  588,  588,  588,  588,  590,    0,    0,  588,  588,
    0,    0,    0,    0,    0,  588,  588,  588,  588,  588,
  588,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  588,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  589,  589,    0,    0,  588,    0,
  589,  588,  589,    0,  589,    0,  589,  589,  589,    0,
    0,    0,    0,    0,  589,  589,  589,  589,  591,    0,
    0,  589,  589,    0,    0,    0,    0,    0,  589,  589,
  589,  589,  589,  589,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  589,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  590,  590,    0,
    0,  589,    0,  590,  589,  590,    0,  590,    0,  590,
  590,  590,    0,    0,    0,    0,    0,  590,  590,  590,
  590,  597,    0,    0,  590,  590,    0,    0,    0,    0,
    0,  590,  590,  590,  590,  590,  590,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  590,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  591,  591,    0,    0,  590,    0,  591,  590,  591,    0,
  591,    0,  591,  591,  591,    0,    0,    0,    0,    0,
  591,  591,  591,  591,  598,    0,    0,  591,  591,    0,
    0,    0,    0,    0,  591,  591,  591,  591,  591,  591,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  591,    0,    0,    0,    0,    0,    0,  602,    0,
    0,    0,    0,  597,  597,    0,    0,  591,    0,  597,
  591,  597,    0,  597,    0,  597,  597,  597,    0,    0,
    0,    0,    0,    0,    0,  597,  597,    0,    0,    0,
  597,  597,  607,    0,    0,    0,    0,    0,    0,  597,
  597,  597,  597,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  597,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  598,  598,    0,    0,
  597,    0,  598,  597,  598,    0,  598,    0,  598,  598,
  598,  608,    0,    0,    0,    0,    0,    0,  598,  598,
    0,    0,    0,  598,  598,    0,    0,    0,    0,    0,
  602,  602,  598,  598,  598,  598,  602,    0,  602,    0,
  602,    0,  602,  602,  602,    0,    0,  598,    0,    0,
    0,    0,  602,  602,    0,    0,    0,  602,  602,    0,
    0,    0,    0,  598,  607,  607,  598,    0,  602,  602,
  607,    0,  607,    0,  607,    0,  607,  607,  607,    0,
    0,  602,    0,    0,    0,    0,    0,  607,  330,    0,
    0,    0,  607,    0,  330,    0,    0,  602,  775,    0,
  602,    0,  607,  607,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  608,  608,  607,    0,    0,    0,  608,
    0,  608,    0,  608,    0,  608,  608,  608,    0,  330,
    0,  607,    0,    0,  607,    0,  608,    0,    0,    0,
    0,  608,    0,    0,    0,  775,    0,    0,    0,    0,
  387,  608,  608,    0,    0,    0,  387,    0,    0,    0,
    0,    0,    0,    0,  608,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  608,    0,    0,  608,    0,    0,    0,  330,  330,    0,
    0,  387,    0,    0,    0,    0,  330,  330,  330,  330,
  330,  330,  330,  775,  330,    0,  330,  330,    0,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,    0,
  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,    0,    0,    0,    0,  330,    0,  330,    0,
  387,  330,    0,    0,    0,    0,    0,  330,  387,  320,
  387,  387,  387,  387,  387,    0,  387,    0,  387,  387,
    0,  387,  387,  387,  387,  387,    0,  387,  387,  387,
  387,    0,  387,  387,  387,  387,  387,  387,  387,  387,
  387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
  387,  387,  387,  387,    0,    0,    0,    0,  320,    0,
  387,  248,   17,  387,   18,    0,    0,   19,  249,  387,
    0,    0,  250,  251,    0,   20,    0,    0,    0,    0,
    0,  252,    0,    0,   22,    0,    0,    0,    0,    0,
    0,   24,    0,    0,    0,    0,   25,    0,  253,  254,
   26,    0,  510,    0,    0,    0,    0,    0,    0,  511,
    0,    0,   28,    0,   29,  255,    0,    0,   30,    0,
    0,  256,    0,  257,    0,  258,   31,   32,  259,    0,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  260,  261,    0,    0,    0,
    0,    0,    0,    0,  262,    0,    0,  512,    0,    0,
  263,  264,  265,  266,    0,    0,    0,  267,    0,  268,
    0,    0,    0,    0,    0,  269,  270,    0,    0,    0,
    0,    0,    0,    0,  248,   17,    0,   18,    0,    0,
   19,  647,    0,    0,    0,  250,  251,    0,   20,    0,
  271,  440,  273,  274,  252,    0,    0,   22,    0,    0,
    0,    0,    0,    0,   24,    0,  275,    0,  276,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  648,    0,   33,    0,    0,  124,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,    0,    0,    0,  649,    0,    0,
    0,    0,    0,  263,  264,  265,  266,    0,    0,    0,
  267,    0,  268,    0,    0,    0,    0,    0,  269,  270,
    0,    0,    0,    0,    0,    0,    0,  248,   17,    0,
   18,    0,    0,   19,  249,    0,    0,    0,  250,  251,
    0,   20,    0,  271,  355,  273,  274,  252,    0,    0,
   22,    0,    0,    0,    0,    0,    0,   24,    0,  275,
    0,  276,   25,    0,  253,  254,   26,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
   29,  255,    0,    0,   30,    0,    0,  256,    0,  257,
    0,  258,   31,   32,  259,    0,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  260,  261,    0,    0,    0,  459,    0,    0,    0,
  262,    0,    0,    0,    0,    0,  263,  264,  265,  266,
    0,    0,    0,  267,    0,  268,    0,    0,    0,    0,
    0,  269,  270,    0,    0,    0,    0,    0,    0,    0,
  248,   17,    0,   18,    0,    0,   19,  249,    0,    0,
    0,  250,  251,    0,   20,    0,  271,  355,  273,  274,
  252,    0,    0,   22,    0,    0,    0,    0,    0,    0,
   24,    0,  275,    0,  276,   25,    0,  253,  254,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   28,    0,   29,  255,    0,    0,   30,    0,    0,
  256,    0,  257,    0,  258,   31,   32,  259,    0,   33,
    0,    0,  124,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  260,  261,    0,    0,    0,    0,
    0,    0,    0,  262,    0,    0,    0,    0,    0,  263,
  264,  265,  266,    0,    0,    0,  267,    0,  268,    0,
    0,    0,    0,    0,  269,  270,    0,    0,    0,    0,
    0,    0,    0,  248,   17,    0,   18,    0,    0,   19,
  249,    0,    0,    0,  250,  251,    0,   20,    0,  271,
  355,  273,  274,  252,    0,    0,   22,    0,    0,    0,
    0,    0,    0,   24,    0,  275,    0,  276,   25,    0,
  253,  254,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,   29,  255,    0,    0,
   30,    0,    0,  256,    0,  257,    0,  258,   31,   32,
  259,    0,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  260,  261,    0,
    0,    0,  465,    0,    0,    0,  262,    0,    0,    0,
    0,    0,  263,  264,  265,  266,    0,    0,    0,  267,
    0,  268,    0,    0,    0,    0,    0,  269,  270,    0,
    0,    0,    0,    0,    0,    0,  248,   17,    0,   18,
    0,    0,   19,  249,    0,    0,    0,  250,  251,    0,
   20,    0,  271,  355,  273,  274,  252,    0,    0,   22,
    0,    0,    0,    0,    0,    0,   24,    0,  275,    0,
  276,   25,    0,  253,  254,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,   29,
  255,    0,    0,   30,    0,    0,  256,    0,  257,    0,
  258,   31,   32,  259,    0,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  260,  261,    0,    0,    0,    0,    0,    0,    0,  262,
    0,    0,    0,    0,    0,  263,  264,  265,  266,    0,
    0,    0,  267,    0,  268,    0,    0,    0,    0,    0,
  269,  270,    0,    0,    0,    0,    0,    0,    0,  248,
   17,    0,   18,    0,    0,   19,  249,    0,    0,    0,
  250,  251,    0,   20,    0,  271,  355,  273,  274,  252,
    0,    0,   22,    0,    0,    0,    0,    0,    0,   24,
    0,  275,    0,  276,   25,    0,  253,  254,   26,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   28,    0,   29,  255,    0,    0,   30,    0,    0,  256,
    0,  257,    0,  258,   31,   32,  259,    0,   33,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  260,  261,    0,    0,    0,    0,    0,
    0,    0,  262,    0,    0,    0,    0,    0,  263,  264,
  265,  266,    0,    0,    0,  267,    0,  268,    0,    0,
    0,    0,    0,  269,  270,    0,    0,    0,    0,    0,
    0,    0,  642,  642,    0,  642,    0,    0,  642,  642,
    0,    0,    0,  642,  642,    0,  642,    0,  271,  440,
  273,  274,  642,    0,    0,  642,    0,    0,    0,    0,
    0,    0,  642,    0,  275,    0,  276,  642,    0,  642,
  642,  642,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  642,    0,  642,  642,    0,    0,  642,
    0,    0,  642,    0,  642,    0,  642,  642,  642,  642,
    0,  642,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  642,  642,    0,    0,
    0,    0,    0,    0,    0,  642,    0,    0,    0,    0,
    0,  642,  642,  642,  642,    0,    0,    0,  642,    0,
  642,    0,    0,    0,    0,    0,  642,  642,   17,    0,
   18,    0,    0,   19,    0,    0,    0,    0,    0,    0,
    0,   20,    0,    0,    0,    0,    0,    0,    0,    0,
   22,  642,  642,  642,  642,    0,    0,   24,    0,    0,
    0,    0,   25,    0,    0,    0,   26,  642,  181,  642,
    0,    0,    0,    0,    0,  182,    0,    0,   28,    0,
   29,    0,    0,    0,   30,    0,    0,  183,    0,    0,
    0,    0,   31,   32,  248,   17,   33,   18,    0,  217,
   19,  249,    0,    0,    0,  250,  251,    0,   20,    0,
    0,    0,    0,    0,  252,    0,    0,   22,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,    0,   25,
    0,  253,  254,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,  255,    0,
    0,   30,    0,    0,  256,    0,  257,    0,  258,   31,
   32,  259,    0,   33,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  483,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  260,  261,
    0,    0,    0,    0,  484,    0,    0,  262,    0,    0,
    0,    0,    0,  263,  264,  265,  266,    0,    0,    0,
  267,    0,  268,    0,    0,    0,    0,    0,  269,  270,
    0,    0,    0,    0,    0,  248,   17,    0,   18,    0,
    0,   19,  249,    0,    0,    0,  250,  251,    0,   20,
    0,    0,    0,  271,  121,  252,  274,    0,   22,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,  361,
   25,    0,  253,  254,   26,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   29,  255,
    0,    0,   30,    0,    0,  256,    0,  257,    0,  258,
   31,   32,  259,  123,   33,  330,    0,  124,    0,  775,
    0,    0,   17,    0,   18,    0,    0,   19,    0,    0,
    0,    0,    0,    0,    0,   20,    0,    0,    0,  260,
  261,    0,    0,    0,   22,    0,    0,    0,  262,    0,
  330,   24,    0,    0,    0,    0,   25,    0,    0,    0,
   26,    0,    0,    0,    0,    0,  775,    0,    0,    0,
    0,    0,   28,    0,   29,    0,    0,    0,   30,    0,
    0,    0,    0,    0,    0,    0,   31,   32,    0,    0,
   33,    0,    0,  124,  271,  121,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  330,  330,
  361,    0,    0,    0,    0,    0,    0,  330,  330,    0,
  330,    0,  330,    0,  775,  330,    0,  330,  330,    0,
  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
    0,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,    0,    0,  187,    0,  330,    0,  330,
  187,  121,  330,    0,  187,    0,  187,    0,  330,  187,
    0,  187,  187,    0,    0,  187,    0,  187,    0,  187,
  187,  187,  187,    0,    0,    0,  187,    0,    0,    0,
    0,  187,    0,  187,  187,  187,    0,    0,  187,    0,
  187,    0,  187,    0,    0,  187,    0,  187,  187,  187,
  187,    0,    0,    0,  187,  187,  187,    0,    0,  187,
  187,  187,  328,  187,    0,    0,    0,    0,  187,  187,
    0,   17,  187,   18,  187,  187,   19,    0,    0,  187,
    0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
    0,    0,    0,   22,    0,    0,    0,    0,    0,    0,
   24,    0,  187,  187,  187,   25,    0,    0,    0,   26,
    0,    0,  187,    0,    0,    0,    0,    0,    0,  471,
    0,   28,    0,   29,    0,    0,    0,   30,   17,  537,
   18,    0,    0,   19,    0,   31,   32,    0,   17,   33,
   18,   20,  124,   19,    0,    0,    0,    0,    0,    0,
   22,   20,    0,  187,    0,    0,    0,   24,    0,    0,
   22,    0,   25,    0,    0,    0,   26,   24,    0,    0,
    0,    0,   25,    0,    0,    0,   26,  330,   28,    0,
   29,    0,    0,    0,   30,    0, 1087,    0,   28,    0,
   29,    0,   31,   32,   30,   17,   33,   18,    0,  203,
   19,    0,   31,   32,    0,   17,   33,   18,   20,  124,
   19,    0,  330,    0,    0,    0,    0,   22,   20,    0,
  121,    0,   21,    0,   24,    0,    0,   22,    0,   25,
    0,    0,   23,   26,   24,    0,    0,    0,    0,   25,
    0,    0,    0,   26,   27,   28,    0,   29,    0,    0,
    0,   30,    0,    0,    0,   28,    0,   29,    0,   31,
   32,   30,    0,   33,    0,    0,  124,    0,    0,   31,
   32,  330,    0,   33,    0,    0,   34,  121,    0,    0,
    0,    0,  330,  330,  330,  330,  775,  121,    0,  330,
  330,    0,    0,  330,  330,  330,  330,  330,  330,  330,
  330,  330,    0,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
  330,  330,  330,  330,  330,    0,   46,    0,   46,    0,
   46,  330,   46,    0,  330,   46,    0,   46,   46,    0,
    0,   46,    0,   46,  121,   46,   46,   46,   46,    0,
    0,    0,   46,    0,   35,    0,    0,   46,    0,   46,
   46,   46,    0,    0,   46,    0,   46,    0,   46,    0,
    0,   46,    0,   46,   46,   46,   46,    0,    0,   46,
   46,   46,   46,    0,    0,   46,   46,   46,    0,   46,
    0,    0,    0,    0,   46,   46,    0,    0,   46,    0,
   46,   46,   45,    0,    0,   46,   45,    0,   45,    0,
    0,   45,    0,   45,   45,    0,    0,   45,    0,   45,
    0,   45,   45,   45,   45,   46,   46,    0,   45,    0,
    0,    0,    0,   45,    0,   45,   45,   45,    0,    0,
   45,    0,   45,    0,   45,    0,    0,   45,    0,   45,
   45,   45,   45,    0,    0,    0,   45,   45,   45,    0,
    0,   45,   45,   45,    0,   45,    0,    0,    0,    0,
   45,   45,    0,    0,   45,    0,   45,   45,   45,   46,
    0,   45,   45,    0,   45,    0,    0,   45,    0,   45,
   45,    0,    0,   45,    0,   45,    0,   45,   45,   45,
   45,    0,    0,    0,   45,   82,    0,    0,    0,   45,
    0,   45,   45,   45,   45,    0,   45,    0,   45,    0,
   45,    0,    0,   45,    0,   45,   45,   45,   45,    0,
    0,    0,   45,   45,   45,    0,    0,   45,   45,   45,
    0,   45,    0,    0,    0,    0,   45,   45,    0,    0,
   45,    0,   45,   45,   46,   45,    0,   45,   46,    0,
   46,    0,    0,   46,    0,   46,   46,    0,    0,   46,
    0,   46,    0,   46,   46,   46,   46,    0,    0,    0,
   46,   83,    0,    0,    0,   46,    0,   46,   46,   46,
   45,    0,   46,    0,   46,    0,   46,    0,    0,   46,
    0,   46,   46,   46,   46,    0,    0,    0,   46,   46,
   46,    0,    0,   46,   46,   46,    0,   46,    0,    0,
    0,    0,   46,   46,    0,    0,   46,    0,   46,   46,
   45,   45,    0,   46,   45,    0,   45,    0,    0,   45,
    0,   45,   45,    0,    0,   45,    0,   45,    0,   45,
   45,   45,   45,    0,    0,    0,   45,    0,    0,    0,
    0,   45,    0,   45,   45,   45,   46,    0,   45,    0,
   45,    0,   45,    0,    0,   45,    0,   45,   45,   45,
   45,    0,    0,    0,   45,   45,   45,    0,    0,   45,
   45,   45,    0,   45,    0,    0,    0,    0,   45,   45,
    0,    0,   45,    0,   45,   45,   45,   46,    0,   45,
   45,    0,   45,    0,    0,   45,    0,   45,   45,    0,
    0,   45,    0,   45,    0,   45,   45,   45,   45,    0,
    0,    0,   45,  215,    0,    0,    0,   45,    0,   45,
   45,   45,    0,    0,   45,    0,   45,    0,   45,    0,
    0,   45,    0,   45,   45,   45,   45,    0,    0,    0,
   45,   45,   45,    0,    0,   45,   45,   45,    0,   45,
    0,    0,    0,    0,   45,   45,    0,    0,   45,    0,
   45,   45,    0,   45,  683,   45,  683,    0,  683,    0,
    0,  683,    0,  683,  683,    0,    0,  683,    0,  683,
    0,  683,  683,  683,    0,    0,    0,    0,  683,  216,
    0,    0,    0,  683,    0,  683,  683,    0,    0,    0,
  683,    0,    0,    0,  683,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  683,  683,    0,  683,    0,
    0,    0,  683,  683,    0,  683,    0,    0,    0,    0,
  683,  683,    0,    0,  683,    0,    0,  683,  682,   45,
  682,  683,    0,  682,    0,  682,  682,    0,    0,  682,
    0,  682,    0,  682,  682,  682,    0,    0,    0,    0,
  682,  683,  683,    0,    0,  682,    0,  682,  682,    0,
    0,    0,  682,    0,  683,    0,  682,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  682,    0,
  682,    0,    0,    0,  682,  682,    0,  682,    0,    0,
    0,    0,  682,  682,    0,    0,  682,    0,    0,  682,
    0,    0,    0,  682,  682,  683,  682,    0,    0,  682,
    0,  682,  682,    0,    0,  682,    0,  682,    0,  682,
  682,  682,    0,    0,    0,    0,  682,    0,    0,    0,
    0,  682,    0,  682,  682,    0,  682,    0,  682,    0,
    0,    0,  682,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  682,    0,  682,    0,    0,    0,
  682,  682,    0,  682,    0,   17,    0,   18,  682,  682,
   19,    0,  682, 1051,    0,  682,  158,  682,   20,  682,
  159, 1052, 1053,    0,    0,    0,    0,   22,    0,    0,
    0,    0, 1054,    0,   24,    0,    0,    0,    0,   25,
    0,    0,    0,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   28,    0,   29,    0,    0,
    0,   30,    0,    0, 1055,    0,    0,    0,    0,   31,
   32,    0,    0,   33,    0,    0, 1056,    0,    0,    0,
  160,   17,    0,   18,    0,    0,   19,    0,    0, 1051,
    0,    0,  158,  682,   20,    0,  159, 1052, 1053,    0,
    0,    0,    0,   22,    0,    0,    0,    0, 1054,    0,
   24,    0,    0, 1057,    0,   25,    0,    0,    0,   26,
    0,   45,    0,   45,    0,    0,   45,    0,    0,    0,
    0,   28,    0,   29,   45,    0,    0,   30,    0,    0,
 1055,    0,    0,   45,    0,   31,   32,    0,    0,   33,
   45,    0, 1056,    0,  121,   45,  160,    0,    0,   45,
    0,   45,    0,   45,    0,    0,    0,    0,   45,    0,
    0,   45,    0,   45,    0,    0,    0,   45,    0,    0,
   45,    0,    0,    0,    0,   45,   45,    0,    0,   45,
    0,   45,   45,   45,    0,    0,   45,    0,    0,    0,
    0,    0,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
   45,    0,    0,    0,  151,   45,    0,    0,    0,   45,
  121,   45,    0,   45,    0,   46,    0,   46,   45,    0,
   46,   45,    0,   45,    0,    0,    0,   45,   46,    0,
   45,    0,    0,    0,    0,   45,   45,   46,    0,   45,
    0,    0,   45,    0,   46,    0,    0,    0,    0,   46,
   45,    0,    0,   46,    0,   46,    0,   46,    0,    0,
    0,    0,   46,    0,    0,   46,    0,   46,    0,    0,
    0,   46,  151,    0,   46,    0,   45,    0,   45,   46,
   46,   45,    0,   46,    0,    0,   46,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
    0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
   45,    0,    0,    0,   45,    0,   45,   17,   45,   18,
   45,    0,   19,   45,  918,    0,   45,    0,   45,    0,
   20,    0,   45,    0,    0,   45,    0,    0,    0,   22,
   45,   45,    0,    0,   45,    0,   24,   45,    0,    0,
    0,   25,    0,  919,    0,   26,    0,    0,  167,    0,
  167,    0,    0,  167,   46,    0,    0,   28,    0,   29,
    0,  167,    0,   30,  920,    0,    0,    0,    0,    0,
  167,   31,   32,    0,    0,   33,    0,  167,  124,    0,
    0,    0,  167,    0,    0,    0,  167,    0,    0,  167,
    0,  167,    0,    0,  167,    0,    0,    0,  167,    0,
  167,    0,  167,    0,  167,    0,    0,    0,    0,    0,
    0,  167,  167,  167,    0,   45,  167,    0,  167,  167,
    0,    0,    0,  167,    0,    0,    0,  167,    0,    0,
   17,    0,   18,    0,    0,   19,    0,    0,    0,  167,
    0,  167,    0,   20,    0,  167,    0,    0,    0,    0,
    0,  936,   22,  167,  167,    0,  121,  167,    0,   24,
  167,    0,    0,    0,   25,    0,    0,    0,   26,    0,
    0,   17,    0,   18,    0,    0,   19,    0,    0,    0,
   28,    0,   29,    0,   20,    0,   30,    0,    0,    0,
  936,    0,    0,   22,   31,   32,    0,  167,   33,    0,
   24,  124,    0,    0,    0,   25,    0,    0,    0,   26,
    0,    0,   17,    0,   18,    0,    0,   19,    0,    0,
    0,   28,    0,   29,    0,   20,    0,   30,    0,    0,
    0,    0,    0,    0,   22,   31,   32,    0,  167,   33,
    0,   24,  203,    0,    0,    0,   25,    0,    0,    0,
   26,    0,    0,  168,    0,  168,    0,    0,  168,    0,
    0,    0,   28,    0,   29,    0,  168,    0,   30,    0,
    0,    0,    0,    0,    0,  168,   31,   32,    0,  121,
   33,    0,  168,  217,    0,    0,    0,  168,    0,    0,
    0,  168,    0,    0,  167,    0,  167,    0,    0,  167,
    0,    0,    0,  168,    0,  168,    0,  167,    0,  168,
    0,    0,    0,    0,    0,    0,  167,  168,  168,    0,
  121,  168,    0,  167,  168,    0,    0,    0,  167,    0,
    0,    0,  167,    0,    0,  497,    0,  497,    0,    0,
  497,    0,    0,    0,  167,    0,  167,    0,  497,    0,
  167,    0,    0,    0,    0,    0,    0,  497,  167,  167,
    0,  121,  167,    0,  497,  167,    0,    0,    0,  497,
    0,    0,    0,  497,    0,    0,  177,    0,  177,    0,
    0,  177,    0,    0,    0,  497,    0,  497,    0,  177,
    0,  497,    0,    0,    0,    0,    0,    0,  177,  497,
  497,    0,  168,  497,    0,  177,  497,    0,    0,    0,
  177,    0,    0,    0,  177,    0,   31,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  177,   31,  177,    0,
    0,   31,  177,    0,    0,   31,    0,    0,   31,    0,
  177,  177,    0,  167,  177,    0,    0,  177,    0,    0,
   31,   31,    0,    0,    0,   31,   31,   45,    0,    0,
    0,   31,    0,   31,   31,   31,   31,    0,   45,    0,
    0,   31,   45,    0,    0,   31,   45,   31,    0,   45,
    0,    0,    0,    0,  497,    0,    0,    0,    0,    0,
   31,   45,   45,    0,    0,   31,   45,   45,    0,    0,
    0,    0,   45,    0,   45,   45,   45,   45,    0,    0,
    0,    0,   45,    0,    0,    0,   45,    0,   45,   31,
   31,    0,   45,    0,    0,  177,    0,    0,    0,    0,
    0,   45,    0,   45,    0,    0,   45,   45,    0,    0,
    0,   45,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   45,   45,    0,    0,
   33,   45,   45,    0,    0,    0,    0,   45,    0,   45,
   45,   45,   45,    0,    0,    0,    0,   45,    0,    0,
    0,   45,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   45,    0,    0,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   34,
  };
  protected static  short [] yyCheck = {             7,
  349,    7,  463,  117,    3,  590,   46,  465,   65,  229,
  447,  350,  174,  125,  795,   59,  963,  347,   44,  184,
  229,  926,   66,   67,  246,  347,  852,  256,  494,  888,
  125,   65,  499,  158,  185,  256,   44,  132,   44,  499,
  945,  873,  256, 1173,  229,  256,  256,  367,  584,  256,
  510,  511,  256,  434,  499,  275,  365,  256,  363,  184,
   59,  101,  256,  283,  256,  510,  511,   66,   67,  448,
  364,  166,  256,  256,    0,  260,  133,  262,  707,  911,
  256,  263,  914,  256,  369,    2,  250,  276, 1099,  256,
  364,  255,  268,  365,  258,  259,  416,  256,  281,  133,
  707,  355,  481,    3,  999,  414,    2,  707,  256,  414,
  257,  256, 1058,  462,  410,  494,  334,  337,  338,  704,
  334,  417,  286,  256,  256, 1071,  170,  347,  382,  338,
  313,  425,  314, 1080,  419,    0,  256,  256,  256,  268,
   57,  256,   59,  256,  602,  256,  256,  357,  585,   66,
   67,  425,  363,  338,  365, 1014,  367,  342,  256,  158,
  992,   57,  256,  370,  510,  511,  795,  387,  753,  354,
  390,  170,  392,  372,  256, 1070,  396,  397,  387,  645,
  372,  365,   99,  377,  348,  184,  348,  396,  795,  649,
  234,  268,  365,  414, 1205,  795,  363,   97,  275, 1329,
  367,  430,  387,   99,  649,  416,  587,  988,  419,  423,
  414,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  760,  414,  415,  352,  379,  377,
  274,  414,   59,  268,  366,  234,  368, 1063,  370,   66,
   67,  158,  418,  463,  377,  430, 1072,  707,  363,  416,
  859,  718,  367,  170,  379,  414,  367,  370, 1025,  159,
 1027,  371,  720,  256,  643,  485,  645,  184,  387,  414,
 1037,  731,  732, 1040,  604,  274,  461,  256,  463, 1138,
  465,  198,  604,  503,  504,  367,  731,  732,  452,  418,
  475,  410,  477,  425,  414,  504,  414,  482,  417,  343,
  304,  416,  198,  649,  204,  416,  350,  351,  256,  226,
  256,  269,  256,  773,  499,  775,  414,  234, 1265,  504,
  414,  486,  256,  256,  256,  510,  511,  285,  773,  364,
  226,  257,  389,  256,  416,  795,  236,  414,  238,  324,
  240,  492,  256,  170,  343,  256,  272,  256,  957,  256,
  276,  350,  351,  352,  280,  389, 1182,  274,  256,  988,
  414,  486, 1194,  324,  396,  256,  256,  492,  412,  295,
  999,  859,  838,  783, 1141, 1280,  596,  262,  371,  256,
  379,  988,  439,  418,  604,  731,  732,  596,  988,  368,
 1295,  256,  999,  772,  855,  256,  322,  256,  256,  999,
  368,  256,  624,  293,  367,  784,  785,  234, 1313,  341,
 1315,  596,  297,  412,  340,  363,  339,  602,  638,  363,
  605,  365,  368,  431,  372,  431,  343,  887,  304,  414,
  858,  859,  366,  350,  351,  352,  370,  657,  371,  905,
    0, 1070,  887,  773,  364,  502,  414,  274,  505,  506,
  635,  859,  372,  414,  368,  387, 1237,  677,  365,  838,
  371,  370,  379, 1070,  649,  859, 1233,  365,  677,  957,
 1070,  505,  504,  338, 1241,  366,  341,  368,  410,  370,
  368,  891,  831,  647,  648,  417,    2,  486,  639,  374,
  375,  368,  677,  492,  679,  412,  658,  859,  363,  368,
  499,  929,  367,  963,  369,  425,  371,  368,  363,  368,
  368,  510,  511,  341,  639,  266,  343,  682,  963,  859,
  256,  859,  357,  414,  351,  364,  905,  712,  988,  957,
  681,  751,  367,  718,  859,  720,  365,  425,  578,  999,
  369,   57,  586,   59,  656,  368,  731,  732,  574,  957,
   66,   67,  368,  256,  364,  717,  425,  682,  778,  387,
  655,  656,  313,  957, 1331, 1025,  574, 1027,  574,  486,
 1199,  367,  305,  369,  794,  492,  584, 1037,  584,  312,
 1040,  416,  410,   99, 1012,  412,  425,  586,  414,  417,
  419,  324, 1199,  256,   37,  957,  781,   40,  783, 1199,
  979,  264,  425,  660,  414,  341,  364,  414, 1237,  425,
 1070,  341,  776,  777,  263,  779,  780,  957,  782,  957,
  371,  785,  786,  787, 1003, 1297, 1298,  363,  363,  364,
 1237, 1058,  957,  369,  370,  855,  372, 1237,  341,  683,
  639,  377,  158,  863, 1071, 1229,  411,  377,   91,  689,
  649,  414,  256, 1032,  170, 1034,  414,  387,  843,  256,
  363,  324,  370,  272,  367,  314,  369,  276,  184,  586,
  855,  280,  370,  276, 1346,  411,  256,  280,  305,  414,
  410, 1141,  198,  682,  683,  312,  295,  417,  873, 1147,
 1274,  876,  877,  136,  137,  341,  881,  257,  387,  142,
  304,  261,  887,  888,  412,  377,  891,  304,  707,  382,
  226,  272,  272,  322,  412,  387,  276,  363,  234,  763,
  280,  410,  639,  283,  369, 1074,  911,  372, 1165,  914,
  256,  340,  731,  732,  295,  295,  296,  340,  410, 1199,
  300,  301, 1121,  269,  964,  417,  306,  272,  308,  309,
  310,  311,  760,  365,  760, 1094,  316, 1342,  274,  285,
  320,  322,  322,  983,  763,  682,  683,  341,  338,  369,
  295,  341,  372, 1233,  773,  335,  775, 1237,  358,  359,
  340, 1241, 1219,  365,  364, 1222,  366,  341,  368,  363,
  370,  371,  372,  363, 1252, 1015,  795,  322,  962,  338,
  341,  369,  372,  363,  364,  365,  386,  992,  341,  363,
  387, 1248, 1249,  857,  978,  371,  256,  363,  372,  338,
 1257,  367,  363,  369,  363,  370, 1263,  343,  872, 1014,
  363,  372,  371,  410,  350,  351,  352,  338,  369,  372,
  417,  364,  338,  355,  363,  425,  763,  355,  428,  372,
  858,  859,  858,  859,  364,  365,  683,  369,  857,  341,
 1045,  369,  363,  379,  414,  411,  367,  363, 1088,  338,
  382, 1331, 1251,  872,  382, 1000,  338, 1097,  363,  499,
 1229,  363,  368, 1341, 1009,  355,  364,  372,  887, 1074,
  510,  511,  370,  397,  363,  365,  412, 1082,  368,  369,
  370,  363,  365, 1364, 1365,  409,  946,  364,  305,  364,
  307, 1131,  382,  370,  377,  312,  370,  372,  358,  359,
  377,  929, 1086,  929,  364, 1274,  366,  324,  368,  363,
  370,  371,  372,  378,  379,  712,  366,  364,  372, 1124,
  857,  381,  719,  370,  414,  385,  386,  392,  393,  957,
  367,  957,  369, 1138,  998,  872,  396,  397, 1143,  363,
  364, 1103, 1147,  366,  963,  368,  367,  370,  372,  409,
  486, 1350, 1351, 1115, 1116, 1000,  492, 1356, 1357,  356,
  390,  391,  366,  356, 1009,  425,  370, 1031,  428,  988,
  367,  364,  369,  414,  367,  369,  369,  370,  372,  998,
  999, 1000, 1116,  363, 1012,  365, 1012, 1051, 1052, 1194,
 1009,  388,  389,  364,  366,  388,  389,  368,  370,  370,
  363,  372, 1207, 1208,  363,  364, 1025, 1376, 1027,  649,
  857,  408, 1031,  372,  371,  408,  366,  367, 1037,  416,
  370, 1040,  419,  416, 1229,  872,  419,  394,  395,  256,
 1094,  364, 1051, 1052,  364, 1112,  256,  370,  368,  372,
  370, 1105,  372, 1107,  356,  364,  368, 1252,  370,  368,
  586, 1070,  364,  372,    0,  367,  256,  369,  370,  367,
  366,  998,  368, 1000,  370,  377,  368,  707,  370, 1274,
  372,  366, 1009,  368,  367, 1094,  388,  389,  371,  256,
  366,  367, 1159,  369,  370,  371, 1105,  366, 1107,  366,
  341,  731,  732,  370, 1031,  366,  408,  366, 1175,  370,
 1177,  370,  366,  639,  416,  368,  370,  419,  366,  372,
  370,  371,  370,  368, 1051, 1052,  368,  372,  371,  368,
  372, 1058, 1141,  372, 1364, 1365,  418,  419,  420,  421,
  367,  358,  359,  773, 1071,  775, 1341,  364,  368,  366,
  370,  368,  414,  370,  371,  372,  682,  683,  382,  383,
  384,  998,  366,  369,  368,  795,  366, 1094,  368, 1364,
 1365,  366,  370,  368,  372,  368, 1103,  370, 1105,  381,
 1107, 1376,  370,  256,  372,  370,  380,  372, 1115, 1116,
 1199,  358,  359,  385, 1031,  358,  359,  364,  363,  366,
  261,  368,  386,  370,  371,  372,  364,  365,  425,  410,
  411,  428,  363,  364, 1051, 1052,  360,  361,  396,  386,
  358,  359,  283,  366, 1233,  358,  359,  256, 1237, 1247,
  397, 1247, 1241,  363,  364,  296,  363,  763,  360,  361,
  301, 1259,  409, 1259,  276,  306,  341,  308,  309,  310,
  311,  368,  414,  415,    0,  316,  371,  887,  425,  320,
  414,  428,  367,  324, 1282, 1283, 1282, 1283, 1105,  410,
 1107,  416,  417,  377,  335,  422,  423,  368,  368, 1297,
 1298, 1297, 1298,  363,  370,  358,  359,  364,  370,  368,
  368,  364,  368,  366,  256,  368,  364,  370,  371,  372,
  370,  368,  338,  364,  370,  368,  377,  380,  381,  428,
  419,  368,  385,  386,  370,  370,  413,  371,  341,  368,
  256,  256, 1331,  396,  397,  261,  262,  414, 1346,  370,
 1346,  857,  367,  963,  368,  256,  409,  363,  341,  414,
  364,  368,  370,  256,  377,  364,  872,  283,  363,  363,
  372,  413,  425,  414,  366,  428,  377,  368,  988,  368,
  296,  297,  256,  363,  377,  301,  372,  372,  304,  999,
  306,  372,  308,  309,  310,  311,  256,  372,  256,  372,
  316,  372,  366,  372,  320,  368,  367,  364,  324,  364,
  370,  256,  368,  372,  372, 1025,  363, 1027,  370,  335,
  370,  304,  338,  377,  364,  341,  370, 1037,  279,  367,
 1040,  256,  324,    0,  365,  414,  414,  364,  372,  372,
  368,  377,  358,  359,  368,  368,  363,  363,  364,  419,
  366,  367,  368,  367,  370,  371,  372,  367,  374,  375,
 1070,  414,  378,  379,  380,  381,  377,  367,  367,  385,
  386,  369,  367,  261,  390,  391,  392,  393,  394,  395,
  396,  397,  363,  367,  341,  372,  377,  372,  368,  364,
  368,  368,  998,  409, 1000,  283,  412,  368,  414,  372,
  370,  369,  369, 1009,  366,  370,  414,  368,  296,  425,
  366,  414,  428,  301,  368,  368,  368,  372,  306,  368,
  308,  309,  310,  311,  368, 1031,  364,  377,  316,  364,
  256, 1141,  320,  314,  263,  261,  262,  377,  367,  367,
  377,  364,  368,    0,  368, 1051, 1052,  335,    0,    0,
  372,  366,  366,  363,  363,  414,  364,  283,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  414,  364,
  296,  297,  368,  363,  368,  301,  368,  364,  304,  364,
  306,  428,  308,  309,  310,  311,  428,  414, 1094, 1199,
  316,  364,    0,  364,  320,  372,  372,  372,  324, 1105,
  363, 1107,  364,  372,  368,  372,  372,  364,  368,  335,
  256,  369,  338,  372,  364,  341,  368,  372,  372,  372,
  368,  372,  368, 1233,  314,  263,  414, 1237,  326,  355,
  356, 1241,  358,  359,  431,    8,  226,  363,  364,  365,
  366,  367,  368,  369,  370,  371,  372,  198,  374,  375,
  387,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386, 1012,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  387,  929,  412,  592,  414,  256,
  416, 1050, 1308,  419,  261,  262, 1277, 1251, 1255,  425,
 1121,  577,  428, 1357,  686,  681, 1103,  957, 1122,  686,
 1283, 1270,  358,  359, 1282,  760,  283, 1351,  364, 1177,
  366, 1331,  368,  223,  370,  371,  372,  352, 1094,  296,
  297,  763,  477,  397,  301,    0,  605,  304,  677,  306,
  386,  308,  309,  310,  311,  831,  511,  715,  596,  316,
  396,  397,  253,  320,  256,  381,  424,  324,  425,  428,
  426,  604,  427,  409,  492,  436,  429,  639,  335,  701,
 1199,  338,  998, 1149,  341, 1137, 1208, 1187, 1133,  425,
 1199, 1197,  428, 1265,  980, 1240,  225,  222,   -1,  356,
   -1,  358,  359,   -1,   -1,   -1,  363,  364,   -1,  366,
  367,  368,  369,  370,  371,  372,   -1,  374,  375,   -1,
  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
   -1,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,  412,   -1,  414,  256,  416,
   -1,   -1,  419,  261,  262,   -1,  358,  359,  425,   -1,
   -1,  428,  364,   -1,  366,   -1,  368,   -1,  370,  371,
  372,   -1,   -1,   -1,   -1,  283,   -1,   -1,    0,  381,
   -1,   -1,   -1,  385,  386,   -1,   -1,   -1,  296,  297,
   -1,   -1,   -1,  301,  396,  397,  304,   -1,  306,   -1,
  308,  309,  310,  311,   -1,   -1,   -1,  409,  316,   -1,
   -1,   -1,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,
   -1,   -1,   -1,  425,   -1,   -1,  428,  335,   -1,   -1,
  338,   -1,   -1,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,
  358,  359,   -1,   -1,   -1,  363,  364,  365,  366,  367,
  368,  369,  370,  371,  372,   -1,  374,  375,   -1,    0,
  378,  379,  380,  381,  382,   -1,   -1,  385,  386,   -1,
   -1,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
   -1,  256,   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,
   -1,  409,   -1,   -1,  412,   -1,  414,   -1,  416,   -1,
   -1,  419,   -1,  261,   -1,  263,   -1,  425,  283,   -1,
  428,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,  297,   -1,   -1,  283,  301,   -1,   -1,  304,
   -1,  306,   -1,  308,  309,  310,  311,   -1,  296,   -1,
   -1,  316,   -1,  301,   -1,  320,   -1,   -1,  306,  324,
  308,  309,  310,  311,   -1,   -1,  314,   -1,  316,   -1,
  335,   -1,  320,  338,   -1,   -1,  341,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,
   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,  363,  364,
  365,  366,  367,  368,   -1,  370,  371,  372,   -1,  374,
  375,   -1,   -1,  378,  379,  380,  381,   -1,   -1,   -1,
  385,  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,
  395,  396,  397,   -1,  256,    0,   -1,   -1,   -1,  261,
  262,   -1,   -1,   -1,  409,   -1,   -1,  412,   -1,  414,
   -1,  416,   -1,   -1,  419,   -1,   -1,   -1,   -1,   -1,
  425,  283,   -1,  428,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,  301,
   -1,   -1,  304,   -1,  306,   -1,  308,  309,  310,  311,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,  320,   -1,
   -1,    0,  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  335,   -1,   -1,  338,   -1,   -1,  341,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
   -1,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,   -1,  374,  375,   -1,   -1,  378,  379,  380,  381,
   -1,   -1,   -1,  385,  386,   -1,  297,    0,  390,  391,
  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,
  412,   -1,  414,   -1,  416,   -1,   -1,  419,   -1,   -1,
   -1,   -1,   -1,  425,   -1,   -1,  428,  338,   -1,   -1,
  341,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,    0,
   -1,   -1,  363,  364,  365,  366,  367,  368,   -1,  370,
  371,  372,   -1,  374,  375,   -1,   -1,  378,  379,  380,
  381,   -1,   -1,   -1,  385,  386,   -1,   -1,   -1,  390,
  391,  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,
   -1,  412,   -1,  414,   -1,  416,   -1,    0,  419,   -1,
   -1,  256,  257,   -1,  425,   -1,  261,  428,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
   -1,  276,   -1,  278,   -1,  280,  281,  282,  283,   -1,
   -1,   -1,  287,   -1,   -1,   -1,   -1,  292,    0,  294,
  295,  296,   -1,   -1,  299,  300,  301,   -1,  303,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,
  315,  316,  317,   -1,   -1,  320,  321,  322,  257,  324,
   -1,   -1,  261,   -1,  329,  330,   -1,   -1,  333,    0,
  335,  336,   -1,  272,   -1,  340,   -1,  276,   -1,   -1,
   -1,  280,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  363,  364,
  365,  300,  301,   -1,   -1,   -1,   -1,  306,  373,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,  320,   -1,  322,  257,    0,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,  272,
   -1,  340,   -1,  276,   -1,   -1,   -1,  280,   -1,  414,
  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,   -1,  364,  365,  300,  301,   -1,
   -1,   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,
   -1,   -1,   -1,  316,   -1,   -1,  257,  320,   -1,  322,
  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,  335,   -1,   -1,  276,   -1,  340,   -1,  280,
   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  296,   -1,   -1,   -1,  300,
  301,  364,  365,   -1,   -1,  306,   -1,  308,  309,  310,
  311,   -1,   -1,   -1,  257,  316,   -1,   -1,  261,  320,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,
   -1,   -1,   -1,  276,  335,   -1,   -1,  280,   -1,  340,
  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,   -1,  257,   -1,  300,  301,  261,
   -1,   -1,   -1,  306,  365,  308,  309,  310,  311,   -1,
  272,   -1,   -1,  316,  276,   -1,   -1,  320,  280,  322,
   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,  295,  296,   -1,  257,  340,  300,  301,
  261,   -1,   -1,   -1,  306,   -1,  308,  309,  310,  311,
   -1,  272,   -1,   -1,  316,  276,   -1,   -1,  320,  280,
  322,   -1,  283,  263,  264,  265,  266,  267,  268,  269,
  270,   -1,   -1,  335,  295,  296,   -1,   -1,  340,  300,
  301,   -1,   -1,   -1,   -1,  306,   -1,  308,  309,  310,
  311,   -1,  257,   -1,   -1,  316,  261,   -1,   -1,  320,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  272,   -1,   -1,
   -1,  276,   -1,   -1,  335,  280,   -1,   -1,  283,  340,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,  261,   -1,   -1,  300,  301,   -1,   -1,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,
   -1,  316,   -1,   -1,  283,  320,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,   -1,   -1,
  335,   -1,  301,   -1,   -1,  340,   -1,  306,   -1,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,  409,
  410,  411,  256,   -1,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
  266,  267,  268,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,   -1,   -1,   -1,  284,   -1,
   -1,  287,  288,  289,  290,  291,   -1,   -1,  294,   -1,
   -1,   -1,  298,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  414,   -1,  313,   -1,  315,
  490,  317,  318,   -1,   -1,  321,   -1,  323,  324,  325,
  326,  327,  328,  329,  330,  331,   -1,  333,  334,   -1,
  336,   -1,   -1,  339,  358,  359,   -1,   -1,   -1,   -1,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,   -1,  358,  359,   -1,   -1,   -1,  363,  364,   -1,
   -1,  367,  386,   -1,   -1,   -1,  372,  373,  374,  375,
  376,   -1,  396,  397,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,   -1,  409,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  425,   -1,   -1,  428,   -1,   -1,  413,  414,  415,
  416,   -1,  418,   -1,   -1,   -1,   -1,   -1,  256,  425,
   -1,   -1,   -1,  429,   -1,  431,  264,  265,  266,  267,
  268,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,  287,
  288,  289,  290,  291,   -1,   -1,  294,   -1,   -1,   -1,
  298,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,  323,  324,  325,  326,  327,
  328,  329,  330,  331,   -1,  333,  334,   -1,  336,   -1,
   -1,  339,  358,  359,   -1,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
  358,  359,   -1,   -1,   -1,  363,  364,   -1,   -1,  367,
  386,   -1,   -1,   -1,  372,  373,  374,  375,  376,   -1,
   -1,  397,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,  409,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,  428,   -1,   -1,  413,  414,  415,  416,   -1,
  418,   -1,   -1,   -1,  256,   -1,  256,  425,   -1,   -1,
   -1,  429,   -1,  431,  264,  265,  266,  267,  268,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,  287,  288,  289,
  290,  291,   -1,   -1,  294,   -1,   -1,   -1,  298,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,  323,  324,  325,  326,  327,  328,  329,
  330,  331,   -1,  333,  334,   -1,  336,   -1,   -1,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,  358,  359,
   -1,   -1,  364,  363,  366,   -1,  368,  367,  370,  371,
  372,   -1,  372,  373,  374,  375,  376,   -1,  380,  381,
  380,   -1,  382,  385,  386,   -1,   -1,   -1,  388,  389,
   -1,   -1,  394,  395,  396,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,
   -1,   -1,   -1,  413,  414,  415,  416,   -1,  418,   -1,
   -1,   -1,   -1,  425,  256,   -1,  428,   -1,   -1,  429,
   -1,  431,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,  287,  288,  289,  290,  291,
   -1,   -1,  294,   -1,   -1,  261,  298,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,  315,   -1,  317,  318,  283,   -1,  321,
   -1,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  296,  333,  334,   -1,  336,  301,   -1,  339,   -1,   -1,
  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,  320,   -1,  358,  359,   -1,   -1,
   -1,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  335,
  372,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  256,   -1,
   -1,   -1,   -1,   -1,  360,  361,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  413,  414,  415,  416,   -1,  284,   -1,   -1,  287,
  288,  289,  290,  291,   -1,   -1,  294,  429,   -1,  431,
  298,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,  323,  324,  325,  326,  327,
  328,  329,  330,  331,   -1,  333,  334,   -1,  336,   -1,
   -1,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,  359,   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,  372,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,  413,  414,  415,  416,   -1,
  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,  261,   -1,
  294,  429,   -1,  431,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,  312,   -1,
  283,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,  296,  328,  329,  330,  331,  301,  333,
   -1,  304,   -1,  306,   -1,  308,  309,  310,  311,   -1,
   -1,   -1,   -1,  316,   -1,   -1,   -1,  320,   -1,   -1,
   -1,  324,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,
   -1,   -1,  335,  367,   -1,   -1,  370,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  256,   -1,   -1,   -1,
   -1,  364,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,  413,
  414,  415,  416,   -1,  284,   -1,   -1,  287,   -1,   -1,
   -1,   -1,  261,   -1,  294,  429,   -1,  431,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  414,   -1,   -1,  283,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,  296,  328,  329,
  330,  331,  301,  333,   -1,  304,   -1,  306,   -1,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,  320,   -1,   -1,   -1,  324,   -1,   -1,  358,  359,
   -1,   -1,   -1,  363,  364,   -1,  335,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  256,   -1,   -1,   -1,   -1,  364,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,  413,  414,  415,  416,   -1,  284,   -1,
   -1,  287,   -1,   -1,   -1,   -1,  261,   -1,  294,  429,
   -1,  431,   -1,  299,   -1,  301,  302,  303,   -1,  305,
   -1,   -1,   -1,   -1,   -1,  414,  312,   -1,  283,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,  296,  328,  329,  330,  331,  301,  333,   -1,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,  314,
   -1,  316,   -1,   -1,   -1,  320,   -1,   -1,   -1,   -1,
   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,
  335,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,  256,   -1,   -1,   -1,   -1,  364,
  365,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,  413,  414,  415,
  416,   -1,  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,
  261,   -1,  294,  429,   -1,  431,   -1,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  283,  315,   -1,  317,  318,  319,   -1,  321,
   -1,   -1,  324,   -1,  326,  296,  328,  329,  330,  331,
  301,  333,   -1,   -1,   -1,  306,   -1,  308,  309,  310,
  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,  320,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
   -1,  363,   -1,   -1,  335,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  256,  360,
  361,   -1,   -1,  364,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,  413,  414,  415,  416,   -1,  284,   -1,   -1,  287,
   -1,   -1,   -1,   -1,  261,   -1,  294,  429,   -1,  431,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  283,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,  296,
  328,  329,  330,  331,  301,  333,   -1,   -1,  336,  306,
   -1,  308,  309,  310,  311,   -1,   -1,   -1,   -1,  316,
   -1,   -1,   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,
  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,  335,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,  256,  360,  361,   -1,   -1,  364,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,  413,  414,  415,  416,   -1,
  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,  261,   -1,
  294,  429,   -1,  431,   -1,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  283,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,  296,  328,  329,  330,  331,  301,  333,
   -1,   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,
   -1,  314,   -1,  316,   -1,   -1,   -1,  320,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,  363,
   -1,   -1,  335,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  256,   -1,   -1,   -1,
   -1,  364,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,  413,
  414,  415,  416,   -1,  284,   -1,   -1,  287,   -1,   -1,
   -1,   -1,  261,   -1,  294,  429,   -1,  431,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,  296,  328,  329,
  330,  331,  301,  333,   -1,   -1,   -1,  306,   -1,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,   -1,   -1,  364,   -1,  335,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,  413,  414,  415,  416,   -1,  284,   -1,
   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,  429,
   -1,  431,   -1,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,   -1,  333,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,  364,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,  413,  414,  415,
  416,   -1,  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,
   -1,   -1,  294,  429,   -1,  431,   -1,  299,   -1,  301,
  302,  303,   -1,  261,   -1,  263,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,  283,  328,  329,  330,  331,
   -1,  333,   -1,   -1,  336,   -1,   -1,   -1,  296,   -1,
   -1,   -1,   -1,  301,   -1,   -1,   -1,   -1,  306,   -1,
  308,  309,  310,  311,   -1,   -1,  358,  359,  316,   -1,
   -1,   -1,  320,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,  335,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,  364,  275,  276,   -1,
  278,  413,  414,  415,  416,   -1,  284,   -1,   -1,  287,
   -1,   -1,   -1,   -1,   -1,   -1,  294,  429,   -1,  431,
   -1,  299,   -1,  301,  302,  303,   -1,  261,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,  283,
  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,   -1,
   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,
  358,  359,  316,   -1,   -1,   -1,  320,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,  335,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,  413,  414,  415,  416,   -1,
  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,
  294,  429,   -1,  431,   -1,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,  333,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,  413,
  414,  415,  416,   -1,  284,   -1,   -1,  287,   -1,   -1,
   -1,   -1,   -1,   -1,  294,  429,   -1,  431,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,  413,  414,  415,  416,   -1,  284,   -1,
   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,  429,
   -1,  431,   -1,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,   -1,  333,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,   -1,  388,  389,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,  413,  414,  415,
  416,   -1,  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,
   -1,   -1,  294,  429,   -1,  431,   -1,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,  413,  414,  415,  416,   -1,  284,   -1,   -1,  287,
   -1,   -1,   -1,   -1,   -1,   -1,  294,  429,   -1,  431,
   -1,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,  413,  414,  415,  416,   -1,
  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,
  294,  429,   -1,  431,   -1,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,  333,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,  284,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,  256,  388,  389,  297,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  413,
  414,  284,  416,   -1,  287,  326,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,  429,  299,   -1,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,
  333,   -1,  373,  374,  375,  376,   -1,  378,  379,  380,
  381,  382,  383,  384,  385,   -1,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  358,  359,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,
  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,
   -1,   -1,   -1,   -1,  256,  388,  389,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,
  413,  414,  284,  416,   -1,  287,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,  429,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,  256,  388,  389,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,
   -1,  413,  414,  284,  416,   -1,  287,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,
   -1,  382,   -1,   -1,   -1,   -1,  256,  388,  389,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,
   -1,   -1,  413,  414,  284,  416,   -1,  287,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,  256,  388,  389,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,  413,  414,  284,  416,   -1,  287,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,
   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,  256,  388,
  389,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,   -1,   -1,   -1,  413,  414,  284,  416,   -1,  287,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
  429,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,  256,
  388,  389,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,  278,   -1,   -1,   -1,  413,  414,  284,  416,   -1,
  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,  429,  299,   -1,  301,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,
  256,  388,  389,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,   -1,   -1,   -1,  413,  414,  284,  416,
   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,  429,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,   -1,  333,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,  256,  388,  389,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,  278,   -1,   -1,   -1,  413,  414,  284,
  416,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,   -1,  429,  299,   -1,  301,  302,  303,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,  330,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,
  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,
   -1,   -1,  256,  388,  389,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  413,  414,
  284,  416,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,  429,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,  333,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,  256,  388,  389,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  413,
  414,  284,  416,   -1,  287,   -1,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,  429,  299,   -1,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,
  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,
  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,
   -1,   -1,   -1,   -1,  256,  388,  389,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,
  413,  414,  284,  416,   -1,  287,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,  429,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,  256,  388,  389,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,
   -1,  413,  414,  284,  416,   -1,  287,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,
   -1,  382,   -1,   -1,   -1,   -1,  256,  388,  389,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,
   -1,   -1,  413,  414,  284,  416,   -1,  287,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,  256,  388,  389,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,  413,  414,  284,  416,   -1,  287,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,
   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,  256,  388,
  389,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,   -1,   -1,   -1,  413,  414,  284,  416,   -1,  287,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
  429,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,  256,
  388,  389,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,  278,   -1,   -1,   -1,  413,  414,  284,  416,   -1,
  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,  429,  299,   -1,  301,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,
  256,  388,  389,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,  278,   -1,   -1,   -1,  413,  414,  284,  416,
   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,  429,  299,   -1,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
  326,   -1,  328,  329,  330,  331,   -1,  333,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,
   -1,  256,  388,  389,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,  278,   -1,   -1,   -1,  413,  414,  284,
  416,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,   -1,  429,  299,   -1,  301,  302,  303,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,  330,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,
  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,
   -1,   -1,  256,  388,  389,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  413,  414,
  284,  416,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,  429,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,  333,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,  256,  388,  389,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,  413,
  414,  284,  416,   -1,  287,   -1,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,  429,  299,   -1,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,
  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,
  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,
   -1,   -1,   -1,   -1,  256,  388,  389,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,
  413,  414,  284,  416,   -1,  287,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,  429,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,  256,  388,  389,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,   -1,
   -1,  413,  414,  284,  416,   -1,  287,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,
   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,
   -1,  382,   -1,   -1,   -1,   -1,  256,  388,  389,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,
   -1,   -1,  413,  414,  284,  416,   -1,  287,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,  256,  388,  389,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,  413,  414,  284,  416,   -1,  287,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,
  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,
   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,
   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,  256,  388,
  389,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,   -1,   -1,   -1,  413,  414,  284,  416,   -1,  287,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
  429,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  256,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,  256,
  388,  389,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,  278,   -1,   -1,   -1,  413,  414,  284,  416,   -1,
  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,  429,  299,   -1,  301,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,  330,  331,  256,  333,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,
   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,
   -1,  358,  359,   -1,   -1,  378,  379,  380,  381,   -1,
  367,   -1,  385,  386,   -1,   -1,  297,  390,  391,  392,
  393,  394,  395,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  425,   -1,  256,  428,  413,  414,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  429,   -1,  355,  356,   -1,  358,  359,   -1,
   -1,   -1,   -1,  364,  365,  366,  367,  368,  369,  370,
  371,  372,   -1,  374,  375,  297,  377,  378,  379,  380,
  381,  382,  383,  384,  385,  386,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,   -1,
  256,   -1,   -1,  414,   -1,  416,  262,   -1,  419,   -1,
   -1,   -1,   -1,   -1,  425,   -1,   -1,  428,   -1,   -1,
   -1,   -1,   -1,   -1,  356,   -1,  358,  359,   -1,   -1,
   -1,  363,  364,  365,  366,  367,  368,  369,  370,  371,
  372,  297,  374,  375,   -1,  377,  378,  379,  380,  381,
  382,  383,  384,  385,  386,   -1,  388,  389,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,   -1,  256,
   -1,   -1,   -1,   -1,  416,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  425,   -1,   -1,  428,   -1,   -1,   -1,
  356,   -1,  358,  359,   -1,   -1,   -1,  363,  364,   -1,
  366,  367,  368,  369,  370,  371,  372,   -1,  374,  375,
  297,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,   -1,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,  256,   -1,   -1,   -1,   -1,
  416,  262,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,  428,   -1,   -1,   -1,   -1,   -1,   -1,  356,
   -1,  358,  359,   -1,   -1,   -1,   -1,  364,   -1,  366,
  367,  368,  369,  370,  371,  372,  297,  374,  375,   -1,
  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
   -1,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,  256,   -1,   -1,   -1,   -1,  416,
  262,   -1,  419,   -1,   -1,   -1,   -1,   -1,  425,   -1,
   -1,  428,   -1,   -1,   -1,  356,   -1,  358,  359,   -1,
   -1,   -1,   -1,  364,   -1,  366,  367,  368,  369,  370,
  371,  372,   -1,  374,  375,  297,  377,  378,  379,  380,
  381,  382,  383,  384,  385,  386,   -1,  388,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,   -1,
  256,   -1,   -1,   -1,   -1,  416,  262,   -1,  419,   -1,
   -1,   -1,   -1,   -1,  425,   -1,   -1,  428,   -1,   -1,
   -1,   -1,   -1,   -1,  356,   -1,  358,  359,   -1,   -1,
   -1,   -1,  364,   -1,  366,  367,  368,  369,  370,  371,
  372,  297,  374,  375,   -1,  377,  378,  379,  380,  381,
  382,  383,  384,  385,  386,   -1,  388,  389,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,   -1,  256,
   -1,   -1,   -1,   -1,  416,  262,   -1,  419,   -1,   -1,
   -1,   -1,   -1,  425,   -1,   -1,  428,   -1,   -1,   -1,
   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,  374,  375,
  297,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,   -1,  409,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  425,
   -1,   -1,  428,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,  359,   -1,   -1,   -1,   -1,  364,   -1,  366,
   -1,  368,   -1,  370,  371,  372,  297,  374,  375,   -1,
   -1,  378,  379,  380,  381,  382,  383,  384,  385,  386,
   -1,   -1,   -1,  390,  391,  392,  393,  394,  395,  396,
  397,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  425,   -1,
   -1,  428,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,
   -1,   -1,   -1,  364,  297,  366,   -1,  368,   -1,  370,
  371,  372,   -1,  374,  375,  256,   -1,  378,  379,  380,
  381,  262,   -1,   -1,  385,  386,   -1,   -1,   -1,  390,
  391,  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  425,  358,  359,  428,   -1,   -1,
   -1,  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,
  256,  374,  375,   -1,   -1,  378,  379,  380,  381,   -1,
   -1,   -1,  385,  386,   -1,   -1,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  409,  358,  359,   -1,
   -1,   -1,   -1,  364,   -1,  366,  261,  368,  263,  370,
  371,  372,  425,  374,  375,  428,   -1,  378,  379,  380,
  381,   -1,   -1,  256,  385,  386,   -1,   -1,  283,  390,
  391,  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,  409,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,
   -1,  316,  358,  359,  425,  320,   -1,  428,  364,   -1,
  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,
  335,   -1,  378,  379,  380,  381,  256,   -1,   -1,  385,
  386,   -1,   -1,   -1,  390,  391,  392,  393,  394,  395,
  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,
  365,   -1,   -1,  409,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,  425,
   -1,  364,  428,  366,   -1,  368,   -1,  370,  371,  372,
   -1,   -1,   -1,   -1,   -1,  378,  379,  380,  381,  256,
   -1,   -1,  385,  386,   -1,   -1,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,  425,   -1,  364,  428,  366,   -1,  368,   -1,
  370,  371,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,
  380,  381,  256,   -1,   -1,  385,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,  394,  395,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,  359,   -1,   -1,  425,   -1,  364,  428,  366,
   -1,  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,
   -1,  378,  379,  380,  381,  256,   -1,   -1,  385,  386,
   -1,   -1,   -1,   -1,   -1,  392,  393,  394,  395,  396,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  409,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,  425,   -1,
  364,  428,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,   -1,   -1,   -1,  378,  379,  380,  381,  256,   -1,
   -1,  385,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
  394,  395,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,
   -1,  425,   -1,  364,  428,  366,   -1,  368,   -1,  370,
  371,  372,   -1,   -1,   -1,   -1,   -1,  378,  379,  380,
  381,  256,   -1,   -1,  385,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,  394,  395,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,  359,   -1,   -1,  425,   -1,  364,  428,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,   -1,   -1,   -1,
  378,  379,  380,  381,  256,   -1,   -1,  385,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  409,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,  358,  359,   -1,   -1,  425,   -1,  364,
  428,  366,   -1,  368,   -1,  370,  371,  372,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  380,  381,   -1,   -1,   -1,
  385,  386,  256,   -1,   -1,   -1,   -1,   -1,   -1,  394,
  395,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
  425,   -1,  364,  428,  366,   -1,  368,   -1,  370,  371,
  372,  256,   -1,   -1,   -1,   -1,   -1,   -1,  380,  381,
   -1,   -1,   -1,  385,  386,   -1,   -1,   -1,   -1,   -1,
  358,  359,  394,  395,  396,  397,  364,   -1,  366,   -1,
  368,   -1,  370,  371,  372,   -1,   -1,  409,   -1,   -1,
   -1,   -1,  380,  381,   -1,   -1,   -1,  385,  386,   -1,
   -1,   -1,   -1,  425,  358,  359,  428,   -1,  396,  397,
  364,   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,
   -1,  409,   -1,   -1,   -1,   -1,   -1,  381,  256,   -1,
   -1,   -1,  386,   -1,  262,   -1,   -1,  425,  266,   -1,
  428,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,  359,  409,   -1,   -1,   -1,  364,
   -1,  366,   -1,  368,   -1,  370,  371,  372,   -1,  297,
   -1,  425,   -1,   -1,  428,   -1,  381,   -1,   -1,   -1,
   -1,  386,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  256,  396,  397,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  409,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  425,   -1,   -1,  428,   -1,   -1,   -1,  355,  356,   -1,
   -1,  297,   -1,   -1,   -1,   -1,  364,  365,  366,  367,
  368,  369,  370,  371,  372,   -1,  374,  375,   -1,  377,
  378,  379,  380,  381,  382,  383,  384,  385,  386,   -1,
  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,   -1,   -1,   -1,   -1,  414,   -1,  416,   -1,
  356,  419,   -1,   -1,   -1,   -1,   -1,  425,  364,  365,
  366,  367,  368,  369,  370,   -1,  372,   -1,  374,  375,
   -1,  377,  378,  379,  380,  381,   -1,  383,  384,  385,
  386,   -1,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,   -1,   -1,   -1,   -1,  414,   -1,
  416,  264,  265,  419,  267,   -1,   -1,  270,  271,  425,
   -1,   -1,  275,  276,   -1,  278,   -1,   -1,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,   -1,  299,   -1,  301,  302,
  303,   -1,  305,   -1,   -1,   -1,   -1,   -1,   -1,  312,
   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,
  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,   -1,   -1,  370,   -1,   -1,
  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,
   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,
  413,  414,  415,  416,  284,   -1,   -1,  287,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,  429,   -1,  431,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,   -1,  333,   -1,   -1,  336,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,  278,   -1,  413,  414,  415,  416,  284,   -1,   -1,
  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,  429,
   -1,  431,  299,   -1,  301,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,
   -1,  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  358,  359,   -1,   -1,   -1,  363,   -1,   -1,   -1,
  367,   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,
   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,  278,   -1,  413,  414,  415,  416,
  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,  429,   -1,  431,  299,   -1,  301,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,  329,  330,  331,   -1,  333,
   -1,   -1,  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,  413,
  414,  415,  416,  284,   -1,   -1,  287,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,  429,   -1,  431,  299,   -1,
  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,
  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,
  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,
   -1,   -1,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,
   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
  278,   -1,  413,  414,  415,  416,  284,   -1,   -1,  287,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,  429,   -1,
  431,  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,  359,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
   -1,   -1,   -1,   -1,   -1,  373,  374,  375,  376,   -1,
   -1,   -1,  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,  278,   -1,  413,  414,  415,  416,  284,
   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,  429,   -1,  431,  299,   -1,  301,  302,  303,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,   -1,   -1,  321,   -1,   -1,  324,
   -1,  326,   -1,  328,  329,  330,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  358,  359,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,   -1,   -1,   -1,   -1,   -1,  373,  374,
  375,  376,   -1,   -1,   -1,  380,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,  278,   -1,  413,  414,
  415,  416,  284,   -1,   -1,  287,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,  429,   -1,  431,  299,   -1,  301,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,   -1,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,   -1,   -1,   -1,  380,   -1,
  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  265,   -1,
  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  287,  413,  414,  415,  416,   -1,   -1,  294,   -1,   -1,
   -1,   -1,  299,   -1,   -1,   -1,  303,  429,  305,  431,
   -1,   -1,   -1,   -1,   -1,  312,   -1,   -1,  315,   -1,
  317,   -1,   -1,   -1,  321,   -1,   -1,  324,   -1,   -1,
   -1,   -1,  329,  330,  264,  265,  333,  267,   -1,  336,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  299,
   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,   -1,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  414,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  358,  359,
   -1,   -1,   -1,   -1,  431,   -1,   -1,  367,   -1,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,   -1,   -1,   -1,
  380,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  278,
   -1,   -1,   -1,  413,  414,  284,  416,   -1,  287,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  429,
  299,   -1,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
   -1,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,
  329,  330,  331,  256,  333,  262,   -1,  336,   -1,  266,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,  358,
  359,   -1,   -1,   -1,  287,   -1,   -1,   -1,  367,   -1,
  297,  294,   -1,   -1,   -1,   -1,  299,   -1,   -1,   -1,
  303,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,
  333,   -1,   -1,  336,  413,  414,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  364,  365,   -1,
  367,   -1,  369,   -1,  371,  372,   -1,  374,  375,   -1,
  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
   -1,  388,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,   -1,   -1,  256,   -1,  414,   -1,  416,
  261,  414,  419,   -1,  265,   -1,  267,   -1,  425,  270,
   -1,  272,  273,   -1,   -1,  276,   -1,  278,   -1,  280,
  281,  282,  283,   -1,   -1,   -1,  287,   -1,   -1,   -1,
   -1,  292,   -1,  294,  295,  296,   -1,   -1,  299,   -1,
  301,   -1,  303,   -1,   -1,  306,   -1,  308,  309,  310,
  311,   -1,   -1,   -1,  315,  316,  317,   -1,   -1,  320,
  321,  322,  256,  324,   -1,   -1,   -1,   -1,  329,  330,
   -1,  265,  333,  267,  335,  336,  270,   -1,   -1,  340,
   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,  363,  364,  365,  299,   -1,   -1,   -1,  303,
   -1,   -1,  373,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  315,   -1,  317,   -1,   -1,   -1,  321,  265,  256,
  267,   -1,   -1,  270,   -1,  329,  330,   -1,  265,  333,
  267,  278,  336,  270,   -1,   -1,   -1,   -1,   -1,   -1,
  287,  278,   -1,  414,   -1,   -1,   -1,  294,   -1,   -1,
  287,   -1,  299,   -1,   -1,   -1,  303,  294,   -1,   -1,
   -1,   -1,  299,   -1,   -1,   -1,  303,  262,  315,   -1,
  317,   -1,   -1,   -1,  321,   -1,  256,   -1,  315,   -1,
  317,   -1,  329,  330,  321,  265,  333,  267,   -1,  336,
  270,   -1,  329,  330,   -1,  265,  333,  267,  278,  336,
  270,   -1,  297,   -1,   -1,   -1,   -1,  287,  278,   -1,
  414,   -1,  282,   -1,  294,   -1,   -1,  287,   -1,  299,
   -1,   -1,  292,  303,  294,   -1,   -1,   -1,   -1,  299,
   -1,   -1,   -1,  303,  304,  315,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  315,   -1,  317,   -1,  329,
  330,  321,   -1,  333,   -1,   -1,  336,   -1,   -1,  329,
  330,  356,   -1,  333,   -1,   -1,  336,  414,   -1,   -1,
   -1,   -1,  367,  368,  369,  370,  371,  414,   -1,  374,
  375,   -1,   -1,  378,  379,  380,  381,  382,  383,  384,
  385,  386,   -1,  388,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,   -1,  261,   -1,  263,   -1,
  265,  416,  267,   -1,  419,  270,   -1,  272,  273,   -1,
   -1,  276,   -1,  278,  414,  280,  281,  282,  283,   -1,
   -1,   -1,  287,   -1,  414,   -1,   -1,  292,   -1,  294,
  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,  314,
  315,  316,  317,   -1,   -1,  320,  321,  322,   -1,  324,
   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,   -1,
  335,  336,  261,   -1,   -1,  340,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,   -1,  276,   -1,  278,
   -1,  280,  281,  282,  283,  360,  361,   -1,  287,   -1,
   -1,   -1,   -1,  292,   -1,  294,  295,  296,   -1,   -1,
  299,   -1,  301,   -1,  303,   -1,   -1,  306,   -1,  308,
  309,  310,  311,   -1,   -1,   -1,  315,  316,  317,   -1,
   -1,  320,  321,  322,   -1,  324,   -1,   -1,   -1,   -1,
  329,  330,   -1,   -1,  333,   -1,  335,  336,  261,  414,
   -1,  340,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,   -1,  276,   -1,  278,   -1,  280,  281,  282,
  283,   -1,   -1,   -1,  287,  364,   -1,   -1,   -1,  292,
   -1,  294,  295,  296,  373,   -1,  299,   -1,  301,   -1,
  303,   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,
   -1,   -1,  315,  316,  317,   -1,   -1,  320,  321,  322,
   -1,  324,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,
  333,   -1,  335,  336,  261,  414,   -1,  340,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,  273,   -1,   -1,  276,
   -1,  278,   -1,  280,  281,  282,  283,   -1,   -1,   -1,
  287,  364,   -1,   -1,   -1,  292,   -1,  294,  295,  296,
  373,   -1,  299,   -1,  301,   -1,  303,   -1,   -1,  306,
   -1,  308,  309,  310,  311,   -1,   -1,   -1,  315,  316,
  317,   -1,   -1,  320,  321,  322,   -1,  324,   -1,   -1,
   -1,   -1,  329,  330,   -1,   -1,  333,   -1,  335,  336,
  261,  414,   -1,  340,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  273,   -1,   -1,  276,   -1,  278,   -1,  280,
  281,  282,  283,   -1,   -1,   -1,  287,   -1,   -1,   -1,
   -1,  292,   -1,  294,  295,  296,  373,   -1,  299,   -1,
  301,   -1,  303,   -1,   -1,  306,   -1,  308,  309,  310,
  311,   -1,   -1,   -1,  315,  316,  317,   -1,   -1,  320,
  321,  322,   -1,  324,   -1,   -1,   -1,   -1,  329,  330,
   -1,   -1,  333,   -1,  335,  336,  261,  414,   -1,  340,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
   -1,  276,   -1,  278,   -1,  280,  281,  282,  283,   -1,
   -1,   -1,  287,  364,   -1,   -1,   -1,  292,   -1,  294,
  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,   -1,
  315,  316,  317,   -1,   -1,  320,  321,  322,   -1,  324,
   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,   -1,
  335,  336,   -1,  414,  263,  340,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,   -1,  276,   -1,  278,
   -1,  280,  281,  282,   -1,   -1,   -1,   -1,  287,  364,
   -1,   -1,   -1,  292,   -1,  294,  295,   -1,   -1,   -1,
  299,   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,   -1,  317,   -1,
   -1,   -1,  321,  322,   -1,  324,   -1,   -1,   -1,   -1,
  329,  330,   -1,   -1,  333,   -1,   -1,  336,  265,  414,
  267,  340,   -1,  270,   -1,  272,  273,   -1,   -1,  276,
   -1,  278,   -1,  280,  281,  282,   -1,   -1,   -1,   -1,
  287,  360,  361,   -1,   -1,  292,   -1,  294,  295,   -1,
   -1,   -1,  299,   -1,  373,   -1,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,   -1,   -1,   -1,  321,  322,   -1,  324,   -1,   -1,
   -1,   -1,  329,  330,   -1,   -1,  333,   -1,   -1,  336,
   -1,   -1,   -1,  340,  265,  414,  267,   -1,   -1,  270,
   -1,  272,  273,   -1,   -1,  276,   -1,  278,   -1,  280,
  281,  282,   -1,   -1,   -1,   -1,  287,   -1,   -1,   -1,
   -1,  292,   -1,  294,  295,   -1,  373,   -1,  299,   -1,
   -1,   -1,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,
  321,  322,   -1,  324,   -1,  265,   -1,  267,  329,  330,
  270,   -1,  333,  273,   -1,  336,  276,  414,  278,  340,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,   -1,   -1,
   -1,   -1,  292,   -1,  294,   -1,   -1,   -1,   -1,  299,
   -1,   -1,   -1,  303,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,  324,   -1,   -1,   -1,   -1,  329,
  330,   -1,   -1,  333,   -1,   -1,  336,   -1,   -1,   -1,
  340,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,  273,
   -1,   -1,  276,  414,  278,   -1,  280,  281,  282,   -1,
   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,  292,   -1,
  294,   -1,   -1,  373,   -1,  299,   -1,   -1,   -1,  303,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,  315,   -1,  317,  278,   -1,   -1,  321,   -1,   -1,
  324,   -1,   -1,  287,   -1,  329,  330,   -1,   -1,  333,
  294,   -1,  336,   -1,  414,  299,  340,   -1,   -1,  303,
   -1,  305,   -1,  307,   -1,   -1,   -1,   -1,  312,   -1,
   -1,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
  324,   -1,   -1,   -1,   -1,  329,  330,   -1,   -1,  333,
   -1,  265,  336,  267,   -1,   -1,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,  368,  299,   -1,   -1,   -1,  303,
  414,  305,   -1,  307,   -1,  265,   -1,  267,  312,   -1,
  270,  315,   -1,  317,   -1,   -1,   -1,  321,  278,   -1,
  324,   -1,   -1,   -1,   -1,  329,  330,  287,   -1,  333,
   -1,   -1,  336,   -1,  294,   -1,   -1,   -1,   -1,  299,
  414,   -1,   -1,  303,   -1,  305,   -1,  307,   -1,   -1,
   -1,   -1,  312,   -1,   -1,  315,   -1,  317,   -1,   -1,
   -1,  321,  366,   -1,  324,   -1,  265,   -1,  267,  329,
  330,  270,   -1,  333,   -1,   -1,  336,   -1,   -1,  278,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,   -1,   -1,   -1,  303,   -1,  305,  265,  307,  267,
  414,   -1,  270,  312,  272,   -1,  315,   -1,  317,   -1,
  278,   -1,  321,   -1,   -1,  324,   -1,   -1,   -1,  287,
  329,  330,   -1,   -1,  333,   -1,  294,  336,   -1,   -1,
   -1,  299,   -1,  301,   -1,  303,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,  414,   -1,   -1,  315,   -1,  317,
   -1,  278,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
  287,  329,  330,   -1,   -1,  333,   -1,  294,  336,   -1,
   -1,   -1,  299,   -1,   -1,   -1,  303,   -1,   -1,  265,
   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,  315,   -1,
  317,   -1,  278,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,  287,  329,  330,   -1,  414,  333,   -1,  294,  336,
   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,  315,
   -1,  317,   -1,  278,   -1,  321,   -1,   -1,   -1,   -1,
   -1,  368,  287,  329,  330,   -1,  414,  333,   -1,  294,
  336,   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,
  315,   -1,  317,   -1,  278,   -1,  321,   -1,   -1,   -1,
  366,   -1,   -1,  287,  329,  330,   -1,  414,  333,   -1,
  294,  336,   -1,   -1,   -1,  299,   -1,   -1,   -1,  303,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,   -1,
   -1,  315,   -1,  317,   -1,  278,   -1,  321,   -1,   -1,
   -1,   -1,   -1,   -1,  287,  329,  330,   -1,  414,  333,
   -1,  294,  336,   -1,   -1,   -1,  299,   -1,   -1,   -1,
  303,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
   -1,   -1,  315,   -1,  317,   -1,  278,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,  287,  329,  330,   -1,  414,
  333,   -1,  294,  336,   -1,   -1,   -1,  299,   -1,   -1,
   -1,  303,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,  315,   -1,  317,   -1,  278,   -1,  321,
   -1,   -1,   -1,   -1,   -1,   -1,  287,  329,  330,   -1,
  414,  333,   -1,  294,  336,   -1,   -1,   -1,  299,   -1,
   -1,   -1,  303,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,   -1,   -1,  315,   -1,  317,   -1,  278,   -1,
  321,   -1,   -1,   -1,   -1,   -1,   -1,  287,  329,  330,
   -1,  414,  333,   -1,  294,  336,   -1,   -1,   -1,  299,
   -1,   -1,   -1,  303,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,   -1,   -1,  315,   -1,  317,   -1,  278,
   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,  287,  329,
  330,   -1,  414,  333,   -1,  294,  336,   -1,   -1,   -1,
  299,   -1,   -1,   -1,  303,   -1,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,  272,  317,   -1,
   -1,  276,  321,   -1,   -1,  280,   -1,   -1,  283,   -1,
  329,  330,   -1,  414,  333,   -1,   -1,  336,   -1,   -1,
  295,  296,   -1,   -1,   -1,  300,  301,  261,   -1,   -1,
   -1,  306,   -1,  308,  309,  310,  311,   -1,  272,   -1,
   -1,  316,  276,   -1,   -1,  320,  280,  322,   -1,  283,
   -1,   -1,   -1,   -1,  414,   -1,   -1,   -1,   -1,   -1,
  335,  295,  296,   -1,   -1,  340,  300,  301,   -1,   -1,
   -1,   -1,  306,   -1,  308,  309,  310,  311,   -1,   -1,
   -1,   -1,  316,   -1,   -1,   -1,  320,   -1,  322,  364,
  365,   -1,  261,   -1,   -1,  414,   -1,   -1,   -1,   -1,
   -1,  335,   -1,  272,   -1,   -1,  340,  276,   -1,   -1,
   -1,  280,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,   -1,   -1,
  364,  300,  301,   -1,   -1,   -1,   -1,  306,   -1,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,  320,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,   -1,
   -1,  340,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  364,
  };

#line 5896 "E:\Projects\VSharp\Research\\VSharpParser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclarationInfo {
	public readonly VSC.TypeSystem.Resolver.OperatorType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclarationInfo (VSC.TypeSystem.Resolver.OperatorType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
			report.Error (201, expr.Location, "Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement");
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, VSC.TypeSystem.ParameterModifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDeclaration tce)
{	
	++lexer.parsing_declaration;
	current_container = tce;
	current_type = tce;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDeclaration;

	return retval;
}





string CheckAttributeTarget (int token, string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	if (!Tokenizer.IsValidIdentifier (a)) {
		Error_SyntaxError (token);
	} else {
		report.Warning (658, 1, l,
			 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	}

	return string.Empty;
}

static bool IsUnaryOperator (VSC.TypeSystem.Resolver.OperatorType op)
{
	switch (op) {
		
	case VSC.TypeSystem.Resolver.OperatorType.LogicalNot: 
	case VSC.TypeSystem.Resolver.OperatorType.OnesComplement: 
	case VSC.TypeSystem.Resolver.OperatorType.Increment:
	case VSC.TypeSystem.Resolver.OperatorType.Decrement:
	case VSC.TypeSystem.Resolver.OperatorType.True: 
	case VSC.TypeSystem.Resolver.OperatorType.False: 
	case VSC.TypeSystem.Resolver.OperatorType.UnaryPlus: 
	case VSC.TypeSystem.Resolver.OperatorType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public VSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public VSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = file.RootPackage.DefaultType;
	current_package = file.RootPackage;
	file.TopLevelTypeDefinitions.Add(current_container);
	current_container.UnresolvedFile = file;
	//this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.Verbose ? 1 : 0;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session, report);
	oob_stack = new Stack<object> ();
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;
		
	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

/*void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}
	current_anonymous_method.IsAsync = isAsync;
	
	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}
*/
/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
/*AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariable) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}
*/
void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.SUPER:
		return "super";
	case Token.LEAVE:
		return "leave";
	case Token.CASE:
		return "case";
	case Token.EXCEPT:
		return "except";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.PERSIST:
		return "persist";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.SYNC:
		return "sync";
	case Token.PACKAGE:
		return "package";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.SELF:
		return "self";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
	case Token.WHEN:
		return "when";
	case Token.INTERPOLATED_STRING_END:
		return "}";
	case Token.INTERPOLATED_STRING:
		return "${";

	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.INTERR_OPERATOR:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int LEAVE = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int EXCEPT = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int PERSIST = 274;
  public const int DEFAULT = 275;
  public const int DELEGATE = 276;
  public const int DO = 277;
  public const int DOUBLE = 278;
  public const int ELSE = 279;
  public const int ENUM = 280;
  public const int EVENT = 281;
  public const int EXPLICIT = 282;
  public const int EXTERN = 283;
  public const int FALSE = 284;
  public const int FINALLY = 285;
  public const int FIXED = 286;
  public const int FLOAT = 287;
  public const int FOR = 288;
  public const int FOREACH = 289;
  public const int GOTO = 290;
  public const int IF = 291;
  public const int IMPLICIT = 292;
  public const int IN = 293;
  public const int INT = 294;
  public const int INTERFACE = 295;
  public const int INTERNAL = 296;
  public const int IS = 297;
  public const int SYNC = 298;
  public const int LONG = 299;
  public const int PACKAGE = 300;
  public const int NEW = 301;
  public const int NULL = 302;
  public const int OBJECT = 303;
  public const int OPERATOR = 304;
  public const int OUT = 305;
  public const int OVERRIDE = 306;
  public const int PARAMS = 307;
  public const int PRIVATE = 308;
  public const int PROTECTED = 309;
  public const int PUBLIC = 310;
  public const int READONLY = 311;
  public const int REF = 312;
  public const int RETURN = 313;
  public const int REMOVE = 314;
  public const int SBYTE = 315;
  public const int SEALED = 316;
  public const int SHORT = 317;
  public const int SIZEOF = 318;
  public const int STACKALLOC = 319;
  public const int STATIC = 320;
  public const int STRING = 321;
  public const int STRUCT = 322;
  public const int SWITCH = 323;
  public const int SELF = 324;
  public const int THROW = 325;
  public const int TRUE = 326;
  public const int TRY = 327;
  public const int TYPEOF = 328;
  public const int UINT = 329;
  public const int ULONG = 330;
  public const int UNCHECKED = 331;
  public const int UNSAFE = 332;
  public const int USHORT = 333;
  public const int USING = 334;
  public const int VIRTUAL = 335;
  public const int VOID = 336;
  public const int VOLATILE = 337;
  public const int WHERE = 338;
  public const int WHILE = 339;
  public const int PARTIAL = 340;
  public const int ARROW = 341;
  public const int FROM = 342;
  public const int FROM_FIRST = 343;
  public const int JOIN = 344;
  public const int ON = 345;
  public const int EQUALS = 346;
  public const int SELECT = 347;
  public const int GROUP = 348;
  public const int BY = 349;
  public const int LET = 350;
  public const int ORDERBY = 351;
  public const int ASCENDING = 352;
  public const int DESCENDING = 353;
  public const int INTO = 354;
  public const int INTERR_NULLABLE = 355;
  public const int INTERR_OPERATOR = 356;
  public const int WHEN = 357;
  public const int INTERPOLATED_STRING = 358;
  public const int INTERPOLATED_STRING_END = 359;
  public const int GET = 360;
  public const int SET = 361;
  public const int LAST_KEYWORD = 362;
  public const int OPEN_BRACE = 363;
  public const int CLOSE_BRACE = 364;
  public const int OPEN_BRACKET = 365;
  public const int CLOSE_BRACKET = 366;
  public const int OPEN_PARENS = 367;
  public const int CLOSE_PARENS = 368;
  public const int DOT = 369;
  public const int COMMA = 370;
  public const int COLON = 371;
  public const int SEMICOLON = 372;
  public const int TILDE = 373;
  public const int PLUS = 374;
  public const int MINUS = 375;
  public const int BANG = 376;
  public const int ASSIGN = 377;
  public const int OP_LT = 378;
  public const int OP_GT = 379;
  public const int BITWISE_AND = 380;
  public const int BITWISE_OR = 381;
  public const int STAR = 382;
  public const int PERCENT = 383;
  public const int DIV = 384;
  public const int CARRET = 385;
  public const int INTERR = 386;
  public const int DOUBLE_COLON = 387;
  public const int OP_INC = 388;
  public const int OP_DEC = 389;
  public const int OP_SHIFT_LEFT = 390;
  public const int OP_SHIFT_RIGHT = 391;
  public const int OP_LE = 392;
  public const int OP_GE = 393;
  public const int OP_EQ = 394;
  public const int OP_NE = 395;
  public const int OP_AND = 396;
  public const int OP_OR = 397;
  public const int OP_MULT_ASSIGN = 398;
  public const int OP_DIV_ASSIGN = 399;
  public const int OP_MOD_ASSIGN = 400;
  public const int OP_ADD_ASSIGN = 401;
  public const int OP_SUB_ASSIGN = 402;
  public const int OP_SHIFT_LEFT_ASSIGN = 403;
  public const int OP_SHIFT_RIGHT_ASSIGN = 404;
  public const int OP_AND_ASSIGN = 405;
  public const int OP_XOR_ASSIGN = 406;
  public const int OP_OR_ASSIGN = 407;
  public const int OP_PTR = 408;
  public const int OP_COALESCING = 409;
  public const int OP_GENERICS_LT = 410;
  public const int OP_GENERICS_LT_DECL = 411;
  public const int OP_GENERICS_GT = 412;
  public const int LITERAL = 413;
  public const int IDENTIFIER = 414;
  public const int OPEN_PARENS_LAMBDA = 415;
  public const int OPEN_PARENS_CAST = 416;
  public const int GENERIC_DIMENSION = 417;
  public const int DEFAULT_COLON = 418;
  public const int OPEN_BRACKET_EXPR = 419;
  public const int EVAL_STATEMENT_PARSER = 420;
  public const int EVAL_COMPILATION_UNIT_PARSER = 421;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 422;
  public const int DOC_SEE = 423;
  public const int GENERATE_COMPLETION = 424;
  public const int COMPLETE_COMPLETION = 425;
  public const int UMINUS = 426;
  public const int event_declarator = 427;
  public const int close_brace_or_complete_completion = 428;
  public const int ASYNC = 429;
  public const int pattern_expr = 430;
  public const int AWAIT = 431;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
