using System;
using System.Collections.Generic;

namespace VSC
{
    public class SourceFile : IEquatable<SourceFile>
    {
        //
        // Used by #line directive to track hidden sequence point
        // regions
        //
        struct LocationRegion : IComparable<LocationRegion>
        {
            public readonly Location Start;
            public readonly Location End;

            public LocationRegion(Location start, Location end)
            {
                this.Start = start;
                this.End = end;
            }

            public int CompareTo(LocationRegion other)
            {
                if (Start.Line == other.Start.Line)
                    return Start.Column.CompareTo(other.Start.Column);

                return Start.Line.CompareTo(other.Start.Line);
            }

            public override string ToString()
            {
                return Start.ToString() + " - " + End.ToString();
            }
        }
        public void RegisterHiddenScope(Location start, Location end)
        {
            if (hidden_lines == null)
                hidden_lines = new List<LocationRegion>();

            hidden_lines.Add(new LocationRegion(start, end));
        }

        static readonly byte[] MD5Algorith = { 96, 166, 110, 64, 207, 100, 130, 76, 182, 240, 66, 212, 129, 114, 167, 153 };

        public readonly string Name;
        public readonly string FullPathName;
        public readonly int Index;
        public bool AutoGenerated;

        byte[] algGuid, checksum;
        List<LocationRegion> hidden_lines;
        public static SourceFile Null = new SourceFile("<null>", "null", 0);
        public SourceFile (string name, string path, int index)
        {
            this.Index = index;
            this.Name = name;
            this.FullPathName = path;
        }

        public byte[] Checksum {
            get {
                return checksum;
            }
        }

        public bool HasChecksum {
            get {
                return checksum != null;
            }
        }


        public void SetChecksum (byte[] checksum)
        {
            SetChecksum (MD5Algorith, checksum);
        }

        public void SetChecksum (byte[] algorithmGuid, byte[] checksum)
        {
            this.algGuid = algorithmGuid;
            this.checksum = checksum;
        }
        public bool Equals (SourceFile other)
        {
            return FullPathName == other.FullPathName;
        }

        public override string ToString ()
        {
            return String.Format ("SourceFile ({0}:{1}:{2})", Name, FullPathName, Index);
        }
    }
}